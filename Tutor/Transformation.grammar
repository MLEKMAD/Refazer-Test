reference 'Tutor.dll';
reference 'IronPython.dll';

using Tutor;
using Tutor.Transformation;
using IronPython.Compiler.Ast;

using semantics Tutor.Transformation.Semantics;
using learners Tutor.Transformation.WitnessFunctions;

language Transformation;

@start IEnumerable<PythonAst> program := Apply(ast, patch); 
IEnumerable<PythonAst> patch := EditMap(edit, selectednodes) = Map(\node : PythonNode => edit, selectednodes);
IEnumerable<PythonNode> selectednodes := Selected(match, nodes) = Filter(\x : PythonNode => match,nodes); 
bool match := Match(x, template);
PythonAst edit := let x : PythonNode = node in Update(ast, x, n); 
Node n := LeafConstNode(info) | ConstNode(info, children) | ReferenceNode(x, template);
IEnumerable<PythonNode> nodes := InOrderSort(ast);
IEnumerable<Node> children := SingleChild(n) | Children(n, children);

@input PythonNode ast;
PythonNode template;
NodeInfo info; 