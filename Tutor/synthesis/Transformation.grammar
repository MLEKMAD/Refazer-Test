reference 'Tutor.dll';
reference 'IronPython.dll';

using Tutor;
using Tutor.synthesis;
using Tutor.Transformation;
using IronPython.Compiler.Ast;

using semantics Tutor.Transformation.Semantics;
using learners Tutor.Transformation.WitnessFunctions;



language Transformation;	



@start IEnumerable<PythonNode> transformation := Apply(ast, patch);

Patch patch := Patch(edits) | CPatch(edits, patch);
IEnumerable<Edit> edits := EditMap(edit, selectednodes) = Map(\node : PythonNode => edit, selectednodes);
IEnumerable<PythonNode> selectednodes := Selected(match, nodes) = Filter(\x : PythonNode => match,nodes); 
bool match := Match(x, template);
TreeTemplate template := Node(info, tchildren) | LeafNode(info) 
							| LeafWildcard(type) | Wildcard(type, tchildren)
							| Target(template);
IEnumerable<TreeTemplate> tchildren := TChild(template) | TChildren(template, tchildren);

Edit edit := Update(node, n) | Insert(node, n, k) | Delete(node, r) | Move(node, r, k);
PythonNode r := ReferenceNode(node, template, k); 
PythonNode n := c | r;
PythonNode c := LeafConstNode(info) | ConstNode(info, children);
IEnumerable<PythonNode> children := SingleChild(n) | Children(n, children);
IEnumerable<PythonNode> nodes := InOrderSort(ast);


@input PythonNode ast;
int k;
string type;
dynamic value;
NodeInfo info; 
