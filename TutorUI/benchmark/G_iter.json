[{"Id":1,"studentId":0,"date":null,"diff":"\r\nInputObject                          SideIndicator\r\n-----------                          -------------\r\n    if n == 1:                       =>           \r\n        return 1                     =>           \r\n    elif n == 2:                     =>           \r\n        return 2                     =>           \r\n    elif n == 3:                     =>           \r\n        return 3                     =>           \r\n    g1, g2, g3, = 1, 2, 3            =>           \r\n    index, total = n-3, 0            =>           \r\n    while index > 0:                 =>           \r\n        total = g3 + 2 * g2 + 3 * g1 =>           \r\n        g1, g2, g3 = g2, g3, total   =>           \r\n        index -=1                    =>           \r\n    return total                     =>           \r\n                                     =>           \r\n                                     =>           \r\n                                     =>           \r\n    m, i, j, k = 3, 3, 2, 1          <=           \r\n    if n <= 3:                       <=           \r\n        return n                     <=           \r\n    if n == 4:                       <=           \r\n        return i + 2 * j + 3 * k     <=           \r\n        while m < n:                 <=           \r\n            i = i + 2 * j + 3 * k    <=           \r\n            k = j                    <=           \r\n            j = i                    <=           \r\n            m += 1                   <=           \r\n    return i                         <=           \r\n    else:                            <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \n    m, i, j, k = 3, 3, 2, 1\n    if n <= 3:\n    \treturn n\n    if n == 4:\n    \treturn i + 2 * j + 3 * k\n    else:\n    \twhile m < n:\n    \t\ti = i + 2 * j + 3 * k\n    \t\tk = j\n    \t\tj = i\n    \t\tm += 1\n    return i\n \n    \t\t\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \n    if n == 1:\n    \treturn 1\n    elif n == 2:\n    \treturn 2\n    elif n == 3:\n    \treturn 3\n    g1, g2, g3, = 1, 2, 3\n    index, total = n-3, 0\n    while index > 0:\n    \ttotal = g3 + 2 * g2 + 3 * g1\n    \tg1, g2, g3 = g2, g3, total\n    \tindex -=1\n    return total\n\n\n    \n \n    \t\t\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","36","","# Error: expected","#     22","# but got","#     36","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":2,"studentId":0,"date":null,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n        x=total  =>           \r\n        x+=total <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x, y, z= 3,2,1\n    if n<=3:\n        return n\n    i=3\n    total=0\n    while i<n:\n        total=x+2*y+3*z\n        z=y\n        y=x\n        x+=total\n        i+=1\n    return total\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x, y, z= 3,2,1\n    if n<=3:\n        return n\n    i=3\n    total=0\n    while i<n:\n        total=x+2*y+3*z\n        z=y\n        y=x\n        x=total\n        i+=1\n    return total\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","25","","# Error: expected","#     22","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":3,"studentId":0,"date":null,"diff":"\r\nInputObject     SideIndicator\r\n-----------     -------------\r\n    initial = 0 =>           \r\n    initial = 9 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n\n    initial = 9\n\n    while n > 3:\n        if n - 1 <= 3:\n            initial += n - 1\n        if n - 2 <= 3:\n            initial += 2 * (n - 2)\n        if n - 3 <= 3:\n            initial += 3 * (n - 3)\n        n -= 1\n    return initial\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n\n    initial = 0\n\n    while n > 3:\n        if n - 1 <= 3:\n            initial += n - 1\n        if n - 2 <= 3:\n            initial += 2 * (n - 2)\n        if n - 3 <= 3:\n            initial += 3 * (n - 3)\n        n -= 1\n    return initial\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","19","","# Error: expected","#     10","# but got","#     19","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":4,"studentId":0,"date":null,"diff":"\r\nInputObject                                         SideIndicator\r\n-----------                                         -------------\r\n        total = 3 * first + 2 * second + third      =>           \r\n        first, second, third = second, third, total =>           \r\n    return total                                    =>           \r\n        first, second = 3 * first, 2 * second       <=           \r\n        fourth = first + second + third             <=           \r\n        third = fourth                              <=           \r\n    return first + second + third                   <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    first, second, third = 1, 2, 3\n    while n > 3:\n        first, second = 3 * first, 2 * second\n        fourth = first + second + third\n        third = fourth\n        n -= 1\n    return first + second + third\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    first, second, third = 1, 2, 3\n    while n > 3:\n        total = 3 * first + 2 * second + third\n        first, second, third = second, third, total\n        n -= 1\n    return total\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","17","","# Error: expected","#     10","# but got","#     17","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":5,"studentId":0,"date":null,"diff":"\r\nInputObject                           SideIndicator\r\n-----------                           -------------\r\n    a = 1                             =>           \r\n    b = 2                             =>           \r\n    c = 3                             =>           \r\n        a, b, c = b, c, c + 2*b + 3*a =>           \r\n    a, b, c = 1, 2, 3                 <=           \r\n        a = b                         <=           \r\n        b = c                         <=           \r\n        c = c + 2*b + 3*a             <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    a, b, c = 1, 2, 3\n    while n > 3:\n        a = b\n        b = c\n        c = c + 2*b + 3*a\n        n = n - 1\n    return c\n    \n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    a = 1 \n    b = 2\n    c = 3\n    while n > 3:\n        a, b, c = b, c, c + 2*b + 3*a\n        n = n - 1\n    return c\n    \n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","15","","# Error: expected","#     10","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":6,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n            return total =>           \r\n    return total         <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    k = 3\n    total = 0\n    while n > 0:\n        if n <=3:\n            return n\n        else:\n            while k < 4 and k > 0:\n                total += k*(g(n - k))\n                k -= 1\n    return total\n\n    \"*** YOUR CODE HERE ***\"\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    k = 3\n    total = 0\n    while n > 0:\n        if n <=3:\n            return n\n        else:\n            while k < 4 and k > 0:\n                total += k*(g(n - k))\n                k -= 1\n            return total\n\n    \"*** YOUR CODE HERE ***\"\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     10","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":7,"studentId":0,"date":null,"diff":"\r\nInputObject                  SideIndicator\r\n-----------                  -------------\r\n    for i in range (4, n):   =>           \r\n    for i in range (4, n+1): <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    a, b, c = 3, 2, 1\n    for i in range (4, n+1):\n        a, b, c = a + 2*b + 3*c, a, b\n    return a + 2*b + 3*c\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    a, b, c = 3, 2, 1\n    for i in range (4, n):\n        a, b, c = a + 2*b + 3*c, a, b\n    return a + 2*b + 3*c\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","22","","# Error: expected","#     10","# but got","#     22","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":8,"studentId":0,"date":null,"diff":"\r\nInputObject  SideIndicator\r\n-----------  -------------\r\n    i=3      =>           \r\n        i+=1 =>           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    a,b,c = 1,2,3\n\n    if n<=3:\n        return n\n\n    while(i<n):\n        a,b,c = b,c, 3*a+2*b+c\n\n    return c\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    a,b,c = 1,2,3\n\n    if n<=3:\n        return n\n\n    i=3\n    while(i<n):\n        a,b,c = b,c, 3*a+2*b+c\n        i+=1\n\n    return c\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 221, in g_iter","    while(i<n):","NameError: name 'i' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":9,"studentId":0,"date":null,"diff":"\r\nInputObject       SideIndicator\r\n-----------       -------------\r\n        i = n - 4 =>           \r\n        i = n - 3 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    '''g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)'''\n\n    if n <= 3:\n        return n\n    else:\n        i = n - 3\n        answer = 0\n        third_recent_answer = 1\n        second_recent_answer = 2\n        recent_answer = 3\n        while i >= 0:\n            answer = recent_answer + 2 * second_recent_answer + 3 * third_recent_answer\n            third_recent_answer = second_recent_answer\n            second_recent_answer = recent_answer\n            recent_answer = answer\n            i -= 1\n\n\n    return answer\n\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    '''g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)'''\n\n    if n <= 3:\n        return n\n    else:\n        i = n - 4\n        answer = 0\n        third_recent_answer = 1\n        second_recent_answer = 2\n        recent_answer = 3\n        while i >= 0:\n            answer = recent_answer + 2 * second_recent_answer + 3 * third_recent_answer\n            third_recent_answer = second_recent_answer\n            second_recent_answer = recent_answer\n            recent_answer = answer\n            i -= 1\n\n\n    return answer\n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","22","","# Error: expected","#     10","# but got","#     22","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":10,"studentId":0,"date":null,"diff":"\r\nInputObject                                         SideIndicator\r\n-----------                                         -------------\r\n    if k == 4:                                      =>           \r\n        return (k - 1) + 3 * (k - 3) + 2 * (k - 2)  =>           \r\n    while k > 4:                                    =>           \r\n        s = (k - 1) + 3 * (k - 3) + 2 * (k - 2)     =>           \r\n        s = 10                                      =>           \r\n        total = 3 * (k - 3) + 2 * (k - 2) + s       =>           \r\n    while k > 3:                                    <=           \r\n        if k == 4:                                  <=           \r\n            s = (k - 1) + 3 * (k - 3) + 2 * (k - 2) <=           \r\n            return s                                <=           \r\n        total = (k - 3) + 2 * (k - 2) + s           <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k = n\n    total = 0\n    s = 0\n    if k <= 3:\n        return k\n    while k > 3:\n        if k == 4:\n            s = (k - 1) + 3 * (k - 3) + 2 * (k - 2)\n            return s\n        total = (k - 3) + 2 * (k - 2) + s\n        k = k - 1\n    return total\n        \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k = n\n    total = 0\n    s = 0\n    if k <= 3:\n        return k\n    if k == 4:\n        return (k - 1) + 3 * (k - 3) + 2 * (k - 2)\n    while k > 4:\n        s = (k - 1) + 3 * (k - 3) + 2 * (k - 2)\n        s = 10\n        total = 3 * (k - 3) + 2 * (k - 2) + s\n        k = k - 1\n    return total\n        \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","10","","# Error: expected","#     22","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":11,"studentId":0,"date":null,"diff":"\r\nInputObject         SideIndicator\r\n-----------         -------------\r\n        count = n-3 =>           \r\n        count = n   <=           \r\n\r\n\r\n","before":"def g_iter(n):\n\t\"\"\"Return the value of G(n), computed iteratively.\n\n\t>>> g_iter(1)\n\t1\n\t>>> g_iter(2)\n\t2\n\t>>> g_iter(3)\n\t3\n\t>>> g_iter(4)\n\t10\n\t>>> g_iter(5)\n\t22\n\t>>> from construct_check import check\n\t>>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n\tTrue\n\t\"\"\"\n\t\n\n\tfirst, second, third = 1, 2, 3\n\tif n <= 3:\n\t\treturn n\n\telse:\n\t\ttotal = 0\n\t\tcount = n\n\t\tp = 1\n\t\twhile count > 0:\n\t\t\tfirst, second, third = second, third, 3*first + 2*second + third\n\t\t\t\n\t\t\t\n\t\t\tcount -= 1\n\t\treturn third\n\n","after":"def g_iter(n):\n\t\"\"\"Return the value of G(n), computed iteratively.\n\n\t>>> g_iter(1)\n\t1\n\t>>> g_iter(2)\n\t2\n\t>>> g_iter(3)\n\t3\n\t>>> g_iter(4)\n\t10\n\t>>> g_iter(5)\n\t22\n\t>>> from construct_check import check\n\t>>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n\tTrue\n\t\"\"\"\n\t\n\n\tfirst, second, third = 1, 2, 3\n\tif n <= 3:\n\t\treturn n\n\telse:\n\t\ttotal = 0\n\t\tcount = n-3\n\t\tp = 1\n\t\twhile count > 0:\n\t\t\tfirst, second, third = second, third, 3*first + 2*second + third\n\t\t\t\n\t\t\t\n\t\t\tcount -= 1\n\t\treturn third\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","125","","# Error: expected","#     10","# but got","#     125","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":13,"studentId":0,"date":null,"diff":"\r\nInputObject                 SideIndicator\r\n-----------                 -------------\r\n    x, y, z = 1, 2, 3       =>           \r\n    x, y, z = n-1, n-2, n-3 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    x, y, z = n-1, n-2, n-3\n    while n > 3:\n        x, y, z = y, z, x*3 + 2*y + z\n        n -= 1\n    return z\n\n\n\n    '''x = 1\n    total = 0\n    while x <= n:\n\n    x = 1\n    total = 0\n    while x <= n:\n        if x <= 3:\n            total += n\n        else:\n            total +='''\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    x, y, z = 1, 2, 3\n    while n > 3:\n        x, y, z = y, z, x*3 + 2*y + z\n        n -= 1\n    return z\n\n\n\n    '''x = 1\n    total = 0\n    while x <= n:\n\n    x = 1\n    total = 0\n    while x <= n:\n        if x <= 3:\n            total += n\n        else:\n            total +='''\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","14","","# Error: expected","#     10","# but got","#     14","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":14,"studentId":0,"date":null,"diff":"\r\nInputObject                        SideIndicator\r\n-----------                        -------------\r\n            v3, v2,v1=result,v3,v2 =>           \r\n            v3, v2,v1=result,v1,v2 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    counter=n\n    result=0\n    v3=3\n    v2=2\n    v1=1\n    if n<=3:\n        return n\n    else:\n        while counter>3: \n            counter=counter-1\n            result=v3+2*v2+3*v1\n            v3, v2,v1=result,v1,v2\n        return result\n        \n\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    counter=n\n    result=0\n    v3=3\n    v2=2\n    v1=1\n    if n<=3:\n        return n\n    else:\n        while counter>3: \n            counter=counter-1\n            result=v3+2*v2+3*v1\n            v3, v2,v1=result,v3,v2\n        return result\n        \n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","18","","# Error: expected","#     22","# but got","#     18","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":15,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n                x = 0 =>           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total = 0\n    x = n\n    while x > 0:\n        if x <= 3:\n            total += x\n            x = 0\n        else:\n            if x-3 <=3:\n                total += 3*(x-3)\n            if x-2 <=3:\n                total += 2*(x-2)                \n            if x-1 <= 3:\n                total += x-1\n            else:\n                x -= 1\n    return total\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total = 0\n    x = n\n    while x > 0:\n        if x <= 3:\n            total += x\n            x = 0\n        else:\n            if x-3 <=3:\n                total += 3*(x-3)\n            if x-2 <=3:\n                total += 2*(x-2)                \n            if x-1 <= 3:\n                total += x-1\n                x = 0\n            else:\n                x -= 1\n    return total\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     10","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":16,"studentId":0,"date":null,"diff":"\r\nInputObject        SideIndicator\r\n-----------        -------------\r\n            n -= 1 =>           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n    if n <= 3: \n        return n\n    else:\n        x, y, z = 3, 2, 1\n        while n - 3 > 0:\n            x, y, z = x + 2*y + 3*z, x, y\n        return x\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n    if n <= 3: \n        return n\n    else:\n        x, y, z = 3, 2, 1\n        while n - 3 > 0:\n            n -= 1\n            x, y, z = x + 2*y + 3*z, x, y\n        return x\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     10","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":18,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n        return value     =>           \r\n            return value <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    elif n > 3:\n        value = n\n        while n > 3:\n            value = (value-1) + 2*(n-2) + 3*(n-3)\n            n -= 1\n            return value\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    elif n > 3:\n        value = n\n        while n > 3:\n            value = (value-1) + 2*(n-2) + 3*(n-3)\n            n -= 1\n        return value\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","16","","# Error: expected","#     22","# but got","#     16","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":19,"studentId":0,"date":null,"diff":"\r\nInputObject                                        SideIndicator\r\n-----------                                        -------------\r\n        j, k, i = j + 1, k + 1, i + 2 * k + 3 * j  =>           \r\n            (3 + 2 * 2 + 3 * 1) + (3 + 2* 3 + 3*2) =>           \r\n        j, k, i = j + 1, k + 1, i + 2 * j + 3 * k  <=           \r\n            (3 + 2 * 2 + 3 * 1) + (3 + 2* 2 + 3*1) <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n < 3:\n        return n\n    j, k, i = 1, 2, 3\n    while n > 3:\n        j, k, i = j + 1, k + 1, i + 2 * j + 3 * k\n        ''' g(5)=\n            g(3) + 2 * g(2) + 3 * g(1) + g(3) + 2 * g(3) + 3 * g(2)\n            (3 + 2 * 2 + 3 * 1) + (3 + 2* 2 + 3*1)\n            '''\n        n -= 1\n    return i\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n < 3:\n        return n\n    j, k, i = 1, 2, 3\n    while n > 3:\n        j, k, i = j + 1, k + 1, i + 2 * k + 3 * j\n        ''' g(5)=\n            g(3) + 2 * g(2) + 3 * g(1) + g(3) + 2 * g(3) + 3 * g(2)\n            (3 + 2 * 2 + 3 * 1) + (3 + 2* 3 + 3*2)\n            '''\n        n -= 1\n    return i\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","11","","# Error: expected","#     10","# but got","#     11","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":21,"studentId":0,"date":null,"diff":"\r\nInputObject                           SideIndicator\r\n-----------                           -------------\r\n        if a <= 3:                    =>           \r\n            d = (a)                   =>           \r\n            total += d                =>           \r\n        if b <= 3:                    =>           \r\n            e = (b) * 2               =>           \r\n            total += e                =>           \r\n        if c <= 3:                    =>           \r\n            f = (c) * 3               =>           \r\n            total += f                =>           \r\n        if a > 3:                     =>           \r\n            n = a                     =>           \r\n            a = (n-1)                 =>           \r\n            b = (n-2)                 =>           \r\n            c = (n-3)                 =>           \r\n            if a <= 3:                =>           \r\n                d = (a)               =>           \r\n                total += d            =>           \r\n            if b <= 3:                =>           \r\n                e = (b) * 2           =>           \r\n                total += e            =>           \r\n            if c <= 3:                =>           \r\n                f = (c) * 3           =>           \r\n                total += f            =>           \r\n        elif b > 3:                   =>           \r\n            n = b                     =>           \r\n            a = (n-1)                 =>           \r\n            b = (n-2)                 =>           \r\n            c = (n-3)                 =>           \r\n            if a <= 3:                =>           \r\n                d = (a)               =>           \r\n                total += d            =>           \r\n            if b <= 3:                =>           \r\n                e = (b) * 2           =>           \r\n                total += e            =>           \r\n            if c <= 3:                =>           \r\n                f = (c) * 3           =>           \r\n                total += f            =>           \r\n        elif c > 3:                   =>           \r\n            n = c                     =>           \r\n            a = (n-1)                 =>           \r\n            b = (n-2)                 =>           \r\n            c = (n-3)                 =>           \r\n            if a <= 3:                =>           \r\n                d = (a)               =>           \r\n                total += d            =>           \r\n            if b <= 3:                =>           \r\n                e = (b) * 2           =>           \r\n                total += e            =>           \r\n            if c <= 3:                =>           \r\n                f = (c) * 3           =>           \r\n                total += f            =>           \r\n        return total                  =>           \r\n        #if n <= 3:                   <=           \r\n        #    if n == 1:               <=           \r\n        #        return n * 3 + total <=           \r\n        #    elif n == 2:             <=           \r\n        #        return n * 2 + total <=           \r\n        #    elif n == 3:             <=           \r\n        #        return n + total     <=           \r\n        d = (a)                       <=           \r\n        e = (b) * 2                   <=           \r\n        f = (c) * 3                   <=           \r\n        if a > 3 or b > 3 or c > 3:   <=           \r\n            a -= 1                    <=           \r\n            b -= 1                    <=           \r\n            c -= 1                    <=           \r\n        #total +=                     <=           \r\n        return d + e + f + total      <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n\n    total = 0\n    a = (n-1)\n    b = (n-2)\n    c = (n-3)\n    while a > 3 or b > 3 or c > 3:\n        #if n <= 3:\n        #    if n == 1:\n        #        return n * 3 + total\n        #    elif n == 2:\n        #        return n * 2 + total\n        #    elif n == 3:\n        #        return n + total\n        d = (a)\n        e = (b) * 2\n        f = (c) * 3\n        if a > 3 or b > 3 or c > 3:\n            a -= 1\n            b -= 1\n            c -= 1\n        #total +=\n        return d + e + f + total\n    return a + 2*b + 3*c\n\n# need to find a way so that it keeps decreasing until it reaches being less than 3\n# do something with the total so that if it is less than 3 it goes into total\n\n#while loop condition: if n is greater than 3\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n\n    total = 0\n    a = (n-1)\n    b = (n-2)\n    c = (n-3)\n    while a > 3 or b > 3 or c > 3:\n        if a <= 3:\n            d = (a)\n            total += d\n        if b <= 3:\n            e = (b) * 2\n            total += e\n        if c <= 3:\n            f = (c) * 3\n            total += f\n        if a > 3:\n            n = a\n            a = (n-1)\n            b = (n-2)\n            c = (n-3)\n            if a <= 3:\n                d = (a)\n                total += d\n            if b <= 3:\n                e = (b) * 2\n                total += e\n            if c <= 3:\n                f = (c) * 3\n                total += f\n        elif b > 3:\n            n = b\n            a = (n-1)\n            b = (n-2)\n            c = (n-3)\n            if a <= 3:\n                d = (a)\n                total += d\n            if b <= 3:\n                e = (b) * 2\n                total += e\n            if c <= 3:\n                f = (c) * 3\n                total += f\n        elif c > 3:\n            n = c\n            a = (n-1)\n            b = (n-2)\n            c = (n-3)\n            if a <= 3:\n                d = (a)\n                total += d\n            if b <= 3:\n                e = (b) * 2\n                total += e\n            if c <= 3:\n                f = (c) * 3\n                total += f\n        return total\n    return a + 2*b + 3*c\n\n# need to find a way so that it keeps decreasing until it reaches being less than 3\n# do something with the total so that if it is less than 3 it goes into total\n\n#while loop condition: if n is greater than 3\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","16","","# Error: expected","#     22","# but got","#     16","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":22,"studentId":0,"date":null,"diff":"\r\nInputObject                                       SideIndicator\r\n-----------                                       -------------\r\n        total = total + 2 * (i - 2) + 3 * (i -3)  =>           \r\n        total = total + 2 * i - 3                 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    total = 10\n    i = 5\n    while i <= n:\n        total = total + 2 * i - 3 \n        i = i + 1\n    return total\n        \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    total = 10\n    i = 5\n    while i <= n:\n        total = total + 2 * (i - 2) + 3 * (i -3) \n        i = i + 1\n    return total\n        \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","17","","# Error: expected","#     22","# but got","#     17","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":23,"studentId":0,"date":null,"diff":"\r\nInputObject                     SideIndicator\r\n-----------                     -------------\r\n                # print (total) =>           \r\n                print (total)   <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total = 0\n    x = 1\n    a = 1\n    b = 1\n    y = 3\n    while x <= 3:\n        a = 1\n        # b = 0\n        if n <= 3:\n            return n\n        if n - x <= 3 and b <= 3:\n            total = total + b * (n - b)\n            b += 1  \n            # print (total)\n        if n - x > 3:\n            while a <= 3:\n                total = total + a * y \n                a += 1\n                y -= 1\n                print (total)\n            b += 1 \n\n        x += 1\n    return total \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total = 0\n    x = 1\n    a = 1\n    b = 1\n    y = 3\n    while x <= 3:\n        a = 1\n        # b = 0\n        if n <= 3:\n            return n\n        if n - x <= 3 and b <= 3:\n            total = total + b * (n - b)\n            b += 1  \n            # print (total)\n        if n - x > 3:\n            while a <= 3:\n                total = total + a * y \n                a += 1\n                y -= 1\n                # print (total)\n            b += 1 \n\n        x += 1\n    return total \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","3","7","10","22","","# Error: expected","#     22","# but got","#     3","#     7","#     10","#     22","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":24,"studentId":0,"date":null,"diff":"\r\nInputObject       SideIndicator\r\n-----------       -------------\r\n    elif n == 4:  =>           \r\n        return 10 =>           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        diff = 12 + (5*(n-5))\n        return 10 + diff\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    elif n == 4:\n        return 10\n    else:\n        diff = 12 + (5*(n-5))\n        return 10 + diff\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","17","","# Error: expected","#     10","# but got","#     17","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":25,"studentId":0,"date":null,"diff":"\r\nInputObject                                             SideIndicator\r\n-----------                                             -------------\r\n    if nsub1 <= 3:                                      =>           \r\n        total += nsub1                                  =>           \r\n    if nsub2 <= 3:                                      =>           \r\n        total += 2*nsub2                                =>           \r\n    if nsub3 <= 3:                                      =>           \r\n        total += 3*nsub3                                =>           \r\n        nsub1, nsub2, nsub3 = nsub1-1, nsub1-2, nsub1-3 =>           \r\n        if nsub2 <= 3:                                  =>           \r\n            total += 2*nsub2                            =>           \r\n            total += 3*nsub3                            =>           \r\n        nsub1, nsub2, nsub3 = nsub2-1, nsub2-2, nsub2-3 =>           \r\n        if nsub1 <= 3:                                  =>           \r\n            total += nsub1                              =>           \r\n        if nsub2 <= 3:                                  =>           \r\n            total += 2*nsub2                            =>           \r\n        if nsub3 <= 3:                                  =>           \r\n            total += 3*nsub3                            =>           \r\n        nsub1, nsub2, nsub3 = nsub3-1, nsub3-2, nsub3-3 =>           \r\n        if nsub1 <= 3:                                  =>           \r\n            total += nsub1                              =>           \r\n        if nsub2 <= 3:                                  =>           \r\n            total += 2*nsub2                            =>           \r\n        if nsub3 <= 3:                                  =>           \r\n            total += 3*nsub3                            =>           \r\n            nsub1 = 0                                   <=           \r\n        n11,n12,n13 = nsub1-1,nsub1-2,nsub1-3           <=           \r\n        if n11 <= 3 and nsub1 > 0:                      <=           \r\n            total += n11                                <=           \r\n        if n12 <= 3 and nsub1 > 0:                      <=           \r\n            total += 2*n12                              <=           \r\n        if n13 <= 3 and nsub1 > 0:                      <=           \r\n            total += 3*n13                              <=           \r\n        nsub1 -= 1                                      <=           \r\n        if nsub2 <= 3:                                  <=           \r\n            total += nsub2                              <=           \r\n            nsub2 = 0                                   <=           \r\n        n21,n22,n23 = nsub2-1,nsub2-2,nsub2-3           <=           \r\n        if n21 <= 3:                                    <=           \r\n            total += 2*n21                              <=           \r\n        if n22 <= 3:                                    <=           \r\n            total += 4*n22                              <=           \r\n        if n23 <= 3:                                    <=           \r\n            total += 6*n23                              <=           \r\n        nsub2 -= 1                                      <=           \r\n            total += nsub3                              <=           \r\n            nsub3 = 0                                   <=           \r\n        n31,n32,n33 = nsub3-1,nsub3-2,nsub3-3           <=           \r\n        if n31 <= 3:                                    <=           \r\n            total += 3*n31                              <=           \r\n        if n32 <= 3:                                    <=           \r\n            total += 6*n32                              <=           \r\n        if n33 <= 3:                                    <=           \r\n            total += 9*n33                              <=           \r\n        nsub3 -= 1                                      <=           \r\n\r\n\r\n","before":"def g_iter(n):\n\t\"\"\"Return the value of G(n), computed iteratively.\n\n\t>>> g_iter(1)\n\t1\n\t>>> g_iter(2)\n\t2\n\t>>> g_iter(3)\n\t3\n\t>>> g_iter(4)\n\t10\n\t>>> g_iter(5)\n\t22\n\t>>> from construct_check import check\n\t>>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n\tTrue\n\t\"\"\"\n\t\"*** YOUR CODE HERE ***\"\n\tnsub1,nsub2,nsub3 = n-1,n-2,n-3\n\ttotal = 0\n\tif n <= 3:\n\t\treturn n\n\twhile nsub1 > 3:\n\t\tif nsub1 <= 3:\n\t\t\ttotal += nsub1\n\t\t\tnsub1 = 0\n\t\tn11,n12,n13 = nsub1-1,nsub1-2,nsub1-3\n\t\tif n11 <= 3 and nsub1 > 0:\n\t\t\ttotal += n11\n\t\tif n12 <= 3 and nsub1 > 0:\n\t\t\ttotal += 2*n12\n\t\tif n13 <= 3 and nsub1 > 0:\n\t\t\ttotal += 3*n13\n\t\tnsub1 -= 1\n\twhile nsub2 > 3:\n\t\tif nsub2 <= 3:\n\t\t\ttotal += nsub2\n\t\t\tnsub2 = 0\n\t\tn21,n22,n23 = nsub2-1,nsub2-2,nsub2-3\n\t\tif n21 <= 3:\n\t\t\ttotal += 2*n21\n\t\tif n22 <= 3:\n\t\t\ttotal += 4*n22\n\t\tif n23 <= 3:\n\t\t\ttotal += 6*n23\n\t\tnsub2 -= 1\n\twhile nsub3 > 3:\n\t\tif nsub3 <= 3:\n\t\t\ttotal += nsub3\n\t\t\tnsub3 = 0\n\t\tn31,n32,n33 = nsub3-1,nsub3-2,nsub3-3\n\t\tif n31 <= 3:\n\t\t\ttotal += 3*n31\n\t\tif n32 <= 3:\n\t\t\ttotal += 6*n32\n\t\tif n33 <= 3:\n\t\t\ttotal += 9*n33\n\t\tnsub3 -= 1\n\treturn total \n\n","after":"def g_iter(n):\n\t\"\"\"Return the value of G(n), computed iteratively.\n\n\t>>> g_iter(1)\n\t1\n\t>>> g_iter(2)\n\t2\n\t>>> g_iter(3)\n\t3\n\t>>> g_iter(4)\n\t10\n\t>>> g_iter(5)\n\t22\n\t>>> from construct_check import check\n\t>>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n\tTrue\n\t\"\"\"\n\t\"*** YOUR CODE HERE ***\"\n\tif n <= 3:\n\t\treturn n\n\tnsub1,nsub2,nsub3 = n-1,n-2,n-3\n\ttotal = 0\n\tif nsub1 <= 3:\n\t\ttotal += nsub1\n\tif nsub2 <= 3: \n\t\ttotal += 2*nsub2\n\tif nsub3 <= 3:\n\t\ttotal += 3*nsub3\n\twhile nsub1 > 3:\n\t\tnsub1, nsub2, nsub3 = nsub1-1, nsub1-2, nsub1-3\n\t\tif nsub1 <= 3:\n\t\t\ttotal += nsub1\n\t\tif nsub2 <= 3: \n\t\t\ttotal += 2*nsub2\n\t\tif nsub3 <= 3:\n\t\t\ttotal += 3*nsub3\n\twhile nsub2 > 3:\n\t\tnsub1, nsub2, nsub3 = nsub2-1, nsub2-2, nsub2-3\n\t\tif nsub1 <= 3:\n\t\t\ttotal += nsub1\n\t\tif nsub2 <= 3: \n\t\t\ttotal += 2*nsub2\n\t\tif nsub3 <= 3:\n\t\t\ttotal += 3*nsub3\n\twhile nsub3 > 3:\n\t\tnsub1, nsub2, nsub3 = nsub3-1, nsub3-2, nsub3-3\n\t\tif nsub1 <= 3:\n\t\t\ttotal += nsub1\n\t\tif nsub2 <= 3: \n\t\t\ttotal += 2*nsub2\n\t\tif nsub3 <= 3:\n\t\t\ttotal += 3*nsub3\n\treturn total \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","0","","# Error: expected","#     10","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":26,"studentId":0,"date":null,"diff":"\r\nInputObject                  SideIndicator\r\n-----------                  -------------\r\n    a=1                      =>           \r\n    b=2                      =>           \r\n    c=3                      =>           \r\n        i = 4                =>           \r\n        while(i<n+1):        =>           \r\n            temp = a*3+b*2+c =>           \r\n            a = b            =>           \r\n            b = c            =>           \r\n            c = temp         =>           \r\n            i+=1             =>           \r\n        return c             =>           \r\n    else:                    =>           \r\n                             =>           \r\n                             =>           \r\n                             =>           \r\n    a=0                      <=           \r\n    b=0                      <=           \r\n    c=0                      <=           \r\n    while n>3:               <=           \r\n        a+=n%3               <=           \r\n        b+=n%3+1             <=           \r\n        c+=n%3+2             <=           \r\n        n-=1                 <=           \r\n    return a*3+b*2+c         <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a=0\n    b=0\n    c=0\n    if n<=3:\n        return n\n    while n>3:\n        a+=n%3\n        b+=n%3+1\n        c+=n%3+2\n        n-=1\n    return a*3+b*2+c\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a=1\n    b=2\n    c=3\n    if n<=3:\n        return n\n    else:\n        i = 4\n        while(i<n+1):\n            temp = a*3+b*2+c\n            a = b\n            b = c\n            c = temp\n            i+=1\n        return c\n\n\n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","26","","# Error: expected","#     22","# but got","#     26","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":27,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n        a= c + 2*b + 3*a  =>           \r\n                          =>           \r\n    d = 0                 <=           \r\n        a = c + 2*b + 3*a <=           \r\n        a = b             <=           \r\n        b = c             <=           \r\n        c = d             <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a = 1\n    b = 2\n    c = 3\n    d = 0\n    if n<=3:\n        return n\n    while n > 3:\n        a = c + 2*b + 3*a\n        a = b\n        b = c\n        c = d\n        a,b,c = b,c,a\n        n-=1\n    return c\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a = 1\n    b = 2\n    c = 3\n    if n<=3:\n        return n\n    while n > 3:\n        a= c + 2*b + 3*a\n        \n        a,b,c = b,c,a\n        n-=1\n    return c\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","2","","# Error: expected","#     10","# but got","#     2","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":28,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                             SideIndicator\r\n-----------                                                                             -------------\r\n        g_old, g_medium, g_recent = g_medium, g_recent, g_recent + 2*g_medium + 3*g_old =>           \r\n    return g_recent                                                                     =>           \r\n        answer = g_recent + 2*g_medium + 3*g_old                                        <=           \r\n        g_medium = g_recent                                                             <=           \r\n        g_recent = answer                                                               <=           \r\n        g_old = g_medium                                                                <=           \r\n    return answer                                                                       <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    g_old, g_medium, g_recent = 1, 2, 3\n    answer = 0\n    if n <= 3:\n        return n\n    while n > 3:\n        answer = g_recent + 2*g_medium + 3*g_old\n        g_medium = g_recent\n        g_recent = answer\n        g_old = g_medium\n        n = n-1\n    return answer\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    g_old, g_medium, g_recent = 1, 2, 3\n    answer = 0\n    if n <= 3:\n        return n\n    while n > 3:\n        g_old, g_medium, g_recent = g_medium, g_recent, g_recent + 2*g_medium + 3*g_old\n        n = n-1\n    return g_recent\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","25","","# Error: expected","#     22","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":30,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                    SideIndicator\r\n-----------                                                                    -------------\r\n    g1, g2, g3 = 1, 2, 3                                                       =>           \r\n    for i in range(4, n + 1):                                                  =>           \r\n        g1, g2, g3 = g2, g3, g1 * 3 + g2 * 2 + g3                              =>           \r\n    return g3                                                                  =>           \r\n    #else:                                                                     =>           \r\n        #func1, func2, func3 = 1, 2, 3                                         =>           \r\n        #i = 4                                                                 =>           \r\n        #while i <= n + 1:                                                     =>           \r\n            #func1, func2, func3 = func2, func3, func1 * 3 + func2 * 2 + func3 =>           \r\n            #i += 1                                                            =>           \r\n    #return func3                                                              =>           \r\n                                                                               =>           \r\n                                                                               =>           \r\n                                                                               =>           \r\n                                                                               =>           \r\n        func1, func2, func3 = 1, 2, 3                                          <=           \r\n        i = 4                                                                  <=           \r\n        while i <= n + 1:                                                      <=           \r\n            func1, func2, func3 = func2, func3, func1 * 3 + func2 * 2 + func3  <=           \r\n            i += 1                                                             <=           \r\n    return func3                                                               <=           \r\n    else:                                                                      <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        func1, func2, func3 = 1, 2, 3\n        i = 4\n        while i <= n + 1:\n            func1, func2, func3 = func2, func3, func1 * 3 + func2 * 2 + func3\n            i += 1\n    return func3\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    g1, g2, g3 = 1, 2, 3\n    for i in range(4, n + 1):\n        g1, g2, g3 = g2, g3, g1 * 3 + g2 * 2 + g3\n    return g3\n\n\n\n\n    #else:\n        #func1, func2, func3 = 1, 2, 3\n        #i = 4\n        #while i <= n + 1:\n            #func1, func2, func3 = func2, func3, func1 * 3 + func2 * 2 + func3\n            #i += 1\n    #return func3\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","22","","# Error: expected","#     10","# but got","#     22","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":31,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n            g.append(g[i+2]+2*g[i+1]+3*g[i]) =>           \r\n            g.append(g[i]+2*g[i+1]+3*g[i+2]) <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        g = [1, 2, 3]\n        for i in range(n - 3):\n            g.append(g[i]+2*g[i+1]+3*g[i+2])\n        return g[len(g)-1]\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        g = [1, 2, 3]\n        for i in range(n - 3):\n            g.append(g[i+2]+2*g[i+1]+3*g[i])\n        return g[len(g)-1]\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","14","","# Error: expected","#     10","# but got","#     14","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":32,"studentId":0,"date":null,"diff":"\r\nInputObject                                            SideIndicator\r\n-----------                                            -------------\r\n        first, second, third= second, third, next_term =>           \r\n                                                       =>           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n    first, second, third= 1, 2, 3\n    if n<=3:\n        return n\n    while n>3:\n        next_term= third+2*second+3*first\n        n-=1\n    return next_term  \n        \n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n    first, second, third= 1, 2, 3\n    if n<=3:\n        return n\n    while n>3:\n        next_term= third+2*second+3*first\n        first, second, third= second, third, next_term\n        n-=1\n\n    return next_term  \n        \n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","10","","# Error: expected","#     22","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":33,"studentId":0,"date":null,"diff":"\r\nInputObject                                                            SideIndicator\r\n-----------                                                            -------------\r\n    if n <= 3:                                                         =>           \r\n        return n                                                       =>           \r\n        while i <= n-3:                                                =>           \r\n            next = a + 2*b + 3*c                                       =>           \r\n            c = b                                                      =>           \r\n            b = a                                                      =>           \r\n            a = next                                                   =>           \r\n            i += 1                                                     =>           \r\n        return a                                                       =>           \r\n    \"\"\"1. how long it is (n). 2. what number it's on. 3. up or down\"\"\" =>           \r\n    def pingpong_counter(k, i, c):                                     =>           \r\n        # k is the number you're on                                    =>           \r\n        #i is the value                                                =>           \r\n                                                                       =>           \r\n        if k == n:                                                     =>           \r\n            return i                                                   =>           \r\n        else:                                                          =>           \r\n            if k % 7 == 0 or has_seven(k):                             =>           \r\n                return pingpong_counter(k + 1, i + c, -c)              =>           \r\n                return pingpong_counter(k + 1, i + c, c)               =>           \r\n    return pingpong_counter(1,1,1)                                     =>           \r\n    else:                                                              =>           \r\n                                                                       =>           \r\n                                                                       =>           \r\n                                                                       =>           \r\n    while i <= n-3:                                                    <=           \r\n        next = a + 2*b + 3*c                                           <=           \r\n        c = b                                                          <=           \r\n        b = a                                                          <=           \r\n        a = next                                                       <=           \r\n        i += 1                                                         <=           \r\n    return a + 2*b + 3*c                                               <=           \r\n    \"\"\"def pingpong_counter(n):                                        <=           \r\n        i = 1                                                          <=           \r\n        c = 1                                                          <=           \r\n        while i < n:                                                   <=           \r\n            if i % 7 != 0 or (i contains the digit 7):                 <=           \r\n                c = -c                                                 <=           \r\n                i = i + c                                              <=           \r\n                i + c\"\"\"                                               <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    i = 1\n    a = 3\n    b = 2\n    c = 1\n    while i <= n-3:\n        next = a + 2*b + 3*c\n        c = b\n        b = a\n        a = next\n        i += 1\n    return a + 2*b + 3*c\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    i = 1\n    a = 3\n    b = 2\n    c = 1\n    if n <= 3:\n        return n\n    else:\n        while i <= n-3:\n            next = a + 2*b + 3*c\n            c = b\n            b = a\n            a = next\n            i += 1\n        return a\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","10","","# Error: expected","#     1","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":34,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                       SideIndicator\r\n-----------                                                                       -------------\r\n    a, b, c = 1, 2, 3                                                             =>           \r\n    for i in range(3, n):                                                         =>           \r\n        a, b, c = b, c, (a * 3 + b * 2 + c)                                       =>           \r\n    return c                                                                      =>           \r\n    def helper_g_iter(n):                                                         <=           \r\n        total = 0                                                                 <=           \r\n        counter = 0                                                               <=           \r\n        while counter <= 3:                                                       <=           \r\n            counter += 1                                                          <=           \r\n            if n - counter > 3:                                                   <=           \r\n                extra_counter = 0                                                 <=           \r\n                extra_total = 0                                                   <=           \r\n                while extra_counter <= 3:                                         <=           \r\n                    extra_counter += 1                                            <=           \r\n                    extra_total = extra_total + extra_counter * (n-extra_counter) <=           \r\n                total, counter = extra_total, counter + 1                         <=           \r\n            total = total + counter * (n-counter)                                 <=           \r\n        return total                                                              <=           \r\n    return helper_g_iter(n)                                                       <=           \r\n                                                                                  <=           \r\n                                                                                  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    def helper_g_iter(n):\n        total = 0\n        counter = 0\n        while counter <= 3:\n            counter += 1\n            if n - counter > 3:\n                extra_counter = 0\n                extra_total = 0\n                while extra_counter <= 3:\n                    extra_counter += 1\n                    extra_total = extra_total + extra_counter * (n-extra_counter)\n                total, counter = extra_total, counter + 1\n            total = total + counter * (n-counter)\n        return total\n\n    if n <= 3:\n        return n\n\n    return helper_g_iter(n)\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    a, b, c = 1, 2, 3\n    for i in range(3, n):\n        a, b, c = b, c, (a * 3 + b * 2 + c)\n    return c\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","36","","# Error: expected","#     22","# but got","#     36","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":35,"studentId":0,"date":null,"diff":"\r\nInputObject                            SideIndicator\r\n-----------                            -------------\r\n        a, b, c = a+b+c, 2*a, (b//2)*3 =>           \r\n        a, b, c = a+b+c, 2*a, (3/2)*b  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    if n==4:\n        return 10\n\n    a, b, c= 3,4,3\n    k=5\n    while k<=n:\n        a, b, c = a+b+c, 2*a, (3/2)*b\n        k+=1\n\n    return a+b+c\n\n\n    \n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    if n==4:\n        return 10\n\n    a, b, c= 3,4,3\n    k=5\n    while k<=n:\n        a, b, c = a+b+c, 2*a, (b//2)*3\n        k+=1\n\n    return a+b+c\n\n\n    \n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","22.0","","# Error: expected","#     22","# but got","#     22.0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":36,"studentId":0,"date":null,"diff":"\r\nInputObject                                                         SideIndicator\r\n-----------                                                         -------------\r\n    if n<=3:                                                        =>           \r\n        return n                                                    =>           \r\n    else:                                                           =>           \r\n        prevPrev=2                                                  =>           \r\n        prev = 3                                                    =>           \r\n        prevPrevPrev=1                                              =>           \r\n        result = 0                                                  =>           \r\n        i=4                                                         =>           \r\n        for i in range (3,n):                                       =>           \r\n            result = prev + 2*prevPrev + 3*prevPrevPrev             =>           \r\n            prevPrevPrev, prevPrev, prev = prevPrev, prev, result   =>           \r\n            i+=1                                                    =>           \r\n        return result                                               =>           \r\n    # if n<=3:                                                      <=           \r\n    #     return n                                                  <=           \r\n    # else:                                                         <=           \r\n    #     prevPrev=2                                                <=           \r\n    #     prev = 3                                                  <=           \r\n    #     prevPrevPrev=1                                            <=           \r\n    #     result = 0                                                <=           \r\n    #     i=4                                                       <=           \r\n    #     for i in range (3,n):                                     <=           \r\n    #         result = prev + 2*prevPrev + 3*prevPrevPrev           <=           \r\n    #         prevPrevPrev, prevPrev, prev = prevPrev, prev, result <=           \r\n    #         i+=1                                                  <=           \r\n    #     return result                                             <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    # if n<=3:\n    #     return n\n    # else:\n    #     prevPrev=2\n    #     prev = 3\n    #     prevPrevPrev=1\n    #     result = 0\n    #     i=4\n    #     for i in range (3,n):\n    #         result = prev + 2*prevPrev + 3*prevPrevPrev\n    #         prevPrevPrev, prevPrev, prev = prevPrev, prev, result\n    #         i+=1\n    #     return result\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    else:\n        prevPrev=2\n        prev = 3\n        prevPrevPrev=1\n        result = 0\n        i=4\n        for i in range (3,n):\n            result = prev + 2*prevPrev + 3*prevPrevPrev\n            prevPrevPrev, prevPrev, prev = prevPrev, prev, result\n            i+=1\n        return result\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","","# Error: expected","#     1","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":37,"studentId":0,"date":null,"diff":"\r\nInputObject                                            SideIndicator\r\n-----------                                            -------------\r\n    total, next = 3, 4                                 =>           \r\n        total = total + 2*(n - 2) + 3*(n - 3)          =>           \r\n        next += 1                                      =>           \r\n    return total                                       =>           \r\n    total, next = 0, 0                                 <=           \r\n        next = total + (n - 1) + 2*(n - 2) + 3*(n - 3) <=           \r\n        total = next                                   <=           \r\n    return next                                        <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    total, next = 0, 0\n    while n > 3:\n        next = total + (n - 1) + 2*(n - 2) + 3*(n - 3)\n        total = next\n        n -= 1\n    return next\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    total, next = 3, 4\n    while n > 3:\n        total = total + 2*(n - 2) + 3*(n - 3)\n        next += 1\n        n -= 1\n    return total\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","26","","# Error: expected","#     22","# but got","#     26","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":38,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n    while value <= n-1: =>           \r\n    while value <= n:   <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    value = 3\n    total = 1\n    oneback = 3\n    twoback = 2\n    threeback = 1\n    if n <= 3:\n        return n\n    while value <= n:\n        total = 3* threeback + 2* twoback + oneback\n        threeback = twoback\n        twoback = oneback\n        oneback = total\n        value += 1\n    return total\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    value = 3\n    total = 1\n    oneback = 3\n    twoback = 2\n    threeback = 1\n    if n <= 3:\n        return n\n    while value <= n-1:\n        total = 3* threeback + 2* twoback + oneback\n        threeback = twoback\n        twoback = oneback\n        oneback = total\n        value += 1\n    return total\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","22","","# Error: expected","#     10","# but got","#     22","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":39,"studentId":0,"date":null,"diff":"\r\nInputObject                             SideIndicator\r\n-----------                             -------------\r\n    least, middle, most, k = 1, 2, 3, 4 =>           \r\n    least, middle, most, k = 1, 2, 3, 3 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    least, middle, most, k = 1, 2, 3, 3\n    while k<=n:\n        least, middle, most, k = middle, most, (least*3+middle*2+most), k+1\n    return most\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    least, middle, most, k = 1, 2, 3, 4\n    while k<=n:\n        least, middle, most, k = middle, most, (least*3+middle*2+most), k+1\n    return most\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","22","","# Error: expected","#     10","# but got","#     22","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":40,"studentId":0,"date":null,"diff":"\r\nInputObject                      SideIndicator\r\n-----------                      -------------\r\n        def y(x):                =>           \r\n        return y                 =>           \r\n    count = 1                    =>           \r\n        count = count + 1        =>           \r\n    g, g1, g2, g3 = 4, 3, 2, 1   =>           \r\n        g = g1 + 2 * g2 + 3 * g3 =>           \r\n        g1, g2, g3 = g, g1, g2   =>           \r\n        n = n - 1                =>           \r\n    return g1                    =>           \r\n                                 =>           \r\n                                 =>           \r\n        def g(x):                <=           \r\n        return g                 <=           \r\n    k = 1                        <=           \r\n        k += 1                   <=           \r\n    k = 1                        <=           \r\n        n, k = n - 1, k + 1      <=           \r\n        g_iter = sum(mul(n,k))   <=           \r\n    \"*** YOUR CODE HERE ***\"     <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    k = 1\n    if n <= 3:\n        return n\n    while n > 3:\n        n, k = n - 1, k + 1\n        g_iter = sum(mul(n,k))  \n        \n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    g, g1, g2, g3 = 4, 3, 2, 1\n    while n > 3:\n        g = g1 + 2 * g2 + 3 * g3\n        g1, g2, g3 = g, g1, g2\n        n = n - 1\n    return g1\n        \n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 223, in g_iter","    g_iter = sum(mul(n,k))","TypeError: 'int' object is not iterable","","# Error: expected","#     10","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":41,"studentId":0,"date":null,"diff":"\r\nInputObject SideIndicator\r\n----------- -------------\r\n    k = 3   =>           \r\n    k = 4   <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    g1, g2, g3 = 1, 2, 3\n    k = 4\n    gn = 0\n    while k < n:\n        gn = g3 + 2 * g2 + 3 * g1\n        g1, g2, g3 = g2, g3, gn\n        k += 1\n    return gn\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    g1, g2, g3 = 1, 2, 3\n    k = 3\n    gn = 0\n    while k < n:\n        gn = g3 + 2 * g2 + 3 * g1\n        g1, g2, g3 = g2, g3, gn\n        k += 1\n    return gn\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","0","","# Error: expected","#     10","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":43,"studentId":0,"date":null,"diff":"\r\nInputObject                           SideIndicator\r\n-----------                           -------------\r\n            total = total + 2*z + 3*y =>           \r\n            total = total + 2*y + 3*x <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def G(n):\n        x,y,z = 1,2,3\n        total = z + 2*y + 3*x\n        counter = 4\n        if n <=3:\n            return n\n        while n > counter:\n            counter += 1\n            total = total + 2*y + 3*x\n            x,y,z = y,z,total\n        return total\n    return G(n)\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def G(n):\n        x,y,z = 1,2,3\n        total = z + 2*y + 3*x\n        counter = 4\n        if n <=3:\n            return n\n        while n > counter:\n            counter += 1\n            total = total + 2*z + 3*y\n            x,y,z = y,z,total\n        return total\n    return G(n)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","17","","# Error: expected","#     22","# but got","#     17","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":44,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                                                \r\n-----------                                                                                                                \r\n    k = 4                                                                                                                  \r\n        pred1, pred2, pred3 = pred1 + 2*pred2 + 3*pred3, pred1, pred2                                                      \r\n    def helper(k, index, literal, flag):                                                                                   \r\n        if index == k:                                                                                                     \r\n            return literal                                                                                                 \r\n        if flag == 0:                                                                                                      \r\n            helper(k, index + 1, literal + 1, (lambda flag: switch_flags(flag) if is_multiple(index) or has_seven(index)...\r\n        else:                                                                                                              \r\n            helper(k, index + 1, literal - 1, (lambda flag: switch_flags(flag) if is_multiple(index) or has_seven(index)...\r\n                                                                                                                           \r\n    def is_multiple(x):                                                                                                    \r\n        if x % 7 == 0:                                                                                                     \r\n            return True                                                                                                    \r\n        else:                                                                                                              \r\n            return False                                                                                                   \r\n    def switch_flags(flag):                                                                                                \r\n        return 1 - flag                                                                                                    \r\n    return helper(n, 1, 1, 0)                                                                                              \r\n                                                                                                                           \r\n                                                                                                                           \r\n                                                                                                                           \r\n                                                                                                                           \r\n    k = 1                                                                                                                  \r\n        pred1 = pred1 + 2*pred2 + 3*pred3                                                                                  \r\n        pred2 = pred1                                                                                                      \r\n        pred3 = pred2                                                                                                      \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    k = 1\n    pred1, pred2, pred3 = 3,2,1 \n    while k <= n:\n        pred1 = pred1 + 2*pred2 + 3*pred3\n        pred2 = pred1\n        pred3 = pred2 \n        k += 1\n    return pred1\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    k = 4\n    pred1, pred2, pred3 = 3,2,1 \n    while k <= n:\n        pred1, pred2, pred3 = pred1 + 2*pred2 + 3*pred3, pred1, pred2\n        k += 1\n    return pred1\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","2160","","# Error: expected","#     10","# but got","#     2160","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":45,"studentId":0,"date":null,"diff":"\r\nInputObject            SideIndicator\r\n-----------            -------------\r\n        return lst[-1] =>           \r\n        return lst     <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    lst = [1,2,3]\n    if n <= 3:\n        return lst[n-1]\n    else:\n        for i in range(4, n+1):\n            total = 0\n            for nums in range(1,4):\n                total += lst[-nums] * nums\n            lst.append(total)\n        return lst\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    lst = [1,2,3]\n    if n <= 3:\n        return lst[n-1]\n    else:\n        for i in range(4, n+1):\n            total = 0\n            for nums in range(1,4):\n                total += lst[-nums] * nums\n            lst.append(total)\n        return lst[-1]\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","[1, 2, 3, 10]","","# Error: expected","#     10","# but got","#     [1, 2, 3, 10]","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":47,"studentId":0,"date":null,"diff":"\r\nInputObject SideIndicator\r\n----------- -------------\r\n    a=1     =>           \r\n    b=2     =>           \r\n    c=3     =>           \r\n        a=1 <=           \r\n        b=2 <=           \r\n        c=3 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\" \n    if n <=3:\n            return n\n    i=4\n    while i<= n:\n        a=1\n        b=2\n        c=3\n        i+=1\n        total= c + 2*b + 3*a\n        a=b\n        b=c\n        c=total\n    return total \n\n            \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\" \n    if n <=3:\n            return n\n    i=4\n    a=1\n    b=2\n    c=3\n    while i<= n:\n        i+=1\n        total= c + 2*b + 3*a\n        a=b\n        b=c\n        c=total\n    return total \n\n            \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","10","","# Error: expected","#     22","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":48,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                    SideIndicator\r\n-----------                                                                    -------------\r\n    first = 1                                                                  =>           \r\n    second = 2                                                                 =>           \r\n    third = 3                                                                  =>           \r\n            new_value = third + 2*second + 3*first                             =>           \r\n            first = second                                                     =>           \r\n            second = third                                                     =>           \r\n            third = new_value                                                  =>           \r\n            n -= 1                                                             =>           \r\n        return new_value                                                       =>           \r\n    \"\"\"                                                                        =>           \r\n                                                                               =>           \r\n    \"everything is a list that contains the entire pingpong sequence.\"         =>           \r\n    \"need to start at 1 and count up until has_seven is True, then count down\" =>           \r\n    \"Also need to append every term into the list\"                             =>           \r\n    term = 1                                                                   =>           \r\n    step = 1                                                                   =>           \r\n    while n > 0:                                                               =>           \r\n        if has_seven(k) or k % 7 == 0:                                         =>           \r\n            \"switch the counting\"                                              =>           \r\n            step = -1*step                                                     =>           \r\n        term += step                                                           =>           \r\n        n -= 1                                                                 =>           \r\n    first_total = 0                                                            <=           \r\n    second_total = 0                                                           <=           \r\n    third_total = 0                                                            <=           \r\n            first_total += g_iter(n-1)                                         <=           \r\n            second_total += 2*g_iter(n-2)                                      <=           \r\n            third_total += 3*g_iter(n-3)                                       <=           \r\n    return first_total + second_total + third_total                            <=           \r\n    \"\"\"                                                                        <=           \r\n    \"*** YOUR CODE HERE ***\"                                                   <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    first_total = 0 \n    second_total = 0\n    third_total = 0\n    if n <= 3:\n        return n \n    else:\n        while n > 3:\n            first_total += g_iter(n-1)\n            second_total += 2*g_iter(n-2)\n            third_total += 3*g_iter(n-3) \n    return first_total + second_total + third_total\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    first = 1\n    second = 2\n    third = 3\n    if n <= 3:\n        return n \n    else:\n        while n > 3:\n            new_value = third + 2*second + 3*first\n            first = second\n            second = third\n            third = new_value\n            n -= 1\n        return new_value\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     10","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":50,"studentId":0,"date":null,"diff":"\r\nInputObject                             SideIndicator\r\n-----------                             -------------\r\n            if x==4:                    =>           \r\n                y+= 3*(x-3)+2*(x-2)+x-1 =>           \r\n            else:                       =>           \r\n                y+= 3*(x-3)+2*(x-2)     =>           \r\n            y+= 3*(x-3)+2*(x-2)+x-1     <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    x=n\n    if x>3:\n        y=0\n        while x>3:\n            y+= 3*(x-3)+2*(x-2)+x-1\n            x-=1\n        return y\n    else:\n        return x\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    x=n\n    if x>3:\n        y=0\n        while x>3:\n            if x==4:\n                y+= 3*(x-3)+2*(x-2)+x-1\n            else:\n                y+= 3*(x-3)+2*(x-2)\n            x-=1\n        return y\n    else:\n        return x\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","26","","# Error: expected","#     22","# but got","#     26","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":51,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                   SideIndicator\r\n-----------                                                                   -------------\r\n    if n <=3:                                                                 =>           \r\n    third = 1                                                                 =>           \r\n    second = 2                                                                =>           \r\n    first = 3                                                                 =>           \r\n    while n > 3:                                                              =>           \r\n        first, second, third = first + 2 * second + 3 * third, first, second  =>           \r\n        n = n - 1                                                             =>           \r\n    return first                                                              =>           \r\n    if n <= 3:                                                                <=           \r\n    if n - 1 <= 3:                                                            <=           \r\n        one = n                                                               <=           \r\n        while n > 3:                                                          <=           \r\n            one = (n-1) + 2 * (n-2) + 3 * (n-3)                               <=           \r\n    if n - 2 <= 3:                                                            <=           \r\n        two - n                                                               <=           \r\n    else:                                                                     <=           \r\n        while n > 3:                                                          <=           \r\n            two = (n-1) + 2 * (n-2) + 3 * (n-3)                               <=           \r\n    if n-3 <= 3:                                                              <=           \r\n        three = n                                                             <=           \r\n    else:                                                                     <=           \r\n        while n>3:                                                            <=           \r\n            three = (n-1) + 2 * (n-2) + 3 * (n-3)                             <=           \r\n    return one + 2*two + 3*three                                              <=           \r\n    else:                                                                     <=           \r\n                                                                              <=           \r\n                                                                              <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n\n    if n - 1 <= 3:\n        one = n\n    else:\n        while n > 3:\n            one = (n-1) + 2 * (n-2) + 3 * (n-3)\n\n    if n - 2 <= 3:\n        two - n\n    else:\n        while n > 3:\n            two = (n-1) + 2 * (n-2) + 3 * (n-3)\n\n    if n-3 <= 3:\n        three = n \n    else: \n        while n>3:\n            three = (n-1) + 2 * (n-2) + 3 * (n-3)\n\n    return one + 2*two + 3*three\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <=3:\n        return n\n    third = 1\n    second = 2\n    first = 3 \n    while n > 3:\n        first, second, third = first + 2 * second + 3 * third, first, second \n        n = n - 1\n    return first\n\n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 229, in g_iter","    two - n","UnboundLocalError: local variable 'two' referenced before assignment","","# Error: expected","#     10","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":52,"studentId":0,"date":null,"diff":"\r\nInputObject                               SideIndicator\r\n-----------                               -------------\r\n        x, y, z = y, z, z + 2 * y + 3 * x =>           \r\n        x, y, z = y, z, z+ 2*b + 3*x      <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    x, y, z = 1, 2, 3\n    while n > 3:\n        x, y, z = y, z, z+ 2*b + 3*x\n        n -= 1 \n    return z\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    x, y, z = 1, 2, 3\n    while n > 3:\n        x, y, z = y, z, z + 2 * y + 3 * x\n        n -= 1 \n    return z\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 214, in g_iter","    x, y, z = y, z, z+ 2*b + 3*x","NameError: name 'b' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":53,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n                           =>           \r\n        return termn       =>           \r\n    total = 0              <=           \r\n            total += termn <=           \r\n        return total       <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n    term1 = 3\n    term2 = 2\n    term3 = 1\n    termn = 0\n    total = 0\n    i = 0\n\n    if n <= 3:\n        return n\n    else:\n        for i in range(n-3):\n            termn = term1 + 2*term2 + 3*term3\n            total += termn\n            term3, term2, term1 = term2, term1, termn\n        return total\n\n        \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n    term1 = 3\n    term2 = 2\n    term3 = 1\n    \n    termn = 0\n    i = 0\n\n    if n <= 3:\n        return n\n    else:\n        for i in range(n-3):\n            termn = term1 + 2*term2 + 3*term3\n            term3, term2, term1 = term2, term1, termn\n        return termn\n\n        \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","32","","# Error: expected","#     22","# but got","#     32","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":55,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                                                \r\n-----------                                                                                                                \r\n        total += (n-1 if n-1 <= 3 else 0) + (2*(n-2) if n-2 <= 3 else 0) + (3*(n-3) if n-3 <= 3 else 0)                    \r\n        total += (lambda n: n-1 if n-1 <= 3 else 0) + (lambda n: (2*(n-2) if n-2 <= 3 else 0)) + (lambda n: (3*(n-3) if ...\r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total = 0\n    if n <= 3:\n        return n\n    while n > 3:\n        total += (lambda n: n-1 if n-1 <= 3 else 0) + (lambda n: (2*(n-2) if n-2 <= 3 else 0)) + (lambda n: (3*(n-3) if n-3 <= 3 else 0))\n        n -= 1\n    return total\n\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total = 0\n    if n <= 3:\n        return n\n    while n > 3:\n        total += (n-1 if n-1 <= 3 else 0) + (2*(n-2) if n-2 <= 3 else 0) + (3*(n-3) if n-3 <= 3 else 0)\n        n -= 1\n    return total\n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 217, in g_iter","    total += (lambda n: n-1 if n-1 <= 3 else 0) + (lambda n: (2*(n-2) if n-2 <= 3 else 0)) + (lambda n: (3*(n-3) if n-3 <= 3 else 0))","TypeError: unsupported operand type(s) for +: 'function' and 'function'","","# Error: expected","#     10","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":56,"studentId":0,"date":null,"diff":"\r\nInputObject                   SideIndicator\r\n-----------                   -------------\r\n        if a<=3:              =>           \r\n            total=total+a     =>           \r\n        if b<=3:              =>           \r\n            total=total+2*b   =>           \r\n        if c<=3:              =>           \r\n            total=total+3*c   =>           \r\n        total=total+a+2*b+3*c <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    a,b,c,total=n-1,n-2,n-3,0\n\n    while n>3:\n        total=total+a+2*b+3*c\n        n-=1\n        a,b,c=a-1,b-1,c-1\n    return total\n    \n\n\n\n        \n    \n        \n\n\n        \n\n\n\n\n    \n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    a,b,c,total=n-1,n-2,n-3,0\n\n    while n>3:\n        if a<=3:\n            total=total+a\n        if b<=3:\n            total=total+2*b\n        if c<=3:\n            total=total+3*c\n        n-=1\n        a,b,c=a-1,b-1,c-1\n    return total\n    \n\n\n\n        \n    \n        \n\n\n        \n\n\n\n\n    \n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","26","","# Error: expected","#     22","# but got","#     26","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":57,"studentId":0,"date":null,"diff":"\r\nInputObject                           SideIndicator\r\n-----------                           -------------\r\n        g_1,g_2,g_3 = total, g_1, g_2 =>           \r\n        g_1,g_2,g_3 = total, g_3, g_1 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if 3 >=n :\n        return n\n    g_1,g_2,g_3 = 3,2,1\n    total = 0\n    i = 3\n    while n > i:\n        total = 1 * g_1 + 2 * g_2 + 3 * g_3\n        g_1,g_2,g_3 = total, g_3, g_1\n        i += 1\n    return total\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if 3 >=n :\n        return n\n    g_1,g_2,g_3 = 3,2,1\n    total = 0\n    i = 3\n    while n > i:\n        total = 1 * g_1 + 2 * g_2 + 3 * g_3\n        g_1,g_2,g_3 = total, g_1, g_2\n        i += 1\n    return total\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","21","","# Error: expected","#     22","# but got","#     21","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":58,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                          SideIndicator\r\n-----------                                                                                          -------------\r\n            current, last_1, last_2, last_3 = current + 2*last_1 + 3*last_2, current, last_1, last_2 =>           \r\n            current, last_1, last_2, last_3 = last_1 + 2*last_2 + 3*last_3, current, last_1, last_2  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count=4\n    if n<=3:\n        return n\n    else:\n        current, last_1, last_2, last_3 = 10, 3, 2, 1\n        while count<n:\n            current, last_1, last_2, last_3 = last_1 + 2*last_2 + 3*last_3, current, last_1, last_2\n            count+=1\n        return current\n\n\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count=4\n    if n<=3:\n        return n\n    else:\n        current, last_1, last_2, last_3 = 10, 3, 2, 1\n        while count<n:\n            current, last_1, last_2, last_3 = current + 2*last_1 + 3*last_2, current, last_1, last_2\n            count+=1\n        return current\n\n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","10","","# Error: expected","#     22","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":59,"studentId":0,"date":null,"diff":"\r\nInputObject         SideIndicator\r\n-----------         -------------\r\n    while i < n:    =>           \r\n    return val3     =>           \r\n    while i <= n:   <=           \r\n        return val3 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n\n    val1 = 1\n    val2 = 2\n    val3 = 3\n    i = 3\n    while i <= n:\n        val3,val2,val1 = 1*val3 + 2*val2 + 3* val1,val3,val2\n        i+=1\n        return val3\n        \n\n        \n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n\n    val1 = 1\n    val2 = 2\n    val3 = 3\n    i = 3\n    while i < n:\n        val3,val2,val1 = 1*val3 + 2*val2 + 3* val1,val3,val2\n        i+=1\n    return val3\n        \n\n        \n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","10","","# Error: expected","#     22","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":60,"studentId":0,"date":null,"diff":"\r\nInputObject                   SideIndicator\r\n-----------                   -------------\r\n    return a + 2*b + 3*c      =>           \r\n    total = 0                 <=           \r\n        total = a + 2*b + 3*c <=           \r\n    return total              <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    i = n\n    total = 0\n    a, b, c = 3, 2, 1 \n    if n <= 3:\n        return n\n    while i > 4:\n        x = 1*a + 2*b + 3*c\n        a, b, c = x, a, b\n        total = a + 2*b + 3*c\n        i = i - 1\n    return total\n    #three wheels move together \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    i = n\n    a, b, c = 3, 2, 1 \n    if n <= 3:\n        return n\n    while i > 4:\n        x = 1*a + 2*b + 3*c\n        a, b, c = x, a, b\n        i = i - 1\n    return a + 2*b + 3*c\n    #three wheels move together \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","0","","# Error: expected","#     10","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":61,"studentId":0,"date":null,"diff":"\r\nInputObject    SideIndicator\r\n-----------    -------------\r\n        n -= 1 =>           \r\n        k -= 1 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    low, med, high = 1, 2, 3\n    total = n\n    while n > 3:\n        total = 3 * low + 2 * med + high\n        low, med, high = med, high, total\n        k -= 1\n    return total\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    low, med, high = 1, 2, 3\n    total = n\n    while n > 3:\n        total = 3 * low + 2 * med + high\n        low, med, high = med, high, total\n        n -= 1\n    return total\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 215, in g_iter","    k -= 1","UnboundLocalError: local variable 'k' referenced before assignment","","# Error: expected","#     10","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":63,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n            n -= 1       =>           \r\n        return Total     =>           \r\n                n -= 1   <=           \r\n                n -= 1   <=           \r\n                n -= 1   <=           \r\n                n -= 1   <=           \r\n            return Total <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    Total = 0\n    if n <= 3:\n        return n\n    else:\n        while n > 3:\n            if n-1 > 3:\n                Total = Total + 2*(n-2) + 3*(n-3)\n                n -= 1\n            elif n-2 > 3:\n                Total = Total + 3*(n-3)\n                n -= 1\n            elif n-3 > 3:\n                Total = Total\n                n -= 1\n            else:\n                Total = Total + (n-1) + 2*(n-2) + 3*(n-3)\n                n -= 1\n            return Total\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    Total = 0\n    if n <= 3:\n        return n\n    else:\n        while n > 3:\n            if n-1 > 3:\n                Total = Total + 2*(n-2) + 3*(n-3)\n            elif n-2 > 3:\n                Total = Total + 3*(n-3)\n            elif n-3 > 3:\n                Total = Total\n            else:\n                Total = Total + (n-1) + 2*(n-2) + 3*(n-3)\n            n -= 1\n        return Total\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","12","","# Error: expected","#     22","# but got","#     12","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":64,"studentId":0,"date":null,"diff":"\r\nInputObject                    SideIndicator\r\n-----------                    -------------\r\n            while counter < 4: =>           \r\n            while counter < 3: <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    base, base_1 = 0, 0\n    counter, counter_1 = 2, 1\n    orig = 5\n\n    if n>3:\n        n = n - 1 # n = 4\n        m = n\n        if n == 4:\n            while counter_1 < 4:\n                add_this_1 = (counter_1)*(n-1)\n                base_1 = base_1 + add_this_1\n                counter_1 = counter_1 + 1\n                n = n - 1\n            while counter < 3:\n                add_this = counter*(m-1) #\n                base = base + add_this\n                counter = counter + 1\n                m = m - 1\n        else:\n            counter = 1\n            while counter < 4:\n                add_this = counter*(m) #\n                base = base + add_this\n                counter = counter + 1\n                m = m - 1 \n        return base + base_1\n    else:\n        return n                                \n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    base, base_1 = 0, 0\n    counter, counter_1 = 2, 1\n    orig = 5\n\n    if n>3:\n        n = n - 1 # n = 4\n        m = n\n        if n == 4:\n            while counter_1 < 4:\n                add_this_1 = (counter_1)*(n-1)\n                base_1 = base_1 + add_this_1\n                counter_1 = counter_1 + 1\n                n = n - 1\n            while counter < 4:\n                add_this = counter*(m-1) #\n                base = base + add_this\n                counter = counter + 1\n                m = m - 1\n        else:\n            counter = 1\n            while counter < 4:\n                add_this = counter*(m) #\n                base = base + add_this\n                counter = counter + 1\n                m = m - 1 \n        return base + base_1\n    else:\n        return n                                \n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","16","","# Error: expected","#     22","# but got","#     16","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":65,"studentId":0,"date":null,"diff":"\r\nInputObject                                   SideIndicator\r\n-----------                                   -------------\r\n        k1, k2, k3 = k2, k3, 3*k1 + 2*k2 + k3 =>           \r\n        k1, k2, k3 = 3*k1 + 2*k2 + k3         <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    k1, k2, k3 = 1, 2, 3\n    while n > 3:\n        k1, k2, k3 = 3*k1 + 2*k2 + k3\n        n = n-1\n    return k3\n    \n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    k1, k2, k3 = 1, 2, 3\n    while n > 3:\n        k1, k2, k3 = k2, k3, 3*k1 + 2*k2 + k3\n        n = n-1\n    return k3\n    \n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 223, in g_iter","    k1, k2, k3 = 3*k1 + 2*k2 + k3","TypeError: 'int' object is not iterable","","# Error: expected","#     10","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":66,"studentId":0,"date":null,"diff":"\r\nInputObject                                             SideIndicator\r\n-----------                                             -------------\r\n        first,sec,third=sec,third,(third+2*sec+3*first) =>           \r\n        first=sec                                       <=           \r\n        sec=third                                       <=           \r\n        third=first+2*third+3*sec                       <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count=1\n    if n<=3:\n        return n \n    first=1\n    sec=2\n    third=3\n    while n>3:\n        first=sec\n        sec=third\n        third=first+2*third+3*sec\n        n-=1\n    return third\n\n\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count=1\n    if n<=3:\n        return n \n    first=1\n    sec=2\n    third=3\n    while n>3:\n        first,sec,third=sec,third,(third+2*sec+3*first)\n        n-=1\n    return third\n\n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","17","","# Error: expected","#     10","# but got","#     17","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":67,"studentId":0,"date":null,"diff":"\r\nInputObject                     SideIndicator\r\n-----------                     -------------\r\n        for i in range(4, n+1): =>           \r\n        for i in range(4, n-3): <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    a = 1\n    b = 2\n    c = 3\n    if n<= 3:\n        return n\n    else:\n        for i in range(4, n-3):\n            a, b, c =b, c, 3*a + 2*b + c\n    return c\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    a = 1\n    b = 2\n    c = 3\n    if n<= 3:\n        return n\n    else:\n        for i in range(4, n+1):\n            a, b, c =b, c, 3*a + 2*b + c\n    return c\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","3","","# Error: expected","#     10","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":68,"studentId":0,"date":null,"diff":"\r\nInputObject       SideIndicator\r\n-----------       -------------\r\n    while n >= k: =>           \r\n    while n != k: <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    k = 4\n    fk = 3\n    fk1 = 2\n    fk2 = 1\n    while n != k:\n        fk2, fk1, fk, k = fk1, fk, 2*fk1 + 3*fk2 + fk, k+1\n    return fk\n\n   \n    \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    k = 4\n    fk = 3\n    fk1 = 2\n    fk2 = 1\n    while n >= k:\n        fk2, fk1, fk, k = fk1, fk, 2*fk1 + 3*fk2 + fk, k+1\n    return fk\n\n   \n    \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","3","","# Error: expected","#     10","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":69,"studentId":0,"date":null,"diff":"\r\nInputObject                                          SideIndicator\r\n-----------                                          -------------\r\n    elif n > 4:                                      =>           \r\n        return (n-1) + 2 * (n-2) + 3 * (n-3) + (n+1) =>           \r\n        return (n-1) + 2 *(n-2) + 3 * (n-3)          =>           \r\n        return (n-1) + 2 * (n-2) + 3 * (n-3)         <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total = 0\n    if n <= 3:\n        return n\n    else:\n        return (n-1) + 2 * (n-2) + 3 * (n-3)\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total = 0\n    if n <= 3:\n        return n\n    elif n > 4:\n        return (n-1) + 2 * (n-2) + 3 * (n-3) + (n+1)\n    else:\n        return (n-1) + 2 *(n-2) + 3 * (n-3)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","16","","# Error: expected","#     22","# but got","#     16","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":70,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                SideIndicator\r\n-----------                                                                                -------------\r\n    counter=4                                                                              =>           \r\n                                                                                           =>           \r\n    id3=1                                                                                  =>           \r\n    id2=2                                                                                  =>           \r\n    id1=3                                                                                  =>           \r\n    while (counter<=n):                                                                    =>           \r\n        result= id1+ 2 * id2 + 3 * id3                                                     =>           \r\n        id3=id2                                                                            =>           \r\n        id2=id1                                                                            =>           \r\n        id1=result                                                                         =>           \r\n    return id1                                                                             =>           \r\n    counter=1                                                                              <=           \r\n    while (n-counter>=3):                                                                  <=           \r\n        if (n<=3):                                                                         <=           \r\n            total=total+n                                                                  <=           \r\n        else:                                                                              <=           \r\n            total=total+(n-counter)+ (n-counter-1)*(counter+1)+ (counter+2)* (n-counter-2) <=           \r\n        counter=counter+1                                                                  <=           \r\n    counter=0                                                                              <=           \r\n    while (n-counter)>3:                                                                   <=           \r\n        total=total- (n-counter)+ (n-counter-1)*(counter+1)+ (counter+2)* (n-counter-2)    <=           \r\n    return total                                                                           <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n\n    total=0\n    counter=1\n    if (n<=3):\n        return n\n    while (n-counter>=3):\n        if (n<=3):\n            total=total+n\n        else:\n            total=total+(n-counter)+ (n-counter-1)*(counter+1)+ (counter+2)* (n-counter-2)\n        counter=counter+1\n    counter=0\n    while (n-counter)>3:\n        total=total- (n-counter)+ (n-counter-1)*(counter+1)+ (counter+2)* (n-counter-2)\n        counter=counter+1\n    return total\n\n        # while (n>0):\n        #     while (n>3):\n        #         while (n-counter+1>3):\n        #                 total=total+(n-counter)+ (n-counter-1)*(counter+1)+ (counter+2)* (n-counter-2)\n        #                 counter=counter+1\n        #                 if (n-counter)>3:\n        #\n        #         n=n-1\n        #     n=n-1\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n\n    total=0\n    counter=4\n\n    if (n<=3):\n        return n\n    id3=1\n    id2=2\n    id1=3\n    while (counter<=n):\n        result= id1+ 2 * id2 + 3 * id3\n        id3=id2\n        id2=id1\n        id1=result\n        counter=counter+1\n    return id1\n\n        # while (n>0):\n        #     while (n>3):\n        #         while (n-counter+1>3):\n        #                 total=total+(n-counter)+ (n-counter-1)*(counter+1)+ (counter+2)* (n-counter-2)\n        #                 counter=counter+1\n        #                 if (n-counter)>3:\n        #\n        #         n=n-1\n        #     n=n-1\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","13","","# Error: expected","#     10","# but got","#     13","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":72,"studentId":0,"date":null,"diff":"\r\nInputObject                   SideIndicator\r\n-----------                   -------------\r\n        for i in range(3, n): =>           \r\n        for i in range(4, n): <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        g1, g2, g3 = 3, 2, 1\n        for i in range(4, n):\n           g1, g2, g3 = g1 + 2 * g2 + 3 * g3, g1, g2\n    return g1\n            \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        g1, g2, g3 = 3, 2, 1\n        for i in range(3, n):\n           g1, g2, g3 = g1 + 2 * g2 + 3 * g3, g1, g2\n    return g1\n            \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","3","","# Error: expected","#     10","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":73,"studentId":0,"date":null,"diff":"\r\nInputObject                     SideIndicator\r\n-----------                     -------------\r\n            fn=n-1              =>           \r\n            total+=(fn-i)*i     =>           \r\n                total+=(fn-x)*x =>           \r\n            n-=1                <=           \r\n            total+=(n-i)*i      <=           \r\n                total+=(n-x)*x  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total=0\n    if n<=3:\n        return n\n    for i in range(1,4):\n        if n-i<=3:\n            total+=(n-i)*i\n        else:\n            n-=1\n            total+=(n-i)*i\n            for x in range(2,4):\n                total+=(n-x)*x\n    return total\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total=0\n    if n<=3:\n        return n\n    for i in range(1,4):\n        if n-i<=3:\n            total+=(n-i)*i\n        else:\n            fn=n-1\n            total+=(fn-i)*i\n            for x in range(2,4):\n                total+=(fn-x)*x\n    return total\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","17","","# Error: expected","#     22","# but got","#     17","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":75,"studentId":0,"date":null,"diff":"\r\nInputObject       SideIndicator\r\n-----------       -------------\r\n        counter=5 =>           \r\n        counter=3 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n in [1,2,3]:\n        return n\n    else:\n        gn_1,gn_2,gn_3=3,2,1\n        gn=gn_1+2*gn_2+3*gn_3\n        counter=3\n        while n>=counter:\n            gn_1,gn_2,gn_3=gn,gn_1,gn_2\n            counter+=1\n            gn=gn_1+2*gn_2+3*gn_3\n    \n    return gn\n\n        \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n in [1,2,3]:\n        return n\n    else:\n        gn_1,gn_2,gn_3=3,2,1\n        gn=gn_1+2*gn_2+3*gn_3\n        counter=5\n        while n>=counter:\n            gn_1,gn_2,gn_3=gn,gn_1,gn_2\n            counter+=1\n            gn=gn_1+2*gn_2+3*gn_3\n    \n    return gn\n\n        \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","51","","# Error: expected","#     10","# but got","#     51","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":76,"studentId":0,"date":null,"diff":"\r\nInputObject            SideIndicator\r\n-----------            -------------\r\n    elif n==4:         =>           \r\n    elif n>4:          =>           \r\n        x=n-1          =>           \r\n        y=(n-2)*2      =>           \r\n        z=(n-3)*3      =>           \r\n        return x+y+z+6 =>           \r\n    else:              <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    else:\n        x=n-1\n        y=(n-2)*2\n        z=(n-3)*3\n        return x+y+z\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    elif n==4:\n        x=n-1\n        y=(n-2)*2\n        z=(n-3)*3\n        return x+y+z\n    elif n>4:\n        x=n-1\n        y=(n-2)*2\n        z=(n-3)*3\n        return x+y+z+6\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","16","","# Error: expected","#     22","# but got","#     16","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":77,"studentId":0,"date":null,"diff":"\r\nInputObject                                       SideIndicator\r\n-----------                                       -------------\r\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)       =>           \r\n    if n<=3:                                      =>           \r\n        return n                                  =>           \r\n    g1, g2, g3 = 1, 2, 3                          =>           \r\n    for i in range(4, n+1):                       =>           \r\n        g1, g2, g3 = g2, g3, g1 * 3 + g2 * 2 + g3 =>           \r\n    return g3                                     =>           \r\n        total=g(n-1) + 2*g(n-2) + 3*g(n-3)        <=           \r\n        return total                              <=           \r\n    i=0                                           <=           \r\n    total=0                                       <=           \r\n    if n==1:                                      <=           \r\n        return 1                                  <=           \r\n    while i<n:                                    <=           \r\n        if i<=3:                                  <=           \r\n            total+=i                              <=           \r\n        else:                                     <=           \r\n            total+= 1*(i-1) + 2*(i-2) + 3*(i-3)   <=           \r\n        i+=1                                      <=           \r\n    return total                                  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    i=0\n    total=0\n    if n==1:\n        return 1\n    while i<n:\n        if i<=3:\n            total+=i\n        else:\n            total+= 1*(i-1) + 2*(i-2) + 3*(i-3)\n        i+=1\n    return total\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    g1, g2, g3 = 1, 2, 3\n    for i in range(4, n+1):\n        g1, g2, g3 = g2, g3, g1 * 3 + g2 * 2 + g3\n    return g3\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","1","","# Error: expected","#     2","# but got","#     1","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":78,"studentId":0,"date":null,"diff":"\r\nInputObject       SideIndicator\r\n-----------       -------------\r\n    while n > 3:  =>           \r\n    while n >= 3: <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \n    summed = n\n    first, second, third = 1, 2, 3\n    while n >= 3:\n        summed = 3 * first + 2 * second + third\n        first, second, third = second, third, summed\n        n -= 1\n    return summed\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \n    summed = n\n    first, second, third = 1, 2, 3\n    while n > 3:\n        summed = 3 * first + 2 * second + third\n        first, second, third = second, third, summed\n        n -= 1\n    return summed\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","10","","# Error: expected","#     3","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":80,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                                                \r\n-----------                                                                                                                \r\n                total += 3 + 2*2 + 3*1                                                                                     \r\n                total += 2*3 + 3*2                                                                                         \r\n                total += 2*(3 + 2*2 + 3*1)                                                                                 \r\n                total += (3 + 2*2 + 3*1) + 2*(3) + 3*2                                                                     \r\n                total += 3*(3 + 2*2 + 3*1)                                                                                 \r\n                total += 2*((3 + 2*2 + 3*1) + 2*3 + 3*2)                                                                   \r\n                total += (((3 + 2*2 +3*1) + 2*3 + 3*2) + 2*(3 + 2*2 + 3*1) + 3*3) + 2*((3 + 2*2 + 3*1) + 2*3 + 3*2) + 3*...\r\n                total += (x - 1) + 2(x - 2) + 3(x - 3)                                                                     \r\n                total += 12                                                                                                \r\n                total += 20                                                                                                \r\n                total += 22                                                                                                \r\n                total += 30                                                                                                \r\n                total += 44                                                                                                \r\n                total += 22                                                                                                \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    x = n - 1\n    y = n - 2\n    z = n - 3\n    if n <= 3:\n        return n\n    if n > 3:\n        while x >= 3:\n            if x <= 3 and y <= 3 and z <= 3:\n                total += (x) + 2*(y) + 3*(z)\n                return total\n            if x == 4:\n                total += (x - 1) + 2(x - 2) + 3(x - 3)\n                total += 12\n                x, y, z = 0, 0, 0\n            if y == 4:\n                total += 20\n                total += 9\n                total += 22\n                x, y, z = 0, 0, 0\n            if z == 4:\n                total += 30\n                total += 44\n                total += 22\n                x, y, z = 0, 0, 0\n        return total            \n                                    \n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    x = n - 1\n    y = n - 2\n    z = n - 3\n    if n <= 3:\n        return n\n    if n > 3:\n        while x >= 3:\n            if x <= 3 and y <= 3 and z <= 3:\n                total += (x) + 2*(y) + 3*(z)\n                return total\n            if x == 4:\n                total += 3 + 2*2 + 3*1\n                total += 2*3 + 3*2\n                x, y, z = 0, 0, 0\n            if y == 4:\n                total += 2*(3 + 2*2 + 3*1)\n                total += 9\n                total += (3 + 2*2 + 3*1) + 2*(3) + 3*2\n                x, y, z = 0, 0, 0\n            if z == 4:\n                total += 3*(3 + 2*2 + 3*1)\n                total += 2*((3 + 2*2 + 3*1) + 2*3 + 3*2)\n                total += (((3 + 2*2 +3*1) + 2*3 + 3*2) + 2*(3 + 2*2 + 3*1) + 3*3) + 2*((3 + 2*2 + 3*1) + 2*3 + 3*2) + 3*(3 + 2*2 + 3*1)\n                x, y, z = 0, 0, 0\n        return total            \n                                    \n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 232, in g_iter","    total += (x - 1) + 2(x - 2) + 3(x - 3)","TypeError: 'int' object is not callable","","# Error: expected","#     22","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":82,"studentId":0,"date":null,"diff":"\r\nInputObject                            SideIndicator\r\n-----------                            -------------\r\n    first=1                            =>           \r\n    second=2                           =>           \r\n    third=3                            =>           \r\n    counter=n-3                        =>           \r\n    while(counter>0):                  =>           \r\n        total= 3*first+2*second+third  =>           \r\n        first=second                   =>           \r\n        second=third                   =>           \r\n        third=total                    =>           \r\n        counter-=1                     =>           \r\n                                       =>           \r\n                                       =>           \r\n    counter=0                          <=           \r\n    total=0                            <=           \r\n    while(counter<n):                  <=           \r\n        if counter==0:                 <=           \r\n            total+=(n-counter)         <=           \r\n            counter+=1                 <=           \r\n        else:                          <=           \r\n            total+=counter*(n-counter) <=           \r\n            counter+=1                 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n\n    counter=0\n    total=0\n    while(counter<n):\n        if counter==0:\n            total+=(n-counter)\n            counter+=1\n        else:\n            total+=counter*(n-counter)\n            counter+=1\n    return total\n        \n        \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n\n    first=1\n    second=2\n    third=3\n    counter=n-3\n    while(counter>0):\n        total= 3*first+2*second+third\n        first=second\n        second=third\n        third=total\n        counter-=1\n\n        \n    return total\n        \n        \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","14","","# Error: expected","#     10","# but got","#     14","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":83,"studentId":0,"date":null,"diff":"\r\nInputObject            SideIndicator\r\n-----------            -------------\r\n    a, b, c = 1, 2, 3  =>           \r\n    while n > 3:       =>           \r\n    a, b, c = -1, 0, 1 <=           \r\n    while n > 1:       <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a, b, c = -1, 0, 1\n    if n <= 3:\n        return n \n    while n > 1:\n        a,b,c = b, c, 3*a + 2*b + c\n        n = n-1               \n    return(c)\n        \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a, b, c = 1, 2, 3\n    if n <= 3:\n        return n \n    while n > 3:\n        a,b,c = b, c, 3*a + 2*b + c\n        n = n-1               \n    return(c)\n        \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","-1","","# Error: expected","#     10","# but got","#     -1","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":85,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n            return value1 + 2*(n-1) + 3*(n-2)  =>           \r\n            value = value1 + 2*(n-1) + 3*(n-2) <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    value = n\n    while n > 3:\n        n -= 1\n        value1 = (n-1) + 2*(n-2) + 3*(n-3)\n        value2 = 2*((n-2) + 2*(n-3) + 3*(n-4))\n        value3 = 3*((n-3) + 2*(n-4) + 3*(n-5))\n        if n > 3:\n            value = value1 + 2*(n-1) + 3*(n-2)\n        elif (n-1) > 3:\n            value = value1 + value2 + 3*(n-2)\n        elif (n-2) > 3:\n            value = value1 + value2 + value3\n        else:\n            value = n + 2*(n-1) + 3*(n-2)\n    return value\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    value = n\n    while n > 3:\n        n -= 1\n        value1 = (n-1) + 2*(n-2) + 3*(n-3)\n        value2 = 2*((n-2) + 2*(n-3) + 3*(n-4))\n        value3 = 3*((n-3) + 2*(n-4) + 3*(n-5))\n        if n > 3:\n            return value1 + 2*(n-1) + 3*(n-2)\n        elif (n-1) > 3:\n            value = value1 + value2 + 3*(n-2)\n        elif (n-2) > 3:\n            value = value1 + value2 + value3\n        else:\n            value = n + 2*(n-1) + 3*(n-2)\n    return value\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","10","","# Error: expected","#     22","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":86,"studentId":0,"date":null,"diff":"\r\nInputObject SideIndicator\r\n----------- -------------\r\n    a = 1   =>           \r\n    a = 0   <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a = 0\n    # if n <=3:\n    #     return n\n    # elif n > 3:\n    g1, g2, g3 = 3, 2, 1\n    while a < n:\n        g1, g2, g3 = g1 + 2*g2 + 3*g3, g1, g2\n        a += 1\n    return g3\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a = 1\n    # if n <=3:\n    #     return n\n    # elif n > 3:\n    g1, g2, g3 = 3, 2, 1\n    while a < n:\n        g1, g2, g3 = g1 + 2*g2 + 3*g3, g1, g2\n        a += 1\n    return g3\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","2","","# Error: expected","#     1","# but got","#     2","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":87,"studentId":0,"date":null,"diff":"\r\nInputObject                       SideIndicator\r\n-----------                       -------------\r\n            z, y, x = value, z, y =>           \r\n            z, y, x = value, x, y <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    if n <= 3:\n        return n\n    else: \n        value = 0\n        x = 1\n        y = 2\n        z = 3\n        i = 4\n        while i <= n:\n            value = z + 2 * y + 3 * x\n            z, y, x = value, x, y\n            i += 1\n    return value\n\n\n    #for loop\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    if n <= 3:\n        return n\n    else: \n        value = 0\n        x = 1\n        y = 2\n        z = 3\n        i = 4\n        while i <= n:\n            value = z + 2 * y + 3 * x\n            z, y, x = value, z, y\n            i += 1\n    return value\n\n\n    #for loop\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","18","","# Error: expected","#     22","# but got","#     18","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":88,"studentId":0,"date":null,"diff":"\r\nInputObject SideIndicator\r\n----------- -------------\r\n    i=3     =>           \r\n    i=2     <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    #def fib(n):\n    #\tif n <= 1:\n    #\t\treturn n\n    #\tcurrent = 1\n    #\tprevious = 0\n    #\tn -= 1\n    #\twhile n > 0:\n    #\t\tprevious, current = current, current + previous\n    #\treturn current\n    #Sequence: 1 2 3 10 22 51 105\n    #10 = (3)*1 + (2)*2  + 3\n    #22 = (3)*2 + (2)*3  + 10\n    #51 = (3)*3 + (2)*10 + 22\n    if n <= 3:\n    \treturn n\n    a,b,c=1,2,3\n    i=2\n    while i<n:\n    \ta, b, c = b, c, 3*a+2*b+c\n    \ti+=1\n    return c\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    #def fib(n):\n    #\tif n <= 1:\n    #\t\treturn n\n    #\tcurrent = 1\n    #\tprevious = 0\n    #\tn -= 1\n    #\twhile n > 0:\n    #\t\tprevious, current = current, current + previous\n    #\treturn current\n    #Sequence: 1 2 3 10 22 51 105\n    #10 = (3)*1 + (2)*2  + 3\n    #22 = (3)*2 + (2)*3  + 10\n    #51 = (3)*3 + (2)*10 + 22\n    if n <= 3:\n    \treturn n\n    a,b,c=1,2,3\n    i=3\n    while i<n:\n    \ta, b, c = b, c, 3*a+2*b+c\n    \ti+=1\n    return c\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","22","","# Error: expected","#     10","# but got","#     22","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":89,"studentId":0,"date":null,"diff":"\r\nInputObject                             SideIndicator\r\n-----------                             -------------\r\n    i = 3                               =>           \r\n            prev2, prev3 = prev1, prev2 =>           \r\n            i += 1                      =>           \r\nimport ctypes                           <=           \r\nfrom ctypes import cdll                 <=           \r\nc_funcs = cdll.LoadLibrary(\"hide_ast\")  <=           \r\ncompute_g = c_funcs.g                   <=           \r\ncompute_g.argtypes = [ctypes.c_int]     <=           \r\n    i = 1                               <=           \r\n            prev2 = prev1               <=           \r\n            prev3 = prev2               <=           \r\n            i += 3                      <=           \r\n                                        <=           \r\n                                        <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    prev3 = 1\n    prev2 = 2\n    prev1 = 3\n\n    i = 1\n    if n <= 3:\n        return n\n    else:\n        while i < n:\n            res = prev1 + 2 * prev2 + 3 * prev3\n            prev2 = prev1\n            prev3 = prev2\n            prev1 = res\n            i += 3\n\n        return prev1\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    prev3 = 1\n    prev2 = 2\n    prev1 = 3\n\n    i = 3\n    if n <= 3:\n        return n\n    else:\n        while i < n:\n            res = prev1 + 2 * prev2 + 3 * prev3\n            prev2, prev3 = prev1, prev2\n            prev1 = res\n            i += 1\n\n        return prev1\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 174, in <module>","    c_funcs = cdll.LoadLibrary(\"hide_ast\")","  File \"C:\\Users\\Gustavo\\Anaconda3\\lib\\ctypes\\__init__.py\", line 425, in LoadLibrary","    return self._dlltype(name)","  File \"C:\\Users\\Gustavo\\Anaconda3\\lib\\ctypes\\__init__.py\", line 347, in __init__","    self._handle = _dlopen(self._name, mode)","OSError: [WinError 126] The specified module could not be found","","Error loading assignment: Error importing file hw02.py"]},{"Id":90,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n            total = third + 2*second + 3*first  =>           \r\n            total += third + 2*second + 3*first <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    k = 3\n    total = 0\n    first, second, third = 1, 2, 3 \n    if n <= 3:\n        return n\n    else:\n        while k < n:\n\n            total += third + 2*second + 3*first\n            third, second, first = total, third, second\n            k += 1\n        return total\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    k = 3\n    total = 0\n    first, second, third = 1, 2, 3 \n    if n <= 3:\n        return n\n    else:\n        while k < n:\n\n            total = third + 2*second + 3*first\n            third, second, first = total, third, second\n            k += 1\n        return total\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","32","","# Error: expected","#     22","# but got","#     32","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":92,"studentId":0,"date":null,"diff":"\r\nInputObject                     SideIndicator\r\n-----------                     -------------\r\n        two_before+=1           =>           \r\n        three_before+=1         =>           \r\n        two_before=one_before   <=           \r\n        three_before=two_before <=           \r\n                                <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    total=0\n    x=4\n    one_before=3\n    two_before=2\n    three_before=1\n    while x<n+1:\n        one_before+=2*two_before+3*three_before\n        two_before=one_before\n        three_before=two_before\n\n        x+=1\n    return one_before\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    total=0\n    x=4\n    one_before=3\n    two_before=2\n    three_before=1\n    while x<n+1:\n        one_before+=2*two_before+3*three_before\n        two_before+=1\n        three_before+=1\n        x+=1\n    return one_before\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","60","","# Error: expected","#     22","# but got","#     60","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":93,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n    x, y, z = 1, 2, 3 =>           \r\n    x, y, z = 0, 0, 3 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    if n == 1 or n == 2 or n == 3:\n        return n\n    \n    x, y, z = 0, 0, 3\n    \n    while n > 3:\n        x, y, z = y, z, z + 2*y + 3*x\n        n -= 1\n    return z\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    if n == 1 or n == 2 or n == 3:\n        return n\n    \n    x, y, z = 1, 2, 3\n    \n    while n > 3:\n        x, y, z = y, z, z + 2*y + 3*x\n        n -= 1\n    return z\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","3","","# Error: expected","#     10","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":94,"studentId":0,"date":null,"diff":"\r\nInputObject                                                   SideIndicator\r\n-----------                                                   -------------\r\n            finalAnswer = PREV + 2*PREVPREV + 3*PREVPREVPREV  =>           \r\n            finalAnswer += PREV + 2*PREVPREV + 3*PREVPREVPREV <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    finalAnswer = 0\n    PREVPREVPREV = 1\n    PREVPREV = 2\n    PREV = 3\n    if n <= 3:\n        return n\n    else:\n        for k in range(4,n+1):\n            finalAnswer += PREV + 2*PREVPREV + 3*PREVPREVPREV\n            PREVPREVPREV = PREVPREV\n            PREVPREV = PREV\n            PREV = finalAnswer\n\n    return finalAnswer\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    finalAnswer = 0\n    PREVPREVPREV = 1\n    PREVPREV = 2\n    PREV = 3\n    if n <= 3:\n        return n\n    else:\n        for k in range(4,n+1):\n            finalAnswer = PREV + 2*PREVPREV + 3*PREVPREVPREV\n            PREVPREVPREV = PREVPREV\n            PREVPREV = PREV\n            PREV = finalAnswer\n\n    return finalAnswer\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","32","","# Error: expected","#     22","# but got","#     32","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":96,"studentId":0,"date":null,"diff":"\r\nInputObject                                       SideIndicator\r\n-----------                                       -------------\r\n    return True                                   =>           \r\n    'need to find n%7==0'                         =>           \r\n    def pingup(count, value):                     =>           \r\n        n -= 1                                    =>           \r\n        if n == 0:                                =>           \r\n            return value                          =>           \r\n        elif count % 7 == 0:                      =>           \r\n            return pingdown(count + 1, value - 1) =>           \r\n        elif has_seven(count):                    =>           \r\n            return pingdown(count + 1, value - 1) =>           \r\n        else:                                     =>           \r\n            return pingup(count + 1, value + 1)   =>           \r\n    def pingdown(count, value):                   =>           \r\n        n -= 1                                    =>           \r\n        if n == 0:                                =>           \r\n            return value                          =>           \r\n        elif count % 7 == 0:                      =>           \r\n            return pingup(count + 1, value + 1)   =>           \r\n        elif has_seven(count):                    =>           \r\n            return pingdown(count + 1, value + 1) =>           \r\n        else:                                     =>           \r\n            return pingup(count + 1, value - 1)   =>           \r\n    return pingup(1, 1)                           =>           \r\n    # def pingup(a):                              =>           \r\n    #     a = 1                                   =>           \r\n    #     has_seven(a) == True                    =>           \r\n    #     print(a)                                =>           \r\n    # def pingdown(b):                            =>           \r\n    #     b = pingup(a)                           =>           \r\n    #     while has_seven(b) == True :            =>           \r\n    #         b = b - 1                           =>           \r\n    #     print(b)                                =>           \r\n    return True                                   =>           \r\n                                                  =>           \r\n                                                  =>           \r\n                                                  =>           \r\n                                                  =>           \r\n                                                  =>           \r\n                                                  =>           \r\n                                                  =>           \r\n                                                  =>           \r\n                                                  =>           \r\n                                                  =>           \r\n    return                                        <=           \r\n        print(i)                                  <=           \r\n    \"*** YOUR CODE HERE ***\"                      <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total, i = 0, 4\n    a, b, c = 3, 2, 1\n    if n <= 3:\n        return n\n    for i in range(3, n):\n        print(i)\n        total = a + 2*b + 3*c\n        a, b, c = total, a, b\n    return total\n    # i = 1\n    \n    # total = 0 \n    # if n <= 3 :\n    #     return n\n    # while i <= 3:\n    #     total = total + i * (n - i)\n    #     i +=1\n    # return total\n    \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total, i = 0, 4\n    a, b, c = 3, 2, 1\n    if n <= 3:\n        return n\n    for i in range(3, n):\n        total = a + 2*b + 3*c\n        a, b, c = total, a, b\n    return total\n    # i = 1\n    \n    # total = 0 \n    # if n <= 3 :\n    #     return n\n    # while i <= 3:\n    #     total = total + i * (n - i)\n    #     i +=1\n    # return total\n    \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","3","10","","# Error: expected","#     10","# but got","#     3","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":97,"studentId":0,"date":null,"diff":"\r\nInputObject   SideIndicator\r\n-----------   -------------\r\n    return i3 =>           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    counter=3\n    i1=1\n    i2=2\n    i3=3\n    while counter<n:\n        counter+=1\n        x=i3\n        y=i2\n        i3=i3+2*i2+3*i1\n        i2=x\n        i1=y\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    counter=3\n    i1=1\n    i2=2\n    i3=3\n    while counter<n:\n        counter+=1\n        x=i3\n        y=i2\n        i3=i3+2*i2+3*i1\n        i2=x\n        i1=y\n    return i3\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","","# Error: expected","#     10","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":98,"studentId":0,"date":null,"diff":"\r\nInputObject                       SideIndicator\r\n-----------                       -------------\r\n        g = a + (2 * b) + (3 * c) =>           \r\n        a = g                     =>           \r\n    return g                      =>           \r\n        a = a + (2 * b) + (3 * c) <=           \r\n    return a                      <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    a = 3\n    b = 2\n    c = 1\n    while n > 3:\n        a = a + (2 * b) + (3 * c)\n        c = b\n        b = a\n        n = n - 1\n    return a\n\n\n\n\n    # current = 1\n    # next = 2    \n    #     current = next\n    #     next = current + 2 * next\n    #     n = n-1\n    # return current\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    a = 3\n    b = 2\n    c = 1\n    while n > 3:\n        g = a + (2 * b) + (3 * c)\n        c = b\n        b = a\n        a = g\n        n = n - 1\n    return g\n\n\n\n\n    # current = 1\n    # next = 2    \n    #     current = next\n    #     next = current + 2 * next\n    #     n = n-1\n    # return current\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","36","","# Error: expected","#     22","# but got","#     36","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":99,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n        a,b,c=b,c,c+2*b+3*a                    =>           \r\n    def helper(k,j,inc):                       =>           \r\n        if(inc>0):                             =>           \r\n            if(k==n):                          =>           \r\n                return j                       =>           \r\n            if(k%10==7):                       =>           \r\n                return helper(k+1,j-1,-1*inc)  =>           \r\n            if(k%7==0):                        =>           \r\n                return helper(k+1,j-1,-1*inc)  =>           \r\n            return helper(k+1,j+1,inc)         =>           \r\n        else:                                  =>           \r\n            if(k==n):                          =>           \r\n                return j                       =>           \r\n            if(k%10==7):                       =>           \r\n                return helper(k+1,j+11,-1*inc) =>           \r\n            if(k%7==0):                        =>           \r\n                return helper(k+1,j+11,-1*inc) =>           \r\n            return helper(k+1,j-1,inc)         =>           \r\n    return helper(1,1,1)                       =>           \r\n        a,b,c=b,c,c+2*b+2*a                    <=           \r\n    \"*** YOUR CODE HERE ***\"                   <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a=1\n    b=2\n    c=3\n    if(n<=3):\n        return n\n    for i in range(4,n+1):\n        a,b,c=b,c,c+2*b+2*a\n    return c\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a=1\n    b=2\n    c=3\n    if(n<=3):\n        return n\n    for i in range(4,n+1):\n        a,b,c=b,c,c+2*b+3*a\n    return c\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","9","","# Error: expected","#     10","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":100,"studentId":0,"date":null,"diff":"\r\nInputObject        SideIndicator\r\n-----------        -------------\r\n        return n   =>           \r\n        total += n <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        total += n\n    else:\n        a,b,c = 1,2,3\n        for i in range(3, n):\n            a,b,c = b,c, (3*a + 2*b + c)\n        return c\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        a,b,c = 1,2,3\n        for i in range(3, n):\n            a,b,c = b,c, (3*a + 2*b + c)\n        return c\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 209, in g_iter","    total += n","UnboundLocalError: local variable 'total' referenced before assignment","","# Error: expected","#     1","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":101,"studentId":0,"date":null,"diff":"\r\nInputObject    SideIndicator\r\n-----------    -------------\r\n        i += 1 =>           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    i = 3\n    x = 1\n    y = 2\n    z = 3\n    if n < 3:\n        return n\n    while i < n:\n        x, y, z = y, z, z + 2*y + 3*x\n    return z\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    i = 3\n    x = 1\n    y = 2\n    z = 3\n    if n < 3:\n        return n\n    while i < n:\n        x, y, z = y, z, z + 2*y + 3*x\n        i += 1\n    return z\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     10","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":102,"studentId":0,"date":null,"diff":"\r\nInputObject                                                 SideIndicator\r\n-----------                                                 -------------\r\n        gn0, gn1, gn2, gn3 = gn0+2*gn1+3*gn2, gn0, gn1, gn2 =>           \r\n        gn0, gn1, gn2, gn3 = gn1+2*gn2+3*gn3, gn0, gn1, gn2 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    k = 3\n    gn0, gn1, gn2, gn3 = 3,2,1,0\n    while k<n:\n        k+=1\n        gn0, gn1, gn2, gn3 = gn1+2*gn2+3*gn3, gn0, gn1, gn2\n    return gn0\n    \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    k = 3\n    gn0, gn1, gn2, gn3 = 3,2,1,0\n    while k<n:\n        k+=1\n        gn0, gn1, gn2, gn3 = gn0+2*gn1+3*gn2, gn0, gn1, gn2\n    return gn0\n    \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","4","","# Error: expected","#     10","# but got","#     4","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":104,"studentId":0,"date":null,"diff":"\r\nInputObject                                                   SideIndicator\r\n-----------                                                   -------------\r\n    x = lambda z: z if z<=3 else x(z-1) + 2*x(z-2) + 3*x(z-3) =>           \r\n    x = lambda z: z if z<=3 else z(z-1) + 2*z(z-2) + 3*z(z-3) <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x = lambda z: z if z<=3 else z(z-1) + 2*z(z-2) + 3*z(z-3)\n    \n    return x(n)\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x = lambda z: z if z<=3 else x(z-1) + 2*x(z-2) + 3*x(z-3)\n    \n    return x(n)\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 210, in g_iter","    return x(n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 208, in <lambda>","    x = lambda z: z if z<=3 else z(z-1) + 2*z(z-2) + 3*z(z-3)","TypeError: 'int' object is not callable","","# Error: expected","#     10","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":105,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n        while n > 3:  =>           \r\n        while n >= 3: <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        x, y, z = 3, 2, 1\n        while n >= 3:\n            x, y, z = (x + (2 * y) + (3 * z)), x, y\n            n -= 1\n    return x\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        x, y, z = 3, 2, 1\n        while n > 3:\n            x, y, z = (x + (2 * y) + (3 * z)), x, y\n            n -= 1\n    return x\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","22","","# Error: expected","#     10","# but got","#     22","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":106,"studentId":0,"date":null,"diff":"\r\nInputObject                        SideIndicator\r\n-----------                        -------------\r\n    a, b, c = 1, 2, 3              =>           \r\n    if n<=3:                       =>           \r\n        i = 4                      =>           \r\n        while(i<n+1):              =>           \r\n            holder = a*3+b*2+c     =>           \r\n            a, b, c = b, c, holder =>           \r\n            i += 1                 =>           \r\n        return c                   =>           \r\n    else:                          =>           \r\n    if n <= 3:                     <=           \r\n    g1 = 1                         <=           \r\n    g2 = 2                         <=           \r\n    g3 = 3                         <=           \r\n    for x in range(n-3, n+1):      <=           \r\n        result = g3 + 2*g3 + 3*g2  <=           \r\n    return result                  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \n    if n <= 3:\n        return n\n    g1 = 1\n    g2 = 2\n    g3 = 3\n    for x in range(n-3, n+1):\n        result = g3 + 2*g3 + 3*g2\n    return result\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \n    a, b, c = 1, 2, 3\n    if n<=3:\n        return n\n    else:\n        i = 4\n        while(i<n+1):\n            holder = a*3+b*2+c\n            a, b, c = b, c, holder\n            i += 1\n        return c\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","15","","# Error: expected","#     10","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":107,"studentId":0,"date":null,"diff":"\r\nInputObject                                             SideIndicator\r\n-----------                                             -------------\r\n        two_ahead, one_ahead, current = 1, 2, 3         =>           \r\n        two_ahead, one_ahead, current = k, k + 1, k + 2 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        k = 3\n        two_ahead, one_ahead, current = k, k + 1, k + 2\n        while k < n:\n            two_ahead, one_ahead, current = one_ahead, current, current + one_ahead * 2 + two_ahead * 3\n            k += 1\n        return current\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        k = 3\n        two_ahead, one_ahead, current = 1, 2, 3\n        while k < n:\n            two_ahead, one_ahead, current = one_ahead, current, current + one_ahead * 2 + two_ahead * 3\n            k += 1\n        return current\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","22","","# Error: expected","#     10","# but got","#     22","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":108,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n            if n - 1 <= 3: =>           \r\n            if n - 2 <= 3: <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n    G(n) = n                                if n <= 3\n    G(n) = G(n-1) + 2*G(n-2) + 3*G(n-3)     if n > 3\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \"\"\"\n    total = 0\n    while n > 3:\n        total += 0\n        n -= 1\n    if n == 3:\n        total += 3\n        n -= 1\n    elif n == 2:\n        total += 2\n        n -= 1\n    elif n == 1:\n        total += 1\n \n    return total  \n    \"\"\"\n    total = 0\n    if n <= 3:\n        return n\n    while n > 3:\n        if n == 4:\n            if n - 3 <= 3:\n                total += 3 * (n - 3)\n            if n - 2 <= 3:\n                total += 2 * (n - 2)\n            if n - 1 <= 3:\n                total += n - 1\n            return total\n        else:\n            if n - 3 <= 3:\n                total += 3 * (n - 3)\n            if n - 2 <= 3:\n                total += 2 * (n - 2)\n            if n - 2 <= 3:\n                total += n - 1\n            n -= 1\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n    G(n) = n                                if n <= 3\n    G(n) = G(n-1) + 2*G(n-2) + 3*G(n-3)     if n > 3\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \"\"\"\n    total = 0\n    while n > 3:\n        total += 0\n        n -= 1\n    if n == 3:\n        total += 3\n        n -= 1\n    elif n == 2:\n        total += 2\n        n -= 1\n    elif n == 1:\n        total += 1\n \n    return total  \n    \"\"\"\n    total = 0\n    if n <= 3:\n        return n\n    while n > 3:\n        if n == 4:\n            if n - 3 <= 3:\n                total += 3 * (n - 3)\n            if n - 2 <= 3:\n                total += 2 * (n - 2)\n            if n - 1 <= 3:\n                total += n - 1\n            return total\n        else:\n            if n - 3 <= 3:\n                total += 3 * (n - 3)\n            if n - 2 <= 3:\n                total += 2 * (n - 2)\n            if n - 1 <= 3:\n                total += n - 1\n            n -= 1\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","26","","# Error: expected","#     22","# but got","#     26","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":109,"studentId":0,"date":null,"diff":"\r\nInputObject                                                     SideIndicator\r\n-----------                                                     -------------\r\n        total += (check(x, 1) + 2*check(x, 2) + 3*check(x, 3))  =>           \r\n        total += (check(n, 1) + 2*check(n, 2) + 3*check(n, 3))  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    def check(n, decrement):\n        if n - decrement <=3:\n            return n - decrement\n        elif n - decrement <= 0:\n            return 0\n        else:\n            return 0\n\n    total = 0\n\n    x= n\n    while x > 3:\n        total += (check(n, 1) + 2*check(n, 2) + 3*check(n, 3)) \n        x -= 1\n\n    if n <=3:\n        total = n\n\n    return total\n\n    \n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    def check(n, decrement):\n        if n - decrement <=3:\n            return n - decrement\n        elif n - decrement <= 0:\n            return 0\n        else:\n            return 0\n\n    total = 0\n\n    x= n\n    while x > 3:\n        total += (check(x, 1) + 2*check(x, 2) + 3*check(x, 3)) \n        x -= 1\n\n    if n <=3:\n        total = n\n\n    return total\n\n    \n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","24","","# Error: expected","#     22","# but got","#     24","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":110,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n        for i in range(4,n+1):              =>           \r\n            l.append(l[-1]+2*l[-2]+3*l[-3]) =>           \r\n        for i in range(4,n):                <=           \r\n            l.append(l[-1]+l[-2]+l[-3])     <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    l=[1,2,3]\n    if n<=3:\n        return n\n    else:\n        for i in range(4,n):\n            l.append(l[-1]+l[-2]+l[-3])\n    return l[-1]\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    l=[1,2,3]\n    if n<=3:\n        return n\n    else:\n        for i in range(4,n+1):\n            l.append(l[-1]+2*l[-2]+3*l[-3])\n    return l[-1]\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","3","","# Error: expected","#     10","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":111,"studentId":0,"date":null,"diff":"\r\nInputObject                  SideIndicator\r\n-----------                  -------------\r\n                             =>           \r\n                             =>           \r\n                return total <=           \r\n                return total <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \n    if n <= 3:\n        return n\n    else:\n\n    \n        \n        i, total = n, 0\n        while i > 0:\n            if i-1 <= 3:\n                total += (i - 1) + 2 * (i - 2) + 3 * (i - 3)\n                return total\n            elif i-2 <= 3:\n                total += 2 * (i - 2) + 3 * (i - 3)\n                return total\n            elif i-3 <= 3:\n                total += 3 * (n - 3)\n                return total\n            i -= 1\n    return total\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \n    if n <= 3:\n        return n\n    else:\n\n    \n        \n        i, total = n, 0\n        while i > 0:\n            if i-1 <= 3:\n                total += (i - 1) + 2 * (i - 2) + 3 * (i - 3)\n                return total\n            elif i-2 <= 3:\n                total += 2 * (i - 2) + 3 * (i - 3)\n                \n            elif i-3 <= 3:\n                total += 3 * (n - 3)\n                \n            i -= 1\n    return total\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","12","","# Error: expected","#     22","# but got","#     12","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":112,"studentId":0,"date":null,"diff":"\r\nInputObject       SideIndicator\r\n-----------       -------------\r\n        n -= 1    =>           \r\n    return c      =>           \r\n        n = n - 1 <=           \r\n    return n      <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    a, b, c = 1, 2, 3\n    while n > 3:\n        a, b, c = b, c, c + 2 * b + 3 * a\n        n = n - 1\n    return n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    a, b, c = 1, 2, 3\n    while n > 3:\n        a, b, c = b, c, c + 2 * b + 3 * a\n        n -= 1\n    return c\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","3","","# Error: expected","#     10","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":113,"studentId":0,"date":null,"diff":"\r\nInputObject            SideIndicator\r\n-----------            -------------\r\n    return delta       =>           \r\n        total += delta <=           \r\n    return total       <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    i, total = 3, 0\n    g1, g2, g3 = 1, 2, 3\n    while i < n:\n        delta = 3*g1 + 2*g2 + g3\n        total += delta\n        g1, g2, g3 = g2, g3, delta\n        i += 1\n    return total\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    i, total = 3, 0\n    g1, g2, g3 = 1, 2, 3\n    while i < n:\n        delta = 3*g1 + 2*g2 + g3\n        g1, g2, g3 = g2, g3, delta\n        i += 1\n    return delta\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","32","","# Error: expected","#     22","# but got","#     32","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":114,"studentId":0,"date":null,"diff":"\r\nInputObject                                SideIndicator\r\n-----------                                -------------\r\n                                           =>           \r\n    g1, g2, g3 = 3, 2, 1                   =>           \r\n    i, current = 4, 0                      =>           \r\n    while i <= n:                          =>           \r\n        current = g1 + 2 * g2 + 3 * g3     =>           \r\n        g1, g2, g3 = current, g1, g2       =>           \r\n        i = i + 1                          =>           \r\n    return current                         =>           \r\n    elif n >=4:                            <=           \r\n        g1, g2, g3 = 3, 2, 1               <=           \r\n        i, current = 4, 0                  <=           \r\n        while i <= n:                      <=           \r\n            current = g1 + 2 * g2 + 3 * g3 <=           \r\n            g1, g2, g3 = current, g1, g2   <=           \r\n            i = i + 1                      <=           \r\n            return current                 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    n > 0\n    if n <= 3:\n        return n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n >=4:\n        g1, g2, g3 = 3, 2, 1\n        i, current = 4, 0\n        while i <= n:\n            current = g1 + 2 * g2 + 3 * g3\n            g1, g2, g3 = current, g1, g2\n            i = i + 1\n            return current\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    n > 0\n    if n <= 3:\n        return n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n\n    g1, g2, g3 = 3, 2, 1\n    i, current = 4, 0\n    while i <= n:\n        current = g1 + 2 * g2 + 3 * g3\n        g1, g2, g3 = current, g1, g2\n        i = i + 1\n    return current\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","10","","# Error: expected","#     22","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":115,"studentId":0,"date":null,"diff":"\r\nInputObject                           SideIndicator\r\n-----------                           -------------\r\n            value = z + y * 2 + x * 3 =>           \r\n            value = z + 2 * 2 + x * 3 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        x, y, z = 1, 2, 3\n        i = 4\n        while i <= n:\n            value = z + 2 * 2 + x * 3\n            x, y, z = y, z, value\n            i += 1\n    return value\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        x, y, z = 1, 2, 3\n        i = 4\n        while i <= n:\n            value = z + y * 2 + x * 3\n            x, y, z = y, z, value\n            i += 1\n    return value\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","20","","# Error: expected","#     22","# but got","#     20","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":117,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n            x_3 = x_curr =>           \r\n                         <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    x_1 = 1\n    x_2 = 2\n    x_3 = 3\n\n    i = 4\n    if n <= 3:\n        return n\n    else:\n        while (i <= n):\n            x_curr = x_3 + 2*x_2 + 3*x_1\n            x_1 = x_2\n            x_2 = x_3\n            i = i + 1\n        return x_curr\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    x_1 = 1\n    x_2 = 2\n    x_3 = 3\n\n    i = 4\n    if n <= 3:\n        return n\n    else:\n        while (i <= n):\n            x_curr = x_3 + 2*x_2 + 3*x_1\n            x_1 = x_2\n            x_2 = x_3\n            x_3 = x_curr\n            i = i + 1\n        return x_curr\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","15","","# Error: expected","#     22","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":118,"studentId":0,"date":null,"diff":"\r\nInputObject         SideIndicator\r\n-----------         -------------\r\n        while k<=n: =>           \r\n        while k<n:  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    k = 4\n    total = 0\n    if n <= 3:\n        return n\n    else:\n        one, two, three = k-1, k-2, k-3\n        while k<n:\n            if k >= 4:\n                total = one + 2*two + 3*three\n                one, two, three = total, one, two\n                k = k + 1\n            else:\n                k = k + 1\n    return total\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    k = 4\n    total = 0\n    if n <= 3:\n        return n\n    else:\n        one, two, three = k-1, k-2, k-3\n        while k<=n:\n            if k >= 4:\n                total = one + 2*two + 3*three\n                one, two, three = total, one, two\n                k = k + 1\n            else:\n                k = k + 1\n    return total\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","0","","# Error: expected","#     10","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":119,"studentId":0,"date":null,"diff":"\r\nInputObject                                                    SideIndicator\r\n-----------                                                    -------------\r\n    if n<= 3:                                                  =>           \r\n         return n                                              =>           \r\n        i, g1, g2, g3,=  0,1,2,3                               =>           \r\n        while i< n-3:                                          =>           \r\n            i, g1, g2, g3,=  i+1, g2, g3, g3+2*g2+3*g1         =>           \r\n        return g3                                              =>           \r\n    if n<=3:                                                   <=           \r\n        return n                                               <=           \r\n        def g2(x):                                             <=           \r\n            if x<= 3:                                          <=           \r\n                return x                                       <=           \r\n            else:                                              <=           \r\n                i, g1, g2, g3,=  0,1,2,3                       <=           \r\n                while i<= n:                                   <=           \r\n                    i, g1, g2, g3,=  i+1, g2, g3, g3+2*g2+3*g1 <=           \r\n                return g3                                      <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n \n    else:\n        def g2(x):\n            if x<= 3:\n                return x\n            else:\n                i, g1, g2, g3,=  0,1,2,3\n                while i<= n:\n                    i, g1, g2, g3,=  i+1, g2, g3, g3+2*g2+3*g1\n                return g3\n         \n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<= 3:\n         return n\n    else:\n        i, g1, g2, g3,=  0,1,2,3\n        while i< n-3:\n            i, g1, g2, g3,=  i+1, g2, g3, g3+2*g2+3*g1\n        return g3\n         \n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","","# Error: expected","#     10","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":120,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n    i, g1, g2, g3, sum = 4, 3, 2, 1, 3         =>           \r\n    def next_value(value, pos, dir):           =>           \r\n        if has_seven(value) or has_seven(pos): =>           \r\n            return value - dir                 =>           \r\n        else:                                  =>           \r\n            return value + dir                 =>           \r\n    return next_value(1, 1, 1)                 =>           \r\n                                               =>           \r\n                                               =>           \r\n    i, g1, g2, g3, sum = 4, 3, 2, 1, 0         <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i, g1, g2, g3, sum = 4, 3, 2, 1, 0\n    if n <= 3:\n        return n\n    while i <= n:\n        sum += 2 * g2 + 3 * g3\n        g1, g2, g3 = sum, g1, g2\n        i += 1\n    return sum\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i, g1, g2, g3, sum = 4, 3, 2, 1, 3\n    if n <= 3:\n        return n\n    while i <= n:\n        sum += 2 * g2 + 3 * g3\n        g1, g2, g3 = sum, g1, g2\n        i += 1\n    return sum\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","7","","# Error: expected","#     10","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":122,"studentId":0,"date":null,"diff":"\r\nInputObject                            SideIndicator\r\n-----------                            -------------\r\n        a, b, c = b, c, 3*a + 2*b + c  =>           \r\n        a, b, c = b, c, 3*a + 2*b +3*c <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"   \n    a,b,c,count = 1,2,3,3\n    if n <= 3:\n        return n\n    while count < n:\n        a, b, c = b, c, 3*a + 2*b +3*c\n        count += 1\n    return c\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"   \n    a,b,c,count = 1,2,3,3\n    if n <= 3:\n        return n\n    while count < n:\n        a, b, c = b, c, 3*a + 2*b + c\n        count += 1\n    return c\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","16","","# Error: expected","#     10","# but got","#     16","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":123,"studentId":0,"date":null,"diff":"\r\nInputObject                          SideIndicator\r\n-----------                          -------------\r\n        temp = c + (2 * b) + (3 * a) =>           \r\n        temp = c + (2 * b) + (3 * c) <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    a = 1\n    b = 2\n    c = 3\n    counter = 4\n    while counter <= n:\n        temp = c + (2 * b) + (3 * c)\n        a = b\n        b = c\n        c = temp\n        counter += 1\n    return c\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    a = 1\n    b = 2\n    c = 3\n    counter = 4\n    while counter <= n:\n        temp = c + (2 * b) + (3 * a)\n        a = b\n        b = c\n        c = temp\n        counter += 1\n    return c\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","16","","# Error: expected","#     10","# but got","#     16","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":124,"studentId":0,"date":null,"diff":"\r\nInputObject       SideIndicator\r\n-----------       -------------\r\n    return summed =>           \r\n    return total  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    summed = n\n    a, b, c = 1, 2, 3\n    while n > 3:\n        summed = 3 * a + 2 * b + c\n        a, b, c = b, c, summed\n        n -= 1\n    return total\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    summed = n\n    a, b, c = 1, 2, 3\n    while n > 3:\n        summed = 3 * a + 2 * b + c\n        a, b, c = b, c, summed\n        n -= 1\n    return summed\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 210, in g_iter","    return total","NameError: name 'total' is not defined","","# Error: expected","#     1","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":125,"studentId":0,"date":null,"diff":"\r\nInputObject                               SideIndicator\r\n-----------                               -------------\r\n        listy += n                        =>           \r\n                listy += (g(i) * (n-i))   =>           \r\n        return n                          <=           \r\n                listy += (g(i) * (n-i-1)) <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    listy = 0\n    if n <= 3:\n        return n\n    else:\n        for i in range(n)[-3::]:\n            if i == n or i == n-1:\n                listy +=g(i)\n            else:\n                listy += (g(i) * (n-i-1))\n    return listy\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    listy = 0\n    if n <= 3:\n        listy += n\n    else:\n        for i in range(n)[-3::]:\n            if i == n or i == n-1:\n                listy +=g(i)\n            else:\n                listy += (g(i) * (n-i))\n    return listy\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","7","","# Error: expected","#     10","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":126,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n        while fourth <= n: =>           \r\n        while fourth < n:  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        total = 0\n        first, second, third, fourth = 1, 2, 3, 4\n\n        while fourth < n:\n            total = third + (2*second) + (3 * first)\n            first = second\n            second = third\n            third = total\n            fourth += 1\n        return total\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        total = 0\n        first, second, third, fourth = 1, 2, 3, 4\n\n        while fourth <= n:\n            total = third + (2*second) + (3 * first)\n            first = second\n            second = third\n            third = total\n            fourth += 1\n        return total\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","0","","# Error: expected","#     10","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":127,"studentId":0,"date":null,"diff":"\r\nInputObject                                      SideIndicator\r\n-----------                                      -------------\r\n    if n == 1:                                   =>           \r\n        return 1                                 =>           \r\n    if n == 2:                                   =>           \r\n        return 2                                 =>           \r\n    if n == 3:                                   =>           \r\n        return 3                                 =>           \r\n    if n == 4:                                   =>           \r\n        return 10                                =>           \r\n    if n == 5:                                   =>           \r\n        return 22                                =>           \r\n                                                 =>           \r\n    total = 0                                    <=           \r\n    while n > 3:                                 <=           \r\n        total = g(n-1) + 2 * g(n-2) + 3 * g(n-3) <=           \r\n    while n <= 3 and n > 0:                      <=           \r\n        total = total + n                        <=           \r\n    return total                                 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total = 0 \n    while n > 3:\n        total = g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n    while n <= 3 and n > 0:\n        total = total + n \n    return total\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2 \n    if n == 3:\n        return 3\n    if n == 4:\n        return 10 \n    if n == 5:\n        return 22\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     1","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":128,"studentId":0,"date":null,"diff":"\r\nInputObject                                                 SideIndicator\r\n-----------                                                 -------------\r\n        index = 3 #refers to position in list where n = 4   =>           \r\n        index = 4                                           <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    g_list = [1, 2, 3]\n    if n > 3:\n        index = 4 \n        while index <= n:\n            g_term = g_list[index-1] + 2*g_list[index-2] + 3*g_list[index-3] \n            g_list.append(g_term)\n            index = index + 1\n    return g_list[n-1]\n\n    # for index in range(4, n+1, 1): \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    g_list = [1, 2, 3]\n    if n > 3:\n        index = 3 #refers to position in list where n = 4  \n        while index <= n:\n            g_term = g_list[index-1] + 2*g_list[index-2] + 3*g_list[index-3] \n            g_list.append(g_term)\n            index = index + 1\n    return g_list[n-1]\n\n    # for index in range(4, n+1, 1): \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 234, in g_iter","    g_term = g_list[index-1] + 2*g_list[index-2] + 3*g_list[index-3]","IndexError: list index out of range","","# Error: expected","#     10","# but got","#     IndexError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":129,"studentId":0,"date":null,"diff":"\r\nInputObject                                      SideIndicator\r\n-----------                                      -------------\r\n        x, y, z = x + 2*(y) + 3*(z), x, y        =>           \r\n    if n <= 7:                                   =>           \r\n        return n                                 =>           \r\n    a=0                                          =>           \r\n    while a < n:                                 =>           \r\n        a += 1                                   =>           \r\n        if pingpong(n) % 7 == 0 or has_seven(n): =>           \r\n            pingpong(n-1)                        =>           \r\n        else:                                    =>           \r\n            pingpong(n+1)                        =>           \r\n        return pingpong                          =>           \r\n                                                 =>           \r\n                                                 =>           \r\n                                                 =>           \r\n                                                 =>           \r\n                                                 =>           \r\n                                                 =>           \r\n        x = x + 2*(y) + 3*(z)                    <=           \r\n        y = x                                    <=           \r\n        z = y                                    <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <=3:\n        return n\n    a = 3\n    x = 3\n    y = 2\n    z = 1\n    while a < n:\n        a +=1\n        x = x + 2*(y) + 3*(z)\n        y = x\n        z = y\n    return x\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <=3:\n        return n\n    a = 3\n    x = 3\n    y = 2\n    z = 1\n    while a < n:\n        a +=1\n        x, y, z = x + 2*(y) + 3*(z), x, y\n    return x\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","60","","# Error: expected","#     22","# but got","#     60","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":130,"studentId":0,"date":null,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n            n-=1 =>           \r\n        return c =>           \r\n        i-=1     <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        a , b , c = 1, 2, 3\n        while n > 3:\n            a, b, c = b, c, c + 2 * b + 3 * a\n        i-=1\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        a , b , c = 1, 2, 3\n        while n > 3:\n            a, b, c = b, c, c + 2 * b + 3 * a\n            n-=1\n        return c\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     10","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":131,"studentId":0,"date":null,"diff":"\r\nInputObject        SideIndicator\r\n-----------        -------------\r\n    index = 3      =>           \r\n        index += 1 =>           \r\n    index = 0      <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n    index = 0\n    g1 = 1\n    g2 = 2\n    g3 = 3\n\n    if n == 1:\n        return g1\n    if n == 2:\n        return g2\n    if n == 3:\n        return g3\n\n    while n > index:\n        g4 = g1 * 3 + g2 * 2 + g3\n        g3, g2, g1 = g4, g3, g2\n\n    return g3\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n    index = 3\n    g1 = 1\n    g2 = 2\n    g3 = 3\n\n    if n == 1:\n        return g1\n    if n == 2:\n        return g2\n    if n == 3:\n        return g3\n\n    while n > index:\n        g4 = g1 * 3 + g2 * 2 + g3\n        g3, g2, g1 = g4, g3, g2\n        index += 1\n\n    return g3\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     10","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":132,"studentId":0,"date":null,"diff":"\r\nInputObject    SideIndicator\r\n-----------    -------------\r\n    return it3 =>           \r\n    return c   <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    it1, it2, it3 = 1, 2, 3\n    for i in range(3, n):\n        it1, it2, it3 = it2,it3,(it1*3 + it2*2 + it3)\n    return c\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    it1, it2, it3 = 1, 2, 3\n    for i in range(3, n):\n        it1, it2, it3 = it2,it3,(it1*3 + it2*2 + it3)\n    return it3\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 231, in g_iter","    return c","NameError: name 'c' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":133,"studentId":0,"date":null,"diff":"","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    if n > 3:\n        k, sum = 1, 10\n        while k < n - 3:\n            sum = sum + 2 * (k + 1) + 3 * k\n            k += 1\n    return sum\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    if n > 3:\n        k, sum = 1, 10\n        while k < n - 3:\n            k += 1\n            sum = sum + 2 * (k + 1) + 3 * k\n    return sum\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","17","","# Error: expected","#     22","# but got","#     17","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":134,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n    return output[-1]     =>           \r\n        return output[-1] <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    output = [0, 1, 2, 3, 10] #for n=4\n    for x in range(4, n):\n        next_output = output[-1] + 2 * output[-2] + 3 * output[-3]\n        output = output + [next_output]\n        return output[-1]\n    \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    output = [0, 1, 2, 3, 10] #for n=4\n    for x in range(4, n):\n        next_output = output[-1] + 2 * output[-2] + 3 * output[-3]\n        output = output + [next_output]\n    return output[-1]\n    \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","","# Error: expected","#     10","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":135,"studentId":0,"date":null,"diff":"\r\nInputObject                  SideIndicator\r\n-----------                  -------------\r\n    for i in range (1, n+1): =>           \r\n    for i in range (0, n):   <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    lst = [0]\n    for i in range (0, n):\n        if (i <= 3):\n            appendant = i\n        else:\n        \tappendant = lst[i-1] + 2 * lst[i-2] + 3* lst[i-3]\n        lst.append(appendant)\n    return lst[n]\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    lst = [0]\n    for i in range (1, n+1):\n        if (i <= 3):\n            appendant = i\n        else:\n        \tappendant = lst[i-1] + 2 * lst[i-2] + 3* lst[i-3]\n        lst.append(appendant)\n    return lst[n]\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","0","","# Error: expected","#     1","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":136,"studentId":0,"date":null,"diff":"\r\nInputObject                          SideIndicator\r\n-----------                          -------------\r\n        x, y, z = y, z, z +2*y + 3*x =>           \r\n        x = y                        <=           \r\n        y = z                        <=           \r\n        z = z +2*y + 3*x             <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    x, y, z = 1, 2, 3\n    while n >3:\n        x = y\n        y = z \n        z = z +2*y + 3*x\n        n-=1\n    return z\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    x, y, z = 1, 2, 3\n    while n >3:\n        x, y, z = y, z, z +2*y + 3*x\n        n-=1\n    return z\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","15","","# Error: expected","#     10","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":137,"studentId":0,"date":null,"diff":"\r\nInputObject                                       SideIndicator\r\n-----------                                       -------------\r\n    a,b,c = 1, 2, 3                               =>           \r\n    while n >3:                                   =>           \r\n        a,b,c = b, c, c + 2*b + 3*a               =>           \r\n        n -= 1                                    =>           \r\n    return c                                      =>           \r\n    # else:                                       =>           \r\n    #     counter,value, total = 1, 0, 0          =>           \r\n    #     while counter < 4:                      =>           \r\n    #         value = counter*g_iter(n - counter) =>           \r\n    #         total += value                      =>           \r\n    #         counter += counter + 1              =>           \r\n    #     return total                            =>           \r\n                                                  =>           \r\n                                                  =>           \r\n                                                  =>           \r\n                                                  =>           \r\n        counter,value, total = 1, 0, 0            <=           \r\n        while counter < 4:                        <=           \r\n            value = counter*g_iter(n - counter)   <=           \r\n            total += value                        <=           \r\n            counter += counter + 1                <=           \r\n        return total                              <=           \r\n    else:                                         <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        counter,value, total = 1, 0, 0\n\n        while counter < 4: \n\n            value = counter*g_iter(n - counter)\n            total += value\n            counter += counter + 1\n\n        return total\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    a,b,c = 1, 2, 3\n\n    while n >3:\n\n        a,b,c = b, c, c + 2*b + 3*a\n        n -= 1\n\n    return c\n\n    # else:\n    #     counter,value, total = 1, 0, 0\n\n    #     while counter < 4: \n\n    #         value = counter*g_iter(n - counter)\n    #         total += value\n    #         counter += counter + 1\n\n    #     return total\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","6","","# Error: expected","#     10","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":138,"studentId":0,"date":null,"diff":"\r\nInputObject                 SideIndicator\r\n-----------                 -------------\r\n        return round(first) =>           \r\n        return round(a)     <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        i = n\n        first = -(1/3)\n        second = 1\n        third = 2\n        while i > 0:\n            first, second, third = second, third, (first * 3) + (second * 2) + third\n            i -= 1\n        return round(a)\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        i = n\n        first = -(1/3)\n        second = 1\n        third = 2\n        while i > 0:\n            first, second, third = second, third, (first * 3) + (second * 2) + third\n            i -= 1\n        return round(first)\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 220, in g_iter","    return round(a)","NameError: name 'a' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":139,"studentId":0,"date":null,"diff":"","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n\n    element_one, element_two, element_three = 3, 2, 1\n    temp_element_one = element_one + 2 * element_two + 3 * element_three\n\n    if n > 4:\n        for i in range(5, n+1):\n            element_two = element_one\n            element_three = element_two\n            element_one = temp_element_one\n\n            temp_element_one = element_one + 2 * element_two + 3 * element_three\n\n    return temp_element_one\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n\n    element_one, element_two, element_three = 3, 2, 1\n    temp_element_one = element_one + 2 * element_two + 3 * element_three\n\n    if n > 4:\n        for i in range(5, n+1):\n            element_three = element_two\n            element_two = element_one\n            element_one = temp_element_one\n\n            temp_element_one = element_one + 2 * element_two + 3 * element_three\n\n    return temp_element_one\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","25","","# Error: expected","#     22","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":140,"studentId":0,"date":null,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n    return value =>           \r\n    return total <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n  <= 3:\n        return n\n    m= 4\n    p1, p2, p3 = 1,2,3\n    while m<= n:\n        value=(p1 * 3) + (p2 * 2) + p3\n        p1= p2\n        p2=p3 \n        p3=value \n        m +=1\n    return total\n\n        \n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n  <= 3:\n        return n\n    m= 4\n    p1, p2, p3 = 1,2,3\n    while m<= n:\n        value=(p1 * 3) + (p2 * 2) + p3\n        p1= p2\n        p2=p3 \n        p3=value \n        m +=1\n    return value\n\n        \n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 220, in g_iter","    return total","NameError: name 'total' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":141,"studentId":0,"date":null,"diff":"\r\nInputObject    SideIndicator\r\n-----------    -------------\r\n    m += (n)   =>           \r\n    m += (l-1) <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    m = 0\n    l = n\n    while n > 3:\n        m += 2 * (n-2) + 3 * (n-3)\n        n -= 1\n    m += (l-1)\n    return m\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    m = 0\n    l = n\n    while n > 3:\n        m += 2 * (n-2) + 3 * (n-3)\n        n -= 1\n    m += (n)\n    return m\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","23","","# Error: expected","#     22","# but got","#     23","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":142,"studentId":0,"date":null,"diff":"\r\nInputObject                                   SideIndicator\r\n-----------                                   -------------\r\n            total = total + 2*(i-2) + 3*(i-3) =>           \r\n            total = total + 2*(n-2) + 3*(n-3) <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    i = 1\n    total = 0\n    while i <= n:\n        if i <= 3:\n            total = i\n        else:\n            total = total + 2*(n-2) + 3*(n-3)\n        i += 1\n    return total\n\n    #g_iter(4): (n-1) + 2(n-2) + 3(n-3)\n    #             3   +  2*2   +  3*1   = 10\n    #g_iter(5): (n-1) + 2(n-2) + 3(n-3)\n    #             4   +  2*3   +  3*2 \n    #             4   +   6    +   6    = 16 WRONG\n    #             10  +   6    +   6    = 22 RIGHT\n    # \n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    i = 1\n    total = 0\n    while i <= n:\n        if i <= 3:\n            total = i\n        else:\n            total = total + 2*(i-2) + 3*(i-3)\n        i += 1\n    return total\n\n    #g_iter(4): (n-1) + 2(n-2) + 3(n-3)\n    #             3   +  2*2   +  3*1   = 10\n    #g_iter(5): (n-1) + 2(n-2) + 3(n-3)\n    #             4   +  2*3   +  3*2 \n    #             4   +   6    +   6    = 16 WRONG\n    #             10  +   6    +   6    = 22 RIGHT\n    # \n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","27","","# Error: expected","#     22","# but got","#     27","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":143,"studentId":0,"date":null,"diff":"\r\nInputObject                           SideIndicator\r\n-----------                           -------------\r\n        a, b, c = b, c, c + b*2 + a*3 =>           \r\n        c += a * 3 + b * 2            <=           \r\n        a = b                         <=           \r\n        b = c                         <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n\n    a = 1\n    b = 2\n    c = 3\n\n    for x in range (4, n+1):\n        c += a * 3 + b * 2\n        a = b\n        b = c\n\n    return c\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n\n    a = 1\n    b = 2\n    c = 3\n\n    for x in range (4, n+1):\n        a, b, c = b, c, c + b*2 + a*3\n\n    return c\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","36","","# Error: expected","#     22","# but got","#     36","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":144,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n    a, b, c = 1, 2, 3     =>           \r\n                          =>           \r\n        a, b, c = 1, 2, 3 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    while n>3:\n        a, b, c = 1, 2, 3\n        a, b, c = b, c, c + 2*b + 3*a\n        n = n - 1\n    return c\n        \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a, b, c = 1, 2, 3\n    if n<=3:\n        return n\n    while n>3:\n\n        a, b, c = b, c, c + 2*b + 3*a\n        n = n - 1\n    return c\n        \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","10","","# Error: expected","#     22","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":145,"studentId":0,"date":null,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n        return n =>           \r\n        return 3 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return 3\n    a,b,c=1,2,3\n    while n>3:\n        a,b,c=b,c,3*a+2*b+c\n        n=n-1\n    return c\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    a,b,c=1,2,3\n    while n>3:\n        a,b,c=b,c,3*a+2*b+c\n        n=n-1\n    return c\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","3","","# Error: expected","#     1","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":146,"studentId":0,"date":null,"diff":"\r\nInputObject                                   SideIndicator\r\n-----------                                   -------------\r\n            a, b, c = b, c, c + 2 * b + 3 * a =>           \r\n            a = b                             <=           \r\n            b = c                             <=           \r\n            c = c + 2 * b + 3 * a             <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n \n    a, b, c =  1, 2, 3\n    if n <= 3:\n        return n\n    else:\n        while n > 3:\n            n -= 1\n            a = b\n            b = c\n            c = c + 2 * b + 3 * a\n        return c\n        \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n \n    a, b, c =  1, 2, 3\n    if n <= 3:\n        return n\n    else:\n        while n > 3:\n            n -= 1\n            a, b, c = b, c, c + 2 * b + 3 * a\n        return c\n        \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","15","","# Error: expected","#     10","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":147,"studentId":0,"date":null,"diff":"\r\nInputObject                                       SideIndicator\r\n-----------                                       -------------\r\n        count = 0                                 =>           \r\n        if n - 1 <= 3:                            =>           \r\n            return (n-1) + 2*(n-2) + 3*(n-3)      =>           \r\n        if n - 2 <= 3:                            =>           \r\n            x = (n-2) + 2*(n-3) + 3*(n-4)         =>           \r\n            return x + 2*(n-2) + 3*(n-3)          =>           \r\n        if n - 3 <= 3:                            =>           \r\n            x = (n-3)+ 2*(n-4) + 3*(n-5)          =>           \r\n            y = (n-2)+ 2*(n-3) + 3*(n-4)          =>           \r\n            return x+y+3*(n-3)                    =>           \r\n    def divis_func(ways, base, amount):           =>           \r\n        if amount // base == 0:                   =>           \r\n            return ways                           =>           \r\n        ways += amount // base                    =>           \r\n        if amount // base == 1:                   =>           \r\n            x = amount % base                     =>           \r\n            if x >= base//2:                      =>           \r\n                ways += x // base//2              =>           \r\n            return divis_func(ways, base, amount) =>           \r\n        return divis_func(ways, base*2, amount)   =>           \r\n    return divis_func(1, 2, amount)               =>           \r\n                                                  =>           \r\n                                                  =>           \r\n                                                  =>           \r\n                                                  =>           \r\n                                                  =>           \r\n                                                  =>           \r\n                                                  =>           \r\n                                                  =>           \r\n        x = 3*(n-3) + 2*(n-2) + (n-1)             <=           \r\n        return x                                  <=           \r\n    \"*** YOUR CODE HERE ***\"                      <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    if n > 3:\n        x = 3*(n-3) + 2*(n-2) + (n-1)\n        return x\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    if n > 3:\n        count = 0\n        if n - 1 <= 3:\n            return (n-1) + 2*(n-2) + 3*(n-3)\n\n        if n - 2 <= 3:\n            x = (n-2) + 2*(n-3) + 3*(n-4)\n            return x + 2*(n-2) + 3*(n-3)\n\n        if n - 3 <= 3:\n            x = (n-3)+ 2*(n-4) + 3*(n-5)\n            y = (n-2)+ 2*(n-3) + 3*(n-4)\n            return x+y+3*(n-3)\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","16","","# Error: expected","#     22","# but got","#     16","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":148,"studentId":0,"date":null,"diff":"\r\nInputObject                                              SideIndicator\r\n-----------                                              -------------\r\n    if n <=3:                                            =>           \r\n        return n                                         =>           \r\n        n_minus_1 = 3                                    =>           \r\n        n_minus_2 = 2                                    =>           \r\n        n_minus_3 = 1                                    =>           \r\n        i = 3                                            =>           \r\n        while i < n:                                     =>           \r\n            temp = n_minus_1 + 2*n_minus_2 + 3*n_minus_3 =>           \r\n            n_minus_3 = n_minus_2                        =>           \r\n            n_minus_2 = n_minus_1                        =>           \r\n            n_minus_1 = temp                             =>           \r\n            i+=1                                         =>           \r\n        return n_minus_1                                 =>           \r\n    else:                                                =>           \r\n                                                         =>           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <=3:\n        return n\n    else:\n        n_minus_1 = 3\n        n_minus_2 = 2\n        n_minus_3 = 1\n        i = 3\n        while i < n:\n            temp = n_minus_1 + 2*n_minus_2 + 3*n_minus_3\n            n_minus_3 = n_minus_2\n            n_minus_2 = n_minus_1\n            n_minus_1 = temp\n            i+=1\n        return n_minus_1\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","","# Error: expected","#     1","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":149,"studentId":0,"date":null,"diff":"\r\nInputObject                          SideIndicator\r\n-----------                          -------------\r\n        v1, v2, v3 = 3, 2, 1         =>           \r\n            v1, v2, v3 = new, v1, v2 =>           \r\n        v1 = 3                       <=           \r\n        v2 = 2                       <=           \r\n        v3 = 1                       <=           \r\n            v1 = new                 <=           \r\n            v2 = v1                  <=           \r\n            v3 = v2                  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n \n    else:\n        v1 = 3\n        v2 = 2\n        v3 = 1\n        i = 4\n        new = 0 \n        while i <= n:\n            new = v1 + 2 * v2 + 3 * v3\n            v1 = new\n            v2 = v1 \n            v3 = v2\n            i += 1\n        return new\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n \n    else:\n        v1, v2, v3 = 3, 2, 1\n        i = 4\n        new = 0 \n        while i <= n:\n            new = v1 + 2 * v2 + 3 * v3\n            v1, v2, v3 = new, v1, v2\n            i += 1\n        return new\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","60","","# Error: expected","#     22","# but got","#     60","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":152,"studentId":0,"date":null,"diff":"\r\nInputObject       SideIndicator\r\n-----------       -------------\r\n        return b  =>           \r\n        return c  =>           \r\n        return d  =>           \r\n                  =>           \r\n                  =>           \r\n        return a  <=           \r\n        return b  <=           \r\n        return c  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    a, b, c, d = 0, 1, 2, 3 \n    \n    if n == 1:\n        return a \n    if n == 2:\n        return b\n    if n == 3:\n        return c \n    count = 3\n    while count < n:\n        count += 1 \n        a = b \n        b = c \n        c = d \n        d = 3*a + 2*b + c\n\n    return d     \n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    a, b, c, d = 0, 1, 2, 3 \n    \n    if n == 1:\n        return b \n    if n == 2:\n        return c\n    if n == 3:\n        return d \n    \n    count = 3\n\n    while count < n:\n        count += 1 \n        a = b \n        b = c \n        c = d \n        d = 3*a + 2*b + c\n\n    return d     \n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","0","","# Error: expected","#     1","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":153,"studentId":0,"date":null,"diff":"\r\nInputObject                                                 SideIndicator\r\n-----------                                                 -------------\r\n        while n > 3:                                        =>           \r\n            g_a, g_b, g_c = (g_a + 2*g_b + 3*g_c), g_a, g_b =>           \r\n            n -= 1                                          =>           \r\n        g_a, g_b, g_c = (g_a + 2*g_b + 3*g_c), g_a, g_b     <=           \r\n                                                            <=           \r\n                                                            <=           \r\n                                                            <=           \r\n                                                            <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <=3:\n        return n\n    else:\n        g_a = 3\n        g_b = 2\n        g_c = 1\n\n        g_a, g_b, g_c = (g_a + 2*g_b + 3*g_c), g_a, g_b\n\n        return g_a\n\n\n\n\n\n\n\n        # for i in range(n-1, n-4):\n        #     count = 0\n\n        #     if n <= 3:\n        #         return ls.insert(0, n)\n        #     else: \n        #         return \n        # return (ls[2]) + 2*(ls[1]) + 3*(ls[0])\n\n################################    \n# def fib(n):\n#  a,b = 1,1\n#  for i in range(n-1):\n#   a,b = b,a+b\n#  return a\n# print fib(5)\n################################                \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <=3:\n        return n\n    else:\n        g_a = 3\n        g_b = 2\n        g_c = 1\n\n        while n > 3:\n            g_a, g_b, g_c = (g_a + 2*g_b + 3*g_c), g_a, g_b\n            n -= 1\n\n        return g_a\n\n\n\n        # for i in range(n-1, n-4):\n        #     count = 0\n\n        #     if n <= 3:\n        #         return ls.insert(0, n)\n        #     else: \n        #         return \n        # return (ls[2]) + 2*(ls[1]) + 3*(ls[0])\n\n################################    \n# def fib(n):\n#  a,b = 1,1\n#  for i in range(n-1):\n#   a,b = b,a+b\n#  return a\n# print fib(5)\n################################                \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","10","","# Error: expected","#     22","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":154,"studentId":0,"date":null,"diff":"\r\nInputObject                       SideIndicator\r\n-----------                       -------------\r\n    if n== 1 or n ==2 or n==3:    =>           \r\n    a,b,c = 1,2,3                 =>           \r\n    while n>3:                    =>           \r\n        a,b,c = b, c, c+2*b + 3*a =>           \r\n        n -= 1                    =>           \r\n                                  =>           \r\n    a=1                           <=           \r\n    b=2                           <=           \r\n    c=3                           <=           \r\n    if n <= 3:                    <=           \r\n    for i in range(4,n+1):        <=           \r\n        a= c+ 2*b + 3*a           <=           \r\n        a=b                       <=           \r\n        b=c                       <=           \r\n        c=a                       <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    a=1\n    b=2\n    c=3\n    if n <= 3:\n        return n\n    for i in range(4,n+1):\n        a= c+ 2*b + 3*a\n        a=b\n        b=c\n        c=a\n    return c\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n== 1 or n ==2 or n==3:\n        return n\n    a,b,c = 1,2,3\n    while n>3:\n        a,b,c = b, c, c+2*b + 3*a\n        n -= 1\n    return c\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","2","","# Error: expected","#     10","# but got","#     2","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":155,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n    a,b,c=1,2,3            =>           \r\n    for i in range(3,n):   =>           \r\n        total=c+2*b+3*a    =>           \r\n        a,b,c=b,c,total    =>           \r\n    x,y=3,0                <=           \r\n    for i in range(n-3,n): <=           \r\n        total+=x*(n%3+y)   <=           \r\n        x-=1               <=           \r\n        y+=1               <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total = 0\n    if n<=3:\n        return n\n    x,y=3,0\n    for i in range(n-3,n):\n        total+=x*(n%3+y)\n        x-=1\n        y+=1\n    return total\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total = 0\n    if n<=3:\n        return n\n    a,b,c=1,2,3\n    for i in range(3,n):\n        total=c+2*b+3*a\n        a,b,c=b,c,total\n    return total\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","16","","# Error: expected","#     22","# but got","#     16","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":156,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        return val3  =>           \r\n        return total <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    # total= 0\n    if n<=3:\n        return n\n    else:\n        i = 4\n        val1, val2, val3 = 1,2,3\n        while i<=n:\n            val3 = val1 *3 + val2*2 +val3\n            val1, val2 = val1+1, val2+1\n            i += 1\n        return total\n\n        # # total = 3\n        # while n>3:\n        #     if n-1>0:\n        #         total = \n        # return total\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    # total= 0\n    if n<=3:\n        return n\n    else:\n        i = 4\n        val1, val2, val3 = 1,2,3\n        while i<=n:\n            val3 = val1 *3 + val2*2 +val3\n            val1, val2 = val1+1, val2+1\n            i += 1\n        return val3\n\n        # # total = 3\n        # while n>3:\n        #     if n-1>0:\n        #         total = \n        # return total\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 246, in g_iter","    return total","NameError: name 'total' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":157,"studentId":0,"date":null,"diff":"\r\nInputObject                                                    SideIndicator\r\n-----------                                                    -------------\r\n        stack.append(stack[i-1] + 2*stack[i-2] + 3*stack[i-3]) =>           \r\n        stack.append(stack[n-1] + 2*stack[n-2] + 3*stack[n-3]) <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    i = 3\n    stack = [1, 2, 3]\n    while i < n:\n        stack.append(stack[n-1] + 2*stack[n-2] + 3*stack[n-3])\n        i += 1\n    return stack[n-1]\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    i = 3\n    stack = [1, 2, 3]\n    while i < n:\n        stack.append(stack[i-1] + 2*stack[i-2] + 3*stack[i-3])\n        i += 1\n    return stack[n-1]\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 213, in g_iter","    stack.append(stack[n-1] + 2*stack[n-2] + 3*stack[n-3])","IndexError: list index out of range","","# Error: expected","#     10","# but got","#     IndexError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":158,"studentId":0,"date":null,"diff":"\r\nInputObject                                   SideIndicator\r\n-----------                                   -------------\r\n        current = 3*first + 2*second + third  =>           \r\n        current = first + 2*second + 3* third <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3: return n \n    first = 1\n    second = 2\n    third = 3\n    for i in range(4,n+1):\n        current = first + 2*second + 3* third\n        first = second\n        second = third\n        third = current\n    return current\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3: return n \n    first = 1\n    second = 2\n    third = 3\n    for i in range(4,n+1):\n        current = 3*first + 2*second + third\n        first = second\n        second = third\n        third = current\n    return current\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","14","","# Error: expected","#     10","# but got","#     14","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":159,"studentId":0,"date":null,"diff":"\r\nInputObject                       SideIndicator\r\n-----------                       -------------\r\n    mid = 2                       =>           \r\n        print(total)              <=           \r\n    mid = other_spike(start, end) <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if(n <= 3):\n        return n\n    a = 3\n    b = 2\n    c = 1\n    total = a + 2*b + 3*c\n    for i in range(n-4):\n        print(total)\n        a, b, c = total, a, b\n        total = a + 2*b + 3*c\n    return total\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if(n <= 3):\n        return n\n    a = 3\n    b = 2\n    c = 1\n    total = a + 2*b + 3*c\n    for i in range(n-4):\n        a, b, c = total, a, b\n        total = a + 2*b + 3*c\n    return total\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","10","22","","# Error: expected","#     22","# but got","#     10","#     22","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":160,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n        while a >3:   =>           \r\n        while b>3:    =>           \r\n        while c>3:    =>           \r\n        while a >= 3: <=           \r\n        while b>=3:   <=           \r\n        while c>=3:   <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a,b,c = n-1,n-2,n-3\n    fa,fb,fc=n-1,n-2,n-3\n    if n<=3:\n        return n\n    else:\n        while a >= 3:\n            fa=(a-1)+(2*(a-2))+(3*(a-3))\n            a-=1\n        while b>=3:\n            fb=(b-1)+(2*(b-2))+(3*(b-3))\n            b-=1\n        while c>=3:\n            fc=(c-1)+(2*(c-2))+(3*(c-3))\n            c-=1\n    return fa+2*fb+3*fc\n        \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a,b,c = n-1,n-2,n-3\n    fa,fb,fc=n-1,n-2,n-3\n    if n<=3:\n        return n\n    else:\n        while a >3:\n            fa=(a-1)+(2*(a-2))+(3*(a-3))\n            a-=1\n        while b>3:\n            fb=(b-1)+(2*(b-2))+(3*(b-3))\n            b-=1\n        while c>3:\n            fc=(c-1)+(2*(c-2))+(3*(c-3))\n            c-=1\n    return fa+2*fb+3*fc\n        \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","11","","# Error: expected","#     10","# but got","#     11","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":161,"studentId":0,"date":null,"diff":"\r\nInputObject     SideIndicator\r\n-----------     -------------\r\n        a = g3  =>           \r\n        g2 = a  =>           \r\n        g2 = g3 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    i, g1, g2, g3 = 4, 1, 2, 3\n    if n <= 3:\n        return n\n    while i <= n:\n        g1 = g2\n        g2 = g3\n        g3 = g3 + 2*g2 + 3*g1\n        i += 1\n    return g3\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    i, g1, g2, g3 = 4, 1, 2, 3\n    if n <= 3:\n        return n\n    while i <= n:\n        a = g3\n        g3 = g3 + 2*g2 + 3*g1\n        g1 = g2\n        g2 = a\n        i += 1\n    return g3\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","15","","# Error: expected","#     10","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":162,"studentId":0,"date":null,"diff":"\r\nInputObject                                                              SideIndicator\r\n-----------                                                              -------------\r\n        first, second, third = second, third, third + 2*second + 3*first =>           \r\n    k, count = 1, 1                                                      =>           \r\n    def up(k):                                                           =>           \r\n        k, count = k+1, count+1                                          =>           \r\n        if count == n:                                                   =>           \r\n            return k                                                     =>           \r\n        if k % 7 == 0 or has_seven(k):                                   =>           \r\n            return switch(k)                                             =>           \r\n    def down(k):                                                         =>           \r\n        k, count = k-1, count+1                                          =>           \r\n        if count == n:                                                   =>           \r\n            return k                                                     =>           \r\n        if k % 7 == 0 or has_seven(k):                                   =>           \r\n            return switch(k)                                             =>           \r\n    def switch(k):                                                       =>           \r\n        if k - 1 == k:                                                   =>           \r\n            return up(k+1)                                               =>           \r\n        elif k + 1 == k:                                                 =>           \r\n            return down(k-1)                                             =>           \r\n    return up(k)                                                         =>           \r\n                                                                         =>           \r\n        first += 1                                                       <=           \r\n        second += 1                                                      <=           \r\n        third = third + 2*second + 3*first                               <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if 0 < n <= 3:\n        return n\n    first = 1\n    second = 2\n    third = 3\n    while n > 3:\n        first += 1\n        second += 1\n        third = third + 2*second + 3*first\n        n -= 1\n    return third\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if 0 < n <= 3:\n        return n\n    first = 1\n    second = 2\n    third = 3\n    while n > 3:\n        first, second, third = second, third, third + 2*second + 3*first\n        n -= 1\n    return third\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","15","","# Error: expected","#     10","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":163,"studentId":0,"date":null,"diff":"\r\nInputObject                 SideIndicator\r\n-----------                 -------------\r\n    i, a, b, c = 4, 3, 2, 1 =>           \r\n    i, a, b, c = 4, 1, 2, 3 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    i, a, b, c = 4, 1, 2, 3\n    if n <= 3:\n    \treturn n\n    while i <= n:\n    \tx = a + 2 * b + 3 * c\n    \ta, b, c = x, a, b\n    \ti += 1\n    return x\n\n    new = 4\n    old = 2\n    older = 1\n    total = 0\n    counter = 1\n    if n <=3:\n    \treturn n\n    elif n == 4:\n    \treturn 10\n    elif n == 5:\n    \treturn 22\n    elif n == 6:\n    \treturn 51\n    else:\n    \twhile n > counter:\n    \t\ttotal += 10 * new + 12 * old + 9 * older\n    \t\tnew, old, older = new + old + older, new, old\n    \t\tcounter += 1\n    \treturn total\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    i, a, b, c = 4, 3, 2, 1\n    if n <= 3:\n    \treturn n\n    while i <= n:\n    \tx = a + 2 * b + 3 * c\n    \ta, b, c = x, a, b\n    \ti += 1\n    return x\n\n    new = 4\n    old = 2\n    older = 1\n    total = 0\n    counter = 1\n    if n <=3:\n    \treturn n\n    elif n == 4:\n    \treturn 10\n    elif n == 5:\n    \treturn 22\n    elif n == 6:\n    \treturn 51\n    else:\n    \twhile n > counter:\n    \t\ttotal += 10 * new + 12 * old + 9 * older\n    \t\tnew, old, older = new + old + older, new, old\n    \t\tcounter += 1\n    \treturn total\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","14","","# Error: expected","#     10","# but got","#     14","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":164,"studentId":0,"date":null,"diff":"\r\nInputObject                   SideIndicator\r\n-----------                   -------------\r\n    return g3 if n > 3 else n =>           \r\n    return g3                 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n#    if n <= 3:\n#        return n\n#    else:\n#        \n#        coefficient_list_1 = [1, 0, 0]\n#        coefficient_list_2 = [0, 1, 0]\n#        coefficient_list_3 = [0, 0, 1]\n#        \n#        \n#        for i in range(n-3):\n#            current_coefficients = [coefficient_list_3[i] + 2*coefficient_list_2[i] + 3*coefficient_list_1[i] for i in range(3)]\n#            coefficient_list_1, coefficient_list_2, coefficient_list_3 = coefficient_list_2, coefficient_list_3, current_coefficients\n#\n#\n#        return (3 * coefficient_list_3[2] + 2 * coefficient_list_3[1] + coefficient_list_3[0])\n\n\n    g3 = 3\n    g2 = 2\n    g1 = 1\n\n    for i in range(n - 3):\n        g1, g2, g3 = g2, g3, 3*g1 + 2*g2 + g3\n\n    return g3\n        \n        \n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n#    if n <= 3:\n#        return n\n#    else:\n#        \n#        coefficient_list_1 = [1, 0, 0]\n#        coefficient_list_2 = [0, 1, 0]\n#        coefficient_list_3 = [0, 0, 1]\n#        \n#        \n#        for i in range(n-3):\n#            current_coefficients = [coefficient_list_3[i] + 2*coefficient_list_2[i] + 3*coefficient_list_1[i] for i in range(3)]\n#            coefficient_list_1, coefficient_list_2, coefficient_list_3 = coefficient_list_2, coefficient_list_3, current_coefficients\n#\n#\n#        return (3 * coefficient_list_3[2] + 2 * coefficient_list_3[1] + coefficient_list_3[0])\n\n\n    g3 = 3\n    g2 = 2\n    g1 = 1\n\n    for i in range(n - 3):\n        g1, g2, g3 = g2, g3, 3*g1 + 2*g2 + g3\n\n    return g3 if n > 3 else n\n        \n        \n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","3","","# Error: expected","#     1","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":165,"studentId":0,"date":null,"diff":"\r\nInputObject  SideIndicator\r\n-----------  -------------\r\n    return z =>           \r\n    return y <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    x, y, z = 1, 2, 3\n    while n>3:\n        x, y, z, n = y, z, z + 2*(y) + 3*(x), n-1\n    return y\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    x, y, z = 1, 2, 3\n    while n>3:\n        x, y, z, n = y, z, z + 2*(y) + 3*(x), n-1\n    return z\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","3","","# Error: expected","#     10","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":166,"studentId":0,"date":null,"diff":"\r\nInputObject                                                             SideIndicator\r\n-----------                                                             -------------\r\n        return n                                                        =>           \r\n    if n < 4:                                                           =>           \r\n        return n                                                        =>           \r\n    g1 = 3                                                              =>           \r\n    g2 = 2                                                              =>           \r\n    g3 = 1                                                              =>           \r\n    g = g1 + 2 * g2 + 3 * g3                                            =>           \r\n    N = 4                                                               =>           \r\n    while N < n:                                                        =>           \r\n        g3 = g2                                                         =>           \r\n        g2 = g1                                                         =>           \r\n        g1 = g                                                          =>           \r\n        g = g1 + 2 * g2 + 3 * g3                                        =>           \r\n        N += 1                                                          =>           \r\n    return g                                                            =>           \r\n    pingpong_list = []                                                  =>           \r\n    count = [1]                                                         =>           \r\n    def counter(n):                                                     =>           \r\n        nonlocal count                                                  =>           \r\n        if len(pingpong_list) == n:                                     =>           \r\n            return pingpong_list[-1]                                    =>           \r\n        elif has_seven(pingpong_list[-1]) or pingpong_list[-1] % 7 ==0: =>           \r\n            count -= [1]                                                =>           \r\n            pingpong_list = pingpong_list + count                       =>           \r\n            return counter(n)                                           =>           \r\n        else:                                                           =>           \r\n            pingpong_list = pingpong_list + count                       =>           \r\n            count += [1]                                                =>           \r\n            return counter(n)                                           =>           \r\n    return counter(n)                                                   =>           \r\n    # if has_seven(len(pingpong_list))                                  =>           \r\n                                                                        =>           \r\n                                                                        =>           \r\n                                                                        =>           \r\n                                                                        =>           \r\n                                                                        =>           \r\n                                                                        =>           \r\n                                                                        =>           \r\n        return identity(n)                                              <=           \r\n    total = 0                                                           <=           \r\n    count=1                                                             <=           \r\n    while n > 3:                                                        <=           \r\n        total += g(n)                                                   <=           \r\n        n = n - count                                                   <=           \r\n        count += 1                                                      <=           \r\n    if n <= 3:                                                          <=           \r\n        return identity(n) + total                                      <=           \r\n    \"*** YOUR CODE HERE ***\"                                            <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n    total = 0\n    count=1\n    while n > 3:\n        total += g(n)\n        n = n - count\n        count += 1\n    if n <= 3:\n        return identity(n) + total\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n < 4:\n        return n\n    g1 = 3\n    g2 = 2\n    g3 = 1\n    g = g1 + 2 * g2 + 3 * g3\n    N = 4\n    while N < n:\n        g3 = g2\n        g2 = g1\n        g1 = g\n        g = g1 + 2 * g2 + 3 * g3\n        N += 1\n    return g\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","13","","# Error: expected","#     10","# but got","#     13","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":167,"studentId":0,"date":null,"diff":"\r\nInputObject  SideIndicator\r\n-----------  -------------\r\n        i+=1 =>           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    i = 4\n    a = 3\n    b = 2\n    c = 1\n    total = 0\n    if n<=3:\n        return n\n    while i<=n:\n        total = a + 2*b + 3*c\n        a, b, c=total, a, b\n    return total\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    i = 4\n    a = 3\n    b = 2\n    c = 1\n    total = 0\n    if n<=3:\n        return n\n    while i<=n:\n        total = a + 2*b + 3*c\n        a, b, c=total, a, b\n        i+=1\n    return total\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     10","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":168,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n        while k < n:  =>           \r\n        while k <= n: <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        k = 3\n        f1, f2, f3 = 1, 2, 3\n        while k <= n:\n            f1, f2, f3 = f2, f3, f3+2*f2+3*f1\n            k += 1\n        return f3\n        \n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        k = 3\n        f1, f2, f3 = 1, 2, 3\n        while k < n:\n            f1, f2, f3 = f2, f3, f3+2*f2+3*f1\n            k += 1\n        return f3\n        \n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","22","","# Error: expected","#     10","# but got","#     22","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":169,"studentId":0,"date":null,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n        return c =>           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<= 3:\n        return n\n    else:\n        a, b, c, = 1, 2, 3\n        k=3\n        while k<n:\n            a, b, c= b, c, 3*a+2*b+c\n            k += 1\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<= 3:\n        return n\n    else:\n        a, b, c, = 1, 2, 3\n        k=3\n        while k<n:\n            a, b, c= b, c, 3*a+2*b+c\n            k += 1\n        return c\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","","# Error: expected","#     10","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":170,"studentId":0,"date":null,"diff":"\r\nInputObject                   SideIndicator\r\n-----------                   -------------\r\n        total = c + 2*b + 3*a =>           \r\n        c = total             =>           \r\n        added = c + 2*b + 3*a <=           \r\n        total += added        <=           \r\n        c = added             <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n    \treturn n\n\n    total, diff = 0, (n-3)\n    a, b, c = 1, 2, 3\n    while diff > 0:\n    \tadded = c + 2*b + 3*a\n    \ttotal += added\n    \ta = b\n    \tb = c\n    \tc = added\n    \tdiff -= 1\n    return total\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n    \treturn n\n\n    total, diff = 0, (n-3)\n    a, b, c = 1, 2, 3\n    while diff > 0:\n    \ttotal = c + 2*b + 3*a\n    \ta = b\n    \tb = c\n    \tc = total\n    \tdiff -= 1\n    return total\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","32","","# Error: expected","#     22","# but got","#     32","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":171,"studentId":0,"date":null,"diff":"\r\nInputObject                                               SideIndicator\r\n-----------                                               -------------\r\n    t = 1                                                 =>           \r\n    func = f(x)                                           =>           \r\n    while t <= n:                                         =>           \r\n        func = f(func)                                    =>           \r\n        t += 1                                            =>           \r\n    return func                                           =>           \r\n    if n <= 3:                                            =>           \r\n        return n                                          =>           \r\n    a,b,c = 1,2,3                                         =>           \r\n    for i in range(4,n+1):                                =>           \r\n        a,b,c=b,c,c + 2*b + 3*a                           =>           \r\n    return c                                              =>           \r\n    a,b,c=0,1,2                                           <=           \r\n    while b<n:                                            <=           \r\n        print(b)                                          <=           \r\n        a,b,c = a + 2 * b + 3 * c, b + 1, c + 2           <=           \r\n        # a,b,c = a + 2 * b + 3 * c, 2 * b + 3 * c, 3 * c <=           \r\n        # a,b,c=b,a+b                                     <=           \r\n    return b                                              <=           \r\n    \"*** YOUR CODE HERE ***\"                              <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a,b,c=0,1,2\n    while b<n:\n        print(b)\n        a,b,c = a + 2 * b + 3 * c, b + 1, c + 2\n        # a,b,c = a + 2 * b + 3 * c, 2 * b + 3 * c, 3 * c\n    \t# a,b,c=b,a+b\n    return b\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    a,b,c = 1,2,3\n    for i in range(4,n+1):\n        a,b,c=b,c,c + 2*b + 3*a\n    return c\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","1","2","","# Error: expected","#     2","# but got","#     1","#     2","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":173,"studentId":0,"date":null,"diff":"\r\nInputObject                      SideIndicator\r\n-----------                      -------------\r\n    if n == 1:                   =>           \r\n        return 1                 =>           \r\n    if n == 2:                   =>           \r\n        return 2                 =>           \r\n    if n == 3:                   =>           \r\n        return 3                 =>           \r\n        a, b, c, d = 1, 2, 3, 10 =>           \r\n        while n >= 5:            =>           \r\n            a = b                =>           \r\n            b = c                =>           \r\n            c = d                =>           \r\n            d = c + 2*b + 3*a    =>           \r\n            n = n - 1            =>           \r\n        return d                 =>           \r\n    else:                        =>           \r\n    a, b, c, d = 1, 2, 3, 10     <=           \r\n    while n >= 5:                <=           \r\n        a = b                    <=           \r\n        b = c                    <=           \r\n        c = d                    <=           \r\n        d = c + 2*b + 3*a        <=           \r\n        n = n - 1                <=           \r\n    return d                     <=           \r\ng_iter(6)                        <=           \r\n                                 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a, b, c, d = 1, 2, 3, 10\n    while n >= 5:\n        a = b\n        b = c\n        c = d\n        d = c + 2*b + 3*a\n        n = n - 1\n\n    return d\n\ng_iter(6)\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    else:\n        a, b, c, d = 1, 2, 3, 10\n        while n >= 5:\n            a = b\n            b = c\n            c = d\n            d = c + 2*b + 3*a\n            n = n - 1\n\n        return d\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","10","","# Error: expected","#     1","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":174,"studentId":0,"date":null,"diff":"\r\nInputObject                                   SideIndicator\r\n-----------                                   -------------\r\n            x, y, z = y, z, z + y * 2 + 3 * x =>           \r\n            x, y, z = y, z, z + y * 2 + 3 * a <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if (n < 4):\n        return n\n    else:\n        x = 1\n        y = 2\n        z = 3\n        while (n > 3):\n            x, y, z = y, z, z + y * 2 + 3 * a\n            n = n-1\n    return z\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if (n < 4):\n        return n\n    else:\n        x = 1\n        y = 2\n        z = 3\n        while (n > 3):\n            x, y, z = y, z, z + y * 2 + 3 * x\n            n = n-1\n    return z\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 216, in g_iter","    x, y, z = y, z, z + y * 2 + 3 * a","NameError: name 'a' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":175,"studentId":0,"date":null,"diff":"\r\nInputObject                               SideIndicator\r\n-----------                               -------------\r\n            a, b, c = a + 2*b + 3*c, a, b =>           \r\n            a = a + 2*b + 3*c             <=           \r\n            b = a                         <=           \r\n            c = b                         <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    a = 3\n    b = 2\n    c = 1\n    G = 3\n    if n <= 3:\n        return n\n    else:\n        while G < n:\n            a = a + 2*b + 3*c \n            b = a\n            c = b\n            G +=1 \n        return a\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    a = 3\n    b = 2\n    c = 1\n    G = 3\n    if n <= 3:\n        return n\n    else:\n        while G < n:\n            a, b, c = a + 2*b + 3*c, a, b\n            G +=1 \n        return a\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","60","","# Error: expected","#     22","# but got","#     60","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":176,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n        x += 1*(n-1) + 2*(n-2) + 3*(n-3) - n =>           \r\n        x += z*(n-z) + (n-1)                 <=           \r\n        z += 1                               <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    x, z = n, 1\n    while n > 3 and z <= 3:\n        x += z*(n-z) + (n-1)\n        n -= 1\n        z += 1\n    return x\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    x, z = n, 1\n    while n > 3 and z <= 3:\n        x += 1*(n-1) + 2*(n-2) + 3*(n-3) - n\n        n -= 1\n    return x\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","20","","# Error: expected","#     22","# but got","#     20","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":178,"studentId":0,"date":null,"diff":"\r\nInputObject                                                        SideIndicator\r\n-----------                                                        -------------\r\n    if n <= 3:                                                     =>           \r\n        one, two, three = 1, 2, 3                                  =>           \r\n        i = 4                                                      =>           \r\n        while i <= n:                                              =>           \r\n            final = three + two * 2 + one * 3                      =>           \r\n            one, two, three = two, three, final                    =>           \r\n            i += 1                                                 =>           \r\n    return final                                                   =>           \r\ndef pingpong(n):                                                   =>           \r\n    \"\"\"Return the nth element of the ping-pong sequence.           =>           \r\n    >>> pingpong(7)                                                =>           \r\n    7                                                              =>           \r\n    >>> pingpong(8)                                                =>           \r\n    >>> pingpong(15)                                               =>           \r\n    >>> pingpong(21)                                               =>           \r\n    -1                                                             =>           \r\n    >>> pingpong(22)                                               =>           \r\n    >>> pingpong(30)                                               =>           \r\n    >>> pingpong(68)                                               =>           \r\n    >>> pingpong(69)                                               =>           \r\n    >>> pingpong(70)                                               =>           \r\n    0                                                              =>           \r\n    >>> pingpong(71)                                               =>           \r\n    1                                                              =>           \r\n    >>> pingpong(72)                                               =>           \r\n    0                                                              =>           \r\n    >>> pingpong(100)                                              =>           \r\n    >>> from construct_check import check                          =>           \r\n    >>> check(HW_SOURCE_FILE, 'pingpong', ['Assign', 'AugAssign']) =>           \r\n    #def pingpong_next(k, p, up):                                  =>           \r\n        #if k == n:                                                =>           \r\n            #return p                                              =>           \r\n        #if up:                                                    =>           \r\n            #return pingpong_switch(k+1, p+1, up)                  =>           \r\n        #else:                                                     =>           \r\n            #return pingpong_switch(k+1, p-1, up)                  =>           \r\n    #def pingpong_switch(k, p, up):                                =>           \r\n        #if k % 7 == 0 or has_seven(k):                            =>           \r\n            #return pingpong_next(k, p, not up)                    =>           \r\n        #else:                                                     =>           \r\n            #return pingpong_next(k, p, up)                        =>           \r\n    #return pingpong_next(1, 1, True)                              =>           \r\n        return n                                                   =>           \r\n    True                                                           =>           \r\n    6                                                              =>           \r\n    else:                                                          =>           \r\n    #if n == 1:                                                    =>           \r\n        #print(\"Move the top disk from rod\", start, \"to rod\", end) =>           \r\n    #else:                                                         =>           \r\n        #move_stack(n, 6 - start - end, end)                       =>           \r\n        #print(\"Move the top disk from rod\", start, \"to rod\", end) =>           \r\n        #move_stack(n-1, 6 - start - end, end)                     =>           \r\n    1                                                              =>           \r\n    2                                                              =>           \r\n    0                                                              =>           \r\n    1                                                              =>           \r\n    2                                                              =>           \r\n                                                                   =>           \r\n                                                                   =>           \r\n    6                                                              =>           \r\n                                                                   =>           \r\n                                                                   =>           \r\n    \"\"\"                                                            =>           \r\n                                                                   =>           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n    if n <= 7:\n        return n\n    else:\n        if (n-1) % 7 == 0 or has_seven(n-1):\n            return pingpong(n-2)\n        else:\n            return pingpong(n-1)*2 - pingpong(n-2)\ndef has_seven(k):\n    \"\"\"Returns True if at least one of the digits of k is a 7, False otherwise.\n\n    >>> has_seven(3)\n    False\n    >>> has_seven(7)\n    True\n    >>> has_seven(2734)\n    True\n    >>> has_seven(2634)\n    False\n    >>> has_seven(734)\n    True\n    >>> has_seven(7777)\n    True\n    \"\"\"\n    if k % 10 == 7:\n        return True\n    elif k < 10:\n        return False\n    else:\n        return has_seven(k // 10)\n\n\ndef count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    return makin_change(1, amount)\n\ndef makin_change(money, amount):\n    if amount < 0:\n        return 0\n    if amount == 0:\n        return 1\n    if money > amount:\n        return 0\n    else:\n        got_cash = makin_change(money, amount-money)\n        zero_cash = makin_change(2 * money, amount)\n    return got_cash + zero_cash\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n\ndef move_stack(n, start, end):\n    \"\"\"Print the moves required to move n disks on the start pole to the end\n    pole without violating the rules of Towers of Hanoi.\n\n    n -- number of disks\n    start -- a pole position, either 1, 2, or 3\n    end -- a pole position, either 1, 2, or 3\n\n    There are exactly three poles, and start and end must be different. Assume\n    that the start pole has at least n disks of increasing size, and the end\n    pole is either empty or has a top disk larger than the top n start disks.\n\n    >>> move_stack(1, 1, 3)\n    Move the top disk from rod 1 to rod 3\n    >>> move_stack(2, 1, 3)\n    Move the top disk from rod 1 to rod 2\n    Move the top disk from rod 1 to rod 3\n    Move the top disk from rod 2 to rod 3\n    >>> move_stack(3, 1, 3)\n    Move the top disk from rod 1 to rod 3\n    Move the top disk from rod 1 to rod 2\n    Move the top disk from rod 3 to rod 2\n    Move the top disk from rod 1 to rod 3\n    Move the top disk from rod 2 to rod 1\n    Move the top disk from rod 2 to rod 3\n    Move the top disk from rod 1 to rod 3\n    \"\"\"\n    assert 1 <= start <= 3 and 1 <= end <= 3 and start != end, \"Bad start/end\"\n    if n == 1:\n        print_move(start, end)\n    else:\n        move_stack(n-1, start, 6-start-end)\n        move_stack(1, start, end)\n        move_stack(n-1, 6-start-end, end)\n\n\n\n\n###################\n# Extra Questions #\n###################\n\nfrom operator import sub, mul\n\ndef Y(f):\n    \"\"\"The Y (\"paradoxical\") combinator.\"\"\"\n    return f(lambda: Y(f))\n\n\ndef Y_tester():\n    \"\"\"\n    >>> tmp = Y_tester()\n    >>> tmp(1)\n    1\n    >>> tmp(5)\n    120\n    >>> tmp(2)\n    2\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return Y(________)  # Replace\n\ndef zero(f):\n    return lambda x: x\n\ndef successor(n):\n    return lambda f: lambda x: f(n(f)(x))\ndef one(f):\n    \"\"\"Church numeral 1: same as successor(zero)\"\"\"\n    \"*** YOUR CODE HERE ***\"\n\ndef two(f):\n    \"\"\"Church numeral 2: same as successor(successor(zero))\"\"\"\n    \"*** YOUR CODE HERE ***\"\n\nthree = successor(two)\n\ndef church_to_int(n):\n    \"\"\"Convert the Church numeral n to a Python integer.\n\n    >>> church_to_int(zero)\n    0\n    >>> church_to_int(one)\n    1\n    >>> church_to_int(two)\n    2\n    >>> church_to_int(three)\n    3\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\ndef add_church(m, n):\n    \"\"\"Return the Church numeral for m + n, for Church numerals m and n.\n\n    >>> church_to_int(add_church(two, three))\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\ndef mul_church(m, n):\n    \"\"\"Return the Church numeral for m * n, for Church numerals m and n.\n\n    >>> four = successor(three)\n    >>> church_to_int(mul_church(two, three))\n    6\n    >>> church_to_int(mul_church(three, four))\n    12\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\ndef pow_church(m, n):\n    \"\"\"Return the Church numeral m ** n, for Church numerals m and n.\n\n    >>> church_to_int(pow_church(two, three))\n    8\n    >>> church_to_int(pow_church(three, two))\n    9\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        one, two, three = 1, 2, 3\n        i = 4\n        while i <= n:\n            final = three + two * 2 + one * 3\n            one, two, three = two, three, final\n            i += 1\n    return final\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","4","","# Error: expected","#     10","# but got","#     4","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":179,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n            counter += 1 =>           \r\n                         <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    sum_values = 0\n    g1, g2, g3 = 1, 2, 3\n    counter = 3\n    if n <= 3:\n        return n\n    else:\n        while counter < n:\n            sum_values = g3 + 2*g2 + 3*g1\n            g1, g2, g3 = g2, g3, sum_values\n            \n        return sum_values\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    sum_values = 0\n    g1, g2, g3 = 1, 2, 3\n    counter = 3\n    if n <= 3:\n        return n\n    else:\n        while counter < n:\n            sum_values = g3 + 2*g2 + 3*g1\n            g1, g2, g3 = g2, g3, sum_values\n            counter += 1\n        return sum_values\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     10","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":181,"studentId":0,"date":null,"diff":"\r\nInputObject                   SideIndicator\r\n-----------                   -------------\r\n    return x + y + z          =>           \r\n    return x + 2 * y + 3 * z  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    x = 3\n    y = 2\n    z = 1\n    if n <= 3:\n        return n\n    if n == 4:\n        return x + 2 * y + 3 * z\n    else:\n        for i in range(5, n + 1):\n            x, y, z = x + 2 * y + 3 * z, 2 * x, 3 * y\n    return x + 2 * y + 3 * z \n    \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    x = 3\n    y = 2\n    z = 1\n    if n <= 3:\n        return n\n    if n == 4:\n        return x + 2 * y + 3 * z\n    else:\n        for i in range(5, n + 1):\n            x, y, z = x + 2 * y + 3 * z, 2 * x, 3 * y\n    return x + y + z \n    \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","40","","# Error: expected","#     22","# but got","#     40","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":182,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                               SideIndicator\r\n-----------                                                                                               -------------\r\n            n_minus_1, n_minus_2, n_minus_3 = n_minus_1 + 2*n_minus_2+ 3*n_minus_3, n_minus_1, n_minus_2  =>           \r\n            n_minus_1, n_minus_2, n_minus_3 = n_minus_2, n_minus_1, n_minus_1 + 2*n_minus_2+ 3*n_minus_3  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3: \n        return n \n    else:\n        n_minus_1, n_minus_2, n_minus_3  = 3, 2, 1 \n        k = 4\n        while k <= n:\n            n_minus_1, n_minus_2, n_minus_3 = n_minus_2, n_minus_1, n_minus_1 + 2*n_minus_2+ 3*n_minus_3 \n            k = k + 1\n    return n_minus_1\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3: \n        return n \n    else:\n        n_minus_1, n_minus_2, n_minus_3  = 3, 2, 1 \n        k = 4\n        while k <= n:\n            n_minus_1, n_minus_2, n_minus_3 = n_minus_1 + 2*n_minus_2+ 3*n_minus_3, n_minus_1, n_minus_2 \n            k = k + 1\n    return n_minus_1\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","2","","# Error: expected","#     10","# but got","#     2","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":183,"studentId":0,"date":null,"diff":"\r\nInputObject                               SideIndicator\r\n-----------                               -------------\r\n        a,b,c =1,2,3                      =>           \r\n            a, b, c = b, c, c + 2*b + 3*a =>           \r\n        a = 1                             <=           \r\n        b = 2                             <=           \r\n        c = 3                             <=           \r\n            a = b                         <=           \r\n            b = c                         <=           \r\n            c = c + 2*b + 3*a             <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n    if n <= 3:\n        return n\n    else:\n        a = 1\n        b = 2\n        c = 3\n        while n > 3:\n            a = b\n            b = c\n            c = c + 2*b + 3*a\n            n = n - 1\n    return c\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n    if n <= 3:\n        return n\n    else:\n        a,b,c =1,2,3\n        while n > 3:\n            a, b, c = b, c, c + 2*b + 3*a\n            n = n - 1\n    return c\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","15","","# Error: expected","#     10","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":184,"studentId":0,"date":null,"diff":"\r\nInputObject                   SideIndicator\r\n-----------                   -------------\r\n    if n<=3:                  =>           \r\n    a = 3                     =>           \r\n    b = 2                     =>           \r\n    c = 1                     =>           \r\n    total = a + 2*b + 3*c     =>           \r\n    for i in range(4, n):     =>           \r\n        a, b, c = total, a, b =>           \r\n        total = a + 2*b + 3*c =>           \r\n    return total              =>           \r\n    a = 0                     <=           \r\n    b = 1                     <=           \r\n    c = 2                     <=           \r\n    for i in range(n):        <=           \r\n        a = b                 <=           \r\n        b =  a + b            <=           \r\n        c =  a + b + c        <=           \r\n    return c                  <=           \r\n    if(n <= 3):               <=           \r\n    elif n==4:                <=           \r\n        return 10             <=           \r\n        return 22             <=           \r\n    else:                     <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a = 0 \n    b = 1\n    c = 2\n    for i in range(n):\n        a = b\n        b =  a + b\n        c =  a + b + c\n    return c\n\n    if(n <= 3):\n        return n\n    elif n==4:\n        return 10\n    else:\n        return 22\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    a = 3 \n    b = 2\n    c = 1\n    total = a + 2*b + 3*c\n    for i in range(4, n):\n        a, b, c = total, a, b\n        total = a + 2*b + 3*c\n    return total\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","5","","# Error: expected","#     1","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":185,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n    a = 1                                      =>           \r\n    b = 2                                      =>           \r\n    c = 3                                      =>           \r\n        a, b, c = b , c, c + (2 * b) + (3 * a) =>           \r\n    a = n - 1                                  <=           \r\n    b = n - 2                                  <=           \r\n    c = n - 3                                  <=           \r\n        a, b, c = b , c, a + (2 * b) + (3 * c) <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a = n - 1\n    b = n - 2\n    c = n - 3\n    if n <= 3:\n        return n\n    while n > 3:\n        a, b, c = b , c, a + (2 * b) + (3 * c)\n        n -= 1\n    return c\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a = 1\n    b = 2\n    c = 3\n    if n <= 3:\n        return n\n    while n > 3:\n        a, b, c = b , c, c + (2 * b) + (3 * a)\n        n -= 1\n    return c\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","55","","# Error: expected","#     22","# but got","#     55","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":186,"studentId":0,"date":null,"diff":"\r\nInputObject SideIndicator\r\n----------- -------------\r\n        i=3 =>           \r\n        i=2 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n<=3:\n        return n\n    else:\n        i=2\n        sum_1 = 3\n        sum_2 = 2\n        sum_3 = 1\n        while i<n:\n            total_sum = sum_1 + 2*sum_2 + 3*sum_3\n            sum_3 = sum_2\n            sum_2 = sum_1\n            sum_1 = total_sum\n            i = i+1\n        return total_sum\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n<=3:\n        return n\n    else:\n        i=3\n        sum_1 = 3\n        sum_2 = 2\n        sum_3 = 1\n        while i<n:\n            total_sum = sum_1 + 2*sum_2 + 3*sum_3\n            sum_3 = sum_2\n            sum_2 = sum_1\n            sum_1 = total_sum\n            i = i+1\n        return total_sum\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","22","","# Error: expected","#     10","# but got","#     22","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":187,"studentId":0,"date":null,"diff":"\r\nInputObject                           SideIndicator\r\n-----------                           -------------\r\n        a1, a2, a3 = total, a1, a2    =>           \r\n                                      =>           \r\n        a1, a2, a3 = a1+1, a2+1, a3+1 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n   \n    a1, a2, a3 = 3, 2, 1\n    total, count = 0, 4\n    if n <= 3:\n        return n\n    while count <= n:\n        total = 1*a1 + 2*a2 + 3*a3\n        a1, a2, a3 = a1+1, a2+1, a3+1\n        count += 1\n    return total\n        \n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n   \n    a1, a2, a3 = 3, 2, 1\n    total, count = 0, 4\n    if n <= 3:\n        return n\n\n    while count <= n:\n        total = 1*a1 + 2*a2 + 3*a3\n        a1, a2, a3 = total, a1, a2\n        count += 1\n    return total\n        \n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","16","","# Error: expected","#     22","# but got","#     16","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":188,"studentId":0,"date":null,"diff":"\r\nInputObject                          SideIndicator\r\n-----------                          -------------\r\n            a, b, c= b, c, c+2*b+3*a =>           \r\n            c=c+2*b+3*a              <=           \r\n            a=b                      <=           \r\n            b=c                      <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n    a=1\n    b=2\n    c=3\n    if n <= 3:\n        return n\n    else:\n        while n > 3:\n            c=c+2*b+3*a\n            a=b\n            b=c\n            n-=1\n    return c\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n    a=1\n    b=2\n    c=3\n    if n <= 3:\n        return n\n    else:\n        while n > 3:\n            a, b, c= b, c, c+2*b+3*a\n            n-=1\n    return c\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","36","","# Error: expected","#     22","# but got","#     36","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":189,"studentId":0,"date":null,"diff":"\r\nInputObject                           SideIndicator\r\n-----------                           -------------\r\n        a, b, c = b, c, a*3 + b*2 + c =>           \r\n        a, b, c = a, b, a*3 + b*2 + c <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    a, b, c = 1, 2, 3\n    for i in range(4, n + 1):\n        a, b, c = a, b, a*3 + b*2 + c\n    return c\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    a, b, c = 1, 2, 3\n    for i in range(4, n + 1):\n        a, b, c = b, c, a*3 + b*2 + c\n    return c\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","17","","# Error: expected","#     22","# but got","#     17","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":190,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n    if n<5:             =>           \r\n        return total    =>           \r\n        return total-10 =>           \r\n    else:               =>           \r\n    return total        <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n    k=n\n    total=0\n    if n<4:\n        return n\n    else:\n        while k>3:\n            k=k-1\n            total+= (n - 1) + 2 * (n - 2) + 3 * (n - 3)\n    return total\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n    k=n\n    total=0\n    if n<4:\n        return n\n    else:\n        while k>3:\n            k=k-1\n            total+= (n - 1) + 2 * (n - 2) + 3 * (n - 3)\n    if n<5:\n        return total\n    else:\n        return total-10\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","32","","# Error: expected","#     22","# but got","#     32","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":191,"studentId":0,"date":null,"diff":"\r\nInputObject                                SideIndicator\r\n-----------                                -------------\r\n            f, g, h = g, h , h + 2*g + 3*f =>           \r\n            f = g                          <=           \r\n            g = h                          <=           \r\n            h = h + 2*g + 3*f              <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <=3: \n        return n \n    else:\n        f, g, h= 1, 2, 3\n        k = 3\n        while k < n: \n            f = g \n            g = h \n            h = h + 2*g + 3*f\n            k += 1\n        return h \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <=3: \n        return n \n    else:\n        f, g, h= 1, 2, 3\n        k = 3\n        while k < n: \n            f, g, h = g, h , h + 2*g + 3*f\n            k += 1\n        return h \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","15","","# Error: expected","#     10","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":192,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n    return c          =>           \r\n    return a + b + c  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total = 0 \n    if n <= 3:\n        return n \n    else:\n        a = 1\n        b = 2\n        c = 3  \n        while n > 3:\n            a, b, c = b, c, c + 2 * b + 3 * a\n            total += n \n            n -= 1\n    return a + b + c \n        #i in range(1, 4):\n        #keep going while a condition is true   \n        #a = i * (n - i)\n        #total += i * b\n        #g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total = 0 \n    if n <= 3:\n        return n \n    else:\n        a = 1\n        b = 2\n        c = 3  \n        while n > 3:\n            a, b, c = b, c, c + 2 * b + 3 * a\n            total += n \n            n -= 1\n    return c \n        #i in range(1, 4):\n        #keep going while a condition is true   \n        #a = i * (n - i)\n        #total += i * b\n        #g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","15","","# Error: expected","#     10","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":193,"studentId":0,"date":null,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n        return z =>           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        x, y, z, k = 1, 2, 3, 4\n        while k <= n:\n            total = z + 2*y + 3*x\n            x = y\n            y = z\n            z = total\n            k += 1\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        x, y, z, k = 1, 2, 3, 4\n        while k <= n:\n            total = z + 2*y + 3*x\n            x = y\n            y = z\n            z = total\n            k += 1\n        return z\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","","# Error: expected","#     10","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":194,"studentId":0,"date":null,"diff":"\r\nInputObject       SideIndicator\r\n-----------       -------------\r\n    x = 4         =>           \r\n    while x <= n: =>           \r\n    x = 1         <=           \r\n    while x < n:  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    prev1 = 3\n    prev2 = 2\n    prev3 = 1\n    x = 1\n    total = 0\n    if n <= 3:\n        return n\n    while x < n:\n        total = (prev1 + 2 * prev2 + 3 * prev3)\n        x = 1 + x\n        prev3 = prev2\n        prev2 = prev1\n        prev1 = total\n    return total\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    prev1 = 3\n    prev2 = 2\n    prev3 = 1\n    x = 4\n    total = 0\n    if n <= 3:\n        return n\n    while x <= n:\n        total = (prev1 + 2 * prev2 + 3 * prev3)\n        x = 1 + x\n        prev3 = prev2\n        prev2 = prev1\n        prev1 = total\n    return total\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","51","","# Error: expected","#     10","# but got","#     51","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":195,"studentId":0,"date":null,"diff":"\r\nInputObject                    SideIndicator\r\n-----------                    -------------\r\n        for i in range(3,n):   =>           \r\n    return c                   =>           \r\n        for i in range(3,n>3): <=           \r\n        return c               <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a,b,c=1,2,3  \n    if n < 3:\n        return n\n    else: \n        for i in range(3,n>3):\n            a,b,c=b,c,c+2*b+3*a\n        return c\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a,b,c=1,2,3  \n    if n < 3:\n        return n\n    else: \n        for i in range(3,n):\n            a,b,c=b,c,c+2*b+3*a\n    return c\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","3","","# Error: expected","#     10","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":196,"studentId":0,"date":null,"diff":"\r\nInputObject                                   SideIndicator\r\n-----------                                   -------------\r\n        x, y, z = y, z, z + 2 * y + 3 * x     =>           \r\n        n -= 1                                =>           \r\n    return z                                  =>           \r\n            x, y, z = y, z, z + 2 * y + 3 * x <=           \r\n            n -= 1                            <=           \r\n            return z                          <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    x = 1\n    y = 2\n    z = 3\n    while n > 3:\n            x, y, z = y, z, z + 2 * y + 3 * x\n            n -= 1\n            return z\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    x = 1\n    y = 2\n    z = 3\n    while n > 3:\n        x, y, z = y, z, z + 2 * y + 3 * x\n        n -= 1\n    return z\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","10","","# Error: expected","#     22","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":197,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n            return large                       =>           \r\n            return large + 2 * med + 3 * small <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        large, med,small = 3,2,1\n        while n >3:\n            large, med,small = large + 2 * med + 3 * small, large, med\n            n-=1\n        else:\n            return large + 2 * med + 3 * small\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        large, med,small = 3,2,1\n        while n >3:\n            large, med,small = large + 2 * med + 3 * small, large, med\n            n-=1\n        else:\n            return large\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","22","","# Error: expected","#     10","# but got","#     22","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":198,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n    return values[n]     =>           \r\n        return values[n] <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \n    if n <=3:\n        return n\n    i = 4\n    values = [0,1,2,3]\n    while i <= n:\n        \n        function = values[i-1] + 2 * values[i-2] + 3 * values[i-3]\n        values.append(function)\n        i +=1\n        return values[n]\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \n    if n <=3:\n        return n\n    i = 4\n    values = [0,1,2,3]\n    while i <= n:\n        \n        function = values[i-1] + 2 * values[i-2] + 3 * values[i-3]\n        values.append(function)\n        i +=1\n    return values[n]\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 235, in g_iter","    return values[n]","IndexError: list index out of range","","# Error: expected","#     22","# but got","#     IndexError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":199,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                  SideIndicator\r\n-----------                                                                  -------------\r\n    if n == 1:                                                               =>           \r\n        return third                                                         =>           \r\n    elif n == 2:                                                             =>           \r\n        return second                                                        =>           \r\n    elif n == 3:                                                             =>           \r\n        return first                                                         =>           \r\n        while n > 3:                                                         =>           \r\n            first, second, third = first + 2*second + 3*third, first, second =>           \r\n            n = n - 1                                                        =>           \r\n        return first                                                         =>           \r\n    else:                                                                    =>           \r\n    while n > 0:                                                             <=           \r\n        first, second, third = first + 2*second + 3*third, first, second     <=           \r\n        n = n - 1                                                            <=           \r\n    return first                                                             <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    first, second, third  = 3, 2, 1\n    while n > 0:\n        first, second, third = first + 2*second + 3*third, first, second\n        n = n - 1\n    return first\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    first, second, third  = 3, 2, 1\n    if n == 1:\n        return third\n    elif n == 2:\n        return second\n    elif n == 3:\n        return first\n    else:\n        while n > 3:\n            first, second, third = first + 2*second + 3*third, first, second\n            n = n - 1\n        return first\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","10","","# Error: expected","#     1","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":200,"studentId":0,"date":null,"diff":"\r\nInputObject     SideIndicator\r\n-----------     -------------\r\n    counter = 4 =>           \r\n    counter = 3 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    counter = 3\n    current = 3\n    prev_1 = 2\n    prev_2 = 1\n    if n <= 3:\n        return n\n    else:\n        while counter <= n:\n            current, prev_1, prev_2 = current + 2 * prev_1 + 3 * prev_2, current, prev_1\n            counter += 1\n        return current\n\n\n\n        \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    counter = 4\n    current = 3\n    prev_1 = 2\n    prev_2 = 1\n    if n <= 3:\n        return n\n    else:\n        while counter <= n:\n            current, prev_1, prev_2 = current + 2 * prev_1 + 3 * prev_2, current, prev_1\n            counter += 1\n        return current\n\n\n\n        \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","22","","# Error: expected","#     10","# but got","#     22","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":202,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n        i, x, y, z = 4, 1, 2, 3                =>           \r\n        while i <= n:                          =>           \r\n            current = z + 2 * y + 3 * x        =>           \r\n            x, y, z = y, z, current            =>           \r\n            i += 1                             =>           \r\n        return z                               =>           \r\n                                               =>           \r\n    def countup(k, i):                         =>           \r\n        if i < n:                              =>           \r\n            if has_seven(k):                   =>           \r\n                return countdown(k - 1, i + 1) =>           \r\n            else:                              =>           \r\n                return countup(k + 1, i + 1)   =>           \r\n        else:                                  =>           \r\n            return k                           =>           \r\n    countup(1, 1)                              =>           \r\n    def countdown(k, i):                       =>           \r\n        if i < n:                              =>           \r\n            if has_seven(k):                   =>           \r\n                return countup(k + 1, i + 1)   =>           \r\n            else:                              =>           \r\n                return countdown(k - 1, i + 1) =>           \r\n        else:                                  =>           \r\n            return k                           =>           \r\n                                               =>           \r\n        i, total = 4, 0                        <=           \r\n        while i < n:                           <=           \r\n            x = 1 * (n - 1)                    <=           \r\n            y = 2 * (n - 2)                    <=           \r\n            z = 3 * (n - 3)                    <=           \r\n            xyz = x + y + z                    <=           \r\n            total += xyz                       <=           \r\n        return total                           <=           \r\n    \"*** YOUR CODE HERE ***\"                   <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n    if n <= 3: \n        return n \n    else:\n        i, total = 4, 0\n        while i < n: \n            x = 1 * (n - 1) \n            y = 2 * (n - 2)\n            z = 3 * (n - 3)\n            xyz = x + y + z\n            total += xyz\n        return total\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n    if n <= 3: \n        return n \n    else:\n        i, x, y, z = 4, 1, 2, 3\n        while i <= n: \n            current = z + 2 * y + 3 * x\n            x, y, z = y, z, current\n            i += 1\n        return z\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","0","","# Error: expected","#     10","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":203,"studentId":0,"date":null,"diff":"\r\nInputObject                                                            SideIndicator\r\n-----------                                                            -------------\r\n    counter = 4                                                        =>           \r\n    n1 = 1                                                             =>           \r\n    n2 = 2                                                             =>           \r\n    n3 = 3                                                             =>           \r\n    if n == 1:                                                         =>           \r\n        return 1                                                       =>           \r\n    elif n == 2:                                                       =>           \r\n        return 2                                                       =>           \r\n    elif n == 3:                                                       =>           \r\n        return 3                                                       =>           \r\n    while counter <= n:                                                =>           \r\n        temp = n3 + 2 * n2 + 3 * n1                                    =>           \r\n        n1 = n2                                                        =>           \r\n        n2 = n3                                                        =>           \r\n        n3 = temp                                                      =>           \r\n        counter += 1                                                   =>           \r\n    return n3                                                          =>           \r\n                                                                       =>           \r\n    from math import log                                               =>           \r\n    def count_partions(n, m):                                          =>           \r\n        if amount == 1:                                                =>           \r\n        if amount < 1:                                                 =>           \r\n            return 0                                                   =>           \r\n        return count_partitions(n-m, m) + count_partitions (n, m // 2) =>           \r\n    two_power = 2**log(amount,2)//1                                    =>           \r\n    return count_partions(amount, two_power)                           =>           \r\n                                                                       =>           \r\n    if start == 1 and end == 2 or start == 2 and end == 1:             =>           \r\n        extra = 3                                                      =>           \r\n    if start == 1 and end == 3 or start == 3 and end == 1:             =>           \r\n        extra = 2                                                      =>           \r\n    if start == 2 and end == 3 or start == 3 and end == 2:             =>           \r\n        extra = 1                                                      =>           \r\n    if n == 1:                                                         =>           \r\n        return print_move(start, end)                                  =>           \r\n    else:                                                              =>           \r\n        move_stack(n-1, start, extra)                                  =>           \r\n        move_stack(1, start, end)                                      =>           \r\n        move_stack(n-1, extra, end)                                    =>           \r\n                                                                       =>           \r\n                                                                       =>           \r\n    while n <= 0:                                                      <=           \r\n        if n == 1:                                                     <=           \r\n        if n == 2:                                                     <=           \r\n            return 2                                                   <=           \r\n        if n == 3:                                                     <=           \r\n            return 3                                                   <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    # i, result = 0, 0\n    # while i <= n:\n    #     if n <= 3:\n    #         i += 1\n    #         result += n\n        \n    #     elif n > 3:\n    #         i += 1\n    #         result += n(n - 1)\n            \n    # return result\n    while n <= 0:\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    # i, result = 0, 0\n    # while i <= n:\n    #     if n <= 3:\n    #         i += 1\n    #         result += n\n        \n    #     elif n > 3:\n    #         i += 1\n    #         result += n(n - 1)\n            \n    # return result\n    counter = 4\n    n1 = 1\n    n2 = 2\n    n3 = 3\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    while counter <= n:\n        temp = n3 + 2 * n2 + 3 * n1\n        n1 = n2\n        n2 = n3\n        n3 = temp\n        counter += 1\n    return n3\n\n\n        \n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","","# Error: expected","#     1","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":204,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n    first = 3                                  =>           \r\n    thrid = 1                                  =>           \r\n        first = first + 2 * second + 3 * thrid =>           \r\n    first = 1                                  <=           \r\n    third = 3                                  <=           \r\n        first = third + 2 * second + 3 * first <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n    first = 1\n    second = 2\n    third = 3\n\n    if n <= 3:\n      return n\n    else: \n      while n > 3:\n        temp = first\n        first = third + 2 * second + 3 * first\n        new_temp = second\n        second = temp\n        thrid = new_temp\n        n -= 1\n    \n    return first\n\n\n\n\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n    first = 3\n    second = 2\n    thrid = 1\n\n    if n <= 3:\n      return n\n    else: \n      while n > 3:\n        temp = first\n        first = first + 2 * second + 3 * thrid\n        new_temp = second\n        second = temp\n        thrid = new_temp\n        n -= 1\n    \n    return first\n\n\n\n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","35","","# Error: expected","#     22","# but got","#     35","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":205,"studentId":0,"date":null,"diff":"\r\nInputObject                                   SideIndicator\r\n-----------                                   -------------\r\n        x, y, z = y, z, z + (2 * y) + (3 * x) =>           \r\n                                              =>           \r\n        x = y                                 <=           \r\n        y = z                                 <=           \r\n        z = z + (2 * y) + (3 * x)             <=           \r\n                                              <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n\n    x, y, z = 1, 2, 3\n\n    while n > 3:\n        x = y\n        y = z\n        z = z + (2 * y) + (3 * x)\n        n -= 1\n\n    return z\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n\n    x, y, z = 1, 2, 3\n\n    while n > 3:\n        x, y, z = y, z, z + (2 * y) + (3 * x)\n        n -= 1\n\n    return z\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","15","","# Error: expected","#     10","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":206,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                                        SideIndi\r\n                                                                                                                   cator   \r\n-----------                                                                                                        --------\r\n    answer = 0                                                                                                     =>      \r\n    i = 4                                                                                                          =>      \r\n    sequence = [1,2,3]                                                                                             =>      \r\n    while len(sequence)<n:                                                                                         =>      \r\n        sequence.append(sequence[len(sequence)-1] + 2 * sequence[len(sequence)-2] + 3 * sequence[len(sequence)-3]) =>      \r\n    return sequence[n-1]                                                                                           =>      \r\n                                                                                                                   =>      \r\n    def countdown(k,i):                                                                                            =>      \r\n        if k==n:                                                                                                   =>      \r\n            return i                                                                                               =>      \r\n        elif k%7==0 or has_seven(k):                                                                               =>      \r\n            countup(k+1,i-1)                                                                                       =>      \r\n        return countdown(k+1,i-1)                                                                                  =>      \r\n    def countup(k,i):                                                                                              =>      \r\n        if k==n:                                                                                                   =>      \r\n            return i                                                                                               =>      \r\n        elif k%7==0 or has_seven(k):                                                                               =>      \r\n            countdown(k+1,i+1)                                                                                     =>      \r\n        return countup(k+1,i+1)                                                                                    =>      \r\n    return countup(1,1)                                                                                            =>      \r\n                                                                                                                   =>      \r\n    g(n)                                                                                                           <=      \r\n    \"*** YOUR CODE HERE ***\"                                                                                       <=      \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    g(n)\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    answer = 0 \n    i = 4\n    sequence = [1,2,3]\n    while len(sequence)<n:\n        sequence.append(sequence[len(sequence)-1] + 2 * sequence[len(sequence)-2] + 3 * sequence[len(sequence)-3])\n    return sequence[n-1]\n\n\n \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","","# Error: expected","#     1","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":207,"studentId":0,"date":null,"diff":"\r\nInputObject                     SideIndicator\r\n-----------                     -------------\r\n        total2 = previous_total =>           \r\n        ftotal = final_total    =>           \r\n        total3 = first_total    =>           \r\n        previous_total = ftotal =>           \r\n        first_total = total2    =>           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    final_total = 3\n    first_total = 1\n    previous_total = 2\n    a = 1\n    b = 2\n    c = 3\n    count = 1\n    if n <= 3:\n        return n\n    while n > 3:\n        if a < b and a < c:\n            a = 3\n            b, c = c, b\n        elif b < c and b < a:\n            b = 3\n            a, c = c, a\n        elif c < a and c < b:\n            c = 3\n            b, a = a, b\n        final_total = final_total + 2 * previous_total + 3 * first_total\n        n -= 1\n    return final_total\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    final_total = 3\n    first_total = 1\n    previous_total = 2\n    a = 1\n    b = 2\n    c = 3\n    count = 1\n    if n <= 3:\n        return n\n    while n > 3:\n        if a < b and a < c:\n            a = 3\n            b, c = c, b\n        elif b < c and b < a:\n            b = 3\n            a, c = c, a\n        elif c < a and c < b:\n            c = 3\n            b, a = a, b\n        total2 = previous_total\n        ftotal = final_total\n        total3 = first_total\n        final_total = final_total + 2 * previous_total + 3 * first_total\n        previous_total = ftotal\n        first_total = total2\n        n -= 1\n    return final_total\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","17","","# Error: expected","#     22","# but got","#     17","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":208,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n            a, b, c = b, c, (3*a + 2*b + c) =>           \r\n    if n >= 1:                              =>           \r\n        move_stack(n - 1, start, end)       =>           \r\n        print_move(start, end)              =>           \r\n        move_stack(n - 1, end, start)       =>           \r\n                                            =>           \r\n                                            =>           \r\n            a, b, c = b, c, (3*a, 2*b, + c) <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    if n <= 3:\n        return n\n    else:\n        a, b, c = 1, 2, 3\n        for i in range(3, n):\n            a, b, c = b, c, (3*a, 2*b, + c)\n        return c\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    if n <= 3:\n        return n\n    else:\n        a, b, c = 1, 2, 3\n        for i in range(3, n):\n            a, b, c = b, c, (3*a + 2*b + c)\n        return c\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","(3, 4, 3)","","# Error: expected","#     10","# but got","#     (3, 4, 3)","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":212,"studentId":0,"date":null,"diff":"\r\nInputObject SideIndicator\r\n----------- -------------\r\n    x=1     =>           \r\n    y=2     =>           \r\n    z=3     =>           \r\n        x=1 <=           \r\n        y=2 <=           \r\n        z=3 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n        x=1\n        y=2\n        z=3\n    while n > 3:\n        x, y, z = y, z, z + 2 * y + 3 * x\n        n -= 1\n    return z\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    x=1\n    y=2\n    z=3\n    while n > 3:\n        x, y, z = y, z, z + 2 * y + 3 * x\n        n -= 1\n    return z\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 209, in g_iter","    x, y, z = y, z, z + 2 * y + 3 * x","UnboundLocalError: local variable 'y' referenced before assignment","","# Error: expected","#     10","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":213,"studentId":0,"date":null,"diff":"\r\nInputObject                                                     SideIndicator\r\n-----------                                                     -------------\r\n    if n<=3:                                                    =>           \r\n        return n                                                =>           \r\n    def which_way(index, current_num, direction):               =>           \r\n        if current_num == 0 :                                   =>           \r\n            return True                                         =>           \r\n        if index%7==0 or has_seven(index):                      =>           \r\n            return not(direction)                               =>           \r\n    def determine(num, index, current_num, direction):          =>           \r\n        if index == num:                                        =>           \r\n            if which_way(index, current_num,direction):         =>           \r\n            return determine(num, index,current_num, direction) =>           \r\n    return determine(n,1, 1,True)                               =>           \r\n                                                                =>           \r\n                                                                =>           \r\n    #if n<=3:                                                   <=           \r\n        #return n                                               <=           \r\n    i = 0 #index                                                <=           \r\n    def determine(index, current_num, direction):               <=           \r\n        if index == n :                                         <=           \r\n            if index%7==0 or has_seven(index):                  <=           \r\n                direction = not(direction)                      <=           \r\n            if current_num == 0:                                <=           \r\n                direction = True                                <=           \r\n            if direction:                                       <=           \r\n    return determine()                                          <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    #if n<=3:\n        #return n\n\n    total = 0\n    n1, n2, n3 = 0,0,0\n\n    while n>0:\n        n1 = n - 1\n        n2 = n - 2\n        n3 = n - 3\n\n        total = total + (n2)*2 + (n3)*3\n\n        if n1<=3:\n            return total+ n1\n        else:\n            n1 = n2\n            n2 = n3\n            n3 = total\n            n = n-1\n\n    return total\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n\n    total = 0\n    n1, n2, n3 = 0,0,0\n\n    while n>0:\n        n1 = n - 1\n        n2 = n - 2\n        n3 = n - 3\n\n        total = total + (n2)*2 + (n3)*3\n\n        if n1<=3:\n            return total+ n1\n        else:\n            n1 = n2\n            n2 = n3\n            n3 = total\n            n = n-1\n\n    return total\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","-8","","# Error: expected","#     1","# but got","#     -8","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":214,"studentId":0,"date":null,"diff":"\r\nInputObject                                                   SideIndicator\r\n-----------                                                   -------------\r\n    if n <= 3:                                                =>           \r\n    i = 4                                                     =>           \r\n    term_1 = 3                                                =>           \r\n    term_2 = 2                                                =>           \r\n    term_3 = 1                                                =>           \r\n    ans = 0                                                   =>           \r\n    while i <= n:                                             =>           \r\n        ans = term_1 + 2 * term_2 + 3 * term_3                =>           \r\n        term_3 = term_2                                       =>           \r\n        term_2 = term_1                                       =>           \r\n        term_1 = ans                                          =>           \r\n        i += 1                                                =>           \r\n    return ans                                                =>           \r\n    \"\"\"def next_elem(k, a, element)                           =>           \r\n        while has_seven(k) or k % 7 == 0:                     =>           \r\n            return k                                          =>           \r\n        while element == True:                                =>           \r\n            return switch_direction(k + 1, a - 1, element)    =>           \r\n        else: return switch_direction(k, a, element)          =>           \r\n    def switch_direction(k, a, element)                       =>           \r\n        if k % 7 == 0 or has_seven(k):                        =>           \r\n            return next_element(k + 1, a - 1, not element)\"\"\" =>           \r\n                                                              =>           \r\n                                                              =>           \r\n        n -= 1                                                <=           \r\n    if  n <= 3:                                               <=           \r\n    a = n - 1                                                 <=           \r\n    b = n - 2                                                 <=           \r\n    c = n - 3                                                 <=           \r\n    while n > 3:                                              <=           \r\n        a = a + 2 * b + 3 * c                                 <=           \r\n        n = n - 1                                             <=           \r\n    return a                                                  <=           \r\n    \"\"\"def num(k, a, )                                        <=           \r\n        elif\"\"\"                                               <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if  n <= 3:\n        return n\n    a = n - 1\n    b = n - 2\n    c = n - 3\n    while n > 3:\n        a = a + 2 * b + 3 * c\n        n = n - 1\n    return a\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    i = 4\n    term_1 = 3\n    term_2 = 2\n    term_3 = 1\n    ans = 0\n    while i <= n:\n        ans = term_1 + 2 * term_2 + 3 * term_3\n        term_3 = term_2\n        term_2 = term_1\n        term_1 = ans\n        i += 1\n    return ans\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","28","","# Error: expected","#     22","# but got","#     28","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":215,"studentId":0,"date":null,"diff":"\r\nInputObject                        SideIndicator\r\n-----------                        -------------\r\n        n1, n2, n3 = total, n1, n2 =>           \r\n        n1, n2, n3 = total, n2, n3 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    n1, n2, n3 = 3, 2, 1\n    i = 4\n    total = 0\n    while i <= n:\n        total = n1 + 2 * n2 + 3 * n3\n        n1, n2, n3 = total, n2, n3\n        i += 1\n    return total\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    n1, n2, n3 = 3, 2, 1\n    i = 4\n    total = 0\n    while i <= n:\n        total = n1 + 2 * n2 + 3 * n3\n        n1, n2, n3 = total, n1, n2\n        i += 1\n    return total\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","17","","# Error: expected","#     22","# but got","#     17","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":216,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        return z     =>           \r\n            return z <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        x, y, z = 1, 2, 3\n        while n > 3:\n            x, y, z = y, z, z + 2 * y + 3 * x\n            n -= 1\n            return z\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        x, y, z = 1, 2, 3\n        while n > 3:\n            x, y, z = y, z, z + 2 * y + 3 * x\n            n -= 1\n        return z\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","10","","# Error: expected","#     22","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":217,"studentId":0,"date":null,"diff":"\r\nInputObject       SideIndicator\r\n-----------       -------------\r\n    while i <= n: =>           \r\n    while i < n:  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    one_ago, two_ago, three_ago = 1, 0, 0\n    i = 1\n    while i < n:\n        if i == 1:\n            one_ago = 1\n        elif i == 2:\n            one_ago, two_ago = 2, one_ago\n        elif i == 3:\n            one_ago, two_ago, three_ago = 3, one_ago, two_ago\n        else:\n            one_ago, two_ago, three_ago = one_ago + 2 * two_ago + 3 * three_ago, one_ago, two_ago\n        i += 1 \n    return one_ago\n\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    one_ago, two_ago, three_ago = 1, 0, 0\n    i = 1\n    while i <= n:\n        if i == 1:\n            one_ago = 1\n        elif i == 2:\n            one_ago, two_ago = 2, one_ago\n        elif i == 3:\n            one_ago, two_ago, three_ago = 3, one_ago, two_ago\n        else:\n            one_ago, two_ago, three_ago = one_ago + 2 * two_ago + 3 * three_ago, one_ago, two_ago\n        i += 1 \n    return one_ago\n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","1","","# Error: expected","#     2","# but got","#     1","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":218,"studentId":0,"date":null,"diff":"\r\nInputObject                                                   SideIndicator\r\n-----------                                                   -------------\r\n        one, two, three = two, three, three +2 * two +3 * one =>           \r\n        one, two, three = two, three, one +2 * two +3 * three <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    one, two, three = 1,2,3\n    if n <=3:\n        return n\n    while n > 3:\n        one, two, three = two, three, one +2 * two +3 * three\n        n = n-1 \n    return three\n\n\n\n\n\n    z,y,x = n,n,n\n    while z > 3:\n        z = z -1\n    while y > 3:\n        y = y - 2\n    while x > 3:\n        x = x - 3\n    return z + 2  * y + 3 * x\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    one, two, three = 1,2,3\n    if n <=3:\n        return n\n    while n > 3:\n        one, two, three = two, three, three +2 * two +3 * one\n        n = n-1 \n    return three\n\n\n\n\n\n    z,y,x = n,n,n\n    while z > 3:\n        z = z -1\n    while y > 3:\n        y = y - 2\n    while x > 3:\n        x = x - 3\n    return z + 2  * y + 3 * x\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","14","","# Error: expected","#     10","# but got","#     14","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":219,"studentId":0,"date":null,"diff":"\r\nInputObject SideIndicator\r\n----------- -------------\r\n    x = 3   =>           \r\n    x = 0   <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<4:\n        return n\n    value = 3\n    last_value = 2\n    value_before =1\n    x = 0\n    while x<n:\n        value,last_value,value_before = value+2*last_value+3*value_before,value,last_value\n        x+= 1\n    return value\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<4:\n        return n\n    value = 3\n    last_value = 2\n    value_before =1\n    x = 3\n    while x<n:\n        value,last_value,value_before = value+2*last_value+3*value_before,value,last_value\n        x+= 1\n    return value\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","125","","# Error: expected","#     10","# but got","#     125","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":220,"studentId":0,"date":null,"diff":"\r\nInputObject                           SideIndicator\r\n-----------                           -------------\r\n        i, j, k = j, k, k + 2*j + 3*i =>           \r\n        i = j                         <=           \r\n        j = k                         <=           \r\n        k = k + 2*j + 3*i             <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    i, j, k = 1, 2, 3\n    total = 0\n    if n <= 3:\n        total = n\n    while n > 3:\n        i = j\n        j = k\n        k = k + 2*j + 3*i\n        n -= 1\n        total = k\n    return total\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    i, j, k = 1, 2, 3\n    total = 0\n    if n <= 3:\n        total = n\n    while n > 3:\n        i, j, k = j, k, k + 2*j + 3*i\n        n -= 1\n        total = k\n    return total\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","15","","# Error: expected","#     10","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":221,"studentId":0,"date":null,"diff":"\r\nInputObject                           SideIndicator\r\n-----------                           -------------\r\n        i, j, k = j, k, k + 2*j + 3*i =>           \r\n        i = j                         <=           \r\n        j = k                         <=           \r\n        k = k + 2*j + 3*i             <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    i, j, k = 1, 2, 3\n    total = 0\n    if n <= 3:\n        total = n\n    while n > 3:\n        i = j\n        j = k\n        k = k + 2*j + 3*i\n        n -= 1\n        total = k\n    return total\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    i, j, k = 1, 2, 3\n    total = 0\n    if n <= 3:\n        total = n\n    while n > 3:\n        i, j, k = j, k, k + 2*j + 3*i\n        n -= 1\n        total = k\n    return total\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","15","","# Error: expected","#     10","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":222,"studentId":0,"date":null,"diff":"\r\nInputObject                                       SideIndicator\r\n-----------                                       -------------\r\n        if n3 <= 3: total += 3 * n3               =>           \r\n        if n2 <= 3: total += 2 * n2               =>           \r\n        if n1 <= 3: total += n1                   =>           \r\n        n1, n2, n3 = n2, n3, n-4                  =>           \r\n        n -= 1                                    =>           \r\n    return total                                  =>           \r\n        n = n - 1                                 <=           \r\n        n1, n2, n3 = n2, n3, n1 + 2 * n2 + 3 * n3 <=           \r\n    return n1                                     <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n\n    total, n1, n2, n3 = 0, n-1, n-2, n-3\n    while (n > 3):\n        n = n - 1\n        n1, n2, n3 = n2, n3, n1 + 2 * n2 + 3 * n3\n    return n1\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n\n    total, n1, n2, n3 = 0, n-1, n-2, n-3\n    while (n > 3):\n        if n3 <= 3: total += 3 * n3\n        if n2 <= 3: total += 2 * n2\n        if n1 <= 3: total += n1\n        n1, n2, n3 = n2, n3, n-4\n        n -= 1\n    return total\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","2","","# Error: expected","#     10","# but got","#     2","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":223,"studentId":0,"date":null,"diff":"\r\nInputObject                          SideIndicator\r\n-----------                          -------------\r\n    n1, n2, n3, total, i = 3,2,1,0,4 =>           \r\n    n1, n2, n3, total, i = 3,2,1,0,0 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    n1, n2, n3, total, i = 3,2,1,0,0\n    if n <= 3:\n        return n\n    while i <= n:\n        total = n1 + 2 * n2 + 3 * n3\n        n3,n2,n1 = n2,n1,total\n        i += 1\n    return total\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    n1, n2, n3, total, i = 3,2,1,0,4\n    if n <= 3:\n        return n\n    while i <= n:\n        total = n1 + 2 * n2 + 3 * n3\n        n3,n2,n1 = n2,n1,total\n        i += 1\n    return total\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","293","","# Error: expected","#     10","# but got","#     293","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":224,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        if n == 5:   <=           \r\n            print(k) <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        k = n-1\n        a = n-1\n        if a > 3:\n            k = (n-2) + 2*(n-3) + 3*(n-4)\n            a -= 1\n        sum = k + 2 * (n - 2) + 3 * (n - 3)\n        if n == 5:\n            print(k)\n        return sum\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        k = n-1\n        a = n-1\n        if a > 3:\n            k = (n-2) + 2*(n-3) + 3*(n-4)\n            a -= 1\n        sum = k + 2 * (n - 2) + 3 * (n - 3)\n        return sum\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","10","22","","# Error: expected","#     22","# but got","#     10","#     22","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":226,"studentId":0,"date":null,"diff":"\r\nInputObject                    SideIndicator\r\n-----------                    -------------\r\n        total = i + 2*j + 3*k  =>           \r\n        total += i + 2*j + 3*k <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n\n    i, j, k, total = 3, 2, 1, 0\n\n    while n > 3:\n        total += i + 2*j + 3*k\n        i, j, k = total, i, j\n        n -= 1\n\n    return total\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n\n    i, j, k, total = 3, 2, 1, 0\n\n    while n > 3:\n        total = i + 2*j + 3*k\n        i, j, k = total, i, j\n        n -= 1\n\n    return total\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","32","","# Error: expected","#     22","# but got","#     32","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":227,"studentId":0,"date":null,"diff":"\r\nInputObject                                             SideIndicator\r\n-----------                                             -------------\r\n        lower, middle, highest = middle, highest, total =>           \r\n        lower, middle, highest = middle, lower, total   <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    lower, middle, highest = 1, 2, 3\n    total = 0\n    if n <= 3:\n        return n\n    k = 4\n    while k <= n:\n        total = highest + 2 * middle + 3 * lower\n        lower, middle, highest = middle, lower, total\n        k += 1\n    return total\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    lower, middle, highest = 1, 2, 3\n    total = 0\n    if n <= 3:\n        return n\n    k = 4\n    while k <= n:\n        total = highest + 2 * middle + 3 * lower\n        lower, middle, highest = middle, highest, total\n        k += 1\n    return total\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","18","","# Error: expected","#     22","# but got","#     18","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":228,"studentId":0,"date":null,"diff":"\r\nInputObject                       SideIndicator\r\n-----------                       -------------\r\n        x1, x2, x3 = end, x1, x2  =>           \r\n        x1, x2, x3 = x1+1, x1, x2 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if   n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 3\n    \n    x1=3\n    x2=2\n    x3=1\n    counter=4\n    while counter <=n:\n        end = x1 + 2*x2 + 3*x3\n        x1, x2, x3 = x1+1, x1, x2\n        counter += 1\n\n    return end\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if   n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 3\n    \n    x1=3\n    x2=2\n    x3=1\n    counter=4\n    while counter <=n:\n        end = x1 + 2*x2 + 3*x3\n        x1, x2, x3 = end, x1, x2\n        counter += 1\n\n    return end\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","16","","# Error: expected","#     22","# but got","#     16","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":229,"studentId":0,"date":null,"diff":"\r\nInputObject                                                      SideIndicator\r\n-----------                                                      -------------\r\n            one, two, three = two, three, three + 2*two + 3*one  =>           \r\n            # one = two                                          =>           \r\n            # two = three                                        =>           \r\n            # three = three + 2 * two + 3 * one                  =>           \r\n            #one, two, three = two, three, three + 2*two + 3*one <=           \r\n            one = two                                            <=           \r\n            two = three                                          <=           \r\n            three = three + 2 * two + 3 * one                    <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    # if n == 0 or n == 1 or n == 2 or n == 3:\n    #     return n\n    # a, b, c = 1, 2, 3\n    # while n > 3:\n    #     a = b\n    #     b = c\n    #     c = c + 2*b + 3*a\n    #     n -= 1\n    # return c\n\n    if n == 1 or n == 2 or n == 3:\n        return n\n    else:\n        one = 1\n        two = 2\n        three = 3\n    \n        while n > 3:\n            #one, two, three = two, three, three + 2*two + 3*one\n            one = two\n            two = three\n            three = three + 2 * two + 3 * one\n            n -= 1\n        return three\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    # if n == 0 or n == 1 or n == 2 or n == 3:\n    #     return n\n    # a, b, c = 1, 2, 3\n    # while n > 3:\n    #     a = b\n    #     b = c\n    #     c = c + 2*b + 3*a\n    #     n -= 1\n    # return c\n\n    if n == 1 or n == 2 or n == 3:\n        return n\n    else:\n        one = 1\n        two = 2\n        three = 3\n    \n        while n > 3:\n            one, two, three = two, three, three + 2*two + 3*one\n            # one = two\n            # two = three\n            # three = three + 2 * two + 3 * one\n            n -= 1\n        return three\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","15","","# Error: expected","#     10","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":230,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                     SideIndicator\r\n-----------                                                                     -------------\r\n    if n <= 3:                                                                  =>           \r\n        return n                                                                =>           \r\n        item1, item2, item3 = 1, 2, 3                                           =>           \r\n        i = 3                                                                   =>           \r\n        while i < n:                                                            =>           \r\n            item1, item2, item3 = item2, item3, (item3 + 2 * item2 + 3 * item1) =>           \r\n            i +=1                                                               =>           \r\n        return item3                                                            =>           \r\n    if n == 1:                                                                  <=           \r\n        return 1                                                                <=           \r\n    elif n == 2:                                                                <=           \r\n        return 2                                                                <=           \r\n    elif n == 3:                                                                <=           \r\n        return 3                                                                <=           \r\n         while n >= 3:                                                          <=           \r\n            a = 1                                                               <=           \r\n            b = 2                                                               <=           \r\n            c = 3                                                               <=           \r\n            total = a + 2 * b + 3 * c                                           <=           \r\n            a, b, c = total, a, b                                               <=           \r\n            n = n - 1                                                           <=           \r\n            return total                                                        <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n         while n >= 3:\n            a = 1\n            b = 2\n            c = 3\n            total = a + 2 * b + 3 * c\n            a, b, c = total, a, b\n            n = n - 1\n            return total\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        item1, item2, item3 = 1, 2, 3\n        i = 3\n        while i < n:\n            item1, item2, item3 = item2, item3, (item3 + 2 * item2 + 3 * item1)\n            i +=1\n        return item3\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","14","","# Error: expected","#     10","# but got","#     14","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":231,"studentId":0,"date":null,"diff":"\r\nInputObject                                       SideIndicator\r\n-----------                                       -------------\r\n        term1, term2, term3 = total, term1, term2 =>           \r\n        term1 = total                             <=           \r\n        term2, term3 = term1, term2               <=           \r\n                                                  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n\n    term1, term2, term3 = 3, 2, 1\n    i = 4\n    total = 0\n    while i <= n:\n        total = term1 + 2 * term2 + 3 * term3\n        term1 = total\n        term2, term3 = term1, term2\n        i += 1\n\n    return total\n\n\n\n\n\n    return total\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n\n    term1, term2, term3 = 3, 2, 1\n    i = 4\n    total = 0\n    while i <= n:\n        total = term1 + 2 * term2 + 3 * term3\n        term1, term2, term3 = total, term1, term2\n        i += 1\n    return total\n\n\n\n\n\n    return total\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","36","","# Error: expected","#     22","# but got","#     36","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":232,"studentId":0,"date":null,"diff":"\r\nInputObject                                SideIndicator\r\n-----------                                -------------\r\n    if n <= 3:                             =>           \r\n        return n                           =>           \r\n        a, b, c = 1, 2, 3                  =>           \r\n        while n > 3:                       =>           \r\n            a, b, c = b, c , c + 2*b + 3*a =>           \r\n            n -= 1                         =>           \r\n    else:                                  =>           \r\n                                           =>           \r\n    a, b, c = 1, 2, 3                      <=           \r\n    while n > 3:                           <=           \r\n        a, b, c = b, c , c + 2*b + 3*a     <=           \r\n        n -= 1                             <=           \r\n    return n                               <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a, b, c = 1, 2, 3\n    while n > 3:\n        a, b, c = b, c , c + 2*b + 3*a\n        n -= 1\n        return c\n    return n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        a, b, c = 1, 2, 3\n        while n > 3:\n            a, b, c = b, c , c + 2*b + 3*a\n            n -= 1\n        return c\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","10","","# Error: expected","#     22","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":233,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n            g1, g2, g3 = g2, g3, g3 + 2 * g2 + 3 * g1 =>           \r\n            g1, g2, g3 = g2, g3, g3 + 2 * g2 + 3 * g3 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    g1, g2, g3 = 1, 2, 3\n    if n <= 3:\n        return n\n    else:\n        while n > 3:\n            g1, g2, g3 = g2, g3, g3 + 2 * g2 + 3 * g3\n            n -= 1\n        return g3\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    g1, g2, g3 = 1, 2, 3\n    if n <= 3:\n        return n\n    else:\n        while n > 3:\n            g1, g2, g3 = g2, g3, g3 + 2 * g2 + 3 * g1\n            n -= 1\n        return g3\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","16","","# Error: expected","#     10","# but got","#     16","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":234,"studentId":0,"date":null,"diff":"\r\nInputObject                                                SideIndicator\r\n-----------                                                -------------\r\n        result = third_term + 2*second_term + 3*first_term =>           \r\n        result = first_term + 2*second_term + 3*third_term <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n\n    first_term, second_term, third_term = 1, 2, 3\n    result = 0\n    count = n-3\n    while(count > 0):\n        result = first_term + 2*second_term + 3*third_term\n        first_term, second_term, third_term = second_term, third_term, result\n        count -= 1\n    return result\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n\n    first_term, second_term, third_term = 1, 2, 3\n    result = 0\n    count = n-3\n    while(count > 0):\n        result = third_term + 2*second_term + 3*first_term\n        first_term, second_term, third_term = second_term, third_term, result\n        count -= 1\n    return result\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","14","","# Error: expected","#     10","# but got","#     14","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":235,"studentId":0,"date":null,"diff":"\r\nInputObject                           SideIndicator\r\n-----------                           -------------\r\n        gone, gtwo, gthree = 1, 2, 3  =>           \r\n        gone, gtwo, gthree = 1, 2, 33 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        gone, gtwo, gthree = 1, 2, 33\n        for i in range(4, n+1):\n            gone, gtwo, gthree = gtwo, gthree, gone * 3 + gtwo * 2 + gthree\n        return gthree\n            \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        gone, gtwo, gthree = 1, 2, 3\n        for i in range(4, n+1):\n            gone, gtwo, gthree = gtwo, gthree, gone * 3 + gtwo * 2 + gthree\n        return gthree\n            \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","40","","# Error: expected","#     10","# but got","#     40","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":236,"studentId":0,"date":null,"diff":"\r\nInputObject                          SideIndicator\r\n-----------                          -------------\r\n    p1, p2, p3 = 3, 2, 1             =>           \r\n    p1, p2, p3 = n - 1, n - 2, n - 3 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n\n    p1, p2, p3 = n - 1, n - 2, n - 3\n    i, current = 4, 0\n    while i <= n:\n        current = p1 + 2 * p2 + 3 * p3\n        p1, p2, p3 = current, p1, p2\n        i += 1\n    return current\n\n\n\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n\n    p1, p2, p3 = 3, 2, 1\n    i, current = 4, 0\n    while i <= n:\n        current = p1 + 2 * p2 + 3 * p3\n        p1, p2, p3 = current, p1, p2\n        i += 1\n    return current\n\n\n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","33","","# Error: expected","#     22","# but got","#     33","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":237,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n                          =>           \r\n    for i in range (n-3): =>           \r\ndef g(n):                 <=           \r\n    while n > 3:          <=           \r\n        n -= 1            <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1) \n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\ndef g(n):\n    if n <= 3:\n        return n\n    a, b, c = 1, 2, 3\n    while n > 3:\n        a, b, c = b, c, c + 2 * b + 3 * a\n        n -= 1\n    return c\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1) \n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    if n <= 3:\n        return n\n    a, b, c = 1, 2, 3\n    for i in range (n-3):\n        a, b, c = b, c, c + 2 * b + 3 * a\n    return c\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1) ","","# Error: expected","#     1","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":238,"studentId":0,"date":null,"diff":"\r\nInputObject        SideIndicator\r\n-----------        -------------\r\n    return vals[n] =>           \r\n    return vals[i] <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    i = 4\n    vals = [0, 1, 2, 3]\n    while(i <= n):\n        vals.append(vals[i - 1] + 2 * vals[i - 2] + 3 * vals[i - 3])\n        i += 1\n    return vals[i]\n\n    \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    i = 4\n    vals = [0, 1, 2, 3]\n    while(i <= n):\n        vals.append(vals[i - 1] + 2 * vals[i - 2] + 3 * vals[i - 3])\n        i += 1\n    return vals[n]\n\n    \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 213, in g_iter","    return vals[i]","IndexError: list index out of range","","# Error: expected","#     1","# but got","#     IndexError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":239,"studentId":0,"date":null,"diff":"\r\nInputObject                                                         SideIndicator\r\n-----------                                                         -------------\r\n    if n<=3:                                                        =>           \r\n        return n                                                    =>           \r\n    first=1                                                         =>           \r\n    second=2                                                        =>           \r\n    third=3                                                         =>           \r\n    while n>3:                                                      =>           \r\n        first, second, third=second, third, third+2*second +3*first =>           \r\n        n-=1                                                        =>           \r\n    return third                                                    =>           \r\n    0                                                               =>           \r\n    def helper(n):                                                  =>           \r\n        if n==1:                                                    =>           \r\n            return 0                                                =>           \r\n        elif has_seven(n-1) or (n%7==1):                            =>           \r\n            return helper(n-1)+1                                    =>           \r\n        return helper(n-1)                                          =>           \r\n    if n==1:                                                        =>           \r\n        return 1                                                    =>           \r\n        return pingpong(n-1)+((-1)**helper(n))                      =>           \r\n    else:                                                           =>           \r\n                                                                    =>           \r\n                                                                    =>           \r\n                                                                    =>           \r\n    0                                                               <=           \r\n    \"*** YOUR CODE HERE ***\"                                        <=           \r\n    \"*** YOUR CODE HERE ***\"                                        <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    first=1\n    second=2\n    third=3\n    while n>3:\n        first, second, third=second, third, third+2*second +3*first\n        n-=1\n    return third \n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","","# Error: expected","#     1","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":240,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n            n2 = n1 - 2 =>           \r\n            n3 = n1 - 3 =>           \r\n            n2 -= 2     <=           \r\n            n3 -= 3     <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    n1 = n - 1\n    n2 = n - 2\n    n3 = n - 3\n    final = 0\n    count = n - 3\n    if n <= 3:\n        return n\n    while count != 0:\n        if n1 <= 3:\n            final += n1 + (2 * n2) + (3 * n3)\n        elif n2 <= 3:\n            final += 3 * n3 + 2 * n2\n            n1 -= 1\n            n2 -= 2\n            n3 -= 3\n            count += 1\n        count -= 1\n    return final\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    n1 = n - 1\n    n2 = n - 2\n    n3 = n - 3\n    final = 0\n    count = n - 3\n    if n <= 3:\n        return n\n    while count != 0:\n        if n1 <= 3:\n            final += n1 + (2 * n2) + (3 * n3)\n        elif n2 <= 3:\n            final += 3 * n3 + 2 * n2\n            n1 -= 1\n            n2 = n1 - 2\n            n3 = n1 - 3\n            count += 1\n        count -= 1\n    return final\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","16","","# Error: expected","#     22","# but got","#     16","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":241,"studentId":0,"date":null,"diff":"\r\nInputObject                                          SideIndicator\r\n-----------                                          -------------\r\n    if n >3:                                         =>           \r\n        a = 1                                        =>           \r\n        b = 2                                        =>           \r\n        c = 3                                        =>           \r\n        while n >= 4 :                               =>           \r\n            a, b, c = b, c, c + 2*b + 3*a            =>           \r\n            n -= 1                                   =>           \r\n        return c                                     =>           \r\n        return n                                     =>           \r\n    else:                                            =>           \r\n                                                     =>           \r\n                                                     =>           \r\n                                                     =>           \r\n                                                     =>           \r\n    if n <= 3:                                       <=           \r\n        return n                                     <=           \r\n    elif n > 3:                                      <=           \r\n        current = 0                                  <=           \r\n        next = 1                                     <=           \r\n        count = 1                                    <=           \r\n        while n > 0:                                 <=           \r\n            if n != 4323412:                         <=           \r\n                \"\"\"current = next                    <=           \r\n                next = next + n                      <=           \r\n                n -= 1                               <=           \r\n            else:\"\"\"                                 <=           \r\n                current = next                       <=           \r\n                next = current + count * (count + n) <=           \r\n                n -= 1                               <=           \r\n                count += 1                           <=           \r\n        return current                               <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    elif n > 3:\n        current = 0\n        next = 1\n        count = 1\n        while n > 0:\n            if n != 4323412:\n                \"\"\"current = next\n                next = next + n\n                n -= 1\n            else:\"\"\"\n                current = next\n                next = current + count * (count + n)\n                n -= 1\n                count += 1\n        return current\n\n\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n >3:\n        a = 1\n        b = 2\n        c = 3\n        while n >= 4 :\n            a, b, c = b, c, c + 2*b + 3*a\n            n -= 1\n        return c\n    else:\n        return n    \n\n\n\n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","31","","# Error: expected","#     10","# but got","#     31","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":242,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                      SideIndicator\r\n-----------                                                                                      -------------\r\n        current, next, another_one = next, another_one, 3 * current + 2 * next + another_one     =>           \r\n        current, next, another_one = next, another_one, 3 * current + 2 * next + 3 * another_one <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    current, next, another_one = 1, 2, 3\n    for k in range(0, n - 3):\n        current, next, another_one = next, another_one, 3 * current + 2 * next + 3 * another_one\n    return another_one\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    current, next, another_one = 1, 2, 3\n    for k in range(0, n - 3):\n        current, next, another_one = next, another_one, 3 * current + 2 * next + another_one\n    return another_one\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","16","","# Error: expected","#     10","# but got","#     16","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":243,"studentId":0,"date":null,"diff":"\r\nInputObject                                                          SideIndicator\r\n-----------                                                          -------------\r\n        return n                                                     =>           \r\n    r, s, t = 1, 2 , 3                                               =>           \r\n        r, s, t = s, t, t + 2*s + 3*r                                =>           \r\n    return t                                                         =>           \r\n        return n                                                     <=           \r\n    total, next, last = 1*(n-1), 2*(n-2), 3*(n-3)                    <=           \r\n        total, next, last = next, total + next, total + next + last  <=           \r\n    return total                                                     <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\" \n    if n <= 3:\n        return n \n    total, next, last = 1*(n-1), 2*(n-2), 3*(n-3)\n    while n > 3: \n        total, next, last = next, total + next, total + next + last \n        n -= 1 \n    return total \n\n    \"\"\"total = 0  \n    if n <= 3: \n        return n \n    while n > 3: \n        current total = 1*(n-1) + 2*(n-2) + 3*(n-3) + total \n        n -= 1 \n    return total\"\"\"\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\" \n    if n <= 3:\n        return n\n    r, s, t = 1, 2 , 3\n    while n > 3: \n        r, s, t = s, t, t + 2*s + 3*r \n        n -= 1 \n    return t \n\n    \"\"\"total = 0  \n    if n <= 3: \n        return n \n    while n > 3: \n        current total = 1*(n-1) + 2*(n-2) + 3*(n-3) + total \n        n -= 1 \n    return total\"\"\"\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","4","","# Error: expected","#     10","# but got","#     4","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":244,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                      SideIndicator\r\n-----------                                                                      -------------\r\n    first, second, third = 1, 2, 3                                               =>           \r\n    if n <= 3:                                                                   =>           \r\n        return n                                                                 =>           \r\n        i = 4                                                                    =>           \r\n        while n >= i:                                                            =>           \r\n            first, second, third = second, third, third + 2 * second + 3 * first =>           \r\n            i += 1                                                               =>           \r\n        return third                                                             =>           \r\n                                                                                 =>           \r\n    else:                                                                        =>           \r\n    x, y, z, total = 1, n, 1, 0                                                  <=           \r\n    if y <= 3:                                                                   <=           \r\n        return y                                                                 <=           \r\n    while x <= 3:                                                                <=           \r\n        y = n - x                                                                <=           \r\n        outerlooptotal = 0                                                       <=           \r\n        while z <= 3:                                                            <=           \r\n            y = n - x                                                            <=           \r\n            innerlooptotal = 0                                                   <=           \r\n            while y > 0:                                                         <=           \r\n                if y <= 3:                                                       <=           \r\n                    innerlooptotal = innerlooptotal + y                          <=           \r\n                    break                                                        <=           \r\n                y -= 1                                                           <=           \r\n            outerlooptotal = outerlooptotal + z * innerlooptotal                 <=           \r\n            z += 1                                                               <=           \r\n        total = total + x * outerlooptotal                                       <=           \r\n        x += 1                                                                   <=           \r\n    return total                                                                 <=           \r\n                                                                                 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x, y, z, total = 1, n, 1, 0\n    if y <= 3:\n        return y\n    while x <= 3:\n        y = n - x\n        outerlooptotal = 0\n        while z <= 3:\n            y = n - x\n            innerlooptotal = 0\n            while y > 0:\n                if y <= 3:\n                    innerlooptotal = innerlooptotal + y\n                    break\n                y -= 1\n            outerlooptotal = outerlooptotal + z * innerlooptotal \n            z += 1\n        total = total + x * outerlooptotal\n        x += 1\n    return total\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    first, second, third = 1, 2, 3\n    if n <= 3:\n        return n\n    else:\n        i = 4\n        while n >= i:\n            first, second, third = second, third, third + 2 * second + 3 * first\n            i += 1\n        return third\n        \n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","18","","# Error: expected","#     10","# but got","#     18","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":245,"studentId":0,"date":null,"diff":"\r\nInputObject                           SideIndicator\r\n-----------                           -------------\r\n    total, prev1, prev2 = 3, 2, 1     =>           \r\n    total, prev1, prev2 = 3, n-2, n-3 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total, prev1, prev2 = 3, n-2, n-3\n    \n    \"\"\"g(1) = 1\n    g(2) = 2\n    g(3) = 3                      c    p1    p2\n    g(4) = g(3) + 2g(2) + 3g(1) = 3 + 2*2 + 3*1 = 10\n    g(5) = g(4) + 2g(3) + 3g(2) = 10 + 2*3 + 3*2 = 22\n    g(6) = g(5) + 2g(4) + 3g(3) = 22 + 2*10 + 3*3 = 51\n    g(7) = g(6) + 2g(5) + 3g(4) = 51 + 2*22 + 3*10 = 125\"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n > 3:\n        \n        for k in range(3, n):\n            total, prev1, prev2 =  total + 2*prev1 + 3*prev2, total, prev1\n        \n            \n    return total\n\n\n\n\n\n\n\n\n\n    return total\n\n\n\n\n\n\n        \n\n\n    \n\n\n\n    \n    \n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total, prev1, prev2 = 3, 2, 1\n    \n    \"\"\"g(1) = 1\n    g(2) = 2\n    g(3) = 3                      c    p1    p2\n    g(4) = g(3) + 2g(2) + 3g(1) = 3 + 2*2 + 3*1 = 10\n    g(5) = g(4) + 2g(3) + 3g(2) = 10 + 2*3 + 3*2 = 22\n    g(6) = g(5) + 2g(4) + 3g(3) = 22 + 2*10 + 3*3 = 51\n    g(7) = g(6) + 2g(5) + 3g(4) = 51 + 2*22 + 3*10 = 125\"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n > 3:\n        \n        for k in range(3, n):\n            total, prev1, prev2 =  total + 2*prev1 + 3*prev2, total, prev1\n        \n            \n    return total\n\n\n\n\n\n\n\n\n\n    return total\n\n\n\n\n\n\n        \n\n\n    \n\n\n\n    \n    \n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","30","","# Error: expected","#     22","# but got","#     30","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":246,"studentId":0,"date":null,"diff":"\r\nInputObject SideIndicator\r\n----------- -------------\r\n    i=4     =>           \r\n    i=3     <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    i=3\n    values=[0,1,2,3]\n    while i<=n:\n        values.append(values[i-1] + 2*values[i-2] + 3*values[i-3])\n        i+=1\n    else:\n        return values[n]\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    i=4\n    values=[0,1,2,3]\n    while i<=n:\n        values.append(values[i-1] + 2*values[i-2] + 3*values[i-3])\n        i+=1\n    else:\n        return values[n]\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","4","","# Error: expected","#     10","# but got","#     4","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":247,"studentId":0,"date":null,"diff":"\r\nInputObject                                                              SideIndicator\r\n-----------                                                              -------------\r\n    while n > 3:                                                         =>           \r\n        x = 3*x + 2*y + 1*z                                              =>           \r\n        x, y, z = y, z, x #shifts so the latest g (at x) is at the end   =>           \r\n    while n > 0:                                                         <=           \r\n        x, y, z = y, z, x                                                <=           \r\n        x = 3*x + 2*y + 1*z #shifts so the latest g (at x) is at the end <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    x = 1\n    y = 2\n    z = 3\n    while n > 0:\n        x, y, z = y, z, x\n        x = 3*x + 2*y + 1*z #shifts so the latest g (at x) is at the end\n        n -= 1\n    return z\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    x = 1\n    y = 2\n    z = 3\n    while n > 3:\n        x = 3*x + 2*y + 1*z\n        x, y, z = y, z, x #shifts so the latest g (at x) is at the end\n        n -= 1\n    return z\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","53","","# Error: expected","#     10","# but got","#     53","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":248,"studentId":0,"date":null,"diff":"\r\nInputObject                          SideIndicator\r\n-----------                          -------------\r\n        a, b, c= b, c, c + 2*b + 3*a =>           \r\n        c= c+ 2*b + 3*a              <=           \r\n        a=b                          <=           \r\n        b=c                          <=           \r\n                                     <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    a=1\n    b=2\n    c=3\n    while n>3:\n        c= c+ 2*b + 3*a\n        a=b\n        b=c\n        \n        n = n- 1\n    return c    \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    a=1\n    b=2\n    c=3\n    while n>3:\n        a, b, c= b, c, c + 2*b + 3*a\n        n = n- 1\n    return c    \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","36","","# Error: expected","#     22","# but got","#     36","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":249,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n    i = n - 3              =>           \r\n            total += i * k =>           \r\n    i = n -2               <=           \r\n            total += i + k <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total = 0\n    i = n -2\n    k = 3\n    if n<=3:\n        return n\n    while i<n:\n        if i <= 3:\n            total += i + k\n        else:\n            total += ( (i -1) + 2 * (i-2) + 3 * (i - 3)) * k\n        i +=1\n        k -= 1        \n    return total\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total = 0\n    i = n - 3\n    k = 3\n    if n<=3:\n        return n\n    while i<n:\n        if i <= 3:\n            total += i * k\n        else:\n            total += ( (i -1) + 2 * (i-2) + 3 * (i - 3)) * k\n        i +=1\n        k -= 1        \n    return total\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","26","","# Error: expected","#     22","# but got","#     26","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":252,"studentId":0,"date":null,"diff":"\r\nInputObject   SideIndicator\r\n-----------   -------------\r\n    return l  =>           \r\n    return g3 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    j, k, l = 1, 2, 3\n    for i in range(4, n + 1):\n        j, k, l = k, l, j * 3 + k * 2 + l\n    return g3\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    j, k, l = 1, 2, 3\n    for i in range(4, n + 1):\n        j, k, l = k, l, j * 3 + k * 2 + l\n    return l\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 221, in g_iter","    return g3","NameError: name 'g3' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":253,"studentId":0,"date":null,"diff":"\r\nInputObject       SideIndicator\r\n-----------       -------------\r\n        return n  =>           \r\n        return n  <=           \r\n    result        <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    result \n    a, b, c = 1, 2, 3\n    for i in range(3, n):\n        a, b, c = b, c, (a * 3 + b * 2 + c)\n    return c\n    \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n \n    a, b, c = 1, 2, 3\n    for i in range(3, n):\n        a, b, c = b, c, (a * 3 + b * 2 + c)\n    return c\n    \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 217, in g_iter","    result","NameError: name 'result' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":254,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                     SideIndicator\r\n-----------                                                                     -------------\r\n        temp1, temp2, temp3, temp4 = temp2, temp3, temp4, temp4+2*temp3+3*temp2 =>           \r\n        temp1, temp2, temp3, temp4 = temp2, temp3, temp4+2*temp3+3*temp2        <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    temp1, temp2, temp3, temp4 = 0, 1, 2, 3\n\n    while n>0:\n        temp1, temp2, temp3, temp4 = temp2, temp3, temp4+2*temp3+3*temp2\n        n -= 1\n    return temp1\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    temp1, temp2, temp3, temp4 = 0, 1, 2, 3\n\n    while n>0:\n        temp1, temp2, temp3, temp4 = temp2, temp3, temp4, temp4+2*temp3+3*temp2\n        n -= 1\n    return temp1\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 207, in g_iter","    temp1, temp2, temp3, temp4 = temp2, temp3, temp4+2*temp3+3*temp2","ValueError: not enough values to unpack (expected 4, got 3)","","# Error: expected","#     1","# but got","#     ValueError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":255,"studentId":0,"date":null,"diff":"\r\nInputObject                            SideIndicator\r\n-----------                            -------------\r\n        if current > 3:                =>           \r\n            current = p3 + 2*p2 + 3*p1 =>           \r\n            result = current           =>           \r\n        current = p3 + 2*p2 + 3*p1     <=           \r\n        result = current               <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    p1, p2, p3, current = 0,0,0,1\n    result = 0\n    if n == 1 or n == 2 or n == 3:\n        return n\n    while n > 0:\n        p1, p2, p3, current = p2, p3, current, current+p3\n        current = p3 + 2*p2 + 3*p1\n        result = current\n            #print(p1, p2, p3, current, result)\n        n -= 1\n    return result\n\n    '''counter = n\n    result = 0\n    if counter <= 3:\n        return n\n    while counter > 3:\n        result += (counter - 1) + 2 * (counter - 2) + 3 * (counter - 3)\n        counter -= 1\n    return result'''\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    p1, p2, p3, current = 0,0,0,1\n    result = 0\n    if n == 1 or n == 2 or n == 3:\n        return n\n    while n > 0:\n        p1, p2, p3, current = p2, p3, current, current+p3\n        if current > 3:\n            current = p3 + 2*p2 + 3*p1\n            result = current\n            #print(p1, p2, p3, current, result)\n        n -= 1\n    return result\n\n    '''counter = n\n    result = 0\n    if counter <= 3:\n        return n\n    while counter > 3:\n        result += (counter - 1) + 2 * (counter - 2) + 3 * (counter - 3)\n        counter -= 1\n    return result'''\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","17","","# Error: expected","#     10","# but got","#     17","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":256,"studentId":0,"date":null,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n        index+=1 =>           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    add1=1\n    add2=2\n    add3=3\n    index=3\n    if(n<=3):\n        return n\n    while(n>index):\n        add1,add2,add3=add2,add3,add3+2*add2+3*add1\n    return add3\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    add1=1\n    add2=2\n    add3=3\n    index=3\n    if(n<=3):\n        return n\n    while(n>index):\n        add1,add2,add3=add2,add3,add3+2*add2+3*add1\n        index+=1\n    return add3\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     10","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":257,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n        next = 3*(x) + (y * 2) + (z)           =>           \r\n        next = 3*(x * 1) + 2*(y * 2) + (z * 3) <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    x, y, z = 1, 2, 3\n    next = 0\n    if n <= 3:\n        return n\n    while n > 3:\n        next = 3*(x * 1) + 2*(y * 2) + (z * 3)\n        x, y, z = y, z, next\n        n -= 1\n    return(next)\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    x, y, z = 1, 2, 3\n    next = 0\n    if n <= 3:\n        return n\n    while n > 3:\n        next = 3*(x) + (y * 2) + (z)\n        x, y, z = y, z, next\n        n -= 1\n    return(next)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","20","","# Error: expected","#     10","# but got","#     20","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":258,"studentId":0,"date":null,"diff":"\r\nInputObject                                       SideIndicator\r\n-----------                                       -------------\r\n            temp = third + 2 * second + 3 * first =>           \r\n            temp = first + 2 * second + 3 * third <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        first = 1\n        second = 2\n        third = 3 \n        while n > 3:\n            temp = first + 2 * second + 3 * third\n            first, second, third = second, third, temp\n            n -= 1\n        return temp\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        first = 1\n        second = 2\n        third = 3 \n        while n > 3:\n            temp = third + 2 * second + 3 * first\n            first, second, third = second, third, temp\n            n -= 1\n        return temp\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","14","","# Error: expected","#     10","# but got","#     14","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":260,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n        x, y, z = 1, 2, 3                    =>           \r\n        for i in range(4, n + 1):            =>           \r\n            temp = z                         =>           \r\n            z = 3 * x + 2 * y + temp         =>           \r\n            x = y                            =>           \r\n            y = temp                         =>           \r\n        return z                             =>           \r\n    def helper(n):                           =>           \r\n        counter = 1                          =>           \r\n        total = 0                            =>           \r\n        while counter <= 3:                  =>           \r\n            x = n - counter                  =>           \r\n        total += counter * x                 =>           \r\n        n += 1                               =>           \r\n    counter = 1                              =>           \r\n    while counter <= 3:                      =>           \r\n        x = n - counter                      =>           \r\n        if x > 3:                            =>           \r\n            total += helper(n - 1)           =>           \r\n            n += 1                           =>           \r\n        total += counter * x                 =>           \r\n        n += 1                               =>           \r\n    return total                             =>           \r\n                                             =>           \r\n                                             =>           \r\n    \"\"\"                                      =>           \r\n                                             =>           \r\n                                             =>           \r\n    \"\"\"                                      =>           \r\n                                             =>           \r\n    counter = 3                              <=           \r\n        while counter > 0:                   <=           \r\n            total += counter * (n - counter) <=           \r\n            counter -= 1                     <=           \r\n    return total                             <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    counter = 3\n    total = 0\n    if n <= 3:\n        return n\n    else:\n        while counter > 0:\n            total += counter * (n - counter)\n            counter -= 1\n    return total\n\n\n\n\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        x, y, z = 1, 2, 3\n        for i in range(4, n + 1):\n            temp = z\n            z = 3 * x + 2 * y + temp\n            x = y\n            y = temp\n        return z\n\n\n\n    \"\"\"\n    def helper(n):\n        counter = 1\n        total = 0\n        while counter <= 3:\n            x = n - counter\n        total += counter * x\n        n += 1\n    counter = 1\n    total = 0\n    while counter <= 3:\n        x = n - counter\n        if x > 3:\n            total += helper(n - 1)\n            n += 1\n        total += counter * x\n        n += 1\n    return total \n    \"\"\"\n\n\n\n\n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","16","","# Error: expected","#     22","# but got","#     16","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":261,"studentId":0,"date":null,"diff":"\r\nInputObject        SideIndicator\r\n-----------        -------------\r\n            i += 1 =>           \r\n            n += 1 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        x, y, z = 1, 2, 3\n        i = 3\n        while i < n:\n            x, y, z = y, z, (3 * x + 2 * y + z)\n            n += 1\n        return z\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        x, y, z = 1, 2, 3\n        i = 3\n        while i < n:\n            x, y, z = y, z, (3 * x + 2 * y + z)\n            i += 1\n        return z\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     10","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":263,"studentId":0,"date":null,"diff":"\r\nInputObject                                   SideIndicator\r\n-----------                                   -------------\r\n            store = store + 2*(n-2) + 3*(n-3) =>           \r\n            store = store + 2*(n-2) + 3*(n-1) <=           \r\n\r\n\r\n","before":"def g_iter(n):\n\t\"\"\"Return the value of G(n), computed iteratively.\n\n\t>>> g_iter(1)\n\t1\n\t>>> g_iter(2)\n\t2\n\t>>> g_iter(3)\n\t3\n\t>>> g_iter(4)\n\t10\n\t>>> g_iter(5)\n\t22\n\t>>> from construct_check import check\n\t>>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n\tTrue\n\t\"\"\"\n\tstore = 0\n\tif(n <= 3):\n\t\treturn n\n\telse:\n\t\twhile(n > 3):\n\t\t\tstore = store + 2*(n-2) + 3*(n-1)\n\t\t\tn -= 1\n\t\tstore += 3\n\treturn store\n","after":"def g_iter(n):\n\t\"\"\"Return the value of G(n), computed iteratively.\n\n\t>>> g_iter(1)\n\t1\n\t>>> g_iter(2)\n\t2\n\t>>> g_iter(3)\n\t3\n\t>>> g_iter(4)\n\t10\n\t>>> g_iter(5)\n\t22\n\t>>> from construct_check import check\n\t>>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n\tTrue\n\t\"\"\"\n\tstore = 0\n\tif(n <= 3):\n\t\treturn n\n\telse:\n\t\twhile(n > 3):\n\t\t\tstore = store + 2*(n-2) + 3*(n-3)\n\t\t\tn -= 1\n\t\tstore += 3\n\treturn store\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","16","","# Error: expected","#     10","# but got","#     16","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":265,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        list1[a] = 1 =>           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    ans = 0\n    if n <= 3:\n        ans = n\n    else:\n        list1 = [0] * n\n        a = n-1\n        while a > 2:\n            if not list1[a] == 0:\n                list1[a-1] += 1\n                list1[a-2] += 2\n                list1[a-3] += 3\n                list1[a] -= 1\n            else:\n                a -= 1\n        while a >= 0:\n            if not list1[a] == 0:\n                ans += (a+1)\n                list1[a] -= 1\n            else:\n                a -= 1\n    return ans\n\n\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    ans = 0\n    if n <= 3:\n        ans = n\n    else:\n        list1 = [0] * n\n        a = n-1\n        list1[a] = 1\n        while a > 2:\n            if not list1[a] == 0:\n                list1[a-1] += 1\n                list1[a-2] += 2\n                list1[a-3] += 3\n                list1[a] -= 1\n            else:\n                a -= 1\n        while a >= 0:\n            if not list1[a] == 0:\n                ans += (a+1)\n                list1[a] -= 1\n            else:\n                a -= 1\n    return ans\n\n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","0","","# Error: expected","#     10","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":266,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                             SideIndicator\r\n-----------                                                                             -------------\r\n        current,next,next_next=next, next_next , next_next + (2 * next) + (3 * current) =>           \r\n        current,next,next_next=next, next_next , current + (2 * next) + (3 * next_next) <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    current=1\n    next=2\n    next_next=3\n    if n<=3:\n        return n\n    while n>3:\n        current,next,next_next=next, next_next , current + (2 * next) + (3 * next_next)\n        n-=1\n    return next_next\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    current=1\n    next=2\n    next_next=3\n    if n<=3:\n        return n\n    while n>3:\n        current,next,next_next=next, next_next , next_next + (2 * next) + (3 * current)\n        n-=1\n    return next_next\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","14","","# Error: expected","#     10","# but got","#     14","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":268,"studentId":0,"date":null,"diff":"\r\nInputObject     SideIndicator\r\n-----------     -------------\r\n    return g[n] =>           \r\n    return g    <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    g = {}\n    for x in range(1,4):\n        g[x] = x  \n    for x in range(4,n+1):\n        g[x] = g[x-1] + 2*g[x-2] + 3*g[x-3]\n    return g\n    \n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    g = {}\n    for x in range(1,4):\n        g[x] = x  \n    for x in range(4,n+1):\n        g[x] = g[x-1] + 2*g[x-2] + 3*g[x-3]\n    return g[n]\n    \n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","{1: 1, 2: 2, 3: 3}","","# Error: expected","#     1","# but got","#     {1: 1, 2: 2, 3: 3}","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":269,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n            three_ago = two_ago                 =>           \r\n            two_ago = previous                  =>           \r\n    def reverse_count(k):                       =>           \r\n        if pingpong(k-1) < pingpong(k):         =>           \r\n            return -1                           =>           \r\n        else:                                   =>           \r\n            return 1                            =>           \r\n    def regular_count(k):                       =>           \r\n        if pingpong(k-1) < pingpong(k):         =>           \r\n            return 1                            =>           \r\n        else:                                   =>           \r\n            return -1                           =>           \r\n    if n < 7:                                   =>           \r\n        return n                                =>           \r\n    elif has_seven(n-1):                        =>           \r\n        return pingpong(n-1) + reverse_count(n) =>           \r\n        return pingpong(n-1) + regular_count(n) =>           \r\n    else:                                       =>           \r\n                                                =>           \r\n                                                =>           \r\n                                                =>           \r\n            two_ago = three_ago                 <=           \r\n            previous = two_ago                  <=           \r\n    \"*** YOUR CODE HERE ***\"                    <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        previous = 3\n        two_ago = 2\n        three_ago = 1\n        iterator = 0\n        while iterator < (n - 3):\n            two_ago = three_ago\n            previous = two_ago\n            new = previous + 2*two_ago + 3*three_ago\n            previous = new\n            iterator += 1\n        return new\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        previous = 3\n        two_ago = 2\n        three_ago = 1\n        iterator = 0\n        while iterator < (n - 3):\n            new = previous + 2*two_ago + 3*three_ago\n            three_ago = two_ago\n            two_ago = previous\n            previous = new\n            iterator += 1\n        return new\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","6","","# Error: expected","#     10","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":270,"studentId":0,"date":null,"diff":"\r\nInputObject                             SideIndicator\r\n-----------                             -------------\r\n    term_1, term_2, term_3, i = 1,2,3,3 =>           \r\n    term_1, term_2, term_3, i = 2,2,3,0 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    term_1, term_2, term_3, i = 2,2,3,0\n    if n <= 3:\n        return n\n    else:\n        while i < n:\n            term_1, term_2, term_3 =term_2, term_3, term_3 + 2*term_2 + 3*term_1\n            i += 1\n        return term_3\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    term_1, term_2, term_3, i = 1,2,3,3\n    if n <= 3:\n        return n\n    else:\n        while i < n:\n            term_1, term_2, term_3 =term_2, term_3, term_3 + 2*term_2 + 3*term_1\n            i += 1\n        return term_3\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","149","","# Error: expected","#     10","# but got","#     149","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":271,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                              SideIndicator\r\n-----------                                                                              -------------\r\n        for index in range(3, n):                                                        =>           \r\n    def ping_pong_helper(ppnum, intended, pos_neg, ppindx):                              =>           \r\n        if intended == ppindx:                                                           =>           \r\n            return ppnum                                                                 =>           \r\n        else:                                                                            =>           \r\n            if (ppindx + 1) % 7 == 0 or (pos_neg + ppnum) % 7==0 or has_seven(ppnum):    =>           \r\n                return ping_pong_helper(ppnum+pos_neg, intended, -1*(pos_neg), ppindx+1) =>           \r\n            else:                                                                        =>           \r\n                return ping_pong_helper(ppnum+pos_neg, intended, pos_neg, ppindx+1)      =>           \r\n    return ping_pong_helper(0, n, 1, 0)                                                  =>           \r\n        for index in range(0, n+1):                                                      <=           \r\n    ping_pong_list = []                                                                  <=           \r\n    for index in range(0, n+1):                                                          <=           \r\n        if has_seven(index) or index%7==0:                                               <=           \r\n            ping_pong_list.append(index)                                                 <=           \r\n                                                                                         <=           \r\n                                                                                         <=           \r\n                                                                                         <=           \r\n                                                                                         <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        first_term = 1\n        second_term = 2\n        third_term = 3\n        for index in range(0, n+1):\n            first_term, second_term, third_term = second_term, third_term, third_term + 2 * second_term + first_term * 3\n        return third_term\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        first_term = 1\n        second_term = 2\n        third_term = 3\n        for index in range(3, n):\n            first_term, second_term, third_term = second_term, third_term, third_term + 2 * second_term + first_term * 3\n        return third_term\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","293","","# Error: expected","#     10","# but got","#     293","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":272,"studentId":0,"date":null,"diff":"\r\nInputObject SideIndicator\r\n----------- -------------\r\n    k = 3   =>           \r\n    k = 4   <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    v1, v2, total = 1, 2, 3\n    k = 4\n\n    if n <= 3:\n        return n\n\n    while k < n:\n        v1, v2, total = v2, total, total + 2*v2 + 3*v1\n        k = k + 1\n    return total\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    v1, v2, total = 1, 2, 3\n    k = 3\n\n    if n <= 3:\n        return n\n\n    while k < n:\n        v1, v2, total = v2, total, total + 2*v2 + 3*v1\n        k = k + 1\n    return total\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","3","","# Error: expected","#     10","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":273,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n        z,y,x = total,z,y =>           \r\n        z,y,x = total,x,y <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n    if n<= 3:\n        return n\n\n    total = 0\n    ctr = 4\n    x,y,z = 1,2,3\n\n    while ctr <= n:\n        total = z + 2 * y + 3 * x\n        z,y,x = total,x,y\n        ctr += 1\n\n    return total\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n\n    p1, p2, p3 = 3, 2, 1\n    i, current = 4, 0\n    while i <= n:\n        current = p1 + 2 * p2 + 3 * p3\n        p1, p2, p3 = current, p1, p2\n        i += 1\n\n    return current\n    \"\"\"\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n    if n<= 3:\n        return n\n\n    total = 0\n    ctr = 4\n    x,y,z = 1,2,3\n\n    while ctr <= n:\n        total = z + 2 * y + 3 * x\n        z,y,x = total,z,y\n        ctr += 1\n\n    return total\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n\n    p1, p2, p3 = 3, 2, 1\n    i, current = 4, 0\n    while i <= n:\n        current = p1 + 2 * p2 + 3 * p3\n        p1, p2, p3 = current, p1, p2\n        i += 1\n\n    return current\n    \"\"\"\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","18","","# Error: expected","#     22","# but got","#     18","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":275,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n        gk2,gk1,gk,k=gk1,gk,2*gk1+3*gk2+gk,k+1  =>           \r\n        gk2=gk1                                 <=           \r\n        gk1=gk                                  <=           \r\n        gk=2*gk1+3*gk2+gk                       <=           \r\n        k=k+1                                   <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <=3:\n        return n\n    k=4\n    gk=3\n    gk1=2\n    gk2=1\n    while n>=k:\n        gk2=gk1\n        gk1=gk\n        gk=2*gk1+3*gk2+gk\n        k=k+1\n    return gk\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <=3:\n        return n\n    k=4\n    gk=3\n    gk1=2\n    gk2=1\n    while n>=k:\n        gk2,gk1,gk,k=gk1,gk,2*gk1+3*gk2+gk,k+1 \n    return gk\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","15","","# Error: expected","#     10","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":276,"studentId":0,"date":null,"diff":"\r\nInputObject                 SideIndicator\r\n-----------                 -------------\r\n        a,b,c=b,c,c+2*b+3*a =>           \r\n        a,b,c=b,c,c+2*b+3*c <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n\n    a,b,c=1,2,3\n    for var in range(4,n+1):\n        a,b,c=b,c,c+2*b+3*c\n    return c\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n\n    a,b,c=1,2,3\n    for var in range(4,n+1):\n        a,b,c=b,c,c+2*b+3*a\n    return c\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","16","","# Error: expected","#     10","# but got","#     16","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":277,"studentId":0,"date":null,"diff":"\r\nInputObject                           SideIndicator\r\n-----------                           -------------\r\n    if n == 1 or n == 2 or n == 3:    =>           \r\n    a, b, c = 1, 2, 3                 =>           \r\n    while n > 3:                      =>           \r\n        a, b, c = b, c, c + 2*b + 3*a =>           \r\n        n = n - 1                     =>           \r\n    return c                          =>           \r\n    if n==1 or n==2 or n==3:          <=           \r\n    x=1                               <=           \r\n    y=2                               <=           \r\n    z=3                               <=           \r\n    while n>3:                        <=           \r\n        x=y                           <=           \r\n        y=z                           <=           \r\n        z=z+2*y+3*x                   <=           \r\n        n=n-1                         <=           \r\n    return z                          <=           \r\n                                      <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n==1 or n==2 or n==3:\n        return n\n    x=1\n    y=2\n    z=3\n    while n>3:\n        x=y\n        y=z\n        z=z+2*y+3*x\n        n=n-1\n    return z\n\n\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n == 1 or n == 2 or n == 3:\n        return n\n    a, b, c = 1, 2, 3\n    while n > 3:\n        a, b, c = b, c, c + 2*b + 3*a\n        n = n - 1\n    return c\n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","15","","# Error: expected","#     10","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":278,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n            x, y, z = y, z, (3*x + 2*y + z) =>           \r\n            x, y, z = y, z, (3*x + 2*y + x) <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    x, y, z = 1, 2, 3\n    i = n\n    \n    if i <= 3:\n        return n\n    else: \n        while i > 3:\n            x, y, z = y, z, (3*x + 2*y + x)\n            i -= 1\n        return z\n        \n\n    \n        \n\n\n\n\n\n\n      \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    x, y, z = 1, 2, 3\n    i = n\n    \n    if i <= 3:\n        return n\n    else: \n        while i > 3:\n            x, y, z = y, z, (3*x + 2*y + z)\n            i -= 1\n        return z\n        \n\n    \n        \n\n\n\n\n\n\n      \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","8","","# Error: expected","#     10","# but got","#     8","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":279,"studentId":0,"date":null,"diff":"\r\nInputObject     SideIndicator\r\n-----------     -------------\r\n    counter = 3 =>           \r\n    counter = 2 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total = 0\n    coefficient = 0\n    counter = 2\n    if n <= 3:\n        total = n\n    else:\n        while counter > 0 and n > 2:\n            coefficient += 1\n            total += n * coefficient\n            n -= 1\n            counter -= 1\n    return total\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total = 0\n    coefficient = 0\n    counter = 3\n    if n <= 3:\n        total = n\n    else:\n        while counter > 0 and n > 2:\n            coefficient += 1\n            total += n * coefficient\n            n -= 1\n            counter -= 1\n    return total\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","13","","# Error: expected","#     22","# but got","#     13","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":280,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n            a = a+ 3*x   =>           \r\n            b = b+ 2*y   =>           \r\n        return a + b + c =>           \r\n            a += 3*x     <=           \r\n            b += 2*x     <=           \r\n        return a+b+c     <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    a=0\n    b=0\n    c=3\n    if n <= 3:\n        return n\n    elif n > 3:\n        for x in range(1,n-2):\n            a += 3*x\n        for y in range(2,n-1):\n            b += 2*x\n        return a+b+c\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    a=0\n    b=0\n    c=3\n    if n <= 3:\n        return n\n    elif n > 3:\n        for x in range(1,n-2):\n            a = a+ 3*x\n        for y in range(2,n-1):\n            b = b+ 2*y\n        return a + b + c\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","8","","# Error: expected","#     10","# but got","#     8","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":281,"studentId":0,"date":null,"diff":"\r\nInputObject                                            SideIndicator\r\n-----------                                            -------------\r\n        m = (k-1) + (2*(k-2)) + (3*(k-3)) + m - (m//4) =>           \r\n        m = (k-1) + (2*(k-2)) + (3*(k-3)) +  - (m//4)  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k = n\n    m = 0\n    if k <=3:\n        return k\n    while k<=n and k>3:\n        m = (k-1) + (2*(k-2)) + (3*(k-3)) +  - (m//4)\n        k -=1\n    return m \n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k = n\n    m = 0\n    if k <=3:\n        return k\n    while k<=n and k>3:\n        m = (k-1) + (2*(k-2)) + (3*(k-3)) + m - (m//4)\n        k -=1\n    return m \n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","6","","# Error: expected","#     22","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":282,"studentId":0,"date":null,"diff":"\r\nInputObject                           SideIndicator\r\n-----------                           -------------\r\n        a, b, c = b, c, c + 2*b + 3*a =>           \r\n        a = b                         <=           \r\n        b = c                         <=           \r\n        c = c + 2*b + 3*a             <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    x = 4\n    a = 1\n    b = 2\n    c = 3\n    while x <= n:\n        a = b\n        b = c\n        c = c + 2*b + 3*a\n        x += 1\n    if n <= 3:\n        return n\n    return c\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    x = 4\n    a = 1\n    b = 2\n    c = 3\n    while x <= n:\n        a, b, c = b, c, c + 2*b + 3*a\n        x += 1\n    if n <= 3:\n        return n\n    return c\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","15","","# Error: expected","#     10","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":283,"studentId":0,"date":null,"diff":"\r\nInputObject                                       SideIndicator\r\n-----------                                       -------------\r\n            current , next= next, current - (n-5) =>           \r\n            current , next= next, current - (n-1) <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    else:\n        k = n - 3\n        next = (n - 1) + 2 * (n - 2) + 3 * (n - 3)\n        current = (n) + 2*(n-1) + 3*(n-2)\n        while k>0:\n            current , next= next, current - (n-1)\n            k -= 1\n        return current\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    else:\n        k = n - 3\n        next = (n - 1) + 2 * (n - 2) + 3 * (n - 3)\n        current = (n) + 2*(n-1) + 3*(n-2)\n        while k>0:\n            current , next= next, current - (n-5)\n            k -= 1\n        return current\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","18","","# Error: expected","#     22","# but got","#     18","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":284,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        return c     =>           \r\n            return c <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    elif n>3:\n        a, b, c = 1, 2, 3\n        for i in range(3, n):\n            a, b, c = b, c, (a * 3 + b * 2 + c)\n            return c\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    elif n>3:\n        a, b, c = 1, 2, 3\n        for i in range(3, n):\n            a, b, c = b, c, (a * 3 + b * 2 + c)\n        return c\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","10","","# Error: expected","#     22","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":285,"studentId":0,"date":null,"diff":"\r\nInputObject        SideIndicator\r\n-----------        -------------\r\n        while n>3: =>           \r\n        while n>0: <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"\"\"g1 = 3\n    g2 = 2\n    g3 = 1\n    count = 3\n    if n <= 3:\n        return n\n\n    else:\n        while(count < n):\n            g1, g2, g3 = g1+2*g2+3*g3, g1, g2\n            count+=1\n        return g1\"\"\"\n    g1 = 3\n    g2 = 2\n    g3 = 1\n    if n <=3:\n        return n\n    else:\n        while n>0:\n            g1, g2, g3 = g1+2*g2+3*g3, g1, g2\n            n-=1\n        return g1\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"\"\"g1 = 3\n    g2 = 2\n    g3 = 1\n    count = 3\n    if n <= 3:\n        return n\n\n    else:\n        while(count < n):\n            g1, g2, g3 = g1+2*g2+3*g3, g1, g2\n            count+=1\n        return g1\"\"\"\n    g1 = 3\n    g2 = 2\n    g3 = 1\n    if n <=3:\n        return n\n    else:\n        while n>3:\n            g1, g2, g3 = g1+2*g2+3*g3, g1, g2\n            n-=1\n        return g1\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","125","","# Error: expected","#     10","# but got","#     125","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":287,"studentId":0,"date":null,"diff":"\r\nInputObject                     SideIndicator\r\n-----------                     -------------\r\n    base=4                      =>           \r\n    a=1                         =>           \r\n    b=2                         =>           \r\n    c=3                         =>           \r\n    if n<=3:                    =>           \r\n        return n                =>           \r\n    while base <= n:            =>           \r\n        result=c+2*b+3*a        =>           \r\n        a=b                     =>           \r\n        b=c                     =>           \r\n        c=result                =>           \r\n                                =>           \r\n                                =>           \r\n    base=0                      <=           \r\n    a=n-1                       <=           \r\n    b=n-2                       <=           \r\n    c=n-3                       <=           \r\n    while base != n:            <=           \r\n        a=a-1                   <=           \r\n        b=b-1                   <=           \r\n        c=c-1                   <=           \r\n        result=result+a+2*b+3*c <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    base=0\n    result=0\n    a=n-1\n    b=n-2\n    c=n-3\n    while base != n:\n        base=base+1\n        a=a-1\n        b=b-1\n        c=c-1\n        result=result+a+2*b+3*c\n    return result\n\n    \n        \n   \n    \n        \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    base=4\n    result=0\n    a=1\n    b=2\n    c=3\n    if n<=3:\n        return n\n\n    while base <= n:\n        base=base+1\n        result=c+2*b+3*a\n        a=b\n        b=c\n        c=result\n        \n    return result\n\n    \n        \n   \n    \n        \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","-14","","# Error: expected","#     1","# but got","#     -14","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":288,"studentId":0,"date":null,"diff":"\r\nInputObject                                   SideIndicator\r\n-----------                                   -------------\r\n    counter = 3                               =>           \r\n            x, y, z = y, z, z + 2 * y + 3 * x =>           \r\n    counter = 1                               <=           \r\n            x, y, z = y, z, z + 2 * x + 3 * y <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    counter = 1\n    x, y, z = 1, 2, 3\n    if n <= 3:\n        return n\n    else:\n        while counter < n:\n            counter += 1\n            x, y, z = y, z, z + 2 * x + 3 * y\n    return z\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    counter = 3\n    x, y, z = 1, 2, 3\n    if n <= 3:\n        return n\n    else:\n        while counter < n:\n            counter += 1\n            x, y, z = y, z, z + 2 * y + 3 * x\n    return z\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","63","","# Error: expected","#     10","# but got","#     63","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":289,"studentId":0,"date":null,"diff":"\r\nInputObject                       SideIndicator\r\n-----------                       -------------\r\n            x = a + 2 * b + 3 * c =>           \r\n            x = c + 2 *b + 3 * a  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n\t    return n\n    else:\n\t    a, b, c = 3, 2, 1\n\t    i = 4\n\t    while i <= n:\n\t\t    x = c + 2 *b + 3 * a\n\t\t    a, b, c = x, a, b\n\t\t    i += 1\n\t    return x\n    \n    \n    \n    \n    \n    \n    \n    \n    \"\"\"if n > 3:\n\t    k = 1\n\t    total = 0\n\t    while k <= 3:\n\t\t    total = total + k * (n - k)\n\t\t    k += 1\n\t    return total\n    else:\n\t    return n\"\"\"\n\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n\t    return n\n    else:\n\t    a, b, c = 3, 2, 1\n\t    i = 4\n\t    while i <= n:\n\t\t    x = a + 2 * b + 3 * c\n\t\t    a, b, c = x, a, b\n\t\t    i += 1\n\t    return x\n    \n    \n    \n    \n    \n    \n    \n    \n    \"\"\"if n > 3:\n\t    k = 1\n\t    total = 0\n\t    while k <= 3:\n\t\t    total = total + k * (n - k)\n\t\t    k += 1\n\t    return total\n    else:\n\t    return n\"\"\"\n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","14","","# Error: expected","#     10","# but got","#     14","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":290,"studentId":0,"date":null,"diff":"\r\nInputObject                                        SideIndicator\r\n-----------                                        -------------\r\n        return (n - 1) + 2 * (n - 2) + 6 * (n - 3) =>           \r\n        return (n - 1) + 2 * (n - 2) + 4 * (n - 3) <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\" \n    if n == 4: \n        return (n - 1) + 2 * (n - 2) + 3 * (n - 3)\n    elif n == 5:\n        return (n - 1) + 2 * (n - 2) + 4 * (n - 3)\n    else: \n        return n \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\" \n    if n == 4: \n        return (n - 1) + 2 * (n - 2) + 3 * (n - 3)\n    elif n == 5:\n        return (n - 1) + 2 * (n - 2) + 6 * (n - 3)\n    else: \n        return n \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","18","","# Error: expected","#     22","# but got","#     18","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":291,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n    def helper(a, b, c, d):                  =>           \r\n        if n < 1:                            =>           \r\n            return 0                         =>           \r\n        if n == 1:                           =>           \r\n            return 1                         =>           \r\n        else:                                =>           \r\n            return move_stack(n, start, end) =>           \r\n    if n < 1:                                <=           \r\n        return 0                             <=           \r\n    if n == 1:                               <=           \r\n        return 1                             <=           \r\n    else:                                    <=           \r\n        return move_stack(n, start, end)     <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    i, x, y, z = 3, 3, 2, 1\n    total = 0\n    if n <= 3:\n        return n\n    else:\n        while i < n:\n            y += 1\n            z += 1\n            x += 2*y + 3*z\n            i += 1\n    return x\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    i, x, y, z = 3, 3, 2, 1\n    total = 0\n    if n <= 3:\n        return n\n    else:\n        while i < n:\n            x += 2*y + 3*z\n            y += 1\n            z += 1\n            i += 1\n    return x\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","15","","# Error: expected","#     10","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":292,"studentId":0,"date":null,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n        return n =>           \r\n        total=n  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        total=n\n    g1,g2,g3=3,2,1\n    i=4\n    total=0\n    while i<=n:\n        total=g1+2*g2+3*g3\n        g1,g2,g3=total,g1,g2\n        i+=1\n\n    return total\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    g1,g2,g3=3,2,1\n    i=4\n    total=0\n    while i<=n:\n        total=g1+2*g2+3*g3\n        g1,g2,g3=total,g1,g2\n        i+=1\n\n    return total\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","0","","# Error: expected","#     1","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":293,"studentId":0,"date":null,"diff":"\r\nInputObject        SideIndicator\r\n-----------        -------------\r\n        if n == 5: =>           \r\n        if x == 5: <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    theanswer = 0\n    firstterm = 0\n    secondterm = 0\n    thirdterm = 0\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n\n    elif n > 3:\n        x = n-1\n        firstterm = x\n        secondterm = 2*(x-1)\n        thirdterm = 3*(x-2)\n        if x == 5:\n            return 22\n        if x <= 3:\n            return firstterm + secondterm + thirdterm\n\n\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    theanswer = 0\n    firstterm = 0\n    secondterm = 0\n    thirdterm = 0\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n\n    elif n > 3:\n        x = n-1\n        firstterm = x\n        secondterm = 2*(x-1)\n        thirdterm = 3*(x-2)\n        if n == 5:\n            return 22\n        if x <= 3:\n            return firstterm + secondterm + thirdterm\n\n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","","# Error: expected","#     22","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":294,"studentId":0,"date":null,"diff":"\r\nInputObject       SideIndicator\r\n-----------       -------------\r\n    while i <= n: =>           \r\n    return num3   =>           \r\n    while i < n:  <=           \r\n    return num4   <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    num1 = 1\n    num2 = 2\n    num3 = 3\n    i = 4\n    if n <= 3:\n        return n\n    while i < n:\n        num4 = num3 + 2 * num2 + 3 * num1        \n        num1 = num2\n        num2 = num3\n        num3 = num4\n        i += 1\n    return num4\n\n        \n    # i = 0\n    # a = 0\n    # if n <= 3:\n    #     return n\n    # for i in range(0, n):\n    #     a += i * n\n    #     n -= 1\n    # return a\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    num1 = 1\n    num2 = 2\n    num3 = 3\n    i = 4\n    if n <= 3:\n        return n\n    while i <= n:\n        num4 = num3 + 2 * num2 + 3 * num1        \n        num1 = num2\n        num2 = num3\n        num3 = num4\n        i += 1\n    return num3\n\n        \n    # i = 0\n    # a = 0\n    # if n <= 3:\n    #     return n\n    # for i in range(0, n):\n    #     a += i * n\n    #     n -= 1\n    # return a\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 233, in g_iter","    return num4","UnboundLocalError: local variable 'num4' referenced before assignment","","# Error: expected","#     10","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":295,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n             total = g_3 + 2 * g_2 + 3 * g_1 =>           \r\n             total = g_1 + 2 * g_2 + 3 * g_3 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    i = 4\n    total = 0\n    if n <= 3:\n         return n\n    else:\n         g_1 = 1\n         g_2 = 2\n         g_3 = 3\n         while i <= n:\n             total = g_1 + 2 * g_2 + 3 * g_3\n             g_1 = g_2\n             g_2 = g_3\n             g_3 = total\n             i += 1\n         return total\n          \n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    i = 4\n    total = 0\n    if n <= 3:\n         return n\n    else:\n         g_1 = 1\n         g_2 = 2\n         g_3 = 3\n         while i <= n:\n             total = g_3 + 2 * g_2 + 3 * g_1\n             g_1 = g_2\n             g_2 = g_3\n             g_3 = total\n             i += 1\n         return total\n          \n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","14","","# Error: expected","#     10","# but got","#     14","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":296,"studentId":0,"date":null,"diff":"\r\nInputObject                                   SideIndicator\r\n-----------                                   -------------\r\n    g1 = 1                                    =>           \r\n    g2 = 2                                    =>           \r\n    g3 = 3                                    =>           \r\n    for i in range(4, n+1):                   =>           \r\n        g1, g2, g3 = g2, g3, g1*3 + g2*2 + g3 =>           \r\n    return g3                                 =>           \r\n                                              =>           \r\n        nminusone                             <=           \r\n    else:                                     <=           \r\n                                              <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        nminusone\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    g1 = 1\n    g2 = 2\n    g3 = 3\n    for i in range(4, n+1):\n        g1, g2, g3 = g2, g3, g1*3 + g2*2 + g3\n    return g3\n    \n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 209, in g_iter","    nminusone","NameError: name 'nminusone' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":297,"studentId":0,"date":null,"diff":"\r\nInputObject                             SideIndicator\r\n-----------                             -------------\r\n        w = 3*x + 2*y + z               =>           \r\n    if amount % 2 == 0:                 =>           \r\n        return 1                        =>           \r\n    elif amount <0:                     =>           \r\n        return 0                        =>           \r\n    elif amount == 0:                   =>           \r\n        return 0                        =>           \r\n    else:                               =>           \r\n        return count_change(amount - 1) =>           \r\n                                        =>           \r\n                                        =>           \r\n                                        =>           \r\n        w = x + 2*y + 3*z               <=           \r\n                                        <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    w, x, y, z = 0, 1, 2, 3\n    \n    if n < 4:\n        return n\n    \n    while n > 3:\n        w = x + 2*y + 3*z\n        x = y \n        y = z\n        z = w\n        n -= 1\n    return w\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    w, x, y, z = 0, 1, 2, 3\n\n    if n < 4:\n        return n\n    \n    while n > 3:\n        w = 3*x + 2*y + z\n        x = y \n        y = z\n        z = w\n        n -= 1\n    return w\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","14","","# Error: expected","#     10","# but got","#     14","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":299,"studentId":0,"date":null,"diff":"\r\nInputObject                           SideIndicator\r\n-----------                           -------------\r\n    a, b, c = 1, 2, 3                 =>           \r\n    for i in range(n-3):              =>           \r\n        a, b, c = b, c, c + 2*b + 3*a =>           \r\n    return c                          =>           \r\n    #g1 = 1                           =>           \r\n    #g2 = 2                           =>           \r\n    #g3 = 3                           =>           \r\n    #g4 = 4                           =>           \r\n    #g5 = 5                           =>           \r\n    #for i in range(4, n + 1):        =>           \r\n    #    g1 = g2                      =>           \r\n    #    g2 = g3                      =>           \r\n     #   g3 = g1 * 3 + g2 * 2 + g3    =>           \r\n    #    g4 = g1 *                    =>           \r\n    #return g3                        =>           \r\n    #if n <= 3:                       =>           \r\n    #    return n                     =>           \r\n                                      =>           \r\n    g1 = 1                            <=           \r\n    g2 = 2                            <=           \r\n    g3 = 3                            <=           \r\n    for i in range(4, n + 1):         <=           \r\n        g1 = g2                       <=           \r\n        g2 = g3                       <=           \r\n        g3 = g1 * 3 + g2 * 2 + g3     <=           \r\n    return g3                         <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    g1 = 1\n    g2 = 2\n    g3 = 3\n    for i in range(4, n + 1):\n        g1 = g2\n        g2 = g3\n        g3 = g1 * 3 + g2 * 2 + g3\n    return g3\n\n\n    #list1 = [1, 2, 3]\n    #if n <= 3:\n    #    return n\n    #else: \n    #    for i in range(4,n):\n    #        list1.append(list1[-1]+list1[-2]+list1[-3])\n    #return list1[-1]\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    a, b, c = 1, 2, 3\n    for i in range(n-3):\n        a, b, c = b, c, c + 2*b + 3*a\n    return c    \n\n    #if n <= 3:\n    #    return n\n    #g1 = 1\n    #g2 = 2\n    #g3 = 3\n    #g4 = 4\n    #g5 = 5\n    #for i in range(4, n + 1):\n    #    g1 = g2\n    #    g2 = g3\n     #   g3 = g1 * 3 + g2 * 2 + g3\n    #    g4 = g1 * \n    #return g3\n\n\n    #list1 = [1, 2, 3]\n    #if n <= 3:\n    #    return n\n    #else: \n    #    for i in range(4,n):\n    #        list1.append(list1[-1]+list1[-2]+list1[-3])\n    #return list1[-1]\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","15","","# Error: expected","#     10","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":300,"studentId":0,"date":null,"diff":"\r\nInputObject                           SideIndicator\r\n-----------                           -------------\r\n        i=0                           =>           \r\n        total=0                       =>           \r\n        while i<=n:                   =>           \r\n            if i<=3:                  =>           \r\n                x=3                   =>           \r\n                y=2                   =>           \r\n                z=1                   =>           \r\n                i+=1                  =>           \r\n            else:                     =>           \r\n                total = x +2*y + 3*z  =>           \r\n                x, y, z = total, x, y =>           \r\n                i+=1                  =>           \r\n        return total                  =>           \r\n                                      =>           \r\n        i=1                           <=           \r\n        y=n                           <=           \r\n        while i<=3:                   <=           \r\n            y=y+i*(n-1)               <=           \r\n            i+=1                      <=           \r\n    return y                          <=           \r\n    # i=1                             <=           \r\n    # y=base                          <=           \r\n    # while i<=n:                     <=           \r\n    #     y = combiner(y, term(i))    <=           \r\n    #     i+=1                        <=           \r\n    # return y                        <=           \r\n    #     x =                         <=           \r\n    # def x(n):                       <=           \r\n    #     # g(n-1)                    <=           \r\n    # return x + 2 * y + 3 * z        <=           \r\n                                      <=           \r\n                                      <=           \r\n                                      <=           \r\n    \"*** YOUR CODE HERE ***\"          <=           \r\n                                      <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        i=1\n        y=n\n        while i<=3:\n            y=y+i*(n-1)\n            i+=1\n    return y\n\n\n    # i=1\n    # y=base\n    # while i<=n:\n    #     y = combiner(y, term(i))\n    #     i+=1\n    # return y\n\n    #     x =             \n    # def x(n):\n    #     # g(n-1)\n\n    # return x + 2 * y + 3 * z\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        i=0\n        total=0\n        while i<=n:\n            if i<=3:\n                x=3\n                y=2\n                z=1\n                i+=1\n            else:\n                total = x +2*y + 3*z\n                x, y, z = total, x, y\n                i+=1\n        return total \n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","22","","# Error: expected","#     10","# but got","#     22","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":301,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n            a, b, c = b , c, c + 2 * b + 3 * a =>           \r\n            a, b, c = b , c, a + 2 * b + 3 * c <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a = 1\n    b = 2\n    c = 3\n    if n <=3:\n        return n\n    else:\n        while n > 3:\n            a, b, c = b , c, a + 2 * b + 3 * c\n            n -= 1\n        return c\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a = 1\n    b = 2\n    c = 3\n    if n <=3:\n        return n\n    else:\n        while n > 3:\n            a, b, c = b , c, c + 2 * b + 3 * a\n            n -= 1\n        return c\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","14","","# Error: expected","#     10","# but got","#     14","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":303,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n        a, b, c  = a + (2 * b) + (3 * c), a, b =>           \r\n        n -= 1                                 =>           \r\n        b = a                                  <=           \r\n        c = b                                  <=           \r\n        a = a + (2 * b) + (3 * c)              <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    a = 3\n    b = 2\n    c = 1\n    while n > 3:\n        b = a\n        c = b\n        a = a + (2 * b) + (3 * c)\n    return a\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    a = 3\n    b = 2\n    c = 1\n    while n > 3:\n        a, b, c  = a + (2 * b) + (3 * c), a, b\n        n -= 1\n    return a\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     10","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":305,"studentId":0,"date":null,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n        index+=1 =>           \r\n        i+=1     <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    index,list_of_g=4,[1,2,3]\n    while index<=n:\n        list_of_g.append (3*list_of_g[0]+2*list_of_g[1]+list_of_g[2])\n        list_of_g.pop(0)\n        i+=1\n    return list_of_g[2]\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    index,list_of_g=4,[1,2,3]\n    while index<=n:\n        list_of_g.append (3*list_of_g[0]+2*list_of_g[1]+list_of_g[2])\n        list_of_g.pop(0)\n        index+=1\n    return list_of_g[2]\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 217, in g_iter","    i+=1","UnboundLocalError: local variable 'i' referenced before assignment","","# Error: expected","#     10","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":306,"studentId":0,"date":null,"diff":"\r\nInputObject                                        SideIndicator\r\n-----------                                        -------------\r\n    tot = 3                                        =>           \r\n        tot = tot + 2*(prev2) + 3 *(prev3)         =>           \r\n    return tot                                     =>           \r\n    current = 3                                    <=           \r\n        current = current + 2*(prev2) + 3 *(prev3) <=           \r\n    return current                                 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    current = 3\n    prev1 = 3\n    prev2 = 2 \n    prev3 = 1\n    while n>3:\n        current = current + 2*(prev2) + 3 *(prev3)\n        prev1 = tot\n        prev2 += 1 \n        prev3 += 1\n        n -= 1\n    return current\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    tot = 3\n    prev1 = 3\n    prev2 = 2 \n    prev3 = 1\n    while n>3:\n        tot = tot + 2*(prev2) + 3 *(prev3)\n        prev1 = tot\n        prev2 += 1 \n        prev3 += 1\n        n -= 1\n    return tot\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 220, in g_iter","    prev1 = tot","NameError: name 'tot' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":307,"studentId":0,"date":null,"diff":"\r\nInputObject                                         SideIndicator\r\n-----------                                         -------------\r\n        total = 3*one + 2*two + three               =>           \r\n        one, two, three = two, three, total         =>           \r\n        total = 3*first + 2*second + third          <=           \r\n        first, second, third = second, third, total <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    counter = n - 3\n    one = 1\n    two = 2\n    three = 3\n    while counter > 0:\n        total = 3*first + 2*second + third\n        first, second, third = second, third, total\n        counter -= 1\n    return total\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    counter = n - 3\n    one = 1\n    two = 2\n    three = 3\n    while counter > 0:\n        total = 3*one + 2*two + three\n        one, two, three = two, three, total\n        counter -= 1\n    return total\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 219, in g_iter","    total = 3*first + 2*second + third","UnboundLocalError: local variable 'first' referenced before assignment","","# Error: expected","#     10","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":308,"studentId":0,"date":null,"diff":"\r\nInputObject       SideIndicator\r\n-----------       -------------\r\n        n = n - 1 =>           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n == 1 or n == 2 or n == 3:\n        return n\n    a, b, c = 1, 2, 3\n    while n > 3:\n        a, b, c = b, c, c + 2*b + 3*a\n    return c\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n == 1 or n == 2 or n == 3:\n        return n\n    a, b, c = 1, 2, 3\n    while n > 3:\n        a, b, c = b, c, c + 2*b + 3*a\n        n = n - 1\n    return c\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     10","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":309,"studentId":0,"date":null,"diff":"\r\nInputObject                     SideIndicator\r\n-----------                     -------------\r\n            num = c + 2*b + 3*a =>           \r\n        return c + 2*b + 3*a    =>           \r\n            num = a + 2*b + 3*c <=           \r\n        return a + 2*b + 3*c    <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a, b, c, i = 1, 2, 3, 4\n    num = 0\n\n    if(n <= 3):\n        return n\n    else:\n        while(i < n):\n            num = a + 2*b + 3*c\n            a, b, c = b, c, num\n            i += 1\n        return a + 2*b + 3*c\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a, b, c, i = 1, 2, 3, 4\n    num = 0\n\n    if(n <= 3):\n        return n\n    else:\n        while(i < n):\n            num = c + 2*b + 3*a\n            a, b, c = b, c, num\n            i += 1\n        return c + 2*b + 3*a\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","14","","# Error: expected","#     10","# but got","#     14","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":310,"studentId":0,"date":null,"diff":"\r\nInputObject                                                           SideIndicator\r\n-----------                                                           -------------\r\n    small, medium = 1, 2                                              =>           \r\n    large, total = 3, 10                                              =>           \r\n            total = large + 2*medium + 3*small                        =>           \r\n            small, medium = medium, large                             =>           \r\n            large = total                                             =>           \r\n    small, total = 1, 10                                              <=           \r\n            small, total = small+1, 3*small + 2*(small+1) + (small+2) <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** LULU'S CODE HERE ***\"\n    small, total = 1, 10\n\n    if n <= 3:\n        return n\n    else:\n        while n > 3:\n            small, total = small+1, 3*small + 2*(small+1) + (small+2)\n            n -= 1\n\n    return total \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** LULU'S CODE HERE ***\"\n    small, medium = 1, 2\n    large, total = 3, 10\n\n    if n <= 3:\n        return n\n    else:\n        while n > 3:\n            total = large + 2*medium + 3*small\n            small, medium = medium, large\n            large = total\n            n -= 1\n\n    return total \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","16","","# Error: expected","#     22","# but got","#     16","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":311,"studentId":0,"date":null,"diff":"\r\nInputObject                                                   SideIndicator\r\n-----------                                                   -------------\r\n            if i == 4:                                        =>           \r\n                result += 3 * (i - 3) + 2 * (i - 2) + (i - 1) =>           \r\n            else:                                             =>           \r\n                result += 3 * (i - 3) + 2 * (i - 2)           =>           \r\n            k = 3                                             <=           \r\n            while k > 0:                                      <=           \r\n                result += k * (i - k)                         <=           \r\n                k -= 1                                        <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        i = n\n        result = 0\n        while i > 3:\n            k = 3\n            while k > 0:\n                result += k * (i - k)\n                k -= 1\n            i -=1\n        return result\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        i = n\n        result = 0\n        while i > 3:\n            if i == 4:\n                result += 3 * (i - 3) + 2 * (i - 2) + (i - 1)\n            else:\n                result += 3 * (i - 3) + 2 * (i - 2)\n            i -=1\n        return result\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","26","","# Error: expected","#     22","# but got","#     26","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":312,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n        print(nextvalue) <=           \r\n        print(prev)      <=           \r\n        print(secprev)   <=           \r\n        print(thrdprev)  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    prev, secprev, thrdprev = 3, 2, 1\n    nextvalue = 0\n    k = 3\n    while k < n:\n        nextvalue = prev + 2 * secprev + 3 * thrdprev\n        print(nextvalue)\n        print(prev)\n        print(secprev)\n        print(thrdprev)\n        prev = nextvalue\n        secprev = prev\n        thrdprev = secprev\n        k = k + 1\n    return nextvalue\n\n         \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    prev, secprev, thrdprev = 3, 2, 1\n    nextvalue = 0\n    k = 3\n    while k < n:\n        nextvalue = prev + 2 * secprev + 3 * thrdprev\n        thrdprev = secprev\n        secprev = prev\n        prev = nextvalue\n        k = k + 1\n    return nextvalue\n\n         \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10","3","2","1","10","","# Error: expected","#     10","# but got","#     10","#     3","#     2","#     1","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":313,"studentId":0,"date":null,"diff":"\r\nInputObject                             SideIndicator\r\n-----------                             -------------\r\n        gn1, gn2, gn3 = total, gn1, gn2 =>           \r\n        gn1, gn2, gn3 = total, gn1, gn3 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    gn1, gn2, gn3 = 3, 2, 1\n    k, total = 4, 0\n    while k <= n:\n        total = gn1 + 2*gn2 + 3*gn3\n        gn1, gn2, gn3 = total, gn1, gn3\n        k +=1\n    return total\n        \n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    gn1, gn2, gn3 = 3, 2, 1\n    k, total = 4, 0\n    while k <= n:\n        total = gn1 + 2*gn2 + 3*gn3\n        gn1, gn2, gn3 = total, gn1, gn2\n        k +=1\n    return total\n        \n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","19","","# Error: expected","#     22","# but got","#     19","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":314,"studentId":0,"date":null,"diff":"\r\nInputObject                                         SideIndicator\r\n-----------                                         -------------\r\n    a = 3                                           =>           \r\n            g1, g2, g3 = (g1 + 2*g2 + 3*g3), g1, g2 =>           \r\n    a = 0                                           <=           \r\n            g1, g2, g3 = g1 + 2*g2 + 3*g3, g1, g2   <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a = 0\n    if n <= 3:\n        return n\n    else:\n        g1, g2, g3 = 3, 2, 1\n        while a < n:\n            g1, g2, g3 = g1 + 2*g2 + 3*g3, g1, g2\n            a += 1\n        return g1\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a = 3\n    if n <= 3:\n        return n\n    else:\n        g1, g2, g3 = 3, 2, 1\n        while a < n:\n            g1, g2, g3 = (g1 + 2*g2 + 3*g3), g1, g2\n            a += 1\n        return g1\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","125","","# Error: expected","#     10","# but got","#     125","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":315,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n            gsmall_t = gmed                     =>           \r\n            gmed_t = gbig                       =>           \r\n        return gbig                             =>           \r\n            gsmall_t = gbig + 2*gmed + 3*gsmall <=           \r\n            gmed_t = gbig + 2*gmed + 3*gsmall   <=           \r\n        return gsmall                           <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        gbig = 3\n        gmed = 2\n        gsmall = 1\n        while n > 3:\n            gsmall_t = gbig + 2*gmed + 3*gsmall\n            gmed_t = gbig + 2*gmed + 3*gsmall\n            gbig_t = gbig + 2*gmed + 3*gsmall\n            gsmall = gsmall_t\n            gmed = gmed_t\n            gbig = gbig_t\n            n -= 1\n        return gsmall\n\n        \n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        gbig = 3\n        gmed = 2\n        gsmall = 1\n        while n > 3:\n            gsmall_t = gmed\n            gmed_t = gbig\n            gbig_t = gbig + 2*gmed + 3*gsmall\n            gsmall = gsmall_t\n            gmed = gmed_t\n            gbig = gbig_t\n            n -= 1\n        return gbig\n\n        \n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","60","","# Error: expected","#     22","# but got","#     60","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":316,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                 SideIndicator\r\n-----------                                                                 -------------\r\n        first, second, third =second, third, first * 3 + second * 2 + third =>           \r\n        first = second                                                      <=           \r\n        second = third                                                      <=           \r\n        third = first * 3 + second * 2 + third                              <=           \r\n                                                                            <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n\n    first = 1\n    second = 2\n    third = 3\n\n    for i in range(4, n+1):\n\n        first = second\n\n        second = third\n\n        third = first * 3 + second * 2 + third\n\n    return third\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n\n    first = 1\n    second = 2\n    third = 3\n\n    for i in range(4, n+1):\n\n\n        first, second, third =second, third, first * 3 + second * 2 + third\n\n    return third\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","15","","# Error: expected","#     10","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":317,"studentId":0,"date":null,"diff":"\r\nInputObject                          SideIndicator\r\n-----------                          -------------\r\n            n3 = (c + 2 * b + 3 * a) =>           \r\n            n3 = (3 * c + 2 * b + a) <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    x = n - 3\n    n1, n2, n3 = 1, 2, 3\n    if n == 1:\n        return n1\n    elif n == 2:\n        return n2\n    elif n == 3:\n        return n3\n    else:\n        while x > 0:\n            a = n1\n            b = n2\n            c = n3\n            n3 = (3 * c + 2 * b + a)\n            n2 = c\n            n1 = b\n            x -= 1\n    return n3\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    x = n - 3\n    n1, n2, n3 = 1, 2, 3\n    if n == 1:\n        return n1\n    elif n == 2:\n        return n2\n    elif n == 3:\n        return n3\n    else:\n        while x > 0:\n            a = n1\n            b = n2\n            c = n3\n            n3 = (c + 2 * b + 3 * a)\n            n2 = c\n            n1 = b\n            x -= 1\n    return n3\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","14","","# Error: expected","#     10","# but got","#     14","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":318,"studentId":0,"date":null,"diff":"\r\nInputObject                              SideIndicator\r\n-----------                              -------------\r\n        remove = []                      =>           \r\n        for i in total_list:             =>           \r\n        for element in remove:           =>           \r\n            total_list.remove(element)   =>           \r\n        for i in total_list:             <=           \r\n            remove = []                  <=           \r\n                                         <=           \r\n        for index in remove:             <=           \r\n            total_list.remove(index)     <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n\n    total_list = [n-1] + [n-2] + [n-2] + [n-3] + [n-3] + [n-3]\n    greater_than_3 = True\n\n    while greater_than_3 == True:\n        greater_than_3 = False\n        \n        for i in total_list:\n            remove = []\n            \n            if i > 3:\n                remove.append(i)\n                greater_than_3 = True\n                total_list = total_list + [i - 1] + [i-2]*2 + [i-3]*3\n\n        for index in remove:\n            total_list.remove(index)\n\n    return sum(total_list)\n\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n\n    total_list = [n-1] + [n-2] + [n-2] + [n-3] + [n-3] + [n-3]\n    greater_than_3 = True\n\n    while greater_than_3 == True:\n        greater_than_3 = False\n        \n        remove = []\n        for i in total_list:            \n            if i > 3:\n                remove.append(i)\n                greater_than_3 = True\n                total_list = total_list + [i - 1] + [i-2]*2 + [i-3]*3\n\n        for element in remove:\n            total_list.remove(element)\n\n    return sum(total_list)\n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     22","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":319,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n    while n > 3:      =>           \r\n        n -= 1        =>           \r\n    while i != n - 3: <=           \r\n        i += 1        <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    '''if g <= 3:\n        return n\n    else:\n        if n - 3 > 3:\n            for x in :'''\n\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    a = 3\n    b = 2\n    c = 1\n    total = 0\n    i = 3\n    while i != n - 3:\n        total = a + b * 2 + c * 3\n        c = b\n        b = a\n        a = total\n        i += 1\n    return total\n\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    '''if g <= 3:\n        return n\n    else:\n        if n - 3 > 3:\n            for x in :'''\n\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    a = 3\n    b = 2\n    c = 1\n    total = 0\n    i = 3\n    while n > 3:\n        total = a + b * 2 + c * 3\n        c = b\n        b = a\n        a = total\n        n -= 1\n    return total\n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     10","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":320,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                   SideIndicator\r\n-----------                                                                                   -------------\r\n    return accumulate(lambda x,y: combiner(x,y) if pred(x) else identity(y), base, n, term)   =>           \r\n    if(n<=3):                                                                                 =>           \r\n        return n                                                                              =>           \r\n    total = n                                                                                 =>           \r\n    while n > 3:                                                                              =>           \r\n        total += n-1 + 2*(n-2) + 3*(n-3)-n                                                    =>           \r\n        n -= 1                                                                                =>           \r\n    def max_partition(x):                                                                     =>           \r\n        def count(y,z):                                                                       =>           \r\n            while(y>1):                                                                       =>           \r\n                y = y//2                                                                      =>           \r\n                z = z*2                                                                       =>           \r\n            return z                                                                          =>           \r\n        return count(x,1)                                                                     =>           \r\n    def helper(n,m):                                                                          =>           \r\n        if n == 0:                                                                            =>           \r\n            return 1                                                                          =>           \r\n        elif n < 0:                                                                           =>           \r\n            return 0                                                                          =>           \r\n        elif m == 0:                                                                          =>           \r\n            return 0                                                                          =>           \r\n        else:                                                                                 =>           \r\n            return helper(n-m, m) + helper(n, m // 2)                                         =>           \r\n    return helper(amount, max_partition(amount))                                              =>           \r\n    return accumulate(combiner, base, n, lambda x: term(x) if pred(x) else lambda x:0)        <=           \r\n    total, counter = 0, n                                                                     <=           \r\n    while(counter > 3):                                                                       <=           \r\n        total, counter = total + counter-1 + 2*counter-2 + 3*counter-3 - counter, counter - 1 <=           \r\n    \"*** YOUR CODE HERE ***\"                                                                  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total, counter = 0, n\n    while(counter > 3):\n        total, counter = total + counter-1 + 2*counter-2 + 3*counter-3 - counter, counter - 1\n    return total\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if(n<=3):\n        return n\n    total = n\n    while n > 3:\n        total += n-1 + 2*(n-2) + 3*(n-3)-n\n        n -= 1\n    return total\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","0","","# Error: expected","#     1","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":321,"studentId":0,"date":null,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n        if i<3:  =>           \r\n        if i<=3: <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i=0\n    value=0\n    while i<n:\n        if i<=3:\n            i+=1\n            value+=1\n        else:\n            i+=1\n            value+=(2*(i-2)+3*(i-3))\n    return value\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i=0\n    value=0\n    while i<n:\n        if i<3:\n            i+=1\n            value+=1\n        else:\n            i+=1\n            value+=(2*(i-2)+3*(i-3))\n    return value\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","4","","# Error: expected","#     10","# but got","#     4","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":322,"studentId":0,"date":null,"diff":"\r\nInputObject                                                        SideIndicator\r\n-----------                                                        -------------\r\n                                                                   =>           \r\n        return n                                                   =>           \r\n    output = [0, 1, 2, 3, 10] #for n=4                             =>           \r\n    for x in range(4, n):                                          =>           \r\n        next_output = output[-1] + 2 * output[-2] + 3 * output[-3] =>           \r\n        output = output + [next_output]                            =>           \r\n    return output[-1]                                              =>           \r\n                                                                   =>           \r\n    total = 0                                                      <=           \r\n    control = [0, 1, 2, 3, 10]                                     <=           \r\n        total = n                                                  <=           \r\n        for x in range(4,n):                                       <=           \r\n            answer =control[-1] + 2*control[-2] + 3*control[-3]    <=           \r\n            control = control + [answer]                           <=           \r\n        return answer[-1]                                          <=           \r\n    return total                                                   <=           \r\n    else:                                                          <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    control = [0, 1, 2, 3, 10]\n    if n <= 3:\n        total = n\n    else:\n        for x in range(4,n):\n            answer =control[-1] + 2*control[-2] + 3*control[-3]\n            control = control + [answer]\n        return answer[-1]\n    return total\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n \n\n    if n <= 3:\n        return n\n    output = [0, 1, 2, 3, 10] #for n=4\n    for x in range(4, n):\n        next_output = output[-1] + 2 * output[-2] + 3 * output[-3]\n        output = output + [next_output]\n    return output[-1]\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 232, in g_iter","    return answer[-1]","UnboundLocalError: local variable 'answer' referenced before assignment","","# Error: expected","#     10","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":323,"studentId":0,"date":null,"diff":"\r\nInputObject                                                               SideIndicator\r\n-----------                                                               -------------\r\n        while n > 3:                                                      =>           \r\n    def add(x, y):                                                        =>           \r\n        return x + y                                                      =>           \r\n    def subtract(x, y):                                                   =>           \r\n        return x - y                                                      =>           \r\n    def pingpong_helper(n, combiner, term, i):                            =>           \r\n        if i == n:                                                        =>           \r\n            return term                                                   =>           \r\n        if has_seven(term):                                               =>           \r\n            if combiner == add:                                           =>           \r\n                combiner = subtract                                       =>           \r\n            else:                                                         =>           \r\n                combiner = add                                            =>           \r\n            return pingpong_helper(n, combiner, combiner(term, 1), i + 1) =>           \r\n        else:                                                             =>           \r\n            return pingpong_helper(n, combiner, combiner(term, 1), i + 1) =>           \r\n    return pingpong_helper(n, add, 1, 1)                                  =>           \r\n                                                                          =>           \r\n        while n >= 3:                                                     <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    if n <= 3:\n        return n\n    else:\n        while n >= 3:\n            if n-1 <= 3:\n                total = total + n-1 \n            if n-2 <= 3:\n                total = total + 2 * (n-2)\n            if n-3 <= 3:\n                total = total + 3* (n-3)\n            n -= 1\n    return total\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    if n <= 3:\n        return n\n    else:\n        while n > 3:\n            if n-1 <= 3:\n                total = total + n-1 \n            if n-2 <= 3:\n                total = total + 2 * (n-2)\n            if n-3 <= 3:\n                total = total + 3* (n-3)\n            n -= 1\n    return total\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","14","","# Error: expected","#     10","# but got","#     14","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":324,"studentId":0,"date":null,"diff":"\r\nInputObject                   SideIndicator\r\n-----------                   -------------\r\n            a,b,c = total,a,b =>           \r\n            a = total         <=           \r\n            b = a             <=           \r\n            c = b             <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    x = 0\n    total = 0\n    while x <= n:\n        if x <= 3:\n            a = x #highest\n            b = x-1 #second\n            c = x-2 # lowest\n            x += 1\n        else:\n            total = a + 2*b + 3*c\n            a = total\n            b = a\n            c = b\n            x += 1\n    return total\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    x = 0\n    total = 0\n    while x <= n:\n        if x <= 3:\n            a = x #highest\n            b = x-1 #second\n            c = x-2 # lowest\n            x += 1\n        else:\n            total = a + 2*b + 3*c\n            a,b,c = total,a,b\n            x += 1\n    return total\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","60","","# Error: expected","#     22","# but got","#     60","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":325,"studentId":0,"date":null,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n    if n <= 3:   =>           \r\n        return n =>           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n    a = 1\n    b = 2\n    c = 3\n    while n > 3:\n        a,b,c = b,c,c + 2*b + 3*a\n        n -= 1\n    return c\n    \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n    a = 1\n    b = 2\n    c = 3\n    if n <= 3:\n        return n\n    while n > 3:\n        a,b,c = b,c,c + 2*b + 3*a\n        n -= 1\n    return c\n    \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","3","","# Error: expected","#     1","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":326,"studentId":0,"date":null,"diff":"\r\nInputObject                         SideIndicator\r\n-----------                         -------------\r\n            a,b,c = b,c,(3*a+2*b+c) =>           \r\n            a = b                   <=           \r\n            b = c                   <=           \r\n            c = 3*a+2*b+c           <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    a,b,c = 1,2,3\n    if n <= 3:\n        return n\n    else:\n        for i in range(0,n-3):\n            a = b\n            b = c\n            c = 3*a+2*b+c\n        return c\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    a,b,c = 1,2,3\n    if n <= 3:\n        return n\n    else:\n        for i in range(0,n-3):\n            a,b,c = b,c,(3*a+2*b+c)\n        return c\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","15","","# Error: expected","#     10","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":327,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                    SideIndicator\r\n-----------                                                                    -------------\r\n    first,second,third = 3, 2, 1                                               =>           \r\n            first, second, third = (first + 2*second + 3*third), first, second =>           \r\n        return first                                                           =>           \r\n    one = 3                                                                    <=           \r\n    two = 2                                                                    <=           \r\n    three = 1,                                                                 <=           \r\n            one, two, three = one + 2*two + 3*three, one, two                  <=           \r\n        return one                                                             <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    i = 3\n    one = 3\n    two = 2\n    three = 1,\n    if n <= 3:\n        return n\n    else:\n        while i < n:\n            one, two, three = one + 2*two + 3*three, one, two\n            i += 1\n        return one\n    \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    i = 3\n    first,second,third = 3, 2, 1\n    if n <= 3:\n        return n\n    else:\n        while i < n:\n            first, second, third = (first + 2*second + 3*third), first, second\n            i += 1\n        return first\n    \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 217, in g_iter","    one, two, three = one + 2*two + 3*three, one, two","TypeError: unsupported operand type(s) for +: 'int' and 'tuple'","","# Error: expected","#     10","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":328,"studentId":0,"date":null,"diff":"\r\nInputObject                           SideIndicator\r\n-----------                           -------------\r\n        g1,g2,g3 = g2,g3,g3+2*g2+3*g1 =>           \r\n        g1,g2,g3 = g2,g3,g3+2*g2+3*g3 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    g1,g2,g3 = 1,2,3\n    while n>3:\n        g1,g2,g3 = g2,g3,g3+2*g2+3*g3\n        n -= 1\n\n    return g3\n\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    g1,g2,g3 = 1,2,3\n    while n>3:\n        g1,g2,g3 = g2,g3,g3+2*g2+3*g1\n        n -= 1\n\n    return g3\n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","16","","# Error: expected","#     10","# but got","#     16","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":329,"studentId":0,"date":null,"diff":"\r\nInputObject                                            SideIndicator\r\n-----------                                            -------------\r\n        previous, current, next= current, next, result =>           \r\n                                                       <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    previous, current, next = 1,2,3\n    while n > 3:\n        \n        result =  3*previous + 2*current + next\n        n = n - 1\n    return result\n    \n\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    previous, current, next = 1,2,3\n    while n > 3:\n        result =  3*previous + 2*current + next\n        previous, current, next= current, next, result\n        n = n - 1\n    return result\n    \n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","10","","# Error: expected","#     22","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":330,"studentId":0,"date":null,"diff":"\r\nInputObject                            SideIndicator\r\n-----------                            -------------\r\n        old_a = a                      =>           \r\n        old_b = b                      =>           \r\n        c = c + 2 * old_b + 3 * old_a  =>           \r\n        #old_a = a                     <=           \r\n        #old_b = b                     <=           \r\n        c = c + 2 * b + 3 * a          <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    x = 4\n    a, b, c = 1, 2, 3\n    while x <= n:\n        #old_a = a\n        a = b\n        #old_b = b\n        b = c\n        c = c + 2 * b + 3 * a \n        x += 1 \n    return c \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    x = 4\n    a, b, c = 1, 2, 3\n    while x <= n:\n        old_a = a\n        a = b\n        old_b = b\n        b = c\n        c = c + 2 * old_b + 3 * old_a \n        x += 1 \n    return c \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","15","","# Error: expected","#     10","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":331,"studentId":0,"date":null,"diff":"\r\nInputObject       SideIndicator\r\n-----------       -------------\r\n    while a <= z: =>           \r\n    while a < z:  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1 or n == 2 or n == 3:\n        return n\n    a = n - 3\n    z = n - 1\n    b = 3\n    c = 3\n    total = 0\n    while a < z:\n        if a > c:\n            a -= 3\n            b = 3\n            c += 1\n        total += (b*a)\n        a += 1\n        b -= 1\n\n    return total\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1 or n == 2 or n == 3:\n        return n\n    a = n - 3\n    z = n - 1\n    b = 3\n    c = 3\n    total = 0\n    while a <= z:\n        if a > c:\n            a -= 3\n            b = 3\n            c += 1\n        total += (b*a)\n        a += 1\n        b -= 1\n\n    return total\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","7","","# Error: expected","#     10","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":332,"studentId":0,"date":null,"diff":"\r\nInputObject         SideIndicator\r\n-----------         -------------\r\n    a, b = n, n - 1 =>           \r\n    a, b = n, n     <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    a, b = n, n\n    for i in range(n-1):\n        a, b = b, a + b\n    return a\n\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    a, b = n, n - 1\n    for i in range(n-1):\n        a, b = b, a + b\n    return a\n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","12","","# Error: expected","#     10","# but got","#     12","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":333,"studentId":0,"date":null,"diff":"\r\nInputObject            SideIndicator\r\n-----------            -------------\r\n        first = 3      =>           \r\n        second = 2     =>           \r\n        third = 1      =>           \r\n            k = k+1    =>           \r\n        first = (n-1)  <=           \r\n        second = (n-2) <=           \r\n        third = (n -3) <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n \n    else: \n        total = 0\n        first = (n-1)\n        second = (n-2)\n        third = (n -3)\n        k = 3\n        while n > k:\n            total = first + 2 * second + 3 * third\n            third = second\n            second = first\n            first = total\n        return total\n\n            \n\n\n\n\n\n        # b = 0\n        # for i in range(3, n+1):\n        #     b = (n-1) + 2 * (n-2) + 3 * (n-3)\n        # return b\n        \n        # a = 0\n        # while a < n:\n        #     b = n\n        #     b = (n-1) + 2 * (n-2) + 3 * (n-3)\n        #     a = a + 1 \n        # return b\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n \n    else: \n        total = 0\n        first = 3\n        second = 2\n        third = 1\n        k = 3\n        while n > k:\n            total = first + 2 * second + 3 * third\n            third = second\n            second = first\n            first = total\n            k = k+1\n        return total\n\n            \n\n\n\n\n\n        # b = 0\n        # for i in range(3, n+1):\n        #     b = (n-1) + 2 * (n-2) + 3 * (n-3)\n        # return b\n        \n        # a = 0\n        # while a < n:\n        #     b = n\n        #     b = (n-1) + 2 * (n-2) + 3 * (n-3)\n        #     a = a + 1 \n        # return b\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     10","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":334,"studentId":0,"date":null,"diff":"\r\nInputObject                  SideIndicator\r\n-----------                  -------------\r\n    curr, n_1, n_2 = 3, 2, 1 =>           \r\n    n_1, n_2, n_3 = 3, 2, 1  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n < 4:\n        return n\n    k = 4\n    n_1, n_2, n_3 = 3, 2, 1\n    while k <= n:\n        curr, n_1, n_2 = curr + 2*n_1 + 3*n_2, curr, n_1\n        k += 1\n    return curr\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n < 4:\n        return n\n    k = 4\n    curr, n_1, n_2 = 3, 2, 1\n    while k <= n:\n        curr, n_1, n_2 = curr + 2*n_1 + 3*n_2, curr, n_1\n        k += 1\n    return curr\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 219, in g_iter","    curr, n_1, n_2 = curr + 2*n_1 + 3*n_2, curr, n_1","UnboundLocalError: local variable 'curr' referenced before assignment","","# Error: expected","#     10","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":335,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n    for i in range(3, n): =>           \r\n    for i in range(4, n): <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    \n    x, y, z = 1, 2, 3\n\n    for i in range(4, n):\n        g_of_i = 3*x + 2*y + z\n        x, y, z = y, z, g_of_i\n    return z\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    \n    x, y, z = 1, 2, 3\n\n    for i in range(3, n):\n        g_of_i = 3*x + 2*y + z\n        x, y, z = y, z, g_of_i\n    return z\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","3","","# Error: expected","#     10","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":336,"studentId":0,"date":null,"diff":"\r\nInputObject                       SideIndicator\r\n-----------                       -------------\r\n            else:                 =>           \r\n                total += i *(n-i) =>           \r\n            total += i *(n-i)     <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        i,total,k=1,0,n\n        while i<= 3:\n            j=1\n            k-=1\n            if k>3:\n                while j<=3:\n                    total += j*(k-j)\n                    j+=1\n            total += i *(n-i)\n            i+=1\n        return total\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        i,total,k=1,0,n\n        while i<= 3:\n            j=1\n            k-=1\n            if k>3:\n                while j<=3:\n                    total += j*(k-j)\n                    j+=1\n            else:        \n                total += i *(n-i)\n            i+=1\n        return total\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","26","","# Error: expected","#     22","# but got","#     26","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":337,"studentId":0,"date":null,"diff":"\r\nInputObject                                   SideIndicator\r\n-----------                                   -------------\r\n            a, b, c = a + 2 * b + 3 * c, a, b =>           \r\n            a, b, c= a + 2 * a + 3 * b, a, b  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    # def G(n):\n    #     if n <= 3:\n    #         return n\n    #     elif n > 3:\n    #         return G(n-1) + 2 * G(n-2) + 3 * G(n -3)\n    # if n <= 3:\n    #     return n\n    if n <= 3:\n        return n\n    else:\n        a, b, c, count_g = 3, 2, 1, 3\n        while count_g < n:\n            a, b, c= a + 2 * a + 3 * b, a, b\n            count_g += 1\n        return a\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    # def G(n):\n    #     if n <= 3:\n    #         return n\n    #     elif n > 3:\n    #         return G(n-1) + 2 * G(n-2) + 3 * G(n -3)\n    # if n <= 3:\n    #     return n\n    if n <= 3:\n        return n\n    else:\n        a, b, c, count_g = 3, 2, 1, 3\n        while count_g < n:\n            a, b, c = a + 2 * b + 3 * c, a, b\n            count_g += 1\n        return a\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","15","","# Error: expected","#     10","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":338,"studentId":0,"date":null,"diff":"\r\nInputObject                                                  SideIndicator\r\n-----------                                                  -------------\r\ndef compose1(f, g):                                          =>           \r\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"     =>           \r\n    def h(x):                                                =>           \r\n        return f(g(x))                                       =>           \r\n    return h                                                 =>           \r\n    x = 1                                                    =>           \r\n    y = 2                                                    =>           \r\n    z = 3                                                    =>           \r\n        x, y, z = y, z, (z + 2 * y + 3 * x)                  =>           \r\n                                                             =>           \r\n                                                             =>           \r\n                                                             =>           \r\n    def compose1(f, g):                                      <=           \r\n        \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\" <=           \r\n        def h(x):                                            <=           \r\n            return f(g(x))                                   <=           \r\n        return h                                             <=           \r\n    x, y, z = 1, 2, 3                                        <=           \r\n        x, y = y, z, (z + 2 * y + 3 * x)                     <=           \r\n    \"*** YOUR CODE HERE ***\"                                 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    x, y, z = 1, 2, 3\n    for i in range(3, n):\n        x, y = y, z, (z + 2 * y + 3 * x)\n    return z\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    x = 1\n    y = 2\n    z = 3\n    if n <= 3:\n        return n\n    for i in range(3, n):\n        x, y, z = y, z, (z + 2 * y + 3 * x)\n    return z\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 207, in g_iter","    x, y = y, z, (z + 2 * y + 3 * x)","ValueError: too many values to unpack (expected 2)","","# Error: expected","#     10","# but got","#     ValueError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":339,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n            num1+=1  =>           \r\n            num2+= 1 =>           \r\n            num1-=1  <=           \r\n            num2-= 1 <=           \r\n                     <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        i=4\n        num1, num2, total = 1,2,3\n        while i<=n:\n            \n            total = num1*3 + num2*2 + total*1\n            num1-=1\n            num2-= 1\n            i+=1\n        return total \n    # if n <= 3:\n    #     return n\n    # g1, g2, g3 = 1, 2, 3\n    # for i in range(4, n + 1):\n    #     g1, g2, g3 = g2, g3, g1 * 3 + g2 * 2 + g3\n    # return g3\n            \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        i=4\n        num1, num2, total = 1,2,3\n        while i<=n:\n            total = num1*3 + num2*2 + total*1\n            num1+=1\n            num2+= 1\n            i+=1\n        return total \n    # if n <= 3:\n    #     return n\n    # g1, g2, g3 = 1, 2, 3\n    # for i in range(4, n + 1):\n    #     g1, g2, g3 = g2, g3, g1 * 3 + g2 * 2 + g3\n    # return g3\n            \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","12","","# Error: expected","#     22","# but got","#     12","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":340,"studentId":0,"date":null,"diff":"\r\nInputObject                                              SideIndicator\r\n-----------                                              -------------\r\n        first = 3                                        =>           \r\n        third = 1                                        =>           \r\n            total = 3*third + 2*second + 1*first         =>           \r\n        first = 1                                        <=           \r\n        third = 3                                        <=           \r\n            total = total + 3*third + 2*second + 1*first <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        first = 1\n        second = 2\n        third = 3 \n        total = 3*third + 2*second + 1*first\n        while n > 3:\n            total = total + 3*third + 2*second + 1*first\n            first, second, third = total, first, second\n            n -=1\n        return total \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        first = 3\n        second = 2\n        third = 1 \n        total = 3*third + 2*second + 1*first\n        while n > 3:\n            total = 3*third + 2*second + 1*first\n            first, second, third = total, first, second\n            n -=1\n        return total \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","28","","# Error: expected","#     10","# but got","#     28","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":342,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n    return prev_three =>           \r\n    return three      <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    prev_one, prev_two, prev_three = 1, 2, 3\n    while n > 3:\n        prev_one, prev_two, prev_three = prev_two, prev_three, 3*prev_one + 2*prev_two + prev_three\n        n -= 1\n    return three\n        \n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    prev_one, prev_two, prev_three = 1, 2, 3\n    while n > 3:\n        prev_one, prev_two, prev_three = prev_two, prev_three, 3*prev_one + 2*prev_two + prev_three\n        n -= 1\n    return prev_three\n        \n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","<function successor.<locals>.<lambda> at 0x000002247FBA6D90>","","# Error: expected","#     10","# but got","#     <function successor.<locals>.<lambda> at 0x000002247FBA6D90>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":343,"studentId":0,"date":null,"diff":"\r\nInputObject                                                        SideIndicator\r\n-----------                                                        -------------\r\n        total += 3 * (n - 3) if (n - 3) <= 3 else 0                =>           \r\n        total += 2 * (n - 2) if (n -2) <= 3 else 0                 =>           \r\n        total += n - 1 if (n -1) <= 3 else 0                       =>           \r\n    def switch_way(current): #True is forwards, False is backwards =>           \r\n        return not current                                         =>           \r\n    def go(k, count, curr):                                        =>           \r\n        if has_seven(k) or k % 7 == 0:                             =>           \r\n            switch_way(curr)                                       =>           \r\n        if curr and count <= n:                                    =>           \r\n            go(k + 1, count + 1, curr)                             =>           \r\n        elif not curr and count <= n:                              =>           \r\n            go(k - 1, count + 1, curr)                             =>           \r\n        else:                                                      =>           \r\n            return k                                               =>           \r\n    return go(1, 1, True)                                          =>           \r\n                                                                   =>           \r\n                                                                   =>           \r\n        total += 3 * (n - 3)                                       <=           \r\n        total += 2 * (n - 2)                                       <=           \r\n        total += n - 1                                             <=           \r\n                                                                   <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\" #16\n    total = 0\n    original = n\n    while n > 3:\n        total += 3 * (n - 3) \n        total += 2 * (n - 2)\n        total += n - 1\n        n -= 1\n    return original if original <= 3 else total\n            \n\n\n        \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\" #16\n    total = 0\n    original = n\n    while n > 3:\n        total += 3 * (n - 3) if (n - 3) <= 3 else 0\n        total += 2 * (n - 2) if (n -2) <= 3 else 0\n        total += n - 1 if (n -1) <= 3 else 0\n        n -= 1\n    return original if original <= 3 else total\n\n        \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","26","","# Error: expected","#     22","# but got","#     26","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":344,"studentId":0,"date":null,"diff":"\r\nInputObject                                                           SideIndicator\r\n-----------                                                           -------------\r\n            term = n - multiplier                                     =>           \r\n            if term > 3:                                              =>           \r\n                total += (term - 1) + 2 * (term - 2) + 3 * (term - 3) =>           \r\n            else:                                                     =>           \r\n                total += multiplier * (n - multiplier)                =>           \r\n            total += multiplier * (n - multiplier)                    <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    multiplier, total = 1, 0\n    while multiplier <= 3:\n        if n <= 3:\n            total +=  multiplier * n \n            return total\n        else:\n            total += multiplier * (n - multiplier)\n            multiplier += 1\n    return total\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    multiplier, total = 1, 0\n    while multiplier <= 3:\n        if n <= 3:\n            total +=  multiplier * n \n            return total\n        else:\n            term = n - multiplier\n            if term > 3:\n                total += (term - 1) + 2 * (term - 2) + 3 * (term - 3)\n            else:\n                total += multiplier * (n - multiplier)\n            multiplier += 1\n    return total\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","16","","# Error: expected","#     22","# but got","#     16","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":346,"studentId":0,"date":null,"diff":"\r\nInputObject                                SideIndicator\r\n-----------                                -------------\r\n    a1,a2,a3=3,2,1                         =>           \r\n    total,i = 0,4                          =>           \r\n    while i<=n:                            =>           \r\n        total = a1 + 2 * a2 + 3 * a3       =>           \r\n        a1, a2, a3 = total, a1, a2         =>           \r\n        i += 1                             =>           \r\n    return total                           =>           \r\n    else:                                  <=           \r\n        a1,a2,a3=3,2,1                     <=           \r\n        total,i = 0,4                      <=           \r\n        while i<=n:                        <=           \r\n            current = a1 + 2 * a2 + 3 * a3 <=           \r\n            a1, a2, a3 = current, a1, a2   <=           \r\n            i += 1                         <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<= 3:\n        return n\n    else:\n        a1,a2,a3=3,2,1\n        total,i = 0,4\n        while i<=n:\n            current = a1 + 2 * a2 + 3 * a3\n            a1, a2, a3 = current, a1, a2\n            i += 1\n\n\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<= 3:\n        return n\n\n    a1,a2,a3=3,2,1\n    total,i = 0,4\n    while i<=n:\n        total = a1 + 2 * a2 + 3 * a3\n        a1, a2, a3 = total, a1, a2\n        i += 1\n    return total\n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","","# Error: expected","#     10","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":347,"studentId":0,"date":null,"diff":"\r\nInputObject                         SideIndicator\r\n-----------                         -------------\r\n            tot = tot + i * cur     =>           \r\n                tot = tot + i * cur <=           \r\n            else:                   <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n    if n <= 3:\n        return n\n\n        #done if call g(1,2,3)\n\n    else: #if 4+\n        tot = 0\n        i = 3\n\n        #three terms in reverse order (last, middle, first)\n        while (i > 0):\n            cur = n - i\n\n            #only enters this  while loop if g(5+)\n            j = 3\n            if cur > 3:\n                while (j > 0): #ensures we have three terms in reverse order\n                #just trying to get ONE term\n                #2 scenarios: terms within this one term from g(5+) can return n or another g-call\n                    jcur = cur - j\n                    if jcur <= 3:\n                        tot = tot + jcur\n                    else:\n                        tot = tot + j * jcur\n\n                    j -= 1\n\n\n            #straight to here if g(4)\n            else:\n                tot = tot + i * cur\n            i -= 1\n        return tot \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n    if n <= 3:\n        return n\n\n        #done if call g(1,2,3)\n\n    else: #if 4+\n        tot = 0\n        i = 3\n\n        #three terms in reverse order (last, middle, first)\n        while (i > 0):\n            cur = n - i\n\n            #only enters this  while loop if g(5+)\n            j = 3\n            if cur > 3:\n                while (j > 0): #ensures we have three terms in reverse order\n                #just trying to get ONE term\n                #2 scenarios: terms within this one term from g(5+) can return n or another g-call\n                    jcur = cur - j\n                    if jcur <= 3:\n                        tot = tot + jcur\n                    else:\n                        tot = tot + j * jcur\n\n                    j -= 1\n\n\n            #straight to here if g(4)\n            tot = tot + i * cur\n            i -= 1\n        return tot \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","18","","# Error: expected","#     22","# but got","#     18","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":348,"studentId":0,"date":null,"diff":"\r\nInputObject                                SideIndicator\r\n-----------                                -------------\r\n    if n == 1:                             =>           \r\n        return 1                           =>           \r\n    elif n == 2:                           =>           \r\n        return 2                           =>           \r\n    elif n == 3:                           =>           \r\n        return 3                           =>           \r\n    count = 3                              =>           \r\n    total = 0                              =>           \r\n    First = 3                              =>           \r\n    Second = 2                             =>           \r\n    Third = 1                              =>           \r\n    while count < n:                       =>           \r\n        total = First + 2*Second + 3*Third =>           \r\n        Third = Second                     =>           \r\n        Second = First                     =>           \r\n        First = total                      =>           \r\n        count += 1                         =>           \r\n    return total                           =>           \r\n    boundary = [n-1,n-1,n-3]               <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    boundary = [n-1,n-1,n-3]\n\n\n\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n\n    count = 3\n    total = 0\n\n    First = 3\n    Second = 2\n    Third = 1\n\n    while count < n:\n        total = First + 2*Second + 3*Third\n        Third = Second\n        Second = First\n        First = total\n        count += 1\n\n    return total\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","","# Error: expected","#     1","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":350,"studentId":0,"date":null,"diff":"\r\nInputObject                               SideIndicator\r\n-----------                               -------------\r\n            x, y, z = y, z, z + 2*y + 3*x =>           \r\n            x, y, z = z + 2*y + 3*x       <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    x = 1\n    y = 2\n    z = 3 \n    counter = 4\n    if n <= 3:\n        return n\n    else:\n        while counter <= n:\n            x, y, z = z + 2*y + 3*x\n            counter += 1\n        return z\n\n\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    x = 1\n    y = 2\n    z = 3 \n    counter = 4\n    if n <= 3:\n        return n\n    else:\n        while counter <= n:\n            x, y, z = y, z, z + 2*y + 3*x\n            counter += 1\n        return z\n\n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 239, in g_iter","    x, y, z = z + 2*y + 3*x","TypeError: 'int' object is not iterable","","# Error: expected","#     10","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":351,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n        while n >= 3: =>           \r\n        while b <= 3: <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a = 0\n    b = 1\n    if n <= 3:\n        a = n\n    else:\n        while b <= 3:\n            a += n * b\n            b += 1\n            n -= 1\n    return a\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a = 0\n    b = 1\n    if n <= 3:\n        a = n\n    else:\n        while n >= 3:\n            a += n * b\n            b += 1\n            n -= 1\n    return a\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","16","","# Error: expected","#     10","# but got","#     16","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":352,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n    for i in range (3,n): =>           \r\n    for i in range (4,n): <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    a = 1\n    b = 2\n    c = 3\n    for i in range (4,n):\n        total = c + 2 * b + 3 * a\n        a = b\n        b = c\n        c = total\n    return c\n\n\n    \n\n    \n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    a = 1\n    b = 2\n    c = 3\n    for i in range (3,n):\n        total = c + 2 * b + 3 * a\n        a = b\n        b = c\n        c = total\n    return c\n\n\n    \n\n    \n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","3","","# Error: expected","#     10","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":353,"studentId":0,"date":null,"diff":"\r\nInputObject                     SideIndicator\r\n-----------                     -------------\r\n            a, b, c = tot, a, b =>           \r\n            a, b, c = tot, a, c <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        x=4\n        tot=0\n        a=3\n        b=2\n        c=1\n        while x<=n:\n            tot = (a)+2*(b)+3*(c)\n            a, b, c = tot, a, c\n            x=x+1\n\n    return tot\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        x=4\n        tot=0\n        a=3\n        b=2\n        c=1\n        while x<=n:\n            tot = (a)+2*(b)+3*(c)\n            a, b, c = tot, a, b\n            x=x+1\n\n    return tot\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","19","","# Error: expected","#     22","# but got","#     19","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":354,"studentId":0,"date":null,"diff":"\r\nInputObject                                                SideIndicator\r\n-----------                                                -------------\r\n    total, count, count1, count2, count3 = 0, n, 1, 2, 3   =>           \r\n    if n <= 3:                                             =>           \r\n        return n                                           =>           \r\n        while count > 3:                                   =>           \r\n            total = count3 + 2 * count2 + 3 * count1       =>           \r\n            count1, count2, count3 = count2, count3, total =>           \r\n            count -= 1                                     =>           \r\n        return total                                       =>           \r\n    else:                                                  =>           \r\n    total, count1, count2, count3 = 0, 1, 0, 0             <=           \r\n    while n > 0:                                           <=           \r\n        total += count1 + 2*count2 + 3*count3              <=           \r\n        count1 +=1                                         <=           \r\n        count2 +=1                                         <=           \r\n        count3 +=1                                         <=           \r\n        n -= 1                                             <=           \r\n    return total                                           <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, count1, count2, count3 = 0, 1, 0, 0\n    while n > 0:\n        total += count1 + 2*count2 + 3*count3\n        count1 +=1\n        count2 +=1\n        count3 +=1\n        n -= 1\n    return total\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, count, count1, count2, count3 = 0, n, 1, 2, 3\n    if n <= 3:\n        return n\n    else:\n        while count > 3:\n            total = count3 + 2 * count2 + 3 * count1\n            count1, count2, count3 = count2, count3, total\n            count -= 1\n        return total\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","8","","# Error: expected","#     2","# but got","#     8","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":355,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n        while count <n:  =>           \r\n        while count <=n: <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    count = 3\n    g1 =3\n    g2 =2\n    g3 =1\n    if n<=3:\n        return n\n    else:\n        while count <=n:\n            g1, g2, g3 =g1 +2*g2+3*g3, g1, g2\n            count +=1\n    return g1\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    count = 3\n    g1 =3\n    g2 =2\n    g3 =1\n    if n<=3:\n        return n\n    else:\n        while count <n:\n            g1, g2, g3 =g1 +2*g2+3*g3, g1, g2\n            count +=1\n    return g1\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","22","","# Error: expected","#     10","# but got","#     22","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":356,"studentId":0,"date":null,"diff":"\r\nInputObject                            SideIndicator\r\n-----------                            -------------\r\n    current, next, second_next=1, 2, 3 =>           \r\n    current, next, second_next=0, 1, 2 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    current, next, second_next=0, 1, 2\n    if n<=3:\n        return n\n    for i in range(3, n):\n        current, next, second_next=next, second_next, (current*3+next*2+second_next)\n    return second_next\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    current, next, second_next=1, 2, 3\n    if n<=3:\n        return n\n    for i in range(3, n):\n        current, next, second_next=next, second_next, (current*3+next*2+second_next)\n    return second_next\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","4","","# Error: expected","#     10","# but got","#     4","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":358,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                        SideIndicator\r\n-----------                                                                        -------------\r\n        lst.append(lst[len(lst) - 1] + 2 * lst[len(lst)-2] + 3 *lst[len(lst) - 3]) =>           \r\n        lst.append(lst[len(lst)] + 2 * lst[len(lst)-1] + 3 *lst[len(lst) - 2])     <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    lst = [1,2,3]\n    while n > len(lst):\n        lst.append(lst[len(lst)] + 2 * lst[len(lst)-1] + 3 *lst[len(lst) - 2])\n    return lst[n-1]\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    lst = [1,2,3]\n    while n > len(lst):\n        lst.append(lst[len(lst) - 1] + 2 * lst[len(lst)-2] + 3 *lst[len(lst) - 3])\n    return lst[n-1]\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 221, in g_iter","    lst.append(lst[len(lst)] + 2 * lst[len(lst)-1] + 3 *lst[len(lst) - 2])","IndexError: list index out of range","","# Error: expected","#     10","# but got","#     IndexError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":359,"studentId":0,"date":null,"diff":"\r\nInputObject                   SideIndicator\r\n-----------                   -------------\r\n        temp = term_three     =>           \r\n        term_two = temp       =>           \r\n        x += 1                =>           \r\n        term_two = term_three <=           \r\n        x +=1                 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    # current = 0\n    # next = 1\n    # addition = 0\n    # multiplier = 1\n\n\n    # while multiplier < 4:\n    #     if current <= 3\n    #         current = current\n    #     else\n\n    #     current = next\n    #     next = current + next\n    #     n = n - 1\n    # return current\n\n    term_one = 1\n    term_two = 2\n    term_three = 3\n    x = 4\n\n    if n <= 3: \n        return n\n    while x <= n:\n        term_three = 2 * term_two + 3 * term_one + term_three\n        term_one = term_two\n        term_two = term_three\n        x +=1\n    return term_three\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    # current = 0\n    # next = 1\n    # addition = 0\n    # multiplier = 1\n\n\n    # while multiplier < 4:\n    #     if current <= 3\n    #         current = current\n    #     else\n\n    #     current = next\n    #     next = current + next\n    #     n = n - 1\n    # return current\n\n    term_one = 1\n    term_two = 2\n    term_three = 3\n    x = 4\n\n    if n <= 3: \n        return n\n    while x <= n:\n        temp = term_three\n        term_three = 2 * term_two + 3 * term_one + term_three\n        term_one = term_two\n        term_two = temp\n        x += 1\n    return term_three\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","36","","# Error: expected","#     22","# but got","#     36","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":360,"studentId":0,"date":null,"diff":"\r\nInputObject                              SideIndicator\r\n-----------                              -------------\r\n        current = 3*first+2*second+third =>           \r\n        current = first+2*second+3*third <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n    \treturn n\n    first = 1\n    second = 2 \n    third = 3\n    current = 0\n    for i in range(3,n):\n    \tcurrent = first+2*second+3*third\n    \tfirst = second\n    \tsecond = third\n    \tthird = current\n    return current\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n    \treturn n\n    first = 1\n    second = 2 \n    third = 3\n    current = 0\n    for i in range(3,n):\n    \tcurrent = 3*first+2*second+third\n    \tfirst = second\n    \tsecond = third\n    \tthird = current\n    return current\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","14","","# Error: expected","#     10","# but got","#     14","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":361,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        while i<=n:  =>           \r\n        return count =>           \r\n        while i<n:   <=           \r\n    return count     <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    \n    else:\n        count = 0\n        i = 0\n        while i<n:\n            if i <= 3:\n                t = 3 \n                s = 2\n                f = 1\n                i += 1\n            else:\n                count = t + 2*s + 3*f\n                t, s, f = count, t, s\n                i += 1\n    return count\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    \n    else:\n        count = 0\n        i = 0\n        while i<=n:\n            if i <= 3:\n                t = 3 \n                s = 2\n                f = 1\n                i += 1\n            else:\n                count = t + 2*s + 3*f\n                t, s, f = count, t, s\n                i += 1\n        return count\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","0","","# Error: expected","#     10","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":362,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n            next=c+2*b+3*a =>           \r\n            c=next         =>           \r\n        return next        =>           \r\n            c=(c+2*b+3*a)  <=           \r\n        return c           <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    a=1\n    b=2\n    c=3\n    if n<=3:\n        return n\n    else:\n        for x in range(4,n+1):\n            c=(c+2*b+3*a)\n            a=b\n            b=c\n        return c\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    a=1\n    b=2\n    c=3\n    if n<=3:\n        return n\n    else:\n        for x in range(4,n+1):\n            next=c+2*b+3*a\n            a=b\n            b=c\n            c=next\n        return next\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","36","","# Error: expected","#     22","# but got","#     36","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":363,"studentId":0,"date":null,"diff":"\r\nInputObject                               SideIndicator\r\n-----------                               -------------\r\n            a,b,c = a + 2*b + 3*c, a, b   =>           \r\n            a,b,c = a + 2*b + 3*c, b, c   <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <=3:\n        return n \n    else:\n        a = 3\n        b = 2\n        c = 1\n\n        while n > 3:\n            a,b,c = a + 2*b + 3*c, b, c  \n            n = n - 1\n        return a \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <=3:\n        return n \n    else:\n        a = 3\n        b = 2\n        c = 1\n\n        while n > 3:\n            a,b,c = a + 2*b + 3*c, a, b  \n            n = n - 1\n        return a \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","17","","# Error: expected","#     22","# but got","#     17","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":365,"studentId":0,"date":null,"diff":"\r\nInputObject                                   SideIndicator\r\n-----------                                   -------------\r\n    if n <=3:                                 =>           \r\n        return n                              =>           \r\n    else:                                     =>           \r\n        x, y, z = 1, 2, 3                     =>           \r\n        for i in range(4, n + 1):             =>           \r\n            x, y, z = y, z, x * 3 + y * 2 + z =>           \r\n        return z                              =>           \r\n                                              =>           \r\n                                              =>           \r\n                                              =>           \r\n    i = 1                                     <=           \r\n    while n != i:                             <=           \r\n        if n <= 3:                            <=           \r\n            return n                          <=           \r\n        else:                                 <=           \r\n            return i * (n - i)                <=           \r\n    return i                                  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    i = 1\n    while n != i:\n        if n <= 3:\n            return n\n        else:\n            return i * (n - i)\n    return i\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <=3:\n        return n\n    else: \n        x, y, z = 1, 2, 3\n        for i in range(4, n + 1):\n            x, y, z = y, z, x * 3 + y * 2 + z\n        return z\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","3","","# Error: expected","#     10","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":367,"studentId":0,"date":null,"diff":"\r\nInputObject                                                      SideIndicator\r\n-----------                                                      -------------\r\n        total = thirdcounter + 2*secondcounter + 3*firstcounter  =>           \r\n        thirdcounter = total                                     =>           \r\n        total += thirdcounter + 2*secondcounter + 3*firstcounter <=           \r\n        thirdcounter += total                                    <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    firstcounter = 1\n    secondcounter = 2\n    thirdcounter = 3\n    if n <= 3:\n        return n\n    i = n\n    while i > 3:\n        total += thirdcounter + 2*secondcounter + 3*firstcounter\n        firstcounter = secondcounter\n        secondcounter = thirdcounter\n        thirdcounter += total\n        i -= 1\n    return total\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    firstcounter = 1\n    secondcounter = 2\n    thirdcounter = 3\n    if n <= 3:\n        return n\n    i = n\n    while i > 3:\n        total = thirdcounter + 2*secondcounter + 3*firstcounter\n        firstcounter = secondcounter\n        secondcounter = thirdcounter\n        thirdcounter = total\n        i -= 1\n    return total\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","35","","# Error: expected","#     22","# but got","#     35","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":368,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n                                               =>           \r\n    n3, n2, n1= 1,2,3                          =>           \r\n    if n<=3:                                   =>           \r\n        return n                               =>           \r\n    for x in range(1, n-3):                    =>           \r\n        n3, n2, n1= n2, n1, n1+ (2*n2)+ (3*n3) =>           \r\n    return (3*n3)+ (2*n2) + (n1)               =>           \r\n    def G(n):                                  <=           \r\n        total= 0                               <=           \r\n        if n<=3:                               <=           \r\n            return n                           <=           \r\n        while n>3:                             <=           \r\n            sum1+=n-1                          <=           \r\n            n-= 1                              <=           \r\n        while n>3:                             <=           \r\n            sum2+= 2* (n-2)                    <=           \r\n            n-= 2                              <=           \r\n        while n>3:                             <=           \r\n            sum3+= 3* (n-3)                    <=           \r\n            n-=3                               <=           \r\n        return sum1+ sum2+ sum3                <=           \r\n    return G(n)                                <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    def G(n):\n        total= 0\n        if n<=3:\n            return n\n        while n>3:\n            sum1+=n-1\n            n-= 1\n\n        while n>3:\n            sum2+= 2* (n-2)\n            n-= 2\n\n        while n>3:\n            sum3+= 3* (n-3)\n            n-=3\n\n        return sum1+ sum2+ sum3\n    return G(n)\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \n    n3, n2, n1= 1,2,3\n    if n<=3:\n        return n\n    for x in range(1, n-3):\n        n3, n2, n1= n2, n1, n1+ (2*n2)+ (3*n3)\n    return (3*n3)+ (2*n2) + (n1)\n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 249, in g_iter","    return G(n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 237, in G","    sum1+=n-1","UnboundLocalError: local variable 'sum1' referenced before assignment","","# Error: expected","#     10","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":369,"studentId":0,"date":null,"diff":"\r\nInputObject                                                 SideIndicator\r\n-----------                                                 -------------\r\n            intrepid += (n + 1) + 2 * (n - 2) + 3 * (n - 3) =>           \r\n            intrepid += (n) + 2 * (n - 2) + 3 * (n - 3)     <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    intrepid = 0\n\n    if n == 4:\n        intrepid += (n - 1) + 2 * (n - 2) + 3 * (n - 3)\n        n -= 1\n\n    k = n\n    while n > 3:\n        if (n-1) > 3:\n            intrepid += (n) + 2 * (n - 2) + 3 * (n - 3)\n        else:\n            intrepid += n\n        n -= 1\n    return intrepid\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    intrepid = 0\n\n    if n == 4:\n        intrepid += (n - 1) + 2 * (n - 2) + 3 * (n - 3)\n        n -= 1\n\n    k = n\n    while n > 3:\n        if (n-1) > 3:\n            intrepid += (n + 1) + 2 * (n - 2) + 3 * (n - 3)\n        else:\n            intrepid += n\n        n -= 1\n    return intrepid\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","21","","# Error: expected","#     22","# but got","#     21","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":370,"studentId":0,"date":null,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n    if n<= 3:    =>           \r\n        return n =>           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    numba_1, numba_2, numba_3 = 1, 2, 3\n    while n > 3:\n        numba_1, numba_2, numba_3 = numba_2, numba_3, (numba_3 + 2*numba_2 + 3*numba_1)\n        n = n-1\n    return numba_3\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<= 3:\n        return n\n    numba_1, numba_2, numba_3 = 1, 2, 3\n    while n > 3:\n        numba_1, numba_2, numba_3 = numba_2, numba_3, (numba_3 + 2*numba_2 + 3*numba_1)\n        n = n-1\n    return numba_3\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","3","","# Error: expected","#     1","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":371,"studentId":0,"date":null,"diff":"\r\nInputObject        SideIndicator\r\n-----------        -------------\r\n            k -= 1 =>           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        list = [1,2,3]\n        k = n - 3\n        while k > 1:\n            new = list[2] + 2*list[1] + 3*list[0]\n            list.pop(0)\n            list.append(new)\n        return list[2] + 2*list[1] + 3*list[0]\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        list = [1,2,3]\n        k = n - 3\n        while k > 1:\n            new = list[2] + 2*list[1] + 3*list[0]\n            list.pop(0)\n            list.append(new)\n            k -= 1\n        return list[2] + 2*list[1] + 3*list[0]\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     22","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":372,"studentId":0,"date":null,"diff":"\r\nInputObject SideIndicator\r\n----------- -------------\r\n            =>           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a, b, c = 1, 2, 3\n    nextt = 0\n    if n <= 3:\n        return n\n    while n > 3:\n        a, b, c = b, c, nextt\n        nextt = 3 * (a) + 2 * (b) + (c)\n        n -= 1\n    return nextt\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a, b, c = 1, 2, 3\n    nextt = 0\n    if n <= 3:\n        return n\n    while n > 3:\n        nextt = 3 * (a) + 2 * (b) + (c)\n        a, b, c = b, c, nextt\n\n        n -= 1\n    return nextt\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","12","","# Error: expected","#     10","# but got","#     12","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":373,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                          SideIndicator\r\n-----------                                                                          -------------\r\n    return accumulate (lambda x,y: combiner(x,y) if pred(x) else y, base,n,term)     =>           \r\ndef repeated(f,n):                                                                   =>           \r\n    def g(x):                                                                        =>           \r\n        k = 1                                                                        =>           \r\n        while k <= n:                                                                =>           \r\n            x = f(x)                                                                 =>           \r\n            k = k + 1                                                                =>           \r\n        return x                                                                     =>           \r\n        n-=1                                                                         =>           \r\n            # result= combiner(term(k), result)                                      <=           \r\n    return accumulate((lambda x, y: combiner(x,y) if pred(x) else y), base, n, term) <=           \r\ndef repeated(f, n):                                                                  <=           \r\n    g = f                                                                            <=           \r\n    while n > 1:                                                                     <=           \r\n        g = compose1(f, g)                                                           <=           \r\n        n = n - 1                                                                    <=           \r\n                                                                                     <=           \r\n                                                                                     <=           \r\n                                                                                     <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    G1, G2, G3 = 1, 2, 3\n    while n>3:\n        G1, G2, G3 = G2, G3, G1*3+G2*2+G3\n    return G3\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    G1, G2, G3 = 1, 2, 3\n    while n>3:\n        G1, G2, G3 = G2, G3, G1*3+G2*2+G3\n        n-=1\n    return G3\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     10","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":374,"studentId":0,"date":null,"diff":"\r\nInputObject                        SideIndicator\r\n-----------                        -------------\r\n    x,y,z = 1, 2,3                 =>           \r\n        x,y,z = y, z, z + 2*y +3*x =>           \r\n        n = n-1                    =>           \r\n    x,y,z = 1,2,3                  <=           \r\n        x,y,z = y,z,z + 2*z + 3*y  <=           \r\n        n=n-1                      <=           \r\n                                   <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \n    if n==1 or n==2 or n==3:\n        return n\n    \n    x,y,z = 1,2,3\n    while n > 3:\n        x,y,z = y,z,z + 2*z + 3*y\n        n=n-1\n    return z\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \n    if n==1 or n==2 or n==3:\n        return n\n    x,y,z = 1, 2,3\n    while n > 3:\n        x,y,z = y, z, z + 2*y +3*x\n        n = n-1\n    return z\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","15","","# Error: expected","#     10","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":375,"studentId":0,"date":null,"diff":"\r\nInputObject                       SideIndicator\r\n-----------                       -------------\r\n            cur = cur + 2*k + 3*j =>           \r\n            cur = 3*cur + 2*k + j <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        i, j, k, cur = 1, 2, 3, 10\n        for counter in range(4, n):\n            cur = 3*cur + 2*k + j\n            i, j, k = j, k, cur\n        return cur\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        i, j, k, cur = 1, 2, 3, 10\n        for counter in range(4, n):\n            cur = cur + 2*k + 3*j\n            i, j, k = j, k, cur\n        return cur\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","38","","# Error: expected","#     22","# but got","#     38","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":376,"studentId":0,"date":null,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n    if n <= 3:   =>           \r\n        return n =>           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    current = 1\n    nxt = 2\n    thn = 3\n    nxt_g = 0\n    while n > 3:\n        nxt_g = thn + (2 * nxt) + (3 * current)\n        current = nxt\n        nxt = thn\n        thn = nxt_g\n        n -= 1\n    return nxt_g\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    current = 1\n    nxt = 2\n    thn = 3\n    nxt_g = 0\n    if n <= 3:\n        return n\n    while n > 3:\n        nxt_g = thn + (2 * nxt) + (3 * current)\n        current = nxt\n        nxt = thn\n        thn = nxt_g\n        n -= 1\n    return nxt_g\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","0","","# Error: expected","#     1","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":377,"studentId":0,"date":null,"diff":"\r\nInputObject                                                 SideIndicator\r\n-----------                                                 -------------\r\n        one, two, three = two, three, three + 2*two + 3*one =>           \r\n        one=two                                             <=           \r\n        two=three                                           <=           \r\n        three= three + 2*two + 3*one                        <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    one = 1\n    two = 2\n    three = 3\n    while n>3:\n        one=two\n        two=three\n        three= three + 2*two + 3*one\n        n = n-1\n    return three\n    \"\"\"\n    if n <= 3:\n        return n\n    a, b, c = 1, 2, 3\n    while n > 3:\n        a, b, c = b, c, c + 2 * b + 3 * a\n        n -= 1\n    return c\"\"\"\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    one = 1\n    two = 2\n    three = 3\n    while n>3:\n        one, two, three = two, three, three + 2*two + 3*one\n        n = n-1\n    return three\n    \"\"\"\n    if n <= 3:\n        return n\n    a, b, c = 1, 2, 3\n    while n > 3:\n        a, b, c = b, c, c + 2 * b + 3 * a\n        n -= 1\n    return c\"\"\"\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","15","","# Error: expected","#     10","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":379,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n    return value3     =>           \r\n        return value3 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n \n    \n    counter = 4\n    value1, value2, value3 = 1, 2, 3\n    \n    while counter <= n:\n        value1, value2, value3 = value2, value3, (value1*3 + value2*2 + value3)\n        return value3\n        counter = counter + 1\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n \n    \n    counter = 4\n    value1, value2, value3 = 1, 2, 3\n    \n    while counter <= n:\n        value1, value2, value3 = value2, value3, (value1*3 + value2*2 + value3)\n        counter = counter + 1\n    return value3\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","10","","# Error: expected","#     22","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":380,"studentId":0,"date":null,"diff":"\r\nInputObject                                         SideIndicator\r\n-----------                                         -------------\r\n        f, m, l = 1, 2, 3                           =>           \r\n            f, m, l = m, l, l + 2*m + 3*f           =>           \r\n            n -= 1                                  =>           \r\n        return l                                    =>           \r\n            summ = summ + (n-1 + 2*(n-2) + 3*(n-3)) <=           \r\n            n -=1                                   <=           \r\n        return summ                                 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    summ = 0\n    if n <= 3:\n        return n\n    else:\n        while n > 3:\n            summ = summ + (n-1 + 2*(n-2) + 3*(n-3))\n            n -=1 \n        return summ \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    summ = 0\n    if n <= 3:\n        return n\n    else:\n        f, m, l = 1, 2, 3 \n        while n > 3:\n            f, m, l = m, l, l + 2*m + 3*f\n            n -= 1\n        return l\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","26","","# Error: expected","#     22","# but got","#     26","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":381,"studentId":0,"date":null,"diff":"\r\nInputObject                    SideIndicator\r\n-----------                    -------------\r\n        g1, g2, g3 = g2, g3, g =>           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    g1, g2, g3 = 1, 2, 3\n    k = 3\n    while k < n:\n        g = g3 + 2 * g2 + 3 * g1\n        k = k + 1\n    return g\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    g1, g2, g3 = 1, 2, 3\n    k = 3\n    while k < n:\n        g = g3 + 2 * g2 + 3 * g1\n        g1, g2, g3 = g2, g3, g\n        k = k + 1\n    return g\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","10","","# Error: expected","#     22","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":382,"studentId":0,"date":null,"diff":"\r\nInputObject                               SideIndicator\r\n-----------                               -------------\r\n        x, y, z = x + 2*y + 3*z, x, y     =>           \r\n        x, y, z = x + 2*y + 3*z, 2*x, 3*y <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    k = 4\n    if n <= 3:\n        return n\n    x, y, z = 3, 2, 1\n    while k <= n:\n        x, y, z = x + 2*y + 3*z, 2*x, 3*y\n        k += 1\n    return x\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    k = 4\n    if n <= 3:\n        return n\n    x, y, z = 3, 2, 1\n    while k <= n:\n        x, y, z = x + 2*y + 3*z, x, y\n        k += 1\n    return x\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","40","","# Error: expected","#     22","# but got","#     40","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":383,"studentId":0,"date":null,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n    if n<=3:     =>           \r\n        return n =>           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    c,b,a=3,2,1\n    i=4\n    while i<=n:\n        c,b,a=c+2*b+3*a,c,b\n        i+=1\n    return c\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    c,b,a=3,2,1\n    i=4\n    if n<=3:\n        return n\n    while i<=n:\n        c,b,a=c+2*b+3*a,c,b\n        i+=1\n    return c\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","3","","# Error: expected","#     1","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":385,"studentId":0,"date":null,"diff":"\r\nInputObject                      SideIndicator\r\n-----------                      -------------\r\n            return total + n * z =>           \r\n            return total + 2 * n <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total = 0\n    x = 0\n    z = 1\n    while x < 3:\n        if n <= 3:\n            return total + 2 * n\n        else:\n            total = total + (z * (n))\n            z += 1\n            x += 1\n            n -= 1\n    return total\n\n\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total = 0\n    x = 0\n    z = 1\n    while x < 3:\n        if n <= 3:\n            return total + n * z\n        else:\n            total = total + (z * (n))\n            z += 1\n            x += 1\n            n -= 1\n    return total\n\n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","2","","# Error: expected","#     1","# but got","#     2","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":386,"studentId":0,"date":null,"diff":"\r\nInputObject                                                        SideIndicator\r\n-----------                                                        -------------\r\n        return (n-1) + (2 * (n-2)) + (3 * (n-3)) if n > 3 else n   =>           \r\n        return helper(n-1) + (2 * helper(n-2)) + (3 * helper(n-3)) =>           \r\n        return (n) + (2 * (n-1)) + (3 * (n-2))                     <=           \r\n        return helper(n-1) + helper(n-2) + helper(n-3)             <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    # result1 = 0\n    # result2 = 1\n    # i = n - 3\n    # if n <= 3:\n    #     return n\n    #\n    # while n > 0:\n    #     if n <= 3:\n    #         result1 += n\n    #     else:\n    #         result2 += (n - 1) * i\n    #         i -= 1\n    #     n -= 1\n    # return result1 + result2\n    def helper(n):\n        return (n) + (2 * (n-1)) + (3 * (n-2)) \n    if n <= 3:\n        return n\n    else:\n        return helper(n-1) + helper(n-2) + helper(n-3)\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    # result1 = 0\n    # result2 = 1\n    # i = n - 3\n    # if n <= 3:\n    #     return n\n    #\n    # while n > 0:\n    #     if n <= 3:\n    #         result1 += n\n    #     else:\n    #         result2 += (n - 1) * i\n    #         i -= 1\n    #     n -= 1\n    # return result1 + result2\n    def helper(n):\n        return (n-1) + (2 * (n-2)) + (3 * (n-3)) if n > 3 else n\n    if n <= 3:\n        return n\n    else:\n        return helper(n-1) + (2 * helper(n-2)) + (3 * helper(n-3))\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","12","","# Error: expected","#     10","# but got","#     12","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":387,"studentId":0,"date":null,"diff":"\r\nInputObject     SideIndicator\r\n-----------     -------------\r\n    return var2 =>           \r\n    return var4 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    var1, var2, var3, var4 = 2, 3, 10, 22\n    while n > 3:\n        var1, var2, var3, var4 = var2, var3, var3 + 2*var2 + 3*var1, var4 + 2*var3 + 3*var2\n        n -= 1\n    return var4\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    var1, var2, var3, var4 = 2, 3, 10, 22\n    while n > 3:\n        var1, var2, var3, var4 = var2, var3, var3 + 2*var2 + 3*var1, var4 + 2*var3 + 3*var2\n        n -= 1\n    return var2\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","51","","# Error: expected","#     10","# but got","#     51","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":388,"studentId":0,"date":null,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n    while n > 3: =>           \r\n    while n > 1: <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n    \treturn n\n    t1, t2, t3 = 1, 2, 3\n    while n > 1:\n    \ttemp2 = t2\n    \ttemp3 = t3\n    \tt3 = t3 + 2 * t2 + 3 * t1\n    \tt2 = temp3\n    \tt1 = temp2\n    \tn -= 1\n    return t3\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n    \treturn n\n    t1, t2, t3 = 1, 2, 3\n    while n > 3:\n    \ttemp2 = t2\n    \ttemp3 = t3\n    \tt3 = t3 + 2 * t2 + 3 * t1\n    \tt2 = temp3\n    \tt1 = temp2\n    \tn -= 1\n    return t3\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","51","","# Error: expected","#     10","# but got","#     51","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":389,"studentId":0,"date":null,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n        return n =>           \r\n        return 3 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return 3\n    elif n == 4:\n        return 10\n    elif n == 5:\n        return 22\n    elif n == 6:\n        return 51\n    else:\n        iterNum = 6\n        last1, last2, last3 = 51, 22, 10\n        while iterNum < n:\n            last3 = last2\n            last2 = last1\n            last1 = iterValue\n            iterValue = last1 + (2*last2) + (3*last3)\n            iterNum += 1\n    return iterValue\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    elif n == 4:\n        return 10\n    elif n == 5:\n        return 22\n    elif n == 6:\n        return 51\n    else:\n        iterNum = 6\n        last1, last2, last3 = 51, 22, 10\n        while iterNum < n:\n            last3 = last2\n            last2 = last1\n            last1 = iterValue\n            iterValue = last1 + (2*last2) + (3*last3)\n            iterNum += 1\n    return iterValue\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","3","","# Error: expected","#     1","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":390,"studentId":0,"date":null,"diff":"\r\nInputObject         SideIndicator\r\n-----------         -------------\r\n        while i<n:  =>           \r\n        while i<=n: <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    else:\n        a, b, c= 1, 2, 3\n        i=3\n        while i<=n:\n            a, b, c= b, c, (c+2*b+3*a)\n            i+=1\n    return c\n\ndef fib(n):\n    if n<=1:\n        return n\n    else:\n        a,b = 0,1\n        i=0\n        while i<n:\n            a,b = b, a+b\n            i+=1\n    return b\n\n    \n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    else:\n        a, b, c= 1, 2, 3\n        i=3\n        while i<n:\n            a, b, c= b, c, (c+2*b+3*a)\n            i+=1\n    return c\n\ndef fib(n):\n    if n<=1:\n        return n\n    else:\n        a,b = 0,1\n        i=0\n        while i<n:\n            a,b = b, a+b\n            i+=1\n    return b\n\n    \n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","22","","# Error: expected","#     10","# but got","#     22","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":391,"studentId":0,"date":null,"diff":"\r\nInputObject                       SideIndicator\r\n-----------                       -------------\r\n            total = c + 2*b + 3*a =>           \r\n            total = a + 2*b + 3*c <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        a,b,c = 1,2,3\n        total = 0\n        while (n-3>0):\n            total = a + 2*b + 3*c\n            a = b\n            b = c\n            c = total\n            n-=1\n        return total\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        a,b,c = 1,2,3\n        total = 0\n        while (n-3>0):\n            total = c + 2*b + 3*a\n            a = b\n            b = c\n            c = total\n            n-=1\n        return total\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","14","","# Error: expected","#     10","# but got","#     14","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":392,"studentId":0,"date":null,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n    if n < 4:    =>           \r\n        return n =>           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i = 4\n    total = 3\n    ones = 3\n    twos = 2\n    threes = 1\n    new_total = 0\n    while i < (n + 1):\n        new_total = ones + 2 * twos + 3 * threes\n        threes = twos\n        twos = ones\n        ones = new_total\n        i = i + 1\n    return new_total\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n < 4:\n        return n\n    i = 4\n    total = 3\n    ones = 3\n    twos = 2\n    threes = 1\n    new_total = 0\n    while i < (n + 1):\n        new_total = ones + 2 * twos + 3 * threes\n        threes = twos\n        twos = ones\n        ones = new_total\n        i = i + 1\n    return new_total\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","0","","# Error: expected","#     1","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":394,"studentId":0,"date":null,"diff":"\r\nInputObject       SideIndicator\r\n-----------       -------------\r\n    while n > 3:  =>           \r\n    while n >= 3: <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3 :\n        return n\n    base = 0\n    while n >= 3:\n        if n-1 <= 3:\n            base = base + n-1\n        if n - 2 <=3:\n            base = base + 2*(n-2) #+ n-1\n        if n - 3 <=3:\n            base = base + 3*(n-3) #+ 2*(n-2) + (n-1)\n        n = n -1\n    return base\n\n\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3 :\n        return n\n    base = 0\n    while n > 3:\n        if n-1 <= 3:\n            base = base + n-1\n        if n - 2 <=3:\n            base = base + 2*(n-2) #+ n-1\n        if n - 3 <=3:\n            base = base + 3*(n-3) #+ 2*(n-2) + (n-1)\n        n = n -1\n    return base\n\n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","14","","# Error: expected","#     10","# but got","#     14","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":395,"studentId":0,"date":null,"diff":"\r\nInputObject                   SideIndicator\r\n-----------                   -------------\r\n    i = 3                     =>           \r\n    if n <= 3:                =>           \r\n        return n              =>           \r\n    while i < n:              =>           \r\n        total = 3*a + 2*b + c =>           \r\n        a = b                 =>           \r\n        b = c                 =>           \r\n        c = total             =>           \r\n        i += 1                =>           \r\n    return total              =>           \r\n    i = 1                     <=           \r\n    while i < 4:              <=           \r\n        if n <= 3:            <=           \r\n            return total + n  <=           \r\n        elif n > 3:           <=           \r\n            total = a + b + c <=           \r\n            n -= 1            <=           \r\n            i += 1            <=           \r\n            a = b             <=           \r\n            b = c             <=           \r\n            c = total         <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a = 1\n    b = 2\n    c = 3\n    total = 0\n    i = 1\n    while i < 4:\n        if n <= 3:\n            return total + n\n        elif n > 3:\n            total = a + b + c\n            n -= 1\n            i += 1\n            a = b\n            b = c\n            c = total\n\n\n\n\n\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a = 1\n    b = 2\n    c = 3\n    total = 0\n    i = 3\n    if n <= 3:\n        return n \n    while i < n:\n        total = 3*a + 2*b + c\n        a = b\n        b = c\n        c = total\n        i += 1\n    return total\n\n\n\n\n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","9","","# Error: expected","#     10","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":396,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                                       SideIndic\r\n                                                                                                                  ator     \r\n-----------                                                                                                       ---------\r\n        one_store, two_store, three_store = three_store * 3 + two_store * 2 + one_store, one_store, two_store     =>       \r\n        one_store, two_store, three_store = three_store * 3 + two_store * 2 + one_store, one_store, two_store * 2 <=       \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1 or n == 2 or n == 3:\n        return n\n    one_store = 3\n    two_store = 2\n    three_store = 1\n    k = 4\n    while k <= n:\n        one_store, two_store, three_store = three_store * 3 + two_store * 2 + one_store, one_store, two_store * 2\n        k += 1\n    return one_store\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1 or n == 2 or n == 3:\n        return n\n    one_store = 3\n    two_store = 2\n    three_store = 1\n    k = 4\n    while k <= n:\n        one_store, two_store, three_store = three_store * 3 + two_store * 2 + one_store, one_store, two_store\n        k += 1\n    return one_store\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","28","","# Error: expected","#     22","# but got","#     28","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":397,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n            elif n%3==2: =>           \r\n            elif k<10:   <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    i=1\n    total=0\n    if n<4:\n        return n\n\n    else: \n        x,y,z=1,2,3\n\n        while i<= n//3:\n            if n%3==1:\n                x= z+2*y+3*x\n\n            elif k<10:\n                x=z+2*y+3*x\n                y=x+2*z+3*y\n            \n            else:\n                x=z+2*y+3*x\n                y=x+2*z+3*y\n                z=y+2*x+3*z\n            i+=1\n        if n%3==1:\n            return x\n        elif n%3==2:\n            return y\n\n        return z\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    i=1\n    total=0\n    if n<4:\n        return n\n\n    else: \n        x,y,z=1,2,3\n\n        while i<= n//3:\n            if n%3==1:\n                x= z+2*y+3*x\n\n            elif n%3==2:\n                x=z+2*y+3*x\n                y=x+2*z+3*y\n            \n            else:\n                x=z+2*y+3*x\n                y=x+2*z+3*y\n                z=y+2*x+3*z\n            i+=1\n        if n%3==1:\n            return x\n        elif n%3==2:\n            return y\n\n        return z\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 231, in g_iter","    elif k<10:","NameError: name 'k' is not defined","","# Error: expected","#     22","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":398,"studentId":0,"date":null,"diff":"\r\nInputObject                                   SideIndicator\r\n-----------                                   -------------\r\n            x, y ,z = y, z, z + 2*y + 3*x     =>           \r\n            x, y ,z = x-1, y-1, z + 2*y + 3*x <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    def G(n):\n        if n <=3:\n            return n\n        x, y, z = 1, 2, 3\n        while n > 3:\n            x, y ,z = x-1, y-1, z + 2*y + 3*x\n            n -= 1 \n        return z\n    return G(n)\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    def G(n):\n        if n <=3:\n            return n\n        x, y, z = 1, 2, 3\n        while n > 3:\n            x, y ,z = y, z, z + 2*y + 3*x\n            n -= 1 \n        return z\n    return G(n)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","12","","# Error: expected","#     22","# but got","#     12","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":399,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                                SideIndicator\r\n-----------                                                                                                -------------\r\n            # print(\"i\", i, \"total\", total, \"min1\", total_imin1, \"min2\", total_imin2, \"min3\", total_imin3) =>           \r\n            print(\"i\", i, \"total\", total, \"min1\", total_imin1, \"min2\", total_imin2, \"min3\", total_imin3)   <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total, total_imin1, total_imin2, total_imin3, i = 0, 0, 0, 0, 1\n    if n <=3:\n        total = n\n    else:\n        while i <= n:\n            total_imin3 = total_imin2\n            total_imin2 = total_imin1\n            total_imin1 = total\n            if i <= 3:\n                total = i\n            else:\n                total = total_imin1 + 2 * total_imin2 + 3 * total_imin3\n            print(\"i\", i, \"total\", total, \"min1\", total_imin1, \"min2\", total_imin2, \"min3\", total_imin3)\n            i += 1\n    return total\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total, total_imin1, total_imin2, total_imin3, i = 0, 0, 0, 0, 1\n    if n <=3:\n        total = n\n    else:\n        while i <= n:\n            total_imin3 = total_imin2\n            total_imin2 = total_imin1\n            total_imin1 = total\n            if i <= 3:\n                total = i\n            else:\n                total = total_imin1 + 2 * total_imin2 + 3 * total_imin3\n            # print(\"i\", i, \"total\", total, \"min1\", total_imin1, \"min2\", total_imin2, \"min3\", total_imin3)\n            i += 1\n    return total\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","i 1 total 1 min1 0 min2 0 min3 0","i 2 total 2 min1 1 min2 0 min3 0","i 3 total 3 min1 2 min2 1 min3 0","i 4 total 10 min1 3 min2 2 min3 1","10","","# Error: expected","#     10","# but got","#     i 1 total 1 min1 0 min2 0 min3 0","#     i 2 total 2 min1 1 min2 0 min3 0","#     i 3 total 3 min1 2 min2 1 min3 0","#     i 4 total 10 min1 3 min2 2 min3 1","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":400,"studentId":0,"date":null,"diff":"\r\nInputObject                   SideIndicator\r\n-----------                   -------------\r\n                print (value) <=           \r\n                print(value)  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    def func_g(n, x, value):\n        '''while times < 4:\n            if n <= 3:\n                return n\n            else:\n                m = n\n                x = y\n                while m > 4:\n                    value += (m-1)*y\n                    m-=1\n                    y+=1\n                    times+=1\n                n-=1\n                x+=1\n                times+=1\n        return value'''\n        if n<=3:\n            return n\n        for i in range(3):\n            if n> 4:\n                y = x\n                m = n\n                for i in range(3):\n                    value += (m-2)*y\n                    m-=1\n                    y+=1\n                n -=1\n                x+=1\n                print (value)\n            else:\n                value += (n-1)*x\n                n-=1\n                x+=1\n                print(value)\n        return value\n    return func_g(n, 1, 0)\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    def func_g(n, x, value):\n        '''while times < 4:\n            if n <= 3:\n                return n\n            else:\n                m = n\n                x = y\n                while m > 4:\n                    value += (m-1)*y\n                    m-=1\n                    y+=1\n                    times+=1\n                n-=1\n                x+=1\n                times+=1\n        return value'''\n        if n<=3:\n            return n\n        for i in range(3):\n            if n> 4:\n                y = x\n                m = n\n                for i in range(3):\n                    value += (m-2)*y\n                    m-=1\n                    y+=1\n                n -=1\n                x+=1\n            else:\n                value += (n-1)*x\n                n-=1\n                x+=1\n        return value\n    return func_g(n, 1, 0)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","3","7","10","10","","# Error: expected","#     10","# but got","#     3","#     7","#     10","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":401,"studentId":0,"date":null,"diff":"\r\nInputObject                                                           SideIndicator\r\n-----------                                                           -------------\r\n        g_of_n= g_of_n_minus_1 +2 *g_of_n_minus_2+3* g_of_n_minus_3   =>           \r\n        g_of_n= g_of_n_minus_1 +2 *g_of_n_minus_2+3* g_of_n_minus_3+4 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    i=4\n    g_of_n_minus_1=3\n    g_of_n_minus_2=2\n    g_of_n_minus_3=1\n    g_of_n=0\n    while i <=n:\n        g_of_n= g_of_n_minus_1 +2 *g_of_n_minus_2+3* g_of_n_minus_3+4\n        g_of_n_minus_3= g_of_n_minus_2\n        g_of_n_minus_2= g_of_n_minus_1\n        g_of_n_minus_1=g_of_n\n        i+=1\n    return g_of_n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    i=4\n    g_of_n_minus_1=3\n    g_of_n_minus_2=2\n    g_of_n_minus_3=1\n    g_of_n=0\n    while i <=n:\n        g_of_n= g_of_n_minus_1 +2 *g_of_n_minus_2+3* g_of_n_minus_3\n        g_of_n_minus_3= g_of_n_minus_2\n        g_of_n_minus_2= g_of_n_minus_1\n        g_of_n_minus_1=g_of_n\n        i+=1\n    return g_of_n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","14","","# Error: expected","#     10","# but got","#     14","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":402,"studentId":0,"date":null,"diff":"\r\nInputObject       SideIndicator\r\n-----------       -------------\r\n    while n > 3:  =>           \r\n    while n <= 3: <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n == 1 or n == 2 or n == 3:\n        return n\n    a, b, c = 1, 2, 3\n    while n <= 3:\n        a, b, c = b, c, c + 2*b + 3*a\n        n = n - 1\n    return c\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n == 1 or n == 2 or n == 3:\n        return n\n    a, b, c = 1, 2, 3\n    while n > 3:\n        a, b, c = b, c, c + 2*b + 3*a\n        n = n - 1\n    return c\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","3","","# Error: expected","#     10","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":403,"studentId":0,"date":null,"diff":"\r\nInputObject       SideIndicator\r\n-----------       -------------\r\n        if i < 4: =>           \r\n        if i < 3: <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    first, second, third, next, i = 0, 0, 0, 1, 1\n    while i < n:\n        if i < 3:\n            first, second, third = next+first, first, second\n        else:\n            first, second, third = next, first, second\n        if i > 2:\n            next = first + 2*second + 3*third\n        i += 1\n    return next\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    first, second, third, next, i = 0, 0, 0, 1, 1\n    while i < n:\n        if i < 4:\n            first, second, third = next+first, first, second\n        else:\n            first, second, third = next, first, second\n        if i > 2:\n            next = first + 2*second + 3*third\n        i += 1\n    return next\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","8","","# Error: expected","#     10","# but got","#     8","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":404,"studentId":0,"date":null,"diff":"\r\nInputObject                                   SideIndicator\r\n-----------                                   -------------\r\n            result = 3*(g_3) + 2*(g_2) + g_1  =>           \r\n            result += 3*(g_3) + 2*(g_2) + g_1 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        i = 4\n        g_1 = 3\n        g_2 = 2\n        g_3 = 1\n        result = 0\n        while i <= n:\n            result += 3*(g_3) + 2*(g_2) + g_1\n            g_3 = g_2\n            g_2 = g_1\n            g_1 = result\n            i += 1\n        return result\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        i = 4\n        g_1 = 3\n        g_2 = 2\n        g_3 = 1\n        result = 0\n        while i <= n:\n            result = 3*(g_3) + 2*(g_2) + g_1\n            g_3 = g_2\n            g_2 = g_1\n            g_1 = result\n            i += 1\n        return result\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","32","","# Error: expected","#     22","# but got","#     32","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":405,"studentId":0,"date":null,"diff":"\r\nInputObject                      SideIndicator\r\n-----------                      -------------\r\n    first, second, third = 3,2,1 =>           \r\n    first, second, third = 1,2,3 <=           \r\n        third=1                  <=           \r\n        second=2                 <=           \r\n        first=3                  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    sum=0\n    c=1\n    k=1\n    first, second, third = 1,2,3\n    while k<=n-3:\n        third=1\n        second=2\n        first=3\n        fourth=first*1+second*2+third*3\n        third=second\n        second=first\n        first=fourth\n        k+=1\n    return fourth\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    sum=0\n    c=1\n    k=1\n    first, second, third = 3,2,1\n    while k<=n-3:\n        fourth=first*1+second*2+third*3\n        third=second\n        second=first\n        first=fourth\n        k+=1\n    return fourth\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","10","","# Error: expected","#     22","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":406,"studentId":0,"date":null,"diff":"\r\nInputObject                                        SideIndicator\r\n-----------                                        -------------\r\n            total = prev_1 + 2*prev_2 + 3*prev_3   =>           \r\n            prev_3 = prev_2                        =>           \r\n            prev_2 = prev_1                        =>           \r\n            prev_1 = total                         =>           \r\n            total = 1*prev_1 + 2*prev_2 + 3*prev_3 <=           \r\n            prev_3 += prev_2                       <=           \r\n            prev_2 += prev_1                       <=           \r\n            prev_1 += total                        <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n    if n<=3:\n        return n\n    else:\n        total = 0\n        prev_1 = 3\n        prev_2 = 2 \n        prev_3 = 1\n        while n>3:\n            total = 1*prev_1 + 2*prev_2 + 3*prev_3\n            prev_3 += prev_2\n            prev_2 += prev_1\n            prev_1 += total\n            n-=1\n    return total \n\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n    if n<=3:\n        return n\n    else:\n        total = 0\n        prev_1 = 3\n        prev_2 = 2 \n        prev_3 = 1\n        while n>3:\n            total = prev_1 + 2*prev_2 + 3*prev_3\n            prev_3 = prev_2\n            prev_2 = prev_1\n            prev_1 = total\n            n-=1\n    return total \n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","32","","# Error: expected","#     22","# but got","#     32","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":408,"studentId":0,"date":null,"diff":"\r\nInputObject        SideIndicator\r\n-----------        -------------\r\n    elif n == 5:   =>           \r\n    # elif n == 5: <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    place = 1\n    multi = 1\n    counter = 0\n    total = 0\n\n    if n <= 3:\n        return n\n    # elif n == 5:\n        return 22\n    else:\n        while counter <= 3:\n            total = total + multi * (n-place)\n            multi = multi + 1\n            place = place + 1\n            counter = counter + 1\n    return total\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    place = 1\n    multi = 1\n    counter = 0\n    total = 0\n\n    if n <= 3:\n        return n\n    elif n == 5:\n        return 22\n    else:\n        while counter <= 3:\n            total = total + multi * (n-place)\n            multi = multi + 1\n            place = place + 1\n            counter = counter + 1\n    return total\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","20","","# Error: expected","#     22","# but got","#     20","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":409,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                          SideIndicator\r\n-----------                                                                          -------------\r\n    g_1less,g_2less,g_3less = 3,2,1                                                  =>           \r\n    for x in range(3,n):                                                             =>           \r\n         g_1less,g_2less,g_3less = g_1less + 2*g_2less + 3*g_3less , g_1less,g_2less =>           \r\n    return g_1less                                                                   =>           \r\n    while n>3:                                                                       <=           \r\n        total = total + (n-1) + 2*(n-2) + 3*(n-3)                                    <=           \r\n        n-=1                                                                         <=           \r\n    return total                                                                     <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total = 0\n    if n<=3:\n        return n\n    while n>3:\n        total = total + (n-1) + 2*(n-2) + 3*(n-3)\n        n-=1\n    return total\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total = 0\n    if n<=3:\n        return n\n    g_1less,g_2less,g_3less = 3,2,1\n    for x in range(3,n):\n         g_1less,g_2less,g_3less = g_1less + 2*g_2less + 3*g_3less , g_1less,g_2less\n    return g_1less\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","26","","# Error: expected","#     22","# but got","#     26","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":411,"studentId":0,"date":null,"diff":"\r\nInputObject                                                          SideIndicator\r\n-----------                                                          -------------\r\n            #n_4, n_3, n_2, n_1 = n_3, n_2, n_1, n_2 + 2*n_3 + 3*n_4 =>           \r\n            n_4 = n_3                                                =>           \r\n            n_3 = n_2                                                =>           \r\n            n_2 = n_1                                                =>           \r\n            n_1 = n_2 + 2*n_3 + 3*n_4                                =>           \r\n            n_4, n_3, n_2, n_1 = n_3, n_2, n_1, n_2 + 2*n_3 + 3*n_4  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    n_1, n_2, n_3, n_4 = 3, 2, 1, 0\n    i = 4\n    if n <= 3:\n        return n \n    else: \n        while i < n:\n            n_4, n_3, n_2, n_1 = n_3, n_2, n_1, n_2 + 2*n_3 + 3*n_4\n            i += 1\n        return n_1 + 2*n_2 + 3*n_3\n\n  \n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    n_1, n_2, n_3, n_4 = 3, 2, 1, 0\n    i = 4\n    if n <= 3:\n        return n \n    else: \n        while i < n:\n            #n_4, n_3, n_2, n_1 = n_3, n_2, n_1, n_2 + 2*n_3 + 3*n_4\n            n_4 = n_3\n            n_3 = n_2\n            n_2 = n_1\n            n_1 = n_2 + 2*n_3 + 3*n_4\n            i += 1\n        return n_1 + 2*n_2 + 3*n_3\n\n  \n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","16","","# Error: expected","#     22","# but got","#     16","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":412,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n    if (n - 1) == 3: =>           \r\n    if (n - x) == 3: <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    k = 1\n    x = 1\n    y = 1\n    total = 0\n    sub_total = 0\n    new_total = 0\n    if n <= 3:\n        return n\n    else:\n        while (n - x) >= 3:\n            total = total + x * (n - x)\n            x = x + 1\n        while (n - y) > 3:\n            sub_total = sub_total + y * (n - y)\n            y = y + 1\n        while k <= 3:    \n            new_total = new_total + k * (n - k)\n            k = k + 1\n    if (n - x) == 3:\n        return new_total - sub_total\n    else:\n        return total + new_total - sub_total\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    k = 1\n    x = 1\n    y = 1\n    total = 0\n    sub_total = 0\n    new_total = 0\n    if n <= 3:\n        return n\n    else:\n        while (n - x) >= 3:\n            total = total + x * (n - x)\n            x = x + 1\n        while (n - y) > 3:\n            sub_total = sub_total + y * (n - y)\n            y = y + 1\n        while k <= 3:    \n            new_total = new_total + k * (n - k)\n            k = k + 1\n    if (n - 1) == 3:\n        return new_total - sub_total\n    else:\n        return total + new_total - sub_total\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","13","","# Error: expected","#     10","# but got","#     13","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":413,"studentId":0,"date":null,"diff":"\r\nInputObject                                                        SideIndicator\r\n-----------                                                        -------------\r\n            gsum_i = gi_minus1 + (2 * gi_minus2) + (3 * gi_minus3) =>           \r\n            gi_minus2, gi_minus3 = 2 * gi_minus2, 3 * gi_minus3    <=           \r\n            gsum_i = gi_minus1 + gi_minus2 + gi_minus3             <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    for i in range(1,n+1):\n        if i <= 3:\n            i, gi_minus1, gi_minus2, gi_minus3 = i, i-1, i-2, i-3\n            gsum_i = i\n        else: #if n > 3\n            gi_minus1, gi_minus2, gi_minus3 = gsum_i, gi_minus1, gi_minus2\n            gi_minus2, gi_minus3 = 2 * gi_minus2, 3 * gi_minus3\n            gsum_i = gi_minus1 + gi_minus2 + gi_minus3\n    return gsum_i\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    for i in range(1,n+1):\n        if i <= 3:\n            i, gi_minus1, gi_minus2, gi_minus3 = i, i-1, i-2, i-3\n            gsum_i = i\n        else: #if n > 3\n            gi_minus1, gi_minus2, gi_minus3 = gsum_i, gi_minus1, gi_minus2\n            gsum_i = gi_minus1 + (2 * gi_minus2) + (3 * gi_minus3)\n    return gsum_i\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","28","","# Error: expected","#     22","# but got","#     28","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":414,"studentId":0,"date":null,"diff":"\r\nInputObject                                               SideIndicator\r\n-----------                                               -------------\r\n            total = total1 + (2 * total2) + (3 * total3)  =>           \r\n            total += total1 + (2 * total2) + (3 * total3) <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        total = n\n    else:\n        i, total, total1, total2, total3 = 4, 0, 3, 2, 1\n        while i <= n:\n            total += total1 + (2 * total2) + (3 * total3)\n            i += 1\n            total3 = total2\n            total2 = total1\n            total1 = total\n    return total\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        total = n\n    else:\n        i, total, total1, total2, total3 = 4, 0, 3, 2, 1\n        while i <= n:\n            total = total1 + (2 * total2) + (3 * total3)\n            i += 1\n            total3 = total2\n            total2 = total1\n            total1 = total\n    return total\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","32","","# Error: expected","#     22","# but got","#     32","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":416,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n        while i < n:  =>           \r\n        while i <= n: <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        i = 1\n        a, b, c = 1, 2, 3\n        while i <= n:\n            a, b, c = b, c, 3*a + 2*b + 1*c\n            i += 1\n        return a\n\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        i = 1\n        a, b, c = 1, 2, 3\n        while i < n:\n            a, b, c = b, c, 3*a + 2*b + 1*c\n            i += 1\n        return a\n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","22","","# Error: expected","#     10","# but got","#     22","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":417,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                          SideIndicator\r\n-----------                                                                          -------------\r\n        three, two, one, current = two, one, current, current +  2 * one + 3 * two   =>           \r\n        three, two, one, current = two, one, current, current +  2 * two + 3 * three <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    three, two, one, current = 0, 1, 2, 3\n    while n > 3:\n        three, two, one, current = two, one, current, current +  2 * two + 3 * three\n        n -= 1\n    return current\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    three, two, one, current = 0, 1, 2, 3\n    while n > 3:\n        three, two, one, current = two, one, current, current +  2 * one + 3 * two\n        n -= 1\n    return current\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","5","","# Error: expected","#     10","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":418,"studentId":0,"date":null,"diff":"\r\nInputObject         SideIndicator\r\n-----------         -------------\r\n        while n>=2: =>           \r\n        while n>2:  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        current, next1, next2 = 1,2,3\n        while n>2:\n            current,next1,next2 = next1,next2,next2+2*next1+3*current\n            n -= 1\n        return current\n\n     \n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        current, next1, next2 = 1,2,3\n        while n>=2:\n            current,next1,next2 = next1,next2,next2+2*next1+3*current\n            n -= 1\n        return current\n\n     \n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","3","","# Error: expected","#     10","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":419,"studentId":0,"date":null,"diff":"\r\nInputObject                                                       SideIndicator\r\n-----------                                                       -------------\r\n    if n <= 3:                                                    =>           \r\n    while i < n:                                                  =>           \r\n        one, two, three = two, three, (three + 2 * two + 3 * one) =>           \r\n        i+=1                                                      =>           \r\n                                                                  =>           \r\n    if n<=3:                                                      <=           \r\n    while i<n:                                                    <=           \r\n        one, two, three= two, three, (three+2*two+3*one)          <=           \r\n                                                                  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n\n    one, two, three=1, 2, 3\n    i=1\n    if n<=3:\n        return n\n    while i<n:\n        one, two, three= two, three, (three+2*two+3*one)\n    return one\n\n\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n\n    one, two, three=1, 2, 3\n    i=1\n    if n <= 3:\n        return n\n    while i < n:\n        one, two, three = two, three, (three + 2 * two + 3 * one)\n        i+=1\n    return one\n    \n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     10","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":420,"studentId":0,"date":null,"diff":"\r\nInputObject                     SideIndicator\r\n-----------                     -------------\r\n        for _ in range(4, n+1): =>           \r\n        for _ in range(1, n):   <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        a = 1\n        b = 2\n        c = 3\n        for _ in range(1, n):\n            d = 3*a + 2*b + c\n            a = b\n            b = c\n            c = d \n        return c\n\n\n\n\n\n\n\n\n    \n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        a = 1\n        b = 2\n        c = 3\n        for _ in range(4, n+1):\n            d = 3*a + 2*b + c\n            a = b\n            b = c\n            c = d \n        return c\n\n\n\n\n\n\n\n\n    \n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","51","","# Error: expected","#     10","# but got","#     51","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":421,"studentId":0,"date":null,"diff":"\r\nInputObject                                        SideIndicator\r\n-----------                                        -------------\r\n            total = pred1 + 2 * pred2 + 3 * pred3  =>           \r\n            total += pred1 + 2 * pred2 + 3 * pred3 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        i = 4\n        total = 0\n        pred1, pred2, pred3 = 3, 2, 1\n        while i <= n:\n            total += pred1 + 2 * pred2 + 3 * pred3\n            i += 1\n            pred3, pred2, pred1 = pred2, pred1, total\n        return total\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        i = 4\n        total = 0\n        pred1, pred2, pred3 = 3, 2, 1\n        while i <= n:\n            total = pred1 + 2 * pred2 + 3 * pred3\n            i += 1\n            pred3, pred2, pred1 = pred2, pred1, total\n        return total\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","32","","# Error: expected","#     22","# but got","#     32","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":422,"studentId":0,"date":null,"diff":"\r\nInputObject                                                 SideIndicator\r\n-----------                                                 -------------\r\n    k = 4                                                   =>           \r\n    while k<=n:                                             =>           \r\n            total-= term1                                   =>           \r\n            total-= term2                                   =>           \r\n            total-= term3                                   =>           \r\n        k+=1                                                =>           \r\n    k = n                                                   <=           \r\n    while k>3:                                              <=           \r\n            term1=(term1-1)+2*(term1-2) + 3*(term1-3)-term1 <=           \r\n            term2=(term2-1)+2*(term2-2) + 3*(term2-3)-term2 <=           \r\n            term3=(term3-1)+2*(term3-2) + 3*(term3-3)-term3 <=           \r\n        k-=1                                                <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total = 0\n    k = n\n    if n<=3:\n        return n\n    \n    while k>3:\n        term1 = k-1\n        term2 = k-2\n        term3 = k-3\n        \n        if term1>3:\n            term1=(term1-1)+2*(term1-2) + 3*(term1-3)-term1\n        if term2>3:\n            term2=(term2-1)+2*(term2-2) + 3*(term2-3)-term2\n        if term3>3:\n            term3=(term3-1)+2*(term3-2) + 3*(term3-3)-term3\n\n        total = total + term1 + 2*term2 + 3*term3\n\n        k-=1\n        \n    \n    return total\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total = 0\n    k = 4\n    if n<=3:\n        return n\n    \n    while k<=n:\n        term1 = k-1\n        term2 = k-2\n        term3 = k-3\n        \n        if term1>3:\n            total-= term1\n        if term2>3:\n            total-= term2\n        if term3>3:\n            total-= term3\n\n        total = total + term1 + 2*term2 + 3*term3\n\n        k+=1\n        \n    \n    return total\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","28","","# Error: expected","#     22","# but got","#     28","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":423,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n    if n == 1:                               =>           \r\n        return 1                             =>           \r\n    elif n == 2:                             =>           \r\n        return 2                             =>           \r\n    elif n == 3:                             =>           \r\n        return 3                             =>           \r\n    p1, p2, p3 = 3, 2, 1                     =>           \r\n    i, current = 4, 0                        =>           \r\n    while i <= n:                            =>           \r\n        current = p1 + 2 * p2 + 3 * p3       =>           \r\n        p1, p2, p3 = current, p1, p2         =>           \r\n        i += 1                               =>           \r\n    return current                           =>           \r\n                                             =>           \r\n                                             =>           \r\n    current, next = 4, 5                     <=           \r\n    if n < 4:                                <=           \r\n        return n                             <=           \r\n        current, next = next, next + current <=           \r\n        n=n+1                                <=           \r\n        print ('hey')                        <=           \r\n    return current                           <=           \r\n    else:                                    <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    current, next = 4, 5\n    if n < 4:\n        return n\n    else:\n        current, next = next, next + current\n        n=n+1\n        print ('hey')\n    return current \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n\n    p1, p2, p3 = 3, 2, 1\n    i, current = 4, 0\n    while i <= n:\n        current = p1 + 2 * p2 + 3 * p3\n        p1, p2, p3 = current, p1, p2\n        i += 1\n\n    return current\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","hey","5","","# Error: expected","#     10","# but got","#     hey","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":424,"studentId":0,"date":null,"diff":"\r\nInputObject         SideIndicator\r\n-----------         -------------\r\n            c = b   =>           \r\n            b = a   =>           \r\n            c = 3*b <=           \r\n            b = 2*a <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a, b, c = 3, 2, 1\n    i = 4\n\n    if n <=3:\n        return n\n    else:\n        while i <= n:\n            total = a + 2*b + 3*c\n            c = 3*b\n            b = 2*a\n            a = total\n            i += 1\n\n    return a\n    \n    \"\"\"if n <= 3:\n        return i\n    while n >= 0:\n        a = \n\n    def a_value(i):\n        if i <=3:\n            return i\n        else:\n            return \"\"\"\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a, b, c = 3, 2, 1\n    i = 4\n\n    if n <=3:\n        return n\n    else:\n        while i <= n:\n            total = a + 2*b + 3*c\n            c = b\n            b = a\n            a = total\n            i += 1\n\n    return a\n    \n    \"\"\"if n <= 3:\n        return i\n    while n >= 0:\n        a = \n\n    def a_value(i):\n        if i <=3:\n            return i\n        else:\n            return \"\"\"\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","40","","# Error: expected","#     22","# but got","#     40","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":425,"studentId":0,"date":null,"diff":"\r\nInputObject   SideIndicator\r\n-----------   -------------\r\n    return g3 =>           \r\n    return z  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==1 or n==2 or n==3:\n        return n\n    g1,g2,g3 = 1,2,3\n    while n > 3:\n        g1,g2,g3 = g2, g3, g3 + 2*g2 + 3*g1\n        n-=1\n    return z\n\n\ndef has_seven(k):\n\n    \"\"\"Returns True if at least one of the digits of k is a 7, False otherwise.\n\n    >>> has_seven(3)\n    False\n    >>> has_seven(7)\n    True\n    >>> has_seven(2734)\n    True\n    >>> has_seven(2634)\n    False\n    >>> has_seven(734)\n    True\n    >>> has_seven(7777)\n    True\n    \"\"\"\n    if k % 10 == 7:\n        return True\n    elif k < 10:\n        return False\n    else:\n        return has_seven(k // 10)\n\n\n\n\ndef pingpong_logic(x):\n    if has_seven(x) or x%7 == 0:\n        return x-1 \n    else:\n        return x+1\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==1 or n==2 or n==3:\n        return n\n    g1,g2,g3 = 1,2,3\n    while n > 3:\n        g1,g2,g3 = g2, g3, g3 + 2*g2 + 3*g1\n        n-=1\n    return g3\n\n\ndef has_seven(k):\n\n    \"\"\"Returns True if at least one of the digits of k is a 7, False otherwise.\n\n    >>> has_seven(3)\n    False\n    >>> has_seven(7)\n    True\n    >>> has_seven(2734)\n    True\n    >>> has_seven(2634)\n    False\n    >>> has_seven(734)\n    True\n    >>> has_seven(7777)\n    True\n    \"\"\"\n    if k % 10 == 7:\n        return True\n    elif k < 10:\n        return False\n    else:\n        return has_seven(k // 10)\n\n\n\n\ndef pingpong_logic(x):\n    if has_seven(x) or x%7 == 0:\n        return x-1 \n    else:\n        return x+1\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 212, in g_iter","    return z","NameError: name 'z' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":426,"studentId":0,"date":null,"diff":"\r\nInputObject                                                              SideIndicator\r\n-----------                                                              -------------\r\n        first, second, third = second, third, third + 2*second + 3*first =>           \r\n        first, second, third = second, third, third + 2*second + 3*third <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    first, second, third = 1,2,3\n    if n <= 3:\n        return n\n    while n > 3:\n        first, second, third = second, third, third + 2*second + 3*third\n        n-=1\n    return third\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    first, second, third = 1,2,3\n    if n <= 3:\n        return n\n    while n > 3:\n        first, second, third = second, third, third + 2*second + 3*first\n        n-=1\n    return third\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","16","","# Error: expected","#     10","# but got","#     16","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":427,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n    return total[-1]  =>           \r\n    return sum(total) <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total = [1, 2, 3]\n    if n <= 3:\n        return n \n    else:\n        for i in range(1, n-2):\n            total.append(total[-1] + total[-2] * 2 + total[-3] * 3)\n    # print(total)\n    return sum(total)\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total = [1, 2, 3]\n    if n <= 3:\n        return n \n    else:\n        for i in range(1, n-2):\n            total.append(total[-1] + total[-2] * 2 + total[-3] * 3)\n    # print(total)\n    return total[-1]\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","16","","# Error: expected","#     10","# but got","#     16","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":428,"studentId":0,"date":null,"diff":"\r\nInputObject                         SideIndicator\r\n-----------                         -------------\r\n    if n<= 3:                       =>           \r\n    k,g,i = 1,2,3                   =>           \r\n    while n>3:                      =>           \r\n        k,g,i = g,i,(i + 2*g + 3*k) =>           \r\n        n -= 1                      =>           \r\n    return i                        =>           \r\n                                    =>           \r\n    if n<=3:                        <=           \r\n    a = 1                           <=           \r\n    b = 2                           <=           \r\n    c = 3                           <=           \r\n    while n > 3:                    <=           \r\n        a = b                       <=           \r\n        b = c                       <=           \r\n        c = (c + 2*b + 3*a)         <=           \r\n        n-=1                        <=           \r\n    return c                        <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    a = 1\n    b = 2\n    c = 3\n    while n > 3:\n        a = b\n        b = c\n        c = (c + 2*b + 3*a)\n        n-=1\n    return c\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<= 3:\n        return n\n    k,g,i = 1,2,3\n    while n>3:\n        k,g,i = g,i,(i + 2*g + 3*k)\n        n -= 1\n    return i\n    \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","15","","# Error: expected","#     10","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":429,"studentId":0,"date":null,"diff":"\r\nInputObject                                       SideIndicator\r\n-----------                                       -------------\r\n            x, y, z = y, z, z + (2 * y) + (3 * x) =>           \r\n            x, y, z = y, z, z + (2 * y) + (3 * a) <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    x, y, z = 1, 2, 3\n    if n <= 3:\n        return n\n    else:\n        while n > 3:\n            x, y, z = y, z, z + (2 * y) + (3 * a)\n            n -= 1\n        return z \n        \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    x, y, z = 1, 2, 3\n    if n <= 3:\n        return n\n    else:\n        while n > 3:\n            x, y, z = y, z, z + (2 * y) + (3 * x)\n            n -= 1\n        return z \n        \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 220, in g_iter","    x, y, z = y, z, z + (2 * y) + (3 * a)","NameError: name 'a' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":430,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n    list = [0, 1, 2, 3] =>           \r\n    return list[n]      =>           \r\n    list = [1, 2, 3]    <=           \r\n    return list[n - 1]  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \n    list = [1, 2, 3]\n    for i in range(4, n + 1):\n        list.append(list[i - 1] + 2 * list[i - 2] + 3 * list[i - 3])\n    return list[n - 1]\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \n    list = [0, 1, 2, 3]\n    for i in range(4, n + 1):\n        list.append(list[i - 1] + 2 * list[i - 2] + 3 * list[i - 3])\n    return list[n]\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 211, in g_iter","    list.append(list[i - 1] + 2 * list[i - 2] + 3 * list[i - 3])","IndexError: list index out of range","","# Error: expected","#     10","# but got","#     IndexError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":432,"studentId":0,"date":null,"diff":"\r\nInputObject                           SideIndicator\r\n-----------                           -------------\r\n        x, y, z = x + 2*y + 3*z, x ,y =>           \r\n    return x                          =>           \r\n    total = 0                         <=           \r\n        total = x + 2*y + 3*z         <=           \r\n        x = total                     <=           \r\n        y = x                         <=           \r\n        z= y                          <=           \r\n    return total                      <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \n    if n <= 3 and n > 0:\n        return n\n\n    x, y, z = 3, 2, 1\n    total = 0\n    i = 0\n    while i != n-3:\n        total = x + 2*y + 3*z\n        x = total\n        y = x\n        z= y\n        i += 1\n    return total\n\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \n    if n <= 3 and n > 0:\n        return n\n\n    x, y, z = 3, 2, 1\n    i = 0\n    while i != n-3:\n        x, y, z = x + 2*y + 3*z, x ,y\n        i += 1\n    return x\n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","60","","# Error: expected","#     22","# but got","#     60","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":434,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n            print(x, y, z) <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        z = 1\n        y = 2\n        x = 3\n        while n > 3:\n            print(x, y, z)\n            answer = x + 2 * y + 3 * z\n            z = y\n            y = x\n            x = answer\n            n -= 1\n        return answer\n        \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        z = 1\n        y = 2\n        x = 3\n        while n > 3:\n            answer = x + 2 * y + 3 * z\n            z = y\n            y = x\n            x = answer\n            n -= 1\n        return answer\n        \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","3 2 1","10","","# Error: expected","#     10","# but got","#     3 2 1","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":435,"studentId":0,"date":null,"diff":"\r\nInputObject                                   SideIndicator\r\n-----------                                   -------------\r\n        g.append(1), g.append(2), g.append(3) =>           \r\n        g.append(1, 2, 3)                     <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n  \n\n    if n < 2:\n        return 1\n    elif n < 3:\n        return 2\n    elif n < 4:\n        return 3\n    else:\n        g = []\n        g.append(1, 2, 3)\n        for i in range(3, n):\n            g.append(g[i-1] + 2 *g[i-2] + 3 * g[i-3])\n    return g[n-1]\n\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n  \n\n    if n < 2:\n        return 1\n    elif n < 3:\n        return 2\n    elif n < 4:\n        return 3\n    else:\n        g = []\n        g.append(1), g.append(2), g.append(3)\n        for i in range(3, n):\n            g.append(g[i-1] + 2 *g[i-2] + 3 * g[i-3])\n    return g[n-1]\n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 250, in g_iter","    g.append(1, 2, 3)","TypeError: append() takes exactly one argument (3 given)","","# Error: expected","#     10","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":436,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                SideIndicator\r\n-----------                                                                -------------\r\n    lam3 = lambda x: 3*lam3(x-3) + 2*lam3(x-2) + lam3(x-1) if x>3 else x   =>           \r\n    return lam3(n)                                                         =>           \r\n    lamtot = lambda x: 3*lam3(x-3) + 2*lam3(x-2) + lam3(x-1) if x>3 else x <=           \r\n    return lamtot(n)                                                       <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3: return n\n    \n    total = 0\n    \n    lam = lambda x: lam3(x)\n    lamtot = lambda x: 3*lam3(x-3) + 2*lam3(x-2) + lam3(x-1) if x>3 else x\n    \n    return lamtot(n)\n    \n    \n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3: return n\n    \n    total = 0\n    \n    lam = lambda x: lam3(x)\n    lam3 = lambda x: 3*lam3(x-3) + 2*lam3(x-2) + lam3(x-1) if x>3 else x\n    \n    return lam3(n)\n    \n    \n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 209, in g_iter","    return lamtot(n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 207, in <lambda>","    lamtot = lambda x: 3*lam3(x-3) + 2*lam3(x-2) + lam3(x-1) if x>3 else x","NameError: name 'lam3' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":437,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n            total = total+2*(i-2)+3*(i-3)       =>           \r\n            total = total+(i-1)+2*(i-2)+3*(i-3) <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    for i in range(n,-1,-1):\n        if i <= 3:\n            return total+i\n        elif i ==4:\n            return total+(i-1)+2*(i-2)+3*(i-3)\n        else:\n            total = total+(i-1)+2*(i-2)+3*(i-3)\n    return total\n\n    \"\"\"i = 0\n    total = 0\n    while i<n:\n        if n <=3:\n            total +=n\n            return total\n        else:\n            total = total+(n-1)+2*(n-2)+3*(n-3)\n        n-=1\n    return total\"\"\"\n'''total = 0\n    for i in range(n,-1,-1):\n        if i <= 3:\n            return total+i\n        elif n ==4:\n            return (i-1)+2*(i-2)+3*(i-3)\n        else:\n            total = total+(i-1)+2*(i-2)+3*(i-3)\n    return total'''\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    for i in range(n,-1,-1):\n        if i <= 3:\n            return total+i\n        elif i ==4:\n            return total+(i-1)+2*(i-2)+3*(i-3)\n        else:\n            total = total+2*(i-2)+3*(i-3)\n    return total\n\n    \"\"\"i = 0\n    total = 0\n    while i<n:\n        if n <=3:\n            total +=n\n            return total\n        else:\n            total = total+(n-1)+2*(n-2)+3*(n-3)\n        n-=1\n    return total\"\"\"\n'''total = 0\n    for i in range(n,-1,-1):\n        if i <= 3:\n            return total+i\n        elif n ==4:\n            return (i-1)+2*(i-2)+3*(i-3)\n        else:\n            total = total+(i-1)+2*(i-2)+3*(i-3)\n    return total'''\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","26","","# Error: expected","#     22","# but got","#     26","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":438,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n    return int(first) =>           \r\n    return first      <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    first, second, third, counter = 3, 4, 3, n\n    while counter > 3:\n        first, second, third = (first + second + third), 2*first, (3/2)*second\n        counter -= 1\n    return first\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    first, second, third, counter = 3, 4, 3, n\n    while counter > 3:\n        first, second, third = (first + second + third), 2*first, (3/2)*second\n        counter -= 1\n    return int(first)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","22.0","","# Error: expected","#     22","# but got","#     22.0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":440,"studentId":0,"date":null,"diff":"\r\nInputObject                               SideIndicator\r\n-----------                               -------------\r\n                                          =>           \r\n    if n <=3:                             =>           \r\n        return n                          =>           \r\n    else:                                 =>           \r\n        a,b,c=3,2,1                       =>           \r\n        while n > 3:                      =>           \r\n            a,b,c=a + 2*b + 3*c, a, b     =>           \r\n            n -=1                         =>           \r\n        return a                          =>           \r\n    total=0                               <=           \r\n    k=n                                   <=           \r\n    while k>=n:                           <=           \r\n        if k<=3:                          <=           \r\n            return k                      <=           \r\n        else:                             <=           \r\n            total+= (k-1)+2*(k-2)+3*(k-3) <=           \r\n        k-=1                              <=           \r\n    return total                          <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total=0\n    k=n\n    while k>=n:\n        if k<=3:\n            return k\n        else:\n            total+= (k-1)+2*(k-2)+3*(k-3)\n        k-=1\n    return total \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n    if n <=3:\n        return n\n    else:\n        a,b,c=3,2,1\n        while n > 3:\n            a,b,c=a + 2*b + 3*c, a, b\n            n -=1\n        return a \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","16","","# Error: expected","#     22","# but got","#     16","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":441,"studentId":0,"date":null,"diff":"\r\nInputObject  SideIndicator\r\n-----------  -------------\r\n    if n<=3: =>           \r\n    if n<3:  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i, total = 3, 0\n    x1, x2, x3 = 3, 2, 1\n    if n<3:\n        return n\n    while i<n:\n        total = x1 + 2*x2 + 3*x3\n        x1, x2, x3 = total, x1, x2\n        i += 1\n    return total\n\n\n\n\n    \"\"\"if n<=3:\n        return n\n    \n    while i<=n:\n        x1, x2, x3 = n-1, n-2, n-3\n        total += x1 + 2*x2 + 3*x3\n        n -= 1\n    return total\n\n    i, total = 4, 0\n    if n<=3:\n        return n\n    \n    while i<=n:\n        x1, x2, x3 = n-1, n-2, n-3\n        total += x1 + 2*x2 + 3*x3\n        n -= 1\n    return total\"\"\"\n\n\n\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i, total = 3, 0\n    x1, x2, x3 = 3, 2, 1\n    if n<=3:\n        return n\n    while i<n:\n        total = x1 + 2*x2 + 3*x3\n        x1, x2, x3 = total, x1, x2\n        i += 1\n    return total\n\n\n\n\n    \"\"\"if n<=3:\n        return n\n    \n    while i<=n:\n        x1, x2, x3 = n-1, n-2, n-3\n        total += x1 + 2*x2 + 3*x3\n        n -= 1\n    return total\n\n    i, total = 4, 0\n    if n<=3:\n        return n\n    \n    while i<=n:\n        x1, x2, x3 = n-1, n-2, n-3\n        total += x1 + 2*x2 + 3*x3\n        n -= 1\n    return total\"\"\"\n\n\n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","0","","# Error: expected","#     3","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":442,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n    return values[-1] =>           \r\n    return value[-1]  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n\n    total = 0\n    values = [0, 1, 2, 3]\n    for x in range(4, n+1):\n        total = values[x-1] + 2*values[x-2] + 3*values[x-3]\n        values.append(total)\n    return value[-1]\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n\n    total = 0\n    values = [0, 1, 2, 3]\n    for x in range(4, n+1):\n        total = values[x-1] + 2*values[x-2] + 3*values[x-3]\n        values.append(total)\n    return values[-1]\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 218, in g_iter","    return value[-1]","NameError: name 'value' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":443,"studentId":0,"date":null,"diff":"\r\nInputObject    SideIndicator\r\n-----------    -------------\r\n        i += 1 =>           \r\n               <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    \n    \n\n    n_one = 1\n    n_two = 2\n    n_three = 3\n    result = n_three\n    i = 4 \n    while i<=n:\n        result = n_three + 2*n_two + 3*n_one\n        n_one = n_two\n        n_two = n_three\n        n_three = result\n            \n    return result\n\n           \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    \n    \n\n    n_one = 1\n    n_two = 2\n    n_three = 3\n    result = n_three\n    i = 4 \n    while i<=n:\n        result = n_three + 2*n_two + 3*n_one\n        n_one = n_two\n        n_two = n_three\n        n_three = result\n        i += 1\n    return result\n\n           \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     10","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":446,"studentId":0,"date":null,"diff":"\r\nInputObject                                                  SideIndicator\r\n-----------                                                  -------------\r\n    count, total, first, second, third = 3, 0, 1,2,3         =>           \r\n        total = third + 2 * second + 3 * first               =>           \r\n        third, second, first= total, third, second           =>           \r\n    return total                                             =>           \r\n    count, first, second, third = 3, 1,2,3                   <=           \r\n        now = count * first + count * second + count * third <=           \r\n        first, second, third = second, third, now            <=           \r\n    return now                                               <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n==1 or n==2 or n==3:\n        return n\n    count, first, second, third = 3, 1,2,3\n    while count < n:\n        now = count * first + count * second + count * third\n        first, second, third = second, third, now\n        count+=1\n    return now\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n==1 or n==2 or n==3:\n        return n\n    count, total, first, second, third = 3, 0, 1,2,3\n    while count < n:\n        total = third + 2 * second + 3 * first\n        third, second, first= total, third, second\n        count+=1\n    return total\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","18","","# Error: expected","#     10","# but got","#     18","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":447,"studentId":0,"date":null,"diff":"\r\nInputObject                               SideIndicator\r\n-----------                               -------------\r\n            a, b, c = b, c, c + 2*b + 3*a =>           \r\n            a = b                         <=           \r\n            b = c                         <=           \r\n            c = c + 2*b + 3*a             <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    # if n == 1 or n == 2 or n == 3:\n    #     return n\n    # a, b, c = 1, 2, 3\n    # while n > 3:\n    #     a, b, c = b, c, c + 2*b + 3*a\n    #     n = n - 1\n    # return c  \n\n    if n == 1 or n == 2 or n == 3:\n        return n\n    else: \n        a = 1\n        b = 2\n        c = 3\n        while n > 3:\n            a = b\n            b = c\n            c = c + 2*b + 3*a\n            n = n - 1\n        return c\n\n\n\n    # x = 1\n    # y = 2\n    # z = 3\n\n    # if n == 1 or n == 2 or n == 3:\n    #     return n\n    # while n > 3:\n    #     x = y\n    #     y = z\n    #     z = z + 2*y + 3*x\n    #     n = n - 1\n    # return z\n\n\n#========================QUESTION 6========================\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    # if n == 1 or n == 2 or n == 3:\n    #     return n\n    # a, b, c = 1, 2, 3\n    # while n > 3:\n    #     a, b, c = b, c, c + 2*b + 3*a\n    #     n = n - 1\n    # return c  \n\n    if n == 1 or n == 2 or n == 3:\n        return n\n    else: \n        a = 1\n        b = 2\n        c = 3\n        while n > 3:\n            a, b, c = b, c, c + 2*b + 3*a\n            n = n - 1\n        return c\n\n\n\n    # x = 1\n    # y = 2\n    # z = 3\n\n    # if n == 1 or n == 2 or n == 3:\n    #     return n\n    # while n > 3:\n    #     x = y\n    #     y = z\n    #     z = z + 2*y + 3*x\n    #     n = n - 1\n    # return z\n\n\n#========================QUESTION 6========================\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","15","","# Error: expected","#     10","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":450,"studentId":0,"date":null,"diff":"\r\nInputObject                          SideIndicator\r\n-----------                          -------------\r\n        a, b, c =b, c, c + 2*b + 3*a =>           \r\n        a = b                        <=           \r\n        b = c                        <=           \r\n        c = c + 2*b + 3*a            <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    # total = 0\n    # while n > 0:\n    #     total += n\n    #     if n < 4:\n    #         return n\n    #     else:\n    #         return \n    # return total\n    if n < 4:\n        return n\n    a = 1\n    b = 2\n    c = 3\n    while n > 3:\n        a = b\n        b = c\n        c = c + 2*b + 3*a\n        n = n - 1\n    return c\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    # total = 0\n    # while n > 0:\n    #     total += n\n    #     if n < 4:\n    #         return n\n    #     else:\n    #         return \n    # return total\n    if n < 4:\n        return n\n    a = 1\n    b = 2\n    c = 3\n    while n > 3:\n        a, b, c =b, c, c + 2*b + 3*a\n        n = n - 1\n    return c\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","15","","# Error: expected","#     10","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":451,"studentId":0,"date":null,"diff":"\r\nInputObject                                       SideIndicator\r\n-----------                                       -------------\r\n        g1, g2, g3 = g2, g3, g3 + 2 * g2 + 3 * g1 =>           \r\n        g3 = g3 + 2 * g2 + 3 * g1                 <=           \r\n        g1 = g2                                   <=           \r\n        g2 = g3                                   <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    g1 = 1\n    g2 = 2\n    g3 = 3\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    while n > 3:\n        g3 = g3 + 2 * g2 + 3 * g1\n        g1 = g2\n        g2 = g3\n        n -= 1\n    return g3\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    g1 = 1\n    g2 = 2\n    g3 = 3\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    while n > 3:\n        g1, g2, g3 = g2, g3, g3 + 2 * g2 + 3 * g1\n        n -= 1\n    return g3\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","36","","# Error: expected","#     22","# but got","#     36","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":452,"studentId":0,"date":null,"diff":"\r\nInputObject                                                              SideIndicator\r\n-----------                                                              -------------\r\n    return accumulate(combiner, base, n if pred(term(n)) else n-1, term) =>           \r\n        tracker = 3                                                      =>           \r\n    return accumulate(combiner, base, n if pred(term(n)) else n+1, term) <=           \r\n        tracker = 4                                                      <=           \r\n                                                                         <=           \r\n                                                                         <=           \r\n                                                                         <=           \r\n                                                                         <=           \r\n                                                                         <=           \r\n                                                                         <=           \r\n                                                                         <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n    if n<= 3:\n        return n\n    elif n > 3:\n        a, b, c = 3, 2, 1\n        tracker = 4\n        while tracker != n:\n            a, b, c = a + 2*b + 3*c, a, b\n            tracker +=1\n    return a\n\n    \n        \n\n\n\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n    if n<= 3:\n        return n\n    elif n > 3:\n        a, b, c = 3, 2, 1\n        tracker = 3\n        while tracker != n:\n            a, b, c = a + 2*b + 3*c, a, b\n            tracker +=1\n    return a\n\n    \n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","3","","# Error: expected","#     10","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":453,"studentId":0,"date":null,"diff":"\r\nInputObject            SideIndicator\r\n-----------            -------------\r\n        while i < n:   =>           \r\n        while i <= n:  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a,b,c = 3,2,1\n    total = a + 2*b + 3*c\n    i = 4\n    if n <= 3:\n        return n \n    else:\n        while i <= n: \n            a,b,c = total, a, b\n            total = a + 2*b + 3*c\n            i = i+1\n        return total \n\n\n\n\n        \n    \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a,b,c = 3,2,1\n    total = a + 2*b + 3*c\n    i = 4\n    if n <= 3:\n        return n \n    else:\n        while i < n: \n            a,b,c = total, a, b\n            total = a + 2*b + 3*c\n            i = i+1\n        return total \n\n\n\n\n        \n    \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","22","","# Error: expected","#     10","# but got","#     22","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":455,"studentId":0,"date":null,"diff":"\r\nInputObject                                                             SideIndicator\r\n-----------                                                             -------------\r\n    x = 1                                                               =>           \r\n    y = 2                                                               =>           \r\n    z = 3                                                               =>           \r\n    while n>3:                                                          =>           \r\n        x, y, z = y, z, z + 2*y + 3*x                                   =>           \r\n        n = n-1                                                         =>           \r\n    return z                                                            =>           \r\n                                                                        =>           \r\n        return has_seven(k // 10)                                       =>           \r\n\"\"\"                                                                     =>           \r\n    if n <8:                                                            =>           \r\n        return n                                                        =>           \r\n    elif n<14:                                                          =>           \r\n        return n - 2 * (n-last_seven(n))                                =>           \r\n                                                                        =>           \r\n    if numofsev(n)%2 ==0:                                               =>           \r\n       return pingpong(n - (last_seven(n)-last_seven(last_seven(n)-1))) =>           \r\n    else:                                                               =>           \r\n       return pingpong(n+ (last_seven(n)-last_seven(last_seven(n)-1)))  =>           \r\ndef last_seven(num):                                                    =>           \r\n    if num < 7:                                                         =>           \r\n        return num                                                      =>           \r\n    if has_seven(num) == True or num%7 == 0:                            =>           \r\n        return num                                                      =>           \r\n    else:                                                               =>           \r\n        return last_seven(num-1)                                        =>           \r\n        4                                                               =>           \r\n                                                                        =>           \r\ndef numofsev(s):                                                        =>           \r\n    listsev = 0                                                         =>           \r\n    for num in range (1,s):                                             =>           \r\n        if has_seven(num) == True or num%7 ==0:                         =>           \r\n            listsev += 1                                                =>           \r\n    return listsev                                                      =>           \r\n                                                                        =>           \r\n                                                                        =>           \r\ndef numofsev(s):                                                        =>           \r\n    listsev = 0                                                         =>           \r\n    for num in range (1,s):                                             =>           \r\n        if has_seven(num) == True or num%7 ==0:                         =>           \r\n            listsev += 1                                                =>           \r\n            print (num)                                                 =>           \r\n    return listsev                                                      =>           \r\n                                                                        =>           \r\n\"\"\"                                                                     =>           \r\n                                                                        =>           \r\n                                                                        =>           \r\n                                                                        =>           \r\n                                                                        =>           \r\n                                                                        =>           \r\n                                                                        =>           \r\n                                                                        =>           \r\n                                                                        =>           \r\n                                                                        =>           \r\n                                                                        =>           \r\n                                                                        =>           \r\n                                                                        =>           \r\n                                                                        =>           \r\n                                                                        =>           \r\n                                                                        =>           \r\n                                                                        =>           \r\n                                                                        =>           \r\n                                                                        =>           \r\n    total = 0                                                           <=           \r\n    if n >3:                                                            <=           \r\n        while n > 3:                                                    <=           \r\n            if n-1 < 4:                                                 <=           \r\n                total += n-1                                            <=           \r\n                total += 2(n-2)                                         <=           \r\n                total += 3(n-3)                                         <=           \r\n            elif n-2 < 4:                                               <=           \r\n                total += 2(n-2)                                         <=           \r\n                total += 3(n-3)                                         <=           \r\n                n = n-1                                                 <=           \r\n            elif n-3 <4:                                                <=           \r\n                total += 3(n-3)                                         <=           \r\n                n = n-1                                                 <=           \r\n            else:                                                       <=           \r\n                n = n-1                                                 <=           \r\n        return has_seven(k // 10)                                       <=           \r\n    \"*** YOUR CODE HERE ***\"                                            <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <=3:\n        return n\n    total = 0\n    if n >3:\n        while n > 3:\n            if n-1 < 4:\n                total += n-1\n                total += 2(n-2)\n                total += 3(n-3)\n            elif n-2 < 4:\n                total += 2(n-2)\n                total += 3(n-3)\n                n = n-1\n            elif n-3 <4:\n                total += 3(n-3)\n                n = n-1\n            else:\n                n = n-1 \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <=3:\n        return n\n    x = 1\n    y = 2\n    z = 3\n    while n>3:\n        x, y, z = y, z, z + 2*y + 3*x\n        n = n-1\n    return z\n\n        \n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","15","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 221, in g_iter","    total += 2(n-2)","TypeError: 'int' object is not callable","","# Error: expected","#     10","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":456,"studentId":0,"date":null,"diff":"\r\nInputObject                               SideIndicator\r\n-----------                               -------------\r\n    a, b, c = 1, 2, 3                     =>           \r\n    while n > 3:                          =>           \r\n        a, b, c = b, c, c + 2 * b + 3 * a =>           \r\n        n -= 1                            =>           \r\n    return c                              =>           \r\n                                          =>           \r\n    i, g, m = 1, 0, n                     <=           \r\n    while i < 4:                          <=           \r\n        while m > 3:                      <=           \r\n            g += i * (m - i)              <=           \r\n            m -= 1                        <=           \r\n        while m < 3 and m > 0:            <=           \r\n            g += m                        <=           \r\n        i += 1                            <=           \r\n    return g                              <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    i, g, m = 1, 0, n\n    if n <= 3:\n        return n\n    while i < 4:\n        while m > 3:\n            g += i * (m - i)\n            m -= 1\n        while m < 3 and m > 0:\n            g += m\n        i += 1\n    return g\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    a, b, c = 1, 2, 3\n    while n > 3:\n        a, b, c = b, c, c + 2 * b + 3 * a\n        n -= 1\n    return c\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","3","","# Error: expected","#     10","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":457,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n    while current < n:  =>           \r\n    while current <= n: <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    current = 3\n    first = 1\n    second = 2\n    third = 3\n\n    if n <= 3:\n        return n\n\n    while current <= n:\n        current += 1\n        temp = third + 2 * second + 3 * first\n        first = second\n        second = third\n        third = temp\n    return third\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    current = 3\n    first = 1\n    second = 2\n    third = 3\n\n    if n <= 3:\n        return n\n\n    while current < n:\n        current += 1\n        temp = third + 2 * second + 3 * first\n        first = second\n        second = third\n        third = temp\n    return third\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","22","","# Error: expected","#     10","# but got","#     22","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":458,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n        print(next_g) <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    x=1\n    y=2\n    z=3\n    while n>3:\n        next_g=z+2*y+3*x\n        x=y\n        y=z\n        z=next_g\n        n=n-1\n        print(next_g)\n    return next_g\n        \n        \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    x=1\n    y=2\n    z=3\n    while n>3:\n        next_g=z+2*y+3*x\n        x=y\n        y=z\n        z=next_g\n        n=n-1\n    return next_g\n        \n        \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10","10","","# Error: expected","#     10","# but got","#     10","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":459,"studentId":0,"date":null,"diff":"","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    total = 3\n    first, second, third = 1, 2, 3\n    n -= 3\n    while n > 0:\n        total += 2 * second + 3 * first\n        third = total\n        first, second, third = second, third, total\n        n -= 1\n    return total\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    total = 3\n    first, second, third = 1, 2, 3\n    n -= 3\n    while n > 0:\n        total += 2 * second + 3 * first\n        first, second, third = second, third, total\n        third = total\n        n -= 1\n    return total\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","36","","# Error: expected","#     22","# but got","#     36","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":461,"studentId":0,"date":null,"diff":"\r\nInputObject                     SideIndicator\r\n-----------                     -------------\r\n        total = total + value*k =>           \r\n        total = value*k         <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n    if n < 4:\n        return n\n    k = 3\n    total = 0\n    for i in range(n-3, n):\n        value = 0\n        if i < 4:\n            value = i\n        else:\n            f = 3\n            for y in range(i-3, i):\n                value = value + y*f\n                f = f-1\n        total = value*k\n        k= k-1\n    return total\n\n        \n\n\n\n\n\n\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n    if n < 4:\n        return n\n    k = 3\n    total = 0\n    for i in range(n-3, n):\n        value = 0\n        if i < 4:\n            value = i\n        else:\n            f = 3\n            for y in range(i-3, i):\n                value = value + y*f\n                f = f-1\n        total = total + value*k\n        k= k-1\n    return total\n\n        \n\n\n\n\n\n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","3","","# Error: expected","#     10","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":462,"studentId":0,"date":null,"diff":"\r\nInputObject                                   SideIndicator\r\n-----------                                   -------------\r\n    if n <= 3:                                =>           \r\n        return n                              =>           \r\n        x1, x2, x3 = 1, 2, 3                  =>           \r\n        i, total = 4, 0                       =>           \r\n        while i <= n:                         =>           \r\n            total = x3 + 2*x2 + 3*x1          =>           \r\n            x1, x2, x3 = x2, x3, total        =>           \r\n            i += 1                            =>           \r\n        return total                          =>           \r\n    else:                                     =>           \r\n    total, i = 0, 1                           <=           \r\n    while i <= n:                             <=           \r\n        if i <= 3:                            <=           \r\n            total = i                         <=           \r\n        else:                                 <=           \r\n            total = (i-1) + 2*(i-2) + 3*(i-3) <=           \r\n        i += 1                                <=           \r\n    return total                              <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total, i = 0, 1\n    while i <= n:\n        if i <= 3:\n            total = i\n        else:\n            total = (i-1) + 2*(i-2) + 3*(i-3)\n        i += 1\n    return total\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        x1, x2, x3 = 1, 2, 3\n        i, total = 4, 0\n        while i <= n:\n            total = x3 + 2*x2 + 3*x1\n            x1, x2, x3 = x2, x3, total\n            i += 1\n        return total\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","16","","# Error: expected","#     22","# but got","#     16","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":463,"studentId":0,"date":null,"diff":"\r\nInputObject                      SideIndicator\r\n-----------                      -------------\r\n        total = (m + 2*n + 3*o)  =>           \r\n        total += (m + 2*n + 3*o) <=           \r\n\r\n\r\n","before":"def g_iter(t):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total = 0\n    m,n,o,last_time = 0,0,0,0\n    if t <=3:\n            total = t\n    for i in range(4,t+1):\n        last_time = (m + 2*n + 3*o)\n        if i == 4:\n            m,n,o, = 3,2,1\n        else: \n            m, n, o = last_time,m,n\n        total += (m + 2*n + 3*o)\n    return total\n\n","after":"def g_iter(t):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total = 0\n    m,n,o,last_time = 0,0,0,0\n    if t <=3:\n            total = t\n    for i in range(4,t+1):\n        last_time = (m + 2*n + 3*o)\n        if i == 4:\n            m,n,o, = 3,2,1\n        else: \n            m, n, o = last_time,m,n\n        total = (m + 2*n + 3*o)\n    return total\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","32","","# Error: expected","#     22","# but got","#     32","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":464,"studentId":0,"date":null,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n    if n <=3:    =>           \r\n        return n =>           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    previous, current, next, next1 = 2, 3, 10, 22\n    while n > 3:\n        previous, current, next, next1 = current, next, next+2*current+3*previous, next1+2*next+3*current\n        n = n - 1\n    return current\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <=3:\n        return n\n    previous, current, next, next1 = 2, 3, 10, 22\n    while n > 3:\n        previous, current, next, next1 = current, next, next+2*current+3*previous, next1+2*next+3*current\n        n = n - 1\n    return current\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","3","","# Error: expected","#     1","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":465,"studentId":0,"date":null,"diff":"\r\nInputObject                 SideIndicator\r\n-----------                 -------------\r\n    for i in range(4, n+1): =>           \r\n    for i in range(3, n+1): <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    first  = 1\n    second = 2\n    third = 3\n    for i in range(3, n+1):\n        third, second, first = third + 2*second + 3*first, third, second\n    return third\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    first  = 1\n    second = 2\n    third = 3\n    for i in range(4, n+1):\n        third, second, first = third + 2*second + 3*first, third, second\n    return third\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","22","","# Error: expected","#     10","# but got","#     22","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":467,"studentId":0,"date":null,"diff":"\r\nInputObject                          SideIndicator\r\n-----------                          -------------\r\n        b1, b2, b3 = b2, b3, current =>           \r\n        b1, b2, b3 = b2, b1, current <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    i = 4\n    current = 0\n    b1, b2, b3, = 1, 2, 3\n    while i <= n:\n        current = b3 + 2 * b2 + 3 * b1\n        b1, b2, b3 = b2, b1, current\n        i = i + 1\n    return current\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    i = 4\n    current = 0\n    b1, b2, b3, = 1, 2, 3\n    while i <= n:\n        current = b3 + 2 * b2 + 3 * b1\n        b1, b2, b3 = b2, b3, current\n        i = i + 1\n    return current\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","18","","# Error: expected","#     22","# but got","#     18","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":468,"studentId":0,"date":null,"diff":"\r\nInputObject                                      SideIndicator\r\n-----------                                      -------------\r\n        x, y, z = x + y + z, 2 * x, (3 * y) // 2 =>           \r\n        x, y, z = x + y + z, 2 * x, 3/2 * y      <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    counter = n\n    x = 1*3\n    y = 2*2\n    z = 3*1\n    if counter <= 3:\n        return n\n    while counter > 3:\n        counter -= 1\n        x, y, z = x + y + z, 2 * x, 3/2 * y\n    return x \n\n\n    #or maybe counter = n and count down or counter 1 and count up\n\n        \n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    counter = n\n    x = 1*3\n    y = 2*2\n    z = 3*1\n    if counter <= 3:\n        return n\n    while counter > 3:\n        counter -= 1\n        x, y, z = x + y + z, 2 * x, (3 * y) // 2\n    return x \n\n\n    #or maybe counter = n and count down or counter 1 and count up\n\n        \n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","22.0","","# Error: expected","#     22","# but got","#     22.0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":469,"studentId":0,"date":null,"diff":"\r\nInputObject                                         SideIndicator\r\n-----------                                         -------------\r\n    total = n                                       =>           \r\n    first, second, third = 1,2,3                    =>           \r\n    while n>3:                                      =>           \r\n        total = 3*first + 2*second + third          =>           \r\n        first, second, third = second, third, total =>           \r\n        n-=1                                        =>           \r\n                                                    =>           \r\n    count = 1                                       <=           \r\n    total = 0                                       <=           \r\n    while 3 < n:                                    <=           \r\n        for x in range(1,4):                        <=           \r\n            if n-x > 3:                             <=           \r\n                total += x*(n-x)                    <=           \r\n                total += n                          <=           \r\n        n -= 1                                      <=           \r\n    total += n                                      <=           \r\n            else:                                   <=           \r\n    coins = []                                      <=           \r\n    while 2**n <= amount:                           <=           \r\n        coins.append((2**n))                        <=           \r\n        n += 1                                      <=           \r\n                                                    <=           \r\n                                                    <=           \r\n                                                    <=           \r\n                                                    <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count = 1\n    total = 0\n\n    while 3 < n:\n        for x in range(1,4):\n            if n-x > 3:\n                total += x*(n-x)\n            else:\n                total += n\n        n -= 1\n    total += n\n    return total\n\n    \n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = n\n    first, second, third = 1,2,3\n    while n>3:\n        total = 3*first + 2*second + third\n        first, second, third = second, third, total\n        n-=1\n    return total\n\t\n    \n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","15","","# Error: expected","#     10","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":470,"studentId":0,"date":null,"diff":"\r\nInputObject         SideIndicator\r\n-----------         -------------\r\n    return i_minus1 =>           \r\n    return i        <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<= 3:\n        return n\n    k_minus3,g_minus2,i_minus1 = 1,2,3\n    while n>3:\n        k_minus3,g_minus2,i_minus1 = g_minus2,i_minus1,(i_minus1 + 2*g_minus2 + 3*k_minus3)\n        n -= 1\n    return i\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<= 3:\n        return n\n    k_minus3,g_minus2,i_minus1 = 1,2,3\n    while n>3:\n        k_minus3,g_minus2,i_minus1 = g_minus2,i_minus1,(i_minus1 + 2*g_minus2 + 3*k_minus3)\n        n -= 1\n    return i_minus1\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 226, in g_iter","    return i","NameError: name 'i' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":471,"studentId":0,"date":null,"diff":"\r\nInputObject                   SideIndicator\r\n-----------                   -------------\r\n    one,two,three=3, 2, 1     =>           \r\n    one,two,three=n-1,n-2,n-3 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    one,two,three=n-1,n-2,n-3\n    if n<=3:\n        return n\n    else:\n        for x in range(4,n):\n            one, two, three = one + 2*two + 3*three, one, two\n        return one+(2*two)+(3*three)\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    one,two,three=3, 2, 1\n    if n<=3:\n        return n\n    else:\n        for x in range(4,n):\n            one, two, three = one + 2*two + 3*three, one, two\n        return one+(2*two)+(3*three)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","33","","# Error: expected","#     22","# but got","#     33","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":472,"studentId":0,"date":null,"diff":"\r\nInputObject                      SideIndicator\r\n-----------                      -------------\r\n                                 =>           \r\n                                 =>           \r\n                                 =>           \r\n        print(total)             <=           \r\n                print(total)     <=           \r\n                    print(total) <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    total, i = 0, 1\n\n    if n<=3:\n        total = total + n\n        print(total)\n\n    else:\n        while i<=3:\n\n            if n-i<=3:\n                total = total+(i * (n-i))\n                print(total)\n            else:\n                for k in range(1,4):\n                    total = total + (k * (n-1-k))\n                    print(total)\n            i+=1\n\n \n\n    return total\n        \n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    total, i = 0, 1\n\n    if n<=3:\n        total = total + n\n   \n\n    else:\n        while i<=3:\n\n            if n-i<=3:\n                total = total+(i * (n-i))\n     \n            else:\n                for k in range(1,4):\n                    total = total + (k * (n-1-k))\n              \n            i+=1\n\n \n\n    return total\n        \n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1","1","","# Error: expected","#     1","# but got","#     1","#     1","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":473,"studentId":0,"date":null,"diff":"\r\nInputObject                               SideIndicator\r\n-----------                               -------------\r\n        x, y, z = y, z, z + 2 * y + 3 * x =>           \r\n        x = y, z, z + 2 * y + 3 * x       <=           \r\n        y = y, z, z + 2 * y + 3 * x       <=           \r\n        z = y, z, z + 2 * y + 3 * x       <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n == 1 or n == 2 or n == 3:\n        return n\n    x = 1\n    y = 2\n    z = 3\n    while n > 3:\n        x = y, z, z + 2 * y + 3 * x\n        y = y, z, z + 2 * y + 3 * x\n        z = y, z, z + 2 * y + 3 * x\n        n = n - 1\n    return z\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n == 1 or n == 2 or n == 3:\n        return n\n    x = 1\n    y = 2\n    z = 3\n    while n > 3:\n        x, y, z = y, z, z + 2 * y + 3 * x\n        n = n - 1\n    return z\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 238, in g_iter","    y = y, z, z + 2 * y + 3 * x","TypeError: unsupported operand type(s) for +: 'int' and 'tuple'","","# Error: expected","#     10","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":474,"studentId":0,"date":null,"diff":"\r\nInputObject                            SideIndicator\r\n-----------                            -------------\r\n        first, second, third = 3, 2, 1 =>           \r\n        first, second, third = 1, 2, 3 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        first, second, third = 1, 2, 3\n        i = 3\n        while i < n:\n            first, second, third = first + 2*second + 3*third, first, second\n            i += 1\n        return first\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        first, second, third = 3, 2, 1\n        i = 3\n        while i < n:\n            first, second, third = first + 2*second + 3*third, first, second\n            i += 1\n        return first\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","14","","# Error: expected","#     10","# but got","#     14","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":475,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n    x, y, z = 3, 2, 1                       =>           \r\n        y += 1                              =>           \r\n        z += 1                              =>           \r\n    total, x, y, z, a, b = 0, 3, 2, 1, 2, 1 <=           \r\n        y = 2 * (a + 1)                     <=           \r\n        z = 3 * (b + 1)                     <=           \r\n        a += 1                              <=           \r\n        b += 1                              <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total, x, y, z, a, b = 0, 3, 2, 1, 2, 1\n    if n <= 3:\n        return n\n    while n > 3:\n        x = x + y * 2 + z * 3\n        y = 2 * (a + 1)\n        z = 3 * (b + 1)\n        a += 1\n        b += 1\n        n -= 1\n    return x\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    x, y, z = 3, 2, 1\n    if n <= 3:\n        return n\n    while n > 3:\n        x = x + y * 2 + z * 3\n        y += 1\n        z += 1\n        n -= 1\n    return x\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","40","","# Error: expected","#     22","# but got","#     40","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":476,"studentId":0,"date":null,"diff":"\r\nInputObject    SideIndicator\r\n-----------    -------------\r\n        k += 1 =>           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    curr, back, backtwo = 3, 2, 1\n    k = 3\n    while k < n:\n        curr, back, backtwo = curr + 2 * back + 3 * backtwo, curr, back\n    return curr\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    curr, back, backtwo = 3, 2, 1\n    k = 3\n    while k < n:\n        curr, back, backtwo = curr + 2 * back + 3 * backtwo, curr, back\n        k += 1\n    return curr\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     10","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":477,"studentId":0,"date":null,"diff":"\r\nInputObject     SideIndicator\r\n-----------     -------------\r\n    a,b,c=1,2,3 =>           \r\n                =>           \r\n    a,b,c=0,1,2 <=           \r\n                <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n \n    a,b,c=0,1,2\n    for i in range(3,n):\n        a,b,c=b,c,(a*3+b*2+c)\n    return c \n    \n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n \n    a,b,c=1,2,3\n    for i in range(3,n):\n        a,b,c=b,c,(a*3+b*2+c)\n    return c \n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","4","","# Error: expected","#     10","# but got","#     4","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":478,"studentId":0,"date":null,"diff":"\r\nInputObject                                                               SideIndicator\r\n-----------                                                               -------------\r\n            last, before_last, b_before_last = present, last, before_last =>           \r\n            last = present                                                <=           \r\n            before_last = last                                            <=           \r\n            b_before_last = before_last                                   <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n    if n <= 3:\n        return n\n    else:\n        last = 3\n        before_last = 2 \n        b_before_last = 1\n\n        for i in range(n-3):\n            present = last + 2 * before_last + 3 * b_before_last\n            last = present\n            before_last = last\n            b_before_last = before_last\n\n        return present\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n    if n <= 3:\n        return n\n    else:\n        last = 3\n        before_last = 2 \n        b_before_last = 1\n\n        for i in range(n-3):\n            present = last + 2 * before_last + 3 * b_before_last\n            last, before_last, b_before_last = present, last, before_last\n\n        return present\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","60","","# Error: expected","#     22","# but got","#     60","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":479,"studentId":0,"date":null,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n    return c     =>           \r\n        return c <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a=1\n    b=2\n    c=3\n    if n<= 3 :\n        return n\n    while n>3:\n        a,b,c=b,c,3*a+2*b+c\n        n=n-1\n        return c\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a=1\n    b=2\n    c=3\n    if n<= 3 :\n        return n\n    while n>3:\n        a,b,c=b,c,3*a+2*b+c\n        n=n-1\n    return c\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","10","","# Error: expected","#     22","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":480,"studentId":0,"date":null,"diff":"\r\nInputObject                                   SideIndicator\r\n-----------                                   -------------\r\n        x, y, z = y, z, (3 * x) + (2 * y) + z =>           \r\n        x = y                                 <=           \r\n        y = z                                 <=           \r\n        z = (3 * x) + (2 * y) + z             <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    x, y, z = 1, 2, 3\n    while n > 3:\n        x = y\n        y = z\n        z = (3 * x) + (2 * y) + z\n        n = n - 1\n    return z\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    x, y, z = 1, 2, 3\n    while n > 3:\n        x, y, z = y, z, (3 * x) + (2 * y) + z\n        n = n - 1\n    return z\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","15","","# Error: expected","#     10","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":482,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n    num1, num2, num3 = 3, 2, 1                 =>           \r\n        current = num1 + 2 * num2 + 3 * num3   =>           \r\n        num1, num2, num3 = current, num1, num2 =>           \r\n    p1, p2, p3 = 3, 2, 1                       <=           \r\n        current = p1 + p2 * p2 + p3 * p3       <=           \r\n        p1, p2, p3 = current, p1, p2           <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n\n    p1, p2, p3 = 3, 2, 1\n    i, current = 4, 0\n    while i <= n:\n        current = p1 + p2 * p2 + p3 * p3\n        p1, p2, p3 = current, p1, p2\n        i += 1\n\n    return current\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n\n    num1, num2, num3 = 3, 2, 1\n    i, current = 4, 0\n    while i <= n:\n        current = num1 + 2 * num2 + 3 * num3\n        num1, num2, num3 = current, num1, num2\n        i += 1\n\n    return current\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","8","","# Error: expected","#     10","# but got","#     8","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":483,"studentId":0,"date":null,"diff":"\r\nInputObject                   SideIndicator\r\n-----------                   -------------\r\n        n4 = n3 + 2*n2 + 3*n1 =>           \r\n        n4 = n1 + 2*n2 + 3*n3 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    n1 = 1\n    n2 = 2\n    n3 = 3\n    n4 = 0\n    i = 4\n    if n <= 3:\n        return n\n    while i <= n:\n        n4 = n1 + 2*n2 + 3*n3\n        n1, n2, n3 = n2, n3, n4\n        i+=1\n    return n3\n\n\n    # if n <= 3:\n    #     return n\n    # total = 0\n    # i = 3\n    # for x in range(n-3, n):\n    #     if x<=3:\n    #         total += i * x\n    #     else:\n    #         j = 3\n    #         for num in range(x-3, x):\n    #             if num<=3:\n    #                 total += j * num\n    #             j -= 1\n    #     i -= 1\n    # return total\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    n1 = 1\n    n2 = 2\n    n3 = 3\n    n4 = 0\n    i = 4\n    if n <= 3:\n        return n\n    while i <= n:\n        n4 = n3 + 2*n2 + 3*n1\n        n1, n2, n3 = n2, n3, n4\n        i+=1\n    return n3\n\n\n    # if n <= 3:\n    #     return n\n    # total = 0\n    # i = 3\n    # for x in range(n-3, n):\n    #     if x<=3:\n    #         total += i * x\n    #     else:\n    #         j = 3\n    #         for num in range(x-3, x):\n    #             if num<=3:\n    #                 total += j * num\n    #             j -= 1\n    #     i -= 1\n    # return total\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","14","","# Error: expected","#     10","# but got","#     14","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":484,"studentId":0,"date":null,"diff":"\r\nInputObject                                   SideIndicator\r\n-----------                                   -------------\r\n            valueG = (x) + (2*(y)) + (3*(z))  =>           \r\n            valueG += (x) + (2*(y)) + (3*(z)) <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i = 4\n    valueG = 0\n    x = 3 #represents n - 1\n    y = 2 #represents n - 2\n    z = 1 #represents n - 3\n    if n <= 3:\n        return n\n    else:\n        while i <= n:\n            valueG += (x) + (2*(y)) + (3*(z))\n        #print (valueG)\n            z = y\n            y = x\n            x = valueG\n            i += 1\n        return x\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i = 4\n    valueG = 0\n    x = 3 #represents n - 1\n    y = 2 #represents n - 2\n    z = 1 #represents n - 3\n    if n <= 3:\n        return n\n    else:\n        while i <= n:\n            valueG = (x) + (2*(y)) + (3*(z))\n        #print (valueG)\n            z = y\n            y = x\n            x = valueG\n            i += 1\n        return x\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","32","","# Error: expected","#     22","# but got","#     32","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":486,"studentId":0,"date":null,"diff":"\r\nInputObject                                            SideIndicator\r\n-----------                                            -------------\r\n                    total += (top * ((n-start) - top)) =>           \r\n                    total += (top * (n - top))         <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    endLimit = n-3\n    start = 3\n    if n <= 3:\n        return n\n    else:\n        while start > 0:\n            if n-start > 3:\n                top = 3\n                while top > 0:\n                    total += (top * (n - top))\n                    top -= 1\n            else:\n                total += (start * (n-start))\n            start -= 1\n        return total\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    endLimit = n-3\n    start = 3\n    if n <= 3:\n        return n\n    else:\n        while start > 0:\n            if n-start > 3:\n                top = 3\n                while top > 0:\n                    total += (top * ((n-start) - top))\n                    top -= 1\n            else:\n                total += (start * (n-start))\n            start -= 1\n        return total\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","28","","# Error: expected","#     22","# but got","#     28","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":487,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n    if n <= 3: return n    =>           \r\n    results = [0,1,2,3]    =>           \r\n    for i in range(4,n+1): =>           \r\n    if n < 3: return n     <=           \r\n    results = [0,1,2]      <=           \r\n    for i in range(3,n+1): <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n < 3: return n\n    results = [0,1,2]\n    for i in range(3,n+1):\n        results.append(results[i-1] + 2*results[i-2] + 3*results[i-3])\n    return results[n]\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3: return n\n    results = [0,1,2,3]\n    for i in range(4,n+1):\n        results.append(results[i-1] + 2*results[i-2] + 3*results[i-3])\n    return results[n]\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","4","","# Error: expected","#     3","# but got","#     4","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":488,"studentId":0,"date":null,"diff":"\r\nInputObject                                                 SideIndicator\r\n-----------                                                 -------------\r\n        total += (n-1) + 2*(n-2) + 3*(n-3) - n*(origin - n) =>           \r\n        total += (n-1) + 2*(n-2) + 3(n-3)                   <=           \r\n        total -= n*(origin - n)                             <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    total, origin = 0, n\n    while n > 3:\n        total += (n-1) + 2*(n-2) + 3(n-3)\n        total -= n*(origin - n)\n        n -= 1\n    return total\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    total, origin = 0, n\n    while n > 3:\n        total += (n-1) + 2*(n-2) + 3*(n-3) - n*(origin - n)\n        n -= 1\n    return total\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 211, in g_iter","    total += (n-1) + 2*(n-2) + 3(n-3)","TypeError: 'int' object is not callable","","# Error: expected","#     10","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":489,"studentId":0,"date":null,"diff":"\r\nInputObject                                       SideIndicator\r\n-----------                                       -------------\r\n        g1, g2, g3 = g2, g3, g1 * 3 + g2 * 2 + g3 =>           \r\n        g1, g2 = g2, g3                           <=           \r\n        g3 = g1 * 3 + g2 * 2 + g3                 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    g1 = 1\n    g2 = 2\n    g3 = 3\n    for i in range(4, n + 1):\n        g1, g2 = g2, g3\n        g3 = g1 * 3 + g2 * 2 + g3\n    return g3\n   \n\n    def fib (n): \n        if( n == 0):\n            return 0\n        else:\n            x = 0\n            y = 1\n            for i in range(1,n):\n                z = (x + y)\n                x = y\n                y = z\n                return y\n\n\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    g1 = 1\n    g2 = 2\n    g3 = 3\n    for i in range(4, n + 1):\n        g1, g2, g3 = g2, g3, g1 * 3 + g2 * 2 + g3\n    return g3\n   \n\n    def fib (n): \n        if( n == 0):\n            return 0\n        else:\n            x = 0\n            y = 1\n            for i in range(1,n):\n                z = (x + y)\n                x = y\n                y = z\n                return y\n\n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","15","","# Error: expected","#     10","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":490,"studentId":0,"date":null,"diff":"\r\nInputObject   SideIndicator\r\n-----------   -------------\r\n        i = 3 =>           \r\n        i = n <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \n    if n <= 3:\n        return n\n    else:\n        i = n\n        lst = [1, 2, 3]\n        while i < n:\n            nextterm = ((3*lst[i-3]) + (2*lst[i-2]) + (lst[i-1]))\n            lst.append(nextterm)\n            i += 1\n        return lst[-1]\n   \n    \"\"\"for num in range(1, 4):\n        if num(n-num) > 3:\n            total += num(n-num)\n            print (total)\n        else:\n            total += n\n            print (total)\n        if 2(n-2) > 3:\n            total += 2(n-2)\n        else:\n            total += n\n        if 3(n-3) > 3:\n            total += 3(n-3)\n        else:\n            total += n\n\n     multiplier = 1\n    total = 0\n    if n <= 3:\n        return n        \n\n    while multiplier <= 3:\n        if (n-multiplier) > 3: \n            total += multiplier(n-multiplier)\n        else:\n            total += n\n            print(total)\n        multiplier += 1 \n\n    return total\"\"\"\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \n    if n <= 3:\n        return n\n    else:\n        i = 3\n        lst = [1, 2, 3]\n        while i < n:\n            nextterm = ((3*lst[i-3]) + (2*lst[i-2]) + (lst[i-1]))\n            lst.append(nextterm)\n            i += 1\n        return lst[-1]\n   \n    \"\"\"for num in range(1, 4):\n        if num(n-num) > 3:\n            total += num(n-num)\n            print (total)\n        else:\n            total += n\n            print (total)\n        if 2(n-2) > 3:\n            total += 2(n-2)\n        else:\n            total += n\n        if 3(n-3) > 3:\n            total += 3(n-3)\n        else:\n            total += n\n\n     multiplier = 1\n    total = 0\n    if n <= 3:\n        return n        \n\n    while multiplier <= 3:\n        if (n-multiplier) > 3: \n            total += multiplier(n-multiplier)\n        else:\n            total += n\n            print(total)\n        multiplier += 1 \n\n    return total\"\"\"\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","3","","# Error: expected","#     10","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":491,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        total=a+2*b+3*c =>           \r\n        a=total         =>           \r\n        total+=2*b+3*c  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    count=3\n    a=3\n    b=2\n    c=1\n    total=0\n    while count<n:\n        total+=2*b+3*c\n        count+=1\n        b+=1\n        c+=1\n    return total\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    count=3\n    a=3\n    b=2\n    c=1\n    total=0\n    while count<n:\n        total=a+2*b+3*c\n        a=total\n        count+=1\n        b+=1\n        c+=1\n    return total\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","7","","# Error: expected","#     10","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":492,"studentId":0,"date":null,"diff":"\r\nInputObject                                SideIndicator\r\n-----------                                -------------\r\n    if n == 4:                             =>           \r\n        return 10                          =>           \r\n    if n == 5:                             =>           \r\n        return 22                          =>           \r\n    if n == 6:                             =>           \r\n        return 41                          =>           \r\n    old = 41                               =>           \r\n    older = 22                             =>           \r\n    oldest = 10                            =>           \r\n    z = 7                                  =>           \r\n    while z < n:                           =>           \r\n        new = old + 2 * older + 3 * oldest =>           \r\n        oldest = older                     =>           \r\n        older = old                        =>           \r\n        old = new                          =>           \r\n        z = z + 1                          =>           \r\n    return new                             =>           \r\n                                           =>           \r\n                                           =>           \r\n    return 6*n - 8                         <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    return 6*n - 8\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    if n == 4:\n        return 10\n    if n == 5:\n        return 22\n    if n == 6:\n        return 41\n    old = 41\n    older = 22\n    oldest = 10\n    z = 7\n    while z < n:\n        new = old + 2 * older + 3 * oldest\n        oldest = older\n        older = old\n        old = new\n        z = z + 1\n    return new\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","16","","# Error: expected","#     10","# but got","#     16","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":493,"studentId":0,"date":null,"diff":"\r\nInputObject                                SideIndicator\r\n-----------                                -------------\r\n            total = g3 + 2*g2 + 3*g1       =>           \r\n            total = index*g3 + 2*g2 + 3*g1 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        g1, g2, g3 = 1, 2, 3\n        index, total = n-3, 0\n        while index > 0:\n            total = index*g3 + 2*g2 + 3*g1\n            index -= 1\n            g1, g2, g3 = g2, g3, total\n        return total \n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        g1, g2, g3 = 1, 2, 3\n        index, total = n-3, 0\n        while index > 0:\n            total = g3 + 2*g2 + 3*g1\n            index -= 1\n            g1, g2, g3 = g2, g3, total\n        return total \n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","25","","# Error: expected","#     22","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":494,"studentId":0,"date":null,"diff":"\r\nInputObject         SideIndicator\r\n-----------         -------------\r\n    return round(a) =>           \r\n    return a        <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    a, b, c = -1/3, 1, 2\n    while n > 0:\n        a, b, c = b, c, 3*a + 2*b + c\n        n = n - 1\n    return a\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    a, b, c = -1/3, 1, 2\n    while n > 0:\n        a, b, c = b, c, 3*a + 2*b + c\n        n = n - 1\n    return round(a)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10.0","","# Error: expected","#     10","# but got","#     10.0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":495,"studentId":0,"date":null,"diff":"\r\nInputObject                                               SideIndicator\r\n-----------                                               -------------\r\n            a, b, c = a + 1, b + 1, c + (2 * b) + (3 * a) =>           \r\n                                                          <=           \r\n                                                          <=           \r\n            a += 1                                        <=           \r\n            b += 1                                        <=           \r\n            c = c + (2 * b) + (3 * a)                     <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        a = 1\n        b = 2\n        c = 3\n        while n > 3:\n            \n            \n            a += 1\n            b += 1\n            c = c + (2 * b) + (3 * a)\n            n -= 1\n        return c\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        a = 1\n        b = 2\n        c = 3\n        while n > 3:\n            a, b, c = a + 1, b + 1, c + (2 * b) + (3 * a)\n            n -= 1\n        return c\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","15","","# Error: expected","#     10","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":496,"studentId":0,"date":null,"diff":"\r\nInputObject                                                    SideIndicator\r\n-----------                                                    -------------\r\n        while t > 3:                                           =>           \r\n            if (t-1) > 3:                                      =>           \r\n                total += (2 * (t - 2)) + (3 * (t - 3))         =>           \r\n                t -= 1                                         =>           \r\n            else:                                              =>           \r\n                total += (t-1) + (2 * (t - 2)) + (3 * (t - 3)) =>           \r\n                t -=1                                          =>           \r\n        if (t-1) > 3:                                          <=           \r\n            total += (2 * (t - 2)) + (3 * (t - 3))             <=           \r\n            t -= 1                                             <=           \r\n        else:                                                  <=           \r\n            total += (t-1) + (2 * (t - 2)) + (3 * (t - 3))     <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def helper(t):\n        total = 0\n        if (t-1) > 3:\n            total += (2 * (t - 2)) + (3 * (t - 3))\n            t -= 1\n        else:\n            total += (t-1) + (2 * (t - 2)) + (3 * (t - 3))\n        return total\n    return helper(n)\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def helper(t):\n        total = 0\n        while t > 3:\n            if (t-1) > 3:\n                total += (2 * (t - 2)) + (3 * (t - 3))\n                t -= 1\n            else:\n                total += (t-1) + (2 * (t - 2)) + (3 * (t - 3))\n                t -=1\n        return total\n    return helper(n)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","12","","# Error: expected","#     22","# but got","#     12","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":498,"studentId":0,"date":null,"diff":"\r\nInputObject                                   SideIndicator\r\n-----------                                   -------------\r\n                        sumg += y * ((n-1)-y) =>           \r\n                        sumg += y * (n-y)     <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    sumg = 0\n    if n <= 3:\n        return n\n    else:\n        for x in range(n-3, n):\n            if x <= 3:\n                sumg += x * (n-x)\n            if x > 3:\n                for y in range(1, n-1):\n                    if y <= 3:\n                        sumg += y * (n-y)\n        return sumg\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    sumg = 0\n    if n <= 3:\n        return n\n    else:\n        for x in range(n-3, n):\n            if x <= 3:\n                sumg += x * (n-x)\n            if x > 3:\n                for y in range(1, n-1):\n                    if y <= 3:\n                        sumg += y * ((n-1)-y)\n        return sumg\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","28","","# Error: expected","#     22","# but got","#     28","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":499,"studentId":0,"date":null,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n        return a =>           \r\n        return c <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        a, b, c = 3, 2, 1\n        while n > 3:\n            a, b, c = a + 2 * b + 3 * c, a, b\n            n -= 1\n        return c\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        a, b, c = 3, 2, 1\n        while n > 3:\n            a, b, c = a + 2 * b + 3 * c, a, b\n            n -= 1\n        return a\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","2","","# Error: expected","#     10","# but got","#     2","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":500,"studentId":0,"date":null,"diff":"\r\nInputObject                   SideIndicator\r\n-----------                   -------------\r\n    for i in range(4, n + 1): =>           \r\n    for i in range(3, n + 1): <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> g_iter(6)\n    51\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n < 4:\n        return n\n    g_minus3 = 1\n    g_minus2 = 2\n    g_minus1 = 3\n    g = 0\n    for i in range(3, n + 1):\n        g = g_minus1 + g_minus2 *2 + g_minus3 * 3\n        g_minus1, g_minus2, g_minus3 = g, g_minus1, g_minus2\n    return g\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> g_iter(6)\n    51\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n < 4:\n        return n\n    g_minus3 = 1\n    g_minus2 = 2\n    g_minus1 = 3\n    g = 0\n    for i in range(4, n + 1):\n        g = g_minus1 + g_minus2 *2 + g_minus3 * 3\n        g_minus1, g_minus2, g_minus3 = g, g_minus1, g_minus2\n    return g\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","22","","# Error: expected","#     10","# but got","#     22","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":501,"studentId":0,"date":null,"diff":"\r\nInputObject                         SideIndicator\r\n-----------                         -------------\r\n        x = big + 2*med + 3*small   =>           \r\n        x = big + 2(med) + 3(small) <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    big = 3\n    med = 2\n    small = 1 \n\n    changes = 0\n\n    if n <= 3:\n        return n \n    while changes < (n-3):\n        x = big + 2(med) + 3(small)\n        big, med, small = x, big, med \n        changes = changes + 1\n\n\n    return big \n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    big = 3\n    med = 2\n    small = 1 \n\n    changes = 0\n\n    if n <= 3:\n        return n \n    while changes < (n-3):\n        x = big + 2*med + 3*small\n        big, med, small = x, big, med \n        changes = changes + 1\n\n\n    return big \n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 215, in g_iter","    x = big + 2(med) + 3(small)","TypeError: 'int' object is not callable","","# Error: expected","#     10","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":502,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n            term1= (term3-term2-3*term1)//2 =>           \r\n            term1= (term3-3*term1)//2       <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 3\n    else:\n        term1, term2, term3, = 1,2,3\n        while n>3:\n            term3 = 3*term1+2*term2+term3\n            term2 = term3-3*term1-2*term2\n            term1= (term3-3*term1)//2\n            n=n-1\n        return term3\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 3\n    else:\n        term1, term2, term3, = 1,2,3\n        while n>3:\n            term3 = 3*term1+2*term2+term3\n            term2 = term3-3*term1-2*term2\n            term1= (term3-term2-3*term1)//2\n            n=n-1\n        return term3\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","25","","# Error: expected","#     22","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":503,"studentId":0,"date":null,"diff":"\r\nInputObject                             SideIndicator\r\n-----------                             -------------\r\n    return y[n-1] + y[n-2]*2 + y[n-3]*3 =>           \r\n                                        =>           \r\n                                        =>           \r\n                                        =>           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x, y = 0, []\n    if n<=3:\n        return n\n    while x < n:\n        if x <= 3:\n            y.append(x)\n        else:\n            y.append(y[x-1] + y[x-2]*2 + y[x-3]*3)\n        x += 1\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x, y = 0, []\n\n    if n<=3:\n        return n\n\n    while x < n:\n        if x <= 3:\n            y.append(x)\n        else:\n            y.append(y[x-1] + y[x-2]*2 + y[x-3]*3)\n        x += 1\n\n    return y[n-1] + y[n-2]*2 + y[n-3]*3\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","","# Error: expected","#     10","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":504,"studentId":0,"date":null,"diff":"\r\nInputObject                                         SideIndicator\r\n-----------                                         -------------\r\n            u, v, w = v, w, (w + (2 * v) + (3 * u)) =>           \r\n            u = v                                   <=           \r\n            v = w                                   <=           \r\n            w = w + (2 * v) + (3 * u)               <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        u, v, w = 1, 2, 3\n        while n > 3:\n            u = v\n            v = w\n            w = w + (2 * v) + (3 * u)\n            n -= 1\n        return w\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        u, v, w = 1, 2, 3\n        while n > 3:\n            u, v, w = v, w, (w + (2 * v) + (3 * u))\n            n -= 1\n        return w\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","15","","# Error: expected","#     10","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":505,"studentId":0,"date":null,"diff":"\r\nInputObject       SideIndicator\r\n-----------       -------------\r\n            a = d =>           \r\n                  =>           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    # g(1) = 1      <- a\n    # g(2) = 2      <- b\n    # g(3) = 3      <- c\n    \n    # g(4) = g(3) + 2*g(2) + 3*g(1)\n            # c        b        a\n    # g(5) = g(4) + 2*g(3) + 3*g(2)\n            # d         b        a            \n    # g(6) = g(5) + 2*g(4) + 3*g(3)\n            # d         b        a\n\n    if n <= 3 :\n        return n\n    else :\n        a = 3\n        b = 2\n        c = 1\n        k = 4\n\n        d = 0\n        \n        e = 0\n        \n        while k <= n:\n\n            d = a + 2*b + 3*c\n            \n            b = a\n            c = b\n            k += 1\n\n        return d\n        # return d\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    # g(1) = 1      <- a\n    # g(2) = 2      <- b\n    # g(3) = 3      <- c\n    \n    # g(4) = g(3) + 2*g(2) + 3*g(1)\n            # c        b        a\n    # g(5) = g(4) + 2*g(3) + 3*g(2)\n            # d         b        a            \n    # g(6) = g(5) + 2*g(4) + 3*g(3)\n            # d         b        a\n\n    if n <= 3 :\n        return n\n    else :\n        a = 3\n        b = 2\n        c = 1\n        k = 4\n\n        d = 0\n        \n        e = 0\n        \n        while k <= n:\n\n            d = a + 2*b + 3*c\n            \n            c = b\n            b = a\n            a = d\n\n            k += 1\n\n        return d\n        # return d\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","18","","# Error: expected","#     22","# but got","#     18","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":506,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n            x, y, z = y, z, z + 2 * y + 3 * x  =>           \r\n            x, y, z = y, z, z + 3 * y + 3 * x  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        x, y, z = 1, 2, 3 \n        for i in range(n-3):\n            x, y, z = y, z, z + 3 * y + 3 * x \n        return z   \n         \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        x, y, z = 1, 2, 3 \n        for i in range(n-3):\n            x, y, z = y, z, z + 2 * y + 3 * x \n        return z   \n         \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","12","","# Error: expected","#     10","# but got","#     12","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":507,"studentId":0,"date":null,"diff":"\r\nInputObject                                        SideIndicator\r\n-----------                                        -------------\r\n    result = 3                                     =>           \r\n        result += 2*term2 + 3*term1                =>           \r\n        term1, term2, term3 = term2, term3, result =>           \r\n    result = 0                                     <=           \r\n        result += term3 + 2*term2 + 3*term1        <=           \r\n        term1, term2 = term2, term3                <=           \r\n        term3 = result                             <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    count = 3\n    result = 0\n    term1 = 1\n    term2 = 2\n    term3 = 3\n    if n<=3:\n        return n\n    while count<n:\n        result += term3 + 2*term2 + 3*term1\n        term1, term2 = term2, term3\n        term3 = result\n        count +=1\n    return result\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    count = 3\n    result = 3\n    term1 = 1\n    term2 = 2\n    term3 = 3\n    if n<=3:\n        return n\n    while count<n:\n        result += 2*term2 + 3*term1\n        term1, term2, term3 = term2, term3, result\n        count +=1\n    return result\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","32","","# Error: expected","#     22","# but got","#     32","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":508,"studentId":0,"date":null,"diff":"\r\nInputObject                  SideIndicator\r\n-----------                  -------------\r\n    return term3             =>           \r\n    return term1+term2+term3 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    term1=1\n    term2=2\n    term3=3\n    i=3\n    while i<n:\n        term1,term2,term3=term2,term3,(3*term1)+(2*term2)+(1*term3)\n        i+=1\n    return term1+term2+term3\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    term1=1\n    term2=2\n    term3=3\n    i=3\n    while i<n:\n        term1,term2,term3=term2,term3,(3*term1)+(2*term2)+(1*term3)\n        i+=1\n    return term3\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","15","","# Error: expected","#     10","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":509,"studentId":0,"date":null,"diff":"\r\nInputObject            SideIndicator\r\n-----------            -------------\r\n            counter+=1 =>           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        counter=4\n        prev=3\n        s_prev=2\n        t_prev=1\n        while counter<=n:\n            value=prev+(2*s_prev)+(3*t_prev)\n            t_prev=s_prev\n            s_prev=prev\n            prev=value\n    return value\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        counter=4\n        prev=3\n        s_prev=2\n        t_prev=1\n        while counter<=n:\n            value=prev+(2*s_prev)+(3*t_prev)\n            t_prev=s_prev\n            s_prev=prev\n            prev=value\n            counter+=1\n    return value\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     10","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":510,"studentId":0,"date":null,"diff":"\r\nInputObject                                SideIndicator\r\n-----------                                -------------\r\n    count = 3                              =>           \r\n        current = 3 * g1 + 2 * g2 + g3     =>           \r\n    count = 4                              <=           \r\n        current = 3 * g1 + 2 * g2 + 3 * g3 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \n    if n <= 3:\n        return n\n    \n    g1, g2, g3 = 1, 2, 3\n    count = 4\n    while count < n:\n        count += 1\n        current = 3 * g1 + 2 * g2 + 3 * g3\n        g1, g2, g3 = g2, g3, current\n\n    return current\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \n    if n <= 3:\n        return n\n    \n    g1, g2, g3 = 1, 2, 3\n    count = 3\n    while count < n:\n        count += 1\n        current = 3 * g1 + 2 * g2 + g3\n        g1, g2, g3 = g2, g3, current\n\n    return current\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 223, in g_iter","    return current","UnboundLocalError: local variable 'current' referenced before assignment","","# Error: expected","#     10","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":511,"studentId":0,"date":null,"diff":"\r\nInputObject                                                           SideIndicator\r\n-----------                                                           -------------\r\n            value.insert(i, value[i-1] + 2*value[i-2] + 3*value[i-3]) =>           \r\n            value.inesrt(i, value[i-1] + 2*value[i-2] + 3*value[i-3]) <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n    value = [0]\n    i = 1 # index\n    while i <= n:\n        if i <= 3:\n            value.insert(i,i)\n        else:\n            value.inesrt(i, value[i-1] + 2*value[i-2] + 3*value[i-3])\n        i += 1\n    return value[i-1]\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n    value = [0]\n    i = 1 # index\n    while i <= n:\n        if i <= 3:\n            value.insert(i,i)\n        else:\n            value.insert(i, value[i-1] + 2*value[i-2] + 3*value[i-3])\n        i += 1\n    return value[i-1]\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 213, in g_iter","    value.inesrt(i, value[i-1] + 2*value[i-2] + 3*value[i-3])","AttributeError: 'list' object has no attribute 'inesrt'","","# Error: expected","#     10","# but got","#     AttributeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":515,"studentId":0,"date":null,"diff":"\r\nInputObject                                        SideIndicator\r\n-----------                                        -------------\r\n            last_term = first * 3 + sec * 2 + last =>           \r\n            sec_term = last                        =>           \r\n            first_term = sec                       =>           \r\n            last = last_term                       =>           \r\n            sec = sec_term                         =>           \r\n            first = first_term                     =>           \r\n                                                   =>           \r\n                                                   =>           \r\n            last = first * 3 + sec * 2 + last      <=           \r\n            sec = last                             <=           \r\n            first = sec                            <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n > 3:\n        first, sec, last = 1, 2, 3\n        while n > 3:\n            last = first * 3 + sec * 2 + last\n            sec = last\n            first = sec\n            #first, sec, last = sec, last, first * 3 + sec * 2 + last\n            n -= 1\n        return last\n    return n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n > 3:\n        first, sec, last = 1, 2, 3\n        while n > 3:\n            last_term = first * 3 + sec * 2 + last\n            sec_term = last\n            first_term = sec\n\n            last = last_term\n            sec = sec_term\n            first = first_term\n\n            #first, sec, last = sec, last, first * 3 + sec * 2 + last\n            n -= 1\n        return last\n    return n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","60","","# Error: expected","#     22","# but got","#     60","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":517,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                            SideIndicator\r\n-----------                                                                                            -------------\r\n    base_n, first_n, second_n, third_n = 4, 3, 2, 1    # G(n) for base case with n = 4                 =>           \r\n    while base_n < n:                                                                                  =>           \r\n        first_n, second_n, third_n = first_n + 2 * second_n + 3 * third_n, first_n, second_n           =>           \r\n        base_n = increment(base_n)                                                                     =>           \r\n    return first_n + 2 * second_n + 3 * third_n                                                        =>           \r\n    def pingpong_counter(k, position, direction):                                                      =>           \r\n        if k == n:                                                                                     =>           \r\n            return position                                                                            =>           \r\n        if k % 7 == 0 or has_seven(k):                                                                 =>           \r\n            direction = increment(-1)                                                                  =>           \r\n        return pingpong_counter(k + 1, position + direction, direction)                                =>           \r\n    return pingpong_counter(1, 1, 1)                                                                   =>           \r\n    '''k = 1                                                                                           =>           \r\n    while k > 0:                                                                                       =>           \r\n        k = k + 1                                                                                      =>           \r\n    if k % 7 == 0 or has_seven(k):                                                                     =>           \r\n        k = k - 1                                                                                      =>           \r\n    return k'''                                                                                        =>           \r\n    first_n, second_n, third_n = 3, 2, 1    # G(n) for base case with n = 4                            <=           \r\n    while n > 3:                                                                                       <=           \r\n        third_n = second_n                                                                             <=           \r\n        second_n = first_n                                                                             <=           \r\n        first_n = first_n + 2 * second_n + 3 * third_n                                                 <=           \r\n        n -= 1                                                                                         <=           \r\n    return first_n                                                                                     <=           \r\n    '''if n <= 3:                                                                                      <=           \r\n        return n                                                                                       <=           \r\n    a, b, c = 1, 2, 3                                                                                  <=           \r\n    while n > 3:                                                                                       <=           \r\n        a, b, c = b, c, c + 2 * b + 3 * a                                                              <=           \r\n        n -= 1                                                                                         <=           \r\n    return c                                                                                           <=           \r\n    count, firstn, secondn, thirdn = 4, 3, 2, 1                                                        <=           \r\n    if n <= 3:                                                                                         <=           \r\n        return n                                                                                       <=           \r\n    while count < n:                                                                                   <=           \r\n        count, firstn, secondn, thirdn = count + 1, firstn + 2 * secondn + 3 * thirdn, firstn, secondn <=           \r\n    return firstn + 2 * secondn + 3 * thirdn'''                                                        <=           \r\n    \"*** YOUR CODE HERE ***\"                                                                           <=           \r\n                                                                                                       <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    first_n, second_n, third_n = 3, 2, 1    # G(n) for base case with n = 4\n    if n <= 3:\n        return n\n    while n > 3:\n        third_n = second_n\n        second_n = first_n\n        first_n = first_n + 2 * second_n + 3 * third_n\n        n -= 1\n    return first_n\n\n    '''if n <= 3:\n        return n\n    a, b, c = 1, 2, 3\n    while n > 3:\n        a, b, c = b, c, c + 2 * b + 3 * a\n        n -= 1\n    return c\n\n    count, firstn, secondn, thirdn = 4, 3, 2, 1\n    if n <= 3:\n        return n\n    while count < n:\n        count, firstn, secondn, thirdn = count + 1, firstn + 2 * secondn + 3 * thirdn, firstn, secondn\n    return firstn + 2 * secondn + 3 * thirdn'''\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    base_n, first_n, second_n, third_n = 4, 3, 2, 1    # G(n) for base case with n = 4\n    if n <= 3:\n        return n\n    while base_n < n:\n        first_n, second_n, third_n = first_n + 2 * second_n + 3 * third_n, first_n, second_n\n        base_n = increment(base_n)\n    return first_n + 2 * second_n + 3 * third_n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","15","","# Error: expected","#     10","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":518,"studentId":0,"date":null,"diff":"\r\nInputObject                                SideIndicator\r\n-----------                                -------------\r\n    value1, value2, value3, i = 3, 2, 1, 3 =>           \r\n    value1, value2, value3, i = 3, 2, 1, 1 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    value1, value2, value3, i = 3, 2, 1, 1\n    if n <= 3:\n        return n\n    while i < n:\n        valueCurrent = value1 + 2*value2 + 3*value3\n        value3 = value2\n        value2 = value1\n        value1 = valueCurrent\n        i += 1\n    return valueCurrent\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    value1, value2, value3, i = 3, 2, 1, 3\n    if n <= 3:\n        return n\n    while i < n:\n        valueCurrent = value1 + 2*value2 + 3*value3\n        value3 = value2\n        value2 = value1\n        value1 = valueCurrent\n        i += 1\n    return valueCurrent\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","51","","# Error: expected","#     10","# but got","#     51","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":519,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n        while n > 3 : =>           \r\n        while n < 4 : <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        previous1, previous2, previous3 = 3, 2, 1\n        while n < 4 :\n            previous1, previous2, previous3 = previous1 + 2*previous2 + 3*previous3, previous1, previous2 \n            n -= 1\n        return previous1 \n       \n           \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        previous1, previous2, previous3 = 3, 2, 1\n        while n > 3 :\n            previous1, previous2, previous3 = previous1 + 2*previous2 + 3*previous3, previous1, previous2 \n            n -= 1\n        return previous1 \n       \n           \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","3","","# Error: expected","#     10","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":520,"studentId":0,"date":null,"diff":"\r\nInputObject        SideIndicator\r\n-----------        -------------\r\n    if n <= 3:     =>           \r\n        return n   =>           \r\n    # if n <= 3:   <=           \r\n    #     return n <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    # while(n > 3):\n    #     return g_iter(n - 1) + 2 * g_iter(n - 2) + 3 * g_iter(n - 3)\n    # return n\n\n    # if n <= 3:\n    #     return n\n    g1, g2, g3 = 1, 2, 3\n    for i in range(4, n + 1):\n        g1, g2, g3 = g2, g3, g1 * 3 + g2 * 2 + g3\n    return g3\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    # while(n > 3):\n    #     return g_iter(n - 1) + 2 * g_iter(n - 2) + 3 * g_iter(n - 3)\n    # return n\n\n    if n <= 3:\n        return n\n    g1, g2, g3 = 1, 2, 3\n    for i in range(4, n + 1):\n        g1, g2, g3 = g2, g3, g1 * 3 + g2 * 2 + g3\n    return g3\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","3","","# Error: expected","#     1","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":521,"studentId":0,"date":null,"diff":"\r\nInputObject SideIndicator\r\n----------- -------------\r\n    k = 3   =>           \r\n    k = 0   <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n\n    \n    k = 0\n\n    curr = 3\n    pred = 2\n    pred2 = 1\n    \n    while k < n:\n\n        pred2, pred, curr = pred, curr, curr + 2*pred + 3*pred2\n        k += 1\n\n\n\n    return curr    \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n\n    \n    k = 3\n\n    curr = 3\n    pred = 2\n    pred2 = 1\n    \n    while k < n:\n\n        pred2, pred, curr = pred, curr, curr + 2*pred + 3*pred2\n        k += 1\n\n\n\n    return curr    \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","125","","# Error: expected","#     10","# but got","#     125","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":522,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n        gx1, gx2, gx3 = gx2, gx3, gx3 + 2*gx2 + 3*gx1 =>           \r\n        gx1, gx2, gx3 = gx2, gx3, g3 + 2*gx2 + 3*gx1  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if (n<=3):\n        return n\n  \n    gx3, gx2, gx1 = 3, 2, 1\n\n    for i in range(4, n + 1): #need n+1 because range is noninclusive for last input\n        gx1, gx2, gx3 = gx2, gx3, g3 + 2*gx2 + 3*gx1\n    \n    return gx3\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if (n<=3):\n        return n\n  \n    gx3, gx2, gx1 = 3, 2, 1\n\n    for i in range(4, n + 1): #need n+1 because range is noninclusive for last input\n        gx1, gx2, gx3 = gx2, gx3, gx3 + 2*gx2 + 3*gx1\n    \n    return gx3\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 207, in g_iter","    gx1, gx2, gx3 = gx2, gx3, g3 + 2*gx2 + 3*gx1","NameError: name 'g3' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":523,"studentId":0,"date":null,"diff":"\r\nInputObject                        SideIndicator\r\n-----------                        -------------\r\n    a = 1                          =>           \r\n    b = 2                          =>           \r\n    c = 3                          =>           \r\n    counter = 4                    =>           \r\n    while counter <= n:            =>           \r\n        temp = c + (2*b) + (3 * a) =>           \r\n        a = b                      =>           \r\n        b = c                      =>           \r\n        c = temp                   =>           \r\n        counter += 1               =>           \r\n    return c                       =>           \r\n    \"\"\"draft                       =>           \r\n    if n <= 3:                     =>           \r\n        return n                   =>           \r\n    elif n == 1:                   =>           \r\n                                   =>           \r\n    \"\"\"                            =>           \r\n                                   =>           \r\n    elif n ==1:                    <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    result = 0\n    i = 1\n    while n > 3:\n        result += i*g(n-i)\n        i += 1\n    if n <= 3:\n        return n\n    else:\n        return result\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    a = 1\n    b = 2\n    c = 3\n    counter = 4\n    while counter <= n:\n        temp = c + (2*b) + (3 * a)\n        a = b\n        b = c\n        c = temp\n        counter += 1\n    return c\n\n\n    \"\"\"draft\n    result = 0\n    i = 1\n    while n > 3:\n        result += i*g(n-i)\n        i += 1\n    if n <= 3:\n        return n\n    else:\n        return result\n    \"\"\"\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     10","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":524,"studentId":0,"date":null,"diff":"\r\nInputObject                               SideIndicator\r\n-----------                               -------------\r\n        a, b, c = b, c, c + 2 * b + 3 * a =>           \r\n        a, b, c = b, c, c + 2 * b + 3 * 1 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    a, b, c = 1, 2, 3\n    while n > 3:\n        a, b, c = b, c, c + 2 * b + 3 * 1\n        n -= 1\n    return c\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    a, b, c = 1, 2, 3\n    while n > 3:\n        a, b, c = b, c, c + 2 * b + 3 * a\n        n -= 1\n    return c\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","19","","# Error: expected","#     22","# but got","#     19","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":525,"studentId":0,"date":null,"diff":"\r\nInputObject                                                SideIndicator\r\n-----------                                                -------------\r\n                                                           =>           \r\n    return k                                               =>           \r\n    def count_up(n, x):                                    =>           \r\n        if has_seven(x) == False and x % 7 != 0 and n > 0: =>           \r\n            i = 1                                          =>           \r\n            x = x + i                                      =>           \r\n            n = n - 1                                      =>           \r\n            return x                                       =>           \r\n        else:                                              =>           \r\n            return x + count_down(n+1, x)                  =>           \r\n    def count_down(n, x):                                  =>           \r\n        if n > 0 and has_seven(x) == True or x % 7 == 0:   =>           \r\n            i = -i                                         =>           \r\n            x = x + i                                      =>           \r\n            n = n - 1                                      =>           \r\n            return x                                       =>           \r\n        else:                                              =>           \r\n            return x + count_up(n+1, x)                    =>           \r\n    return count_up(n, 1)                                  =>           \r\n    def counter(n):                                        <=           \r\n        while n > 0:                                       <=           \r\n            total = total + f(total)                       <=           \r\n        return k                                           <=           \r\n                                                           <=           \r\n                                                           <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    i, j, k = 1, 2, 3\n    for x in range(3, n):\n        i, j, k = j, k, (3*i + 2*j + k)\n        return k\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    i, j, k = 1, 2, 3\n    for x in range(3, n):\n        i, j, k = j, k, (3*i + 2*j + k)\n    return k\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","10","","# Error: expected","#     22","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":526,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n        while 3 != n: =>           \r\n        while c != n: <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        a = 1\n        b = 2\n        c = 3\n        while c != n:\n            a,b,c = b,c,c + (2*b) + (3*a) \n            n -= 1\n    return c\n\n        \n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        a = 1\n        b = 2\n        c = 3\n        while 3 != n:\n            a,b,c = b,c,c + (2*b) + (3*a) \n            n -= 1\n    return c\n\n        \n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     10","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":527,"studentId":0,"date":null,"diff":"\r\nInputObject                          SideIndicator\r\n-----------                          -------------\r\n            if (x-y)<=3:             =>           \r\n                total += y * (x - y) =>           \r\n            total += y * (x - y)     <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total = 0\n    x = n\n    if x <= 3:\n        return x\n    while x > 3:\n        y = 1\n        while y <= 3:\n            total += y * (x - y)\n            y+=1\n        x-=1\n    return total\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total = 0\n    x = n\n    if x <= 3:\n        return x\n    while x > 3:\n        y = 1\n        while y <= 3:\n            if (x-y)<=3:\n                total += y * (x - y)\n            y+=1\n        x-=1\n    return total\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","26","","# Error: expected","#     22","# but got","#     26","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":528,"studentId":0,"date":null,"diff":"\r\nInputObject                                                      SideIndicator\r\n-----------                                                      -------------\r\n    n_minus_one = 3                                              =>           \r\n    n_minus_two = 2                                              =>           \r\n    n_minus_three = 1                                            =>           \r\n    curr = 0                                                     =>           \r\n    k = 3                                                        =>           \r\n        curr = n_minus_one + 2 * n_minus_two + 3 * n_minus_three =>           \r\n        n_minus_three = n_minus_two                              =>           \r\n        n_minus_two = n_minus_one                                =>           \r\n        n_minus_one = curr                                       =>           \r\n    f, s, t = 1, 2, 3  # Fibonacci numbers 1 and 2               <=           \r\n    curr = 3                                                     <=           \r\n    k = 3               # Which Fib number is curr?              <=           \r\n        t = s, s = f, t = curr, curr = f * 3 + s * 2 + t         <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    f, s, t = 1, 2, 3  # Fibonacci numbers 1 and 2\n    curr = 3\n    k = 3               # Which Fib number is curr?\n    while k < n:\n        t = s, s = f, t = curr, curr = f * 3 + s * 2 + t\n        k = k + 1\n    return curr\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    n_minus_one = 3\n    n_minus_two = 2\n    n_minus_three = 1  \n    curr = 0\n    k = 3               \n    while k < n:\n        curr = n_minus_one + 2 * n_minus_two + 3 * n_minus_three\n        n_minus_three = n_minus_two\n        n_minus_two = n_minus_one\n        n_minus_one = curr\n        k = k + 1\n    return curr\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 215, in g_iter","    t = s, s = f, t = curr, curr = f * 3 + s * 2 + t","TypeError: 'int' object is not iterable","","# Error: expected","#     10","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":529,"studentId":0,"date":null,"diff":"\r\nInputObject       SideIndicator\r\n-----------       -------------\r\n        a=old_b   =>           \r\n        a=2*old_b <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    a=1\n    b=2\n    c=3\n    while n>3:\n        old_a=a\n        old_b=b\n        old_c=c\n        a=2*old_b\n        b=old_c\n        c=old_c+2*old_b+3*old_a\n        n-=1\n    return c\n    \n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    a=1\n    b=2\n    c=3\n    while n>3:\n        old_a=a\n        old_b=b\n        old_c=c\n        a=old_b\n        b=old_c\n        c=old_c+2*old_b+3*old_a\n        n-=1\n    return c\n    \n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","28","","# Error: expected","#     22","# but got","#     28","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":530,"studentId":0,"date":null,"diff":"\r\nInputObject                                             SideIndicator\r\n-----------                                             -------------\r\n    a, b, c = 1, 2, 3                                   =>           \r\n    if n <= 3:                                          =>           \r\n        return n                                        =>           \r\n        rondo = 3 * a + 2 * b + c                       =>           \r\n        a, b, c = b, c, rondo                           =>           \r\n    return rondo                                        =>           \r\n    a, b, c, next = n, n - 1, n - 2, n - 3              <=           \r\n        a, b, c, next = b + c, c + next, next, next - 1 <=           \r\n    return a                                            <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a, b, c, next = n, n - 1, n - 2, n - 3\n    while n > 3:\n        a, b, c, next = b + c, c + next, next, next - 1\n        n -= 1\n    return a\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a, b, c = 1, 2, 3\n    if n <= 3:\n        return n\n    while n > 3:\n        rondo = 3 * a + 2 * b + c\n        a, b, c = b, c, rondo\n        n -= 1\n    return rondo\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","5","","# Error: expected","#     10","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":531,"studentId":0,"date":null,"diff":"\r\nInputObject                                                   SideIndicator\r\n-----------                                                   -------------\r\n        num1, num2, num3 = num2, num3, 3*num1 + 2*num2 + num3 =>           \r\n        num1, num2, num3 = num2, num3, num1 + num2 + num3     <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    num1, num2, num3 = 1, 2, 3\n    while n > 1:\n        num1, num2, num3 = num2, num3, num1 + num2 + num3\n        n -= 1\n    return num1\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    num1, num2, num3 = 1, 2, 3\n    while n > 1:\n        num1, num2, num3 = num2, num3, 3*num1 + 2*num2 + num3\n        n -= 1\n    return num1\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","6","","# Error: expected","#     10","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":532,"studentId":0,"date":null,"diff":"\r\nInputObject                               SideIndicator\r\n-----------                               -------------\r\n    a, b, c = 1, 2, 3                     =>           \r\n    while n > 3:                          =>           \r\n        a, b, c = b, c, (2*b + 3*a + c)   =>           \r\n        n-=1                              =>           \r\n    return c                              =>           \r\n        while n > 3:                      <=           \r\n            i = 1                         <=           \r\n            a , b , c = n-i, n-1-i, n-2-i <=           \r\n            # a = a * 1                   <=           \r\n            # b = b * 2                   <=           \r\n            # c = c * 3                   <=           \r\n            i += 1                        <=           \r\n            n -= 1                        <=           \r\n        return a* 1 + b * 2 + c * 3       <=           \r\n    else:                                 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    assert n > 0\n    if n <= 3:\n        return n    \n    else:\n        while n > 3:\n            i = 1\n            a , b , c = n-i, n-1-i, n-2-i\n            # a = a * 1\n            # b = b * 2\n            # c = c * 3\n            i += 1\n            n -= 1\n        return a* 1 + b * 2 + c * 3\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    assert n > 0\n    a, b, c = 1, 2, 3\n    if n <= 3:\n        return n    \n    while n > 3:\n        a, b, c = b, c, (2*b + 3*a + c)\n        n-=1\n    return c\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","10","","# Error: expected","#     22","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":533,"studentId":0,"date":null,"diff":"\r\nInputObject                    SideIndicator\r\n-----------                    -------------\r\n            return summer[n-1] =>           \r\n            return summer[n]   <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    summer = [];\n    def G(x):\n        if n<=3:\n            return n\n        else:\n            summer = [1,2,3]\n            for i in range(3,n):\n                 summer.append(summer[i-1]+2*summer[i-2]+3*summer[i-3])\n            return summer[n]\n    return G(n)\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    summer = [];\n    def G(x):\n        if n<=3:\n            return n\n        else:\n            summer = [1,2,3]\n            for i in range(3,n):\n                 summer.append(summer[i-1]+2*summer[i-2]+3*summer[i-3])\n            return summer[n-1]\n    return G(n)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 241, in g_iter","    return G(n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 240, in G","    return summer[n]","IndexError: list index out of range","","# Error: expected","#     10","# but got","#     IndexError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":535,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n            print(pre_pre, pre, current, n) <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    else:\n        pre_pre, pre, current = 1, 2, 3\n        while not (n-3) == 0:\n            hold = current + 2 * pre + 3 * pre_pre\n            pre_pre, pre, current = pre, current, hold\n            n -= 1\n            print(pre_pre, pre, current, n)\n        return current\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    else:\n        pre_pre, pre, current = 1, 2, 3\n        while not (n-3) == 0:\n            hold = current + 2 * pre + 3 * pre_pre\n            pre_pre, pre, current = pre, current, hold\n            n -= 1\n        return current\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","2 3 10 3","10","","# Error: expected","#     10","# but got","#     2 3 10 3","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":537,"studentId":0,"date":null,"diff":"\r\nInputObject       SideIndicator\r\n-----------       -------------\r\n    if n <= 3:    =>           \r\n        return n  =>           \r\n    \"\"\"           =>           \r\n    \"\"\"           <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\" \n    g_a, g_b, g_c = 1, 2, 3\n    while n > 3:\n        g_c, g_b, g_a = 3 * g_a + 2 * g_b + g_c, g_c, g_b\n        n -= 1\n    return g_c\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n \n    g_a, g_b, g_c = 1, 2, 3\n    while n > 3:\n        g_c, g_b, g_a = 3 * g_a + 2 * g_b + g_c, g_c, g_b\n        n -= 1\n    return g_c\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","3","","# Error: expected","#     1","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":538,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n                                            =>           \r\n    g3, g2, g1 = 1,2,3                      =>           \r\n        g3,g2,g1 = g2,g1,(3*g3 + 2*g2 + g1) =>           \r\n    return g1                               =>           \r\n    return g4                               =>           \r\n    g1, g2, g3 = 1,2,3                      <=           \r\n        g1,g2,g3 = g2,g3,(3*g1 + 2*g2 + g3) <=           \r\n    return g3                               <=           \r\n    return g2                               <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    '''\n    g1, g2, g3 = 1,2,3\n    if n <= 3:\n        return n\n    for _ in range(n-3):\n        g1,g2,g3 = g2,g3,(3*g1 + 2*g2 + g3)\n    return g3\n    '''\n\n    g1, g2, g3 = 3,2,1\n    if n <= 3:\n        return n\n    for _ in range(n-3):\n        g4 = g1 + 2*g2 + 3*g3\n        g1 = g2\n        g2 = g3\n        g3 = g4\n    return g2\n\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \n    g3, g2, g1 = 1,2,3\n    if n <= 3:\n        return n\n    for _ in range(n-3):\n        g3,g2,g1 = g2,g1,(3*g3 + 2*g2 + g1)\n    return g1\n    '''\n\n    g1, g2, g3 = 3,2,1\n    if n <= 3:\n        return n\n    for _ in range(n-3):\n        g4 = g1 + 2*g2 + 3*g3\n        g1 = g2\n        g2 = g3\n        g3 = g4\n    return g4\n    '''\n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","1","","# Error: expected","#     10","# but got","#     1","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":539,"studentId":0,"date":null,"diff":"\r\nInputObject                                                       SideIndicator\r\n-----------                                                       -------------\r\n    i = 1                                                         =>           \r\n    g0 = 1                                                        =>           \r\n    g1 = 0                                                        =>           \r\n    g2 = 2                                                        =>           \r\n    while i is not n:                                             =>           \r\n        g0, g1, g2 = (i+1 if i<3 else (g0 + 2*g1 + 3*g2)), g0, g1 =>           \r\n        i+=1                                                      =>           \r\n    return g0                                                     =>           \r\n    # def ghelp(i, g0, g1, g2):                                   =>           \r\n    #     # print(i, g0, g1, g2)                                  =>           \r\n    #     if i == n:                                              =>           \r\n    #         return g0                                           =>           \r\n    #     g_next = i+1 if i<3 else (g0 + 2*g1 + 3*g2)             =>           \r\n    #     return ghelp(i+1, g_next, g0, g1)                       =>           \r\n    # return ghelp(1, 1, 0, 0)                                    =>           \r\n                                                                  =>           \r\n    def ghelp(i, g0, g1, g2):                                     <=           \r\n        # print(i, g0, g1, g2)                                    <=           \r\n        if i == n:                                                <=           \r\n            return g0                                             <=           \r\n        g_next = i+1 if i<3 else (g0 + 2*g1 + 3*g2)               <=           \r\n        return ghelp(i+1, g_next, g0, g1)                         <=           \r\n    return ghelp(1, 1, 0, 0)                                      <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    def ghelp(i, g0, g1, g2):\n        # print(i, g0, g1, g2)\n        if i == n:\n            return g0\n        g_next = i+1 if i<3 else (g0 + 2*g1 + 3*g2)\n        return ghelp(i+1, g_next, g0, g1)\n    return ghelp(1, 1, 0, 0)\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    i = 1\n    g0 = 1\n    g1 = 0\n    g2 = 2\n    while i is not n:\n        g0, g1, g2 = (i+1 if i<3 else (g0 + 2*g1 + 3*g2)), g0, g1\n        i+=1\n    return g0\n\n    # def ghelp(i, g0, g1, g2):\n    #     # print(i, g0, g1, g2)\n    #     if i == n:\n    #         return g0\n    #     g_next = i+1 if i<3 else (g0 + 2*g1 + 3*g2)\n    #     return ghelp(i+1, g_next, g0, g1)\n    # return ghelp(1, 1, 0, 0)\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","22",">>> from construct_check import check",">>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\construct_check.py\", line 86, in check","    return ExclusionChecker(disallow).check(source_file, checked_funcs, source)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\construct_check.py\", line 170, in check","    p = parse(open(source_file).read(), source_file)","  File \"C:\\Users\\Gustavo\\Anaconda3\\lib\\ast.py\", line 35, in parse","    return compile(source, filename, mode, PyCF_ONLY_AST)","  File \"hw02.py\", line 1","    ???HW_SOURCE_FILE = 'hw02.py'","                    ^","SyntaxError: invalid character in identifier","","# Error: expected","#     True","# but got","#     SyntaxError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":540,"studentId":0,"date":null,"diff":"\r\nInputObject                                          SideIndicator\r\n-----------                                          -------------\r\n            a, b, curr = b, curr, 1*curr + 2*b + 3*a =>           \r\n            a, b, curr = curr, a, 1*curr + 2*b + 3*a <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<= 3:\n        return n\n    else:\n        a, b, curr = 1, 2, 3\n        k = 3\n        while k < n:\n            a, b, curr = curr, a, 1*curr + 2*b + 3*a\n            k = k + 1\n        return curr\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<= 3:\n        return n\n    else:\n        a, b, curr = 1, 2, 3\n        k = 3\n        while k < n:\n            a, b, curr = b, curr, 1*curr + 2*b + 3*a\n            k = k + 1\n        return curr\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","21","","# Error: expected","#     22","# but got","#     21","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":541,"studentId":0,"date":null,"diff":"\r\nInputObject                              SideIndicator\r\n-----------                              -------------\r\n        sum = 3*term1 + 2*term2 + term3  =>           \r\n        sum += 3*term1 + 2*term2 + term3 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    term1, term2, term3 = 1, 2, 3\n    sum = 0\n    if n <= 3:\n        return n\n    while n > 3:\n        sum += 3*term1 + 2*term2 + term3\n        term1 = term2\n        term2 = term3\n        term3 = sum\n        n -= 1\n    return sum\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    term1, term2, term3 = 1, 2, 3\n    sum = 0\n    if n <= 3:\n        return n\n    while n > 3:\n        sum = 3*term1 + 2*term2 + term3\n        term1 = term2\n        term2 = term3\n        term3 = sum\n        n -= 1\n    return sum\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","32","","# Error: expected","#     22","# but got","#     32","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":542,"studentId":0,"date":null,"diff":"\r\nInputObject                 SideIndicator\r\n-----------                 -------------\r\n        a = b               =>           \r\n        b = c               =>           \r\n        c = d               =>           \r\n        a = b, b = c, c = d <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    a = 1\n    b = 2\n    c = 3\n    for i in range(4, n + 1):\n        d = c + 2*b + 3*a \n        a = b, b = c, c = d\n    return c\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    a = 1\n    b = 2\n    c = 3\n    for i in range(4, n + 1):\n        d = c + 2*b + 3*a \n        a = b\n        b = c\n        c = d\n    return c\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 222, in g_iter","    a = b, b = c, c = d","TypeError: 'int' object is not iterable","","# Error: expected","#     10","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":543,"studentId":0,"date":null,"diff":"\r\nInputObject       SideIndicator\r\n-----------       -------------\r\n    if n ==5:     =>           \r\n        return 22 =>           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return (n-1) + 2*(n-2) + 3*(n-3)\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    if n ==5:\n        return 22\n    else:\n        return (n-1) + 2*(n-2) + 3*(n-3)\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","16","","# Error: expected","#     22","# but got","#     16","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":544,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n        if n > 3:                               =>           \r\n            if x > 3:                           =>           \r\n                x = (x-1) + 2*(x-2) + 3*(x - 3) =>           \r\n        while n > 3:                            <=           \r\n            n = n - 1                           <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    v = 0\n    if n <= 3:\n        return n\n    else:\n        while n > 3:\n            x = n - 1\n            y = n - 2\n            z = n - 3\n            v = (x) + 2*(y) + 3*(z) + v\n            n = n - 1\n        return v\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    v = 0\n    if n <= 3:\n        return n\n    else:\n        if n > 3:\n            x = n - 1\n            if x > 3:\n                x = (x-1) + 2*(x-2) + 3*(x - 3)\n            y = n - 2\n            z = n - 3\n            v = (x) + 2*(y) + 3*(z) + v\n        return v\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","26","","# Error: expected","#     22","# but got","#     26","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":545,"studentId":0,"date":null,"diff":"\r\nInputObject                                               SideIndicator\r\n-----------                                               -------------\r\n    j, k = 0, 0                                           =>           \r\n            current, j, k = current + 1, current, j       =>           \r\n            current, j, k=  current+2*j+3*k, current, j   =>           \r\n    j, k, l = 0, 0, 0                                     <=           \r\n            current, j, k, l = current + 1, current, j, k <=           \r\n            current, j, k, l = j+2*k+3*l, current, j, k   <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    current = 0\n    j, k, l = 0, 0, 0\n    for i in range(1,n+1):\n        if i <= 3:\n            current, j, k, l = current + 1, current, j, k\n        else:\n            current, j, k, l = j+2*k+3*l, current, j, k\n    return current\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    current = 0\n    j, k = 0, 0\n    for i in range(1,n+1):\n        if i <= 3:\n            current, j, k = current + 1, current, j\n        else:\n            current, j, k=  current+2*j+3*k, current, j\n    return current\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","4","","# Error: expected","#     10","# but got","#     4","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":546,"studentId":0,"date":null,"diff":"\r\nInputObject        SideIndicator\r\n-----------        -------------\r\n    total = n      =>           \r\n    return total   =>           \r\n    total = 0      <=           \r\n    return total   <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total = 0\n    counter = 4\n    a = 1\n    b = 2\n    c = 3\n    while counter <= n:\n        total = c + 2*b + 3*a\n        counter += 1\n        a = b\n        b = c\n        c = total\n    return total  \n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total = n\n    counter = 4\n    a = 1\n    b = 2\n    c = 3\n    while counter <= n:\n        total = c + 2*b + 3*a\n        counter += 1\n        a = b\n        b = c\n        c = total\n    return total\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","0","","# Error: expected","#     1","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":547,"studentId":0,"date":null,"diff":"\r\nInputObject                             SideIndicator\r\n-----------                             -------------\r\n        current, next1, next2 = 1, 2, 3 =>           \r\n        while n > 4:                    =>           \r\n        current, next1, next2 = 0, 1, 2 <=           \r\n        while n > 3:                    <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n    \treturn n\n    else:\n    \tcurrent, next1, next2 = 0, 1, 2\n    \twhile n > 3:\n    \t\tcurrent, next1, next2 = next1, next2, next2 + 2*next1 + 3*current\n    \t\tn -= 1\n    \treturn next2 + 2*next1 + 3*current\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n    \treturn n\n    else:\n    \tcurrent, next1, next2 = 1, 2, 3\n    \twhile n > 4:\n    \t\tcurrent, next1, next2 = next1, next2, next2 + 2*next1 + 3*current\n    \t\tn -= 1\n    \treturn next2 + 2*next1 + 3*current\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","11","","# Error: expected","#     10","# but got","#     11","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":548,"studentId":0,"date":null,"diff":"\r\nInputObject                               SideIndicator\r\n-----------                               -------------\r\n        x, y, z = y, z, 3 * x + 2 * y + z =>           \r\n    if n == 1:                            =>           \r\n        print_move(start, end)            =>           \r\n                                          =>           \r\n        x = y                             <=           \r\n        y = z                             <=           \r\n        z = 3 * x + 2 * y + z             <=           \r\n    \"*** YOUR CODE HERE ***\"              <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    x, y, z = 1, 2, 3\n    for k in range(3, n):\n        x = y\n        y = z\n        z = 3 * x + 2 * y + z\n    return z\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    x, y, z = 1, 2, 3\n    for k in range(3, n):\n        x, y, z = y, z, 3 * x + 2 * y + z\n    return z\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","15","","# Error: expected","#     10","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":549,"studentId":0,"date":null,"diff":"\r\nInputObject                                        SideIndicator\r\n-----------                                        -------------\r\n        total = nxt3 + 2 * nxt2 + 3 * next         =>           \r\n        total = total + nxt3 + 2 * nxt2 + 3 * next <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total = 0\n    next, nxt2, nxt3 = 1, 2, 3\n    if n <= 3:       \n        return n\n    while n > 3:\n        total = total + nxt3 + 2 * nxt2 + 3 * next\n        next, nxt2, nxt3 = nxt2, nxt3, total\n        n -= 1\n    return total\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total = 0\n    next, nxt2, nxt3 = 1, 2, 3\n    if n <= 3:       \n        return n\n    while n > 3:\n        total = nxt3 + 2 * nxt2 + 3 * next\n        next, nxt2, nxt3 = nxt2, nxt3, total\n        n -= 1\n    return total\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","32","","# Error: expected","#     22","# but got","#     32","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":550,"studentId":0,"date":null,"diff":"\r\nInputObject        SideIndicator\r\n-----------        -------------\r\n    if n <= 3:     =>           \r\n        index += 1 =>           \r\n    if n < 3:      <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n < 3:\n        return n\n    index = 3\n    prev_1 = 3\n    prev_2 = 2\n    prev_3 = 1\n    n1 = 0\n    while index < n:\n        n1 = prev_3*3 + prev_2*2 + prev_1*1\n        prev_3 = prev_2\n        prev_2 = prev_1\n        prev_1 = n1\n    return n1\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    index = 3\n    prev_1 = 3\n    prev_2 = 2\n    prev_3 = 1\n    n1 = 0\n    while index < n:\n        n1 = prev_3*3 + prev_2*2 + prev_1*1\n        prev_3 = prev_2\n        prev_2 = prev_1\n        prev_1 = n1\n        index += 1\n    return n1\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","0","","# Error: expected","#     3","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":551,"studentId":0,"date":null,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n    if n <= 3:   =>           \r\n        return n =>           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    m3, m2, m1 = 1, 2, 3\n    i = 4\n    while i <= n:\n        m0 = 3*m3 + 2*m2 + m1\n        m3, m2, m1 = m2, m1, m0\n        i+=1\n    return m1\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    m3, m2, m1 = 1, 2, 3\n    i = 4\n    while i <= n:\n        m0 = 3*m3 + 2*m2 + m1\n        m3, m2, m1 = m2, m1, m0\n        i+=1\n    return m1\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","3","","# Error: expected","#     1","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":552,"studentId":0,"date":null,"diff":"\r\nInputObject                               SideIndicator\r\n-----------                               -------------\r\n        a, b, c = b, c, c + 2 * b + 3 * a =>           \r\n        a, b, c = b, c, c * 2 + b * 3 + a <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    a, b, c = 1, 2, 3\n    for i in range(n - 3):\n        a, b, c = b, c, c * 2 + b * 3 + a\n    return c\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    a, b, c = 1, 2, 3\n    for i in range(n - 3):\n        a, b, c = b, c, c + 2 * b + 3 * a\n    return c\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","13","","# Error: expected","#     10","# but got","#     13","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":553,"studentId":0,"date":null,"diff":"\r\nInputObject        SideIndicator\r\n-----------        -------------\r\n            n -= 1 =>           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n < 4:\n        return n\n    else:\n        var1, var2, var3 = 1, 2, 3\n        total = 0\n        while n>3:\n            total = var3 + 2 * var2 + 3 * var1\n            var1, var2, var3 = var2, var3, total\n        return total\n    # if n <= 3:\n    #     return n\n    # while n > 3:\n    #     a = g(n-1)\n    #     b = g(n-2)\n    #     c = g(n-3)\n    #     return a + 2*b + 3*c\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n < 4:\n        return n\n    else:\n        var1, var2, var3 = 1, 2, 3\n        total = 0\n        while n>3:\n            total = var3 + 2 * var2 + 3 * var1\n            var1, var2, var3 = var2, var3, total\n            n -= 1\n        return total\n    # if n <= 3:\n    #     return n\n    # while n > 3:\n    #     a = g(n-1)\n    #     b = g(n-2)\n    #     c = g(n-3)\n    #     return a + 2*b + 3*c\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     10","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":554,"studentId":0,"date":null,"diff":"\r\nInputObject SideIndicator\r\n----------- -------------\r\n    i = 3   =>           \r\n    i = 4   <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    var3, var2, var1 = 1, 2, 3\n    i = 4\n    if(n<=3):\n        return n\n    while(i<n):\n        curr = var1+2*var2+3*var3\n        var3 = var2\n        var2 = var1\n        var1 = curr\n        i+=1\n    return curr\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    var3, var2, var1 = 1, 2, 3\n    i = 3\n    if(n<=3):\n        return n\n    while(i<n):\n        curr = var1+2*var2+3*var3\n        var3 = var2\n        var2 = var1\n        var1 = curr\n        i+=1\n    return curr\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 237, in g_iter","    return curr","UnboundLocalError: local variable 'curr' referenced before assignment","","# Error: expected","#     10","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":555,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n    for i in range(3, n): =>           \r\n    else:                 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    p = 1\n    q = 2\n    r = 3\n    if n <= 3:\n        return n\n    else:\n        p, q, r = q, r, (3*p + 2*q + r)\n    return r\n    \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    p = 1\n    q = 2\n    r = 3\n    if n <= 3:\n        return n\n    for i in range(3, n):\n        p, q, r = q, r, (3*p + 2*q + r)\n    return r\n    \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","10","","# Error: expected","#     22","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":556,"studentId":0,"date":null,"diff":"\r\nInputObject                   SideIndicator\r\n-----------                   -------------\r\n                              =>           \r\n        a, b, c = 1, 2, 3     =>           \r\n            a, b, c = 1, 2, 3 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\" \n    if n <= 3:\n        return n\n    else:\n        while n > 3:\n            a, b, c = 1, 2, 3\n            a, b, c = b, c, (3*a + 2*b + c)\n            n -= 1\n        return c\n\n\n    def fib(n):\n        a = 0\n        b = 1\n        while n> 1:\n            a, b = b, a+b\n            n-=1\n        return b\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\" \n   \n    if n <= 3:\n        return n\n    else:\n        a, b, c = 1, 2, 3\n        while n > 3:\n            a, b, c = b, c, (3*a + 2*b + c)\n            n -= 1\n        return c\n\n\n    def fib(n):\n        a = 0\n        b = 1\n        while n> 1:\n            a, b = b, a+b\n            n-=1\n        return b\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","10","","# Error: expected","#     22","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":557,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n        while count <= n: =>           \r\n        while count < n:  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    i = 1\n    total = 0\n    if n <= 3:\n        return n\n    else:\n        total, count = 0, 1\n        while count < n:\n            total = total + count * n\n            n = n - 1\n            count = count + 1\n        return total\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    i = 1\n    total = 0\n    if n <= 3:\n        return n\n    else:\n        total, count = 0, 1\n        while count <= n:\n            total = total + count * n\n            n = n - 1\n            count = count + 1\n        return total\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","13","","# Error: expected","#     22","# but got","#     13","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":558,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                 SideIndicator\r\n-----------                                                                                 -------------\r\n        first_term, second_term, third_term = second_term, third_term, next_term            =>           \r\n        first_term, second_term, third_term, next_term = second_term, third_term, next_term <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    first_term, second_term, third_term = 1, 2, 3\n    next_term = 0\n    if n <= 3:\n        return n\n    while n > 3:\n        next_term = (3 * first_term) + (2 * second_term) + third_term\n        first_term, second_term, third_term, next_term = second_term, third_term, next_term\n        n -= 1\n    return next_term\n    # result = 0\n    # if n == 1:\n    #     return 1\n    # elif n == 2: \n    #     return 2\n    # elif n == 3:\n    #     return 3\n    # else:\n    #     while n > 3:\n    #         result = g(n - 1)\n    #         n -= 3\n    #     return result\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    first_term, second_term, third_term = 1, 2, 3\n    next_term = 0\n    if n <= 3:\n        return n\n    while n > 3:\n        next_term = (3 * first_term) + (2 * second_term) + third_term\n        first_term, second_term, third_term = second_term, third_term, next_term\n        n -= 1\n    return next_term\n    # result = 0\n    # if n == 1:\n    #     return 1\n    # elif n == 2: \n    #     return 2\n    # elif n == 3:\n    #     return 3\n    # else:\n    #     while n > 3:\n    #         result = g(n - 1)\n    #         n -= 3\n    #     return result\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 236, in g_iter","    first_term, second_term, third_term, next_term = second_term, third_term, next_term","ValueError: not enough values to unpack (expected 4, got 3)","","# Error: expected","#     10","# but got","#     ValueError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":559,"studentId":0,"date":null,"diff":"\r\nInputObject                                                SideIndicator\r\n-----------                                                -------------\r\n    while n > 3:                                           =>           \r\n        first = second                                     =>           \r\n        second = third                                     =>           \r\n        third = current                                    =>           \r\n    def next(ele, val, forward):                           =>           \r\n        if ele == n:                                       =>           \r\n            return val                                     =>           \r\n        elif forward:                                      =>           \r\n            if ele % 7 == 0 or has_seven(ele):             =>           \r\n                return next(ele + 1, val + 1, not forward) =>           \r\n            else:                                          =>           \r\n                return next(ele + 1, val + 1, forward)     =>           \r\n        else:                                              =>           \r\n            if ele % 7 == 0 or has_seven(ele):             =>           \r\n                return next(ele + 1, val - 1, forward)     =>           \r\n            else:                                          =>           \r\n                return next(ele + 1, val - 1, not forward) =>           \r\n    return next(1, 1, True)                                =>           \r\n                                                           =>           \r\n                                                           =>           \r\n                                                           =>           \r\n                                                           =>           \r\n                                                           =>           \r\n                                                           =>           \r\n                                                           =>           \r\n    while n > 0:                                           <=           \r\n        first = current + first                            <=           \r\n    \"*** YOUR CODE HERE ***\"                               <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \n    current = 0\n    first = 1\n    second = 2\n    third = 3\n\n\n    if n <= 3:\n        return n\n    while n > 0:\n        current = 3 * first + 2 * second + third\n        first = current + first\n        n = n - 1\n    return current\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \n    current = 0\n    first = 1\n    second = 2\n    third = 3\n\n\n    if n <= 3:\n        return n\n    while n > 3:\n        current = 3 * first + 2 * second + third\n        first = second\n        second = third\n        third = current\n        n = n - 1\n    return current\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","640","","# Error: expected","#     10","# but got","#     640","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":560,"studentId":0,"date":null,"diff":"\r\nInputObject SideIndicator\r\n----------- -------------\r\n    i = 3   =>           \r\n    i = 4   <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    \n    one_minus = 3\n    two_minus = 2\n    three_minus = 1\n    i = 4\n\n    while i < n:\n        one_minus, two_minus, three_minus = one_minus + 2 * two_minus + 3 * three_minus, one_minus, two_minus \n        i += 1 \n    return one_minus\n\n    # if n <= 3:\n    #     return n \n    # else:\n    #     while n > 3:\n    #         n = n-1 \n    #         total = g(n) + 2\n    #         n = n-2 \n    #         total = total * g(n) + 3\n    #         n = n-3\n    #         total = total * g(n)\n    # return total\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    \n    one_minus = 3\n    two_minus = 2\n    three_minus = 1\n    i = 3\n\n    while i < n:\n        one_minus, two_minus, three_minus = one_minus + 2 * two_minus + 3 * three_minus, one_minus, two_minus \n        i += 1 \n    return one_minus\n\n    # if n <= 3:\n    #     return n \n    # else:\n    #     while n > 3:\n    #         n = n-1 \n    #         total = g(n) + 2\n    #         n = n-2 \n    #         total = total * g(n) + 3\n    #         n = n-3\n    #         total = total * g(n)\n    # return total\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","3","","# Error: expected","#     10","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":561,"studentId":0,"date":null,"diff":"\r\nInputObject                                                              SideIndicator\r\n-----------                                                              -------------\r\n        old, prev, current = prev, current, current + 2 * prev + 3 * old =>           \r\n        old, prev, current = prev, current, ((n-1) * current) + 1        <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n    current, prev, old  = 3, 2, 1\n    if n <= 3:\n        return n\n    while n > 3:\n        old, prev, current = prev, current, ((n-1) * current) + 1\n        n = n - 1\n    return current\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n\n    current, prev, old  = 3, 2, 1\n    if n <= 3:\n        return n\n    while n > 3:\n        old, prev, current = prev, current, current + 2 * prev + 3 * old\n        n = n - 1\n    return current\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","40","","# Error: expected","#     22","# but got","#     40","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":562,"studentId":0,"date":null,"diff":"\r\nInputObject                   SideIndicator\r\n-----------                   -------------\r\n    i = 3                     =>           \r\n    if n <= 3:                =>           \r\n    for i in range(4, n + 1): =>           \r\n    i = 5                     <=           \r\n    if n <= 5:                <=           \r\n    for i in range(6, n + 1): <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 5:\n        return n\n    g1, g2, g3 = 1, 2, 3\n    for i in range(6, n + 1):\n        g1, g2, g3 = g2, g3, g1 * 3 + g2 * 2 + g3\n    return g3\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    g1, g2, g3 = 1, 2, 3\n    for i in range(4, n + 1):\n        g1, g2, g3 = g2, g3, g1 * 3 + g2 * 2 + g3\n    return g3\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","4","","# Error: expected","#     10","# but got","#     4","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":563,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n        while n > 3:  =>           \r\n        while i <= 3: <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        fir, sec, thir = 1, 2, 3\n        while i <= 3:\n            fir, sec, thir = sec, thir, thir + 2*sec + 3* fir\n            n = n - 1\n        return thir\n                 \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        fir, sec, thir = 1, 2, 3\n        while n > 3:\n            fir, sec, thir = sec, thir, thir + 2*sec + 3* fir\n            n = n - 1\n        return thir\n                 \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 212, in g_iter","    while i <= 3:","NameError: name 'i' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":564,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n    for a in range (n-3): =>           \r\n    return z              =>           \r\n    for _ in range (n-3): <=           \r\n        return z          <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n == 1 or n == 2 or n == 3:\n        return n\n    x, y, z = 1, 2, 3 #z-1=2 and y-1= 1\n    for _ in range (n-3):\n        x, y, z, = y, z , z + 2*y + 3*x\n        return z\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n == 1 or n == 2 or n == 3:\n        return n\n    x, y, z = 1, 2, 3 #z-1=2 and y-1= 1\n    for a in range (n-3):\n        x, y, z, = y, z , z + 2*y + 3*x\n    return z\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","10","","# Error: expected","#     22","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":565,"studentId":0,"date":null,"diff":"\r\nInputObject       SideIndicator\r\n-----------       -------------\r\n    while n > 3:  =>           \r\n        n = n - 1 =>           \r\n                  =>           \r\n    else:         <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    a = 1\n    b = 2\n    c = 3\n    if n <= 3:\n        return n\n    else:\n        a, b, c = b, c, 3 * a + 2 * b + c\n    return c\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    a = 1\n    b = 2\n    c = 3\n    if n <= 3:\n        return n\n    while n > 3:\n        a, b, c = b, c, 3 * a + 2 * b + c\n        n = n - 1\n        \n    return c\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","10","","# Error: expected","#     22","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":567,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n        term3, term2, term1 = 3, 2, 1        =>           \r\n        term3, term2, term1 = n-1, n-2, n-3  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        term3, term2, term1 = n-1, n-2, n-3 \n        while n > 3:\n            term4 = term3 + 2 * term2 + 3 * term1\n            term3, term2, term1 = term4, term3, term2 \n            n -= 1 \n        return term4\n\n# def fib_iterative(n):\n#     current, next = 0,1\n#     while n>0:\n#         current, next = next, current + next \n#         n = n-1\n#     return current \n\n# def fib_recursive(n):\n#     if n==0:\n#         return 0\n#     elif n ==1:\n#         return 1 \n#     else: \n#         return fib_recursive(n-1) + fib_recursive(n-2)\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        term3, term2, term1 = 3, 2, 1 \n        while n > 3:\n            term4 = term3 + 2 * term2 + 3 * term1\n            term3, term2, term1 = term4, term3, term2 \n            n -= 1 \n        return term4\n\n# def fib_iterative(n):\n#     current, next = 0,1\n#     while n>0:\n#         current, next = next, current + next \n#         n = n-1\n#     return current \n\n# def fib_recursive(n):\n#     if n==0:\n#         return 0\n#     elif n ==1:\n#         return 1 \n#     else: \n#         return fib_recursive(n-1) + fib_recursive(n-2)\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","33","","# Error: expected","#     22","# but got","#     33","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":568,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n        while k < n:  =>           \r\n        while k <= n: <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        a= 1\n        b= 2\n        c= 3\n        total, k= 0, 3\n        while k <= n:\n            total= c + 2* b +3 *a\n            a= b\n            b= c\n            c= total\n            k += 1\n        return total\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        a= 1\n        b= 2\n        c= 3\n        total, k= 0, 3\n        while k < n:\n            total= c + 2* b +3 *a\n            a= b\n            b= c\n            c= total\n            k += 1\n        return total\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","22","","# Error: expected","#     10","# but got","#     22","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":569,"studentId":0,"date":null,"diff":"\r\nInputObject         SideIndicator\r\n-----------         -------------\r\n        while n>=4: =>           \r\n        while n>=3: <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a,b,c=1,2,3\n    if n<=3:\n        return n\n    else:\n        while n>=3:\n            a,b,c=b,b+a,(3*a+2*b+c)\n            n-=1\n        return c\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a,b,c=1,2,3\n    if n<=3:\n        return n\n    else:\n        while n>=4:\n            a,b,c=b,b+a,(3*a+2*b+c)\n            n-=1\n        return c\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","22","","# Error: expected","#     10","# but got","#     22","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":570,"studentId":0,"date":null,"diff":"\r\nInputObject                       SideIndicator\r\n-----------                       -------------\r\n            a, b, c = b, c, total =>           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    i, a, b, c, total = 1, 1, 2, 3, 0\n    while i <= n:\n        if i <= 3:\n            i, total = i + 1, i\n        else:\n            i, total = i + 1, c + 2 * b + 3 * a\n    return total\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    i, a, b, c, total = 1, 1, 2, 3, 0\n    while i <= n:\n        if i <= 3:\n            i, total = i + 1, i\n        else:\n            i, total = i + 1, c + 2 * b + 3 * a\n            a, b, c = b, c, total\n    return total\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","10","","# Error: expected","#     22","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":571,"studentId":0,"date":null,"diff":"\r\nInputObject         SideIndicator\r\n-----------         -------------\r\n        print(last) <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total = 0\n    last = [1,2,3]\n    if n <= 3:\n    \treturn n\n\n    times = 3\n    while times < n:\n    \ttotal = 3*last[0]+ 2*last[1] + 1*last[2]\n    \tlast[0] = last[1]\n    \tlast[1] = last[2]\n    \tlast[2] = total \n    \tprint(last)\n    \ttimes += 1\n\n    return last[2]\n\n\n\n\n\n\n\n\n\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total = 0\n    last = [1,2,3]\n    if n <= 3:\n    \treturn n\n\n    times = 3\n    while times < n:\n    \ttotal = 3*last[0]+ 2*last[1] + 1*last[2]\n    \tlast[0] = last[1]\n    \tlast[1] = last[2]\n    \tlast[2] = total \n    \ttimes += 1\n\n    return last[2]\n\n\n\n\n\n\n\n\n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","[2, 3, 10]","10","","# Error: expected","#     10","# but got","#     [2, 3, 10]","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":572,"studentId":0,"date":null,"diff":"\r\nInputObject                                                          SideIndicator\r\n-----------                                                          -------------\r\n        nums.append(nums[2] + 2 * nums[1] + 3 * nums[0])             =>           \r\n        nums.append(nums[n - 2] + 2 * nums[n - 3] + 3 * nums[n - 4]) <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    nums = [1, 2, 3]\n    if n < 4:\n        return nums[n - 1]\n    while n > 3:\n        nums.append(nums[n - 2] + 2 * nums[n - 3] + 3 * nums[n - 4])\n        del nums[0]\n        n -= 1\n    return nums[len(nums) - 1]\n\n\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    nums = [1, 2, 3]\n    if n < 4:\n        return nums[n - 1]\n    while n > 3:\n        nums.append(nums[2] + 2 * nums[1] + 3 * nums[0])\n        del nums[0]\n        n -= 1\n    return nums[len(nums) - 1]\n\n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 217, in g_iter","    nums.append(nums[n - 2] + 2 * nums[n - 3] + 3 * nums[n - 4])","IndexError: list index out of range","","# Error: expected","#     22","# but got","#     IndexError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":573,"studentId":0,"date":null,"diff":"\r\nInputObject  SideIndicator\r\n-----------  -------------\r\n    return b =>           \r\n    return c <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    i,a,b,c=3,3,2,1\n    while i<=n:\n        a,b,c=(a+2*b+3*c),a,b\n        i+=1\n    return c\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    i,a,b,c=3,3,2,1\n    while i<=n:\n        a,b,c=(a+2*b+3*c),a,b\n        i+=1\n    return b\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","3","","# Error: expected","#     10","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":575,"studentId":0,"date":null,"diff":"\r\nInputObject                       SideIndicator\r\n-----------                       -------------\r\n    final,ans,ans1,ans2=0,0,0,0   =>           \r\n    while n>3:                    =>           \r\n        if n-1<=3:                =>           \r\n            ans=n-1               =>           \r\n        if n-2<=3:                =>           \r\n            ans1=(n-2)*2          =>           \r\n        if n-3<=3:                =>           \r\n            ans2=(n-3)*3          =>           \r\n        final+=ans+ans1+ans2      =>           \r\n        n-=1                      =>           \r\n    return final                  =>           \r\n                                  =>           \r\n    answer,n2,n3=1,n,n            <=           \r\n    while n>=3:                   <=           \r\n        answer= 3*n-3             <=           \r\n        n-=3                      <=           \r\n    while n2>=3:                  <=           \r\n        answer2=2*n2-2            <=           \r\n        n2-=2                     <=           \r\n    while n3>=3:                  <=           \r\n        answer3=n3-1              <=           \r\n        n3-=1                     <=           \r\n    return answer+answer2+answer3 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    answer,n2,n3=1,n,n\n    if n<=3:\n        return n\n    while n>=3:\n        answer= 3*n-3\n        n-=3\n    while n2>=3:\n        answer2=2*n2-2\n        n2-=2\n    while n3>=3:\n        answer3=n3-1\n        n3-=1\n    return answer+answer2+answer3\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    final,ans,ans1,ans2=0,0,0,0\n    if n<=3:\n        return n\n    while n>3:\n        if n-1<=3:\n            ans=n-1\n        if n-2<=3:\n            ans1=(n-2)*2\n        if n-3<=3:\n            ans2=(n-3)*3\n        final+=ans+ans1+ans2\n        n-=1\n    return final\n    \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","17","","# Error: expected","#     10","# but got","#     17","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":576,"studentId":0,"date":null,"diff":"\r\nInputObject                                               SideIndicator\r\n-----------                                               -------------\r\n            first, second, third = second, third, total   =>           \r\n            # first, second, third = second, third, total <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        first, second, third = 1, 2, 3\n        while n > 3:\n            total = third + 2*second + 3*first\n            # first, second, third = second, third, total\n            n -= 1\n        return total\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        first, second, third = 1, 2, 3\n        while n > 3:\n            total = third + 2*second + 3*first\n            first, second, third = second, third, total\n            n -= 1\n        return total\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","10","","# Error: expected","#     22","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":577,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n        print(s1, s2, s3) <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"use counter i(i +1) and go through n times; similar to implementing fibonacci; keep track of 4 variables, current, previous; update variables as you go; start by making a while loop\"\n    if n <= 3:\n        return n\n    i = 4\n    s1 = 1\n    s2 = 2\n    s3 = 3\n    while i <= n:\n        i = i + 1\n        s1, s2, s3 = s2, s3, s3 + 2*s2 + 3*s1\n        print(s1, s2, s3)\n    return s3\n\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"use counter i(i +1) and go through n times; similar to implementing fibonacci; keep track of 4 variables, current, previous; update variables as you go; start by making a while loop\"\n    if n <= 3:\n        return n\n    i = 4\n    s1 = 1\n    s2 = 2\n    s3 = 3\n    while i <= n:\n        i = i + 1\n        s1, s2, s3 = s2, s3, s3 + 2*s2 + 3*s1\n    return s3\n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","2 3 10","10","","# Error: expected","#     10","# but got","#     2 3 10","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":579,"studentId":0,"date":null,"diff":"\r\nInputObject                          SideIndicator\r\n-----------                          -------------\r\n        current = a + 2 * b + 3 * c  =>           \r\n        current += a + 2 * b + 3 * c <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n\n    a, b, c = 3, 2, 1\n    current, place = 0, 4\n    while place <= n:\n        current += a + 2 * b + 3 * c\n        a, b, c = current, a, b\n        place += 1\n    return current\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n\n    a, b, c = 3, 2, 1\n    current, place = 0, 4\n    while place <= n:\n        current = a + 2 * b + 3 * c\n        a, b, c = current, a, b\n        place += 1\n    return current\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","32","","# Error: expected","#     22","# but got","#     32","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":580,"studentId":0,"date":null,"diff":"\r\nInputObject                           SideIndicator\r\n-----------                           -------------\r\n        if i<=3:                      =>           \r\n        if n<=3:                      <=           \r\n            print (i,g1,g2,g3,result) <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    result = 0\n    g1= 3\n    g2= 2\n    g3= 1\n    for i in range(1,n+1):\n        if n<=3:\n            result = i\n        else:\n            result = g1+ 2*g2+ 3*g3\n            print (i,g1,g2,g3,result)\n            g3= g2\n            g2= g1\n            g1= result\n\n    return result\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    result = 0\n    g1= 3\n    g2= 2\n    g3= 1\n    for i in range(1,n+1):\n        if i<=3:\n            result = i\n        else:\n            result = g1+ 2*g2+ 3*g3\n            g3= g2\n            g2= g1\n            g1= result\n\n    return result\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","1 3 2 1 10","2 10 3 2 22","3 22 10 3 51","4 51 22 10 125","125","","# Error: expected","#     10","# but got","#     1 3 2 1 10","#     2 10 3 2 22","#     3 22 10 3 51","#     4 51 22 10 125","#     125","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":581,"studentId":0,"date":null,"diff":"\r\nInputObject                                   SideIndicator\r\n-----------                                   -------------\r\n            x, y, z = y, z, z + 2 * y + 3 * x =>           \r\n    return z                                  =>           \r\n            x, y, z =y, z, z + 2 * y + 3 * x  <=           \r\n    return c                                  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    x, y, z = 1, 2, 3\n\n    if n < 3:\n        return n\n    else:\n        for i in range(3,n):\n            x, y, z =y, z, z + 2 * y + 3 * x\n    return c\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    x, y, z = 1, 2, 3\n\n    if n < 3:\n        return n\n    else:\n        for i in range(3,n):\n            x, y, z = y, z, z + 2 * y + 3 * x\n    return z\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 219, in g_iter","    return c","NameError: name 'c' is not defined","","# Error: expected","#     3","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":582,"studentId":0,"date":null,"diff":"\r\nInputObject       SideIndicator\r\n-----------       -------------\r\n    >>> g_iter(5) =>           \r\n    >>> g_iter(6) <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(6)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a = 1*(n - 1)\n    b = 2*(n - 2)\n    c = 3*(n - 3)\n    i = n\n    total = 0\n    if n <= 3:\n        return n\n    else:\n        total = 10\n        while i > 4:\n            total += (b + c)\n            i -= 1\n    return total\n        \n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a = 1*(n - 1)\n    b = 2*(n - 2)\n    c = 3*(n - 3)\n    i = n\n    total = 0\n    if n <= 3:\n        return n\n    else:\n        total = 10\n        while i > 4:\n            total += (b + c)\n            i -= 1\n    return total\n        \n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(6)","44","","# Error: expected","#     22","# but got","#     44","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":584,"studentId":0,"date":null,"diff":"\r\nInputObject     SideIndicator\r\n-----------     -------------\r\n    return x(n) =>           \r\n    return x    <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x = lambda y: y if y <= 3 else x(y - 1) + 2 * x(y - 2) + 3 * x(y - 3)\n    return x\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x = lambda y: y if y <= 3 else x(y - 1) + 2 * x(y - 2) + 3 * x(y - 3)\n    return x(n)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","<function g_iter.<locals>.<lambda> at 0x000001E6B78A4598>","","# Error: expected","#     1","# but got","#     <function g_iter.<locals>.<lambda> at 0x000001E6B78A4598>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":585,"studentId":0,"date":null,"diff":"\r\nInputObject                            SideIndicator\r\n-----------                            -------------\r\n            total = hi + 2*mid + 3*lo  =>           \r\n            total += hi + 2*mid + 3*lo <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        total = 0\n        lo, mid, hi = 1, 2, 3\n        k = 4\n        while n >= k:\n            \"\"\"total += (n-a) + b*(n-b) + c*(n-c)\n            if n-a > 3:\n                total += (n-a) + b*(n-b) + c*(n-c)\n            if n-b > 3:\n                total += (n-a) + b*(n-b) + c*(n-c)\n            if n-c > 3:\n                total += (n-a) + b*(n-b) + c*(n-c)\"\"\"\n            total += hi + 2*mid + 3*lo\n            lo, mid, hi = mid, hi, total\n            k += 1\n        return total\n    \n    \"\"\"total = 0\n    while n > 3:\n        minus1, minus2, minus3 = n-1, n-2, n-3\n        total += minus1 + 2*minus2 + 3*minus3\n        n -= 1\n    return n + total\"\"\"\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        total = 0\n        lo, mid, hi = 1, 2, 3\n        k = 4\n        while n >= k:\n            \"\"\"total += (n-a) + b*(n-b) + c*(n-c)\n            if n-a > 3:\n                total += (n-a) + b*(n-b) + c*(n-c)\n            if n-b > 3:\n                total += (n-a) + b*(n-b) + c*(n-c)\n            if n-c > 3:\n                total += (n-a) + b*(n-b) + c*(n-c)\"\"\"\n            total = hi + 2*mid + 3*lo\n            lo, mid, hi = mid, hi, total\n            k += 1\n        return total\n    \n    \"\"\"total = 0\n    while n > 3:\n        minus1, minus2, minus3 = n-1, n-2, n-3\n        total += minus1 + 2*minus2 + 3*minus3\n        n -= 1\n    return n + total\"\"\"\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","32","","# Error: expected","#     22","# but got","#     32","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":586,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                                                \r\n-----------                                                                                                                \r\n        iter_list = [iter_list[1], iter_list[2], iter_list[2] + 2 * iter_list[1] + 3 * iter_list[0]]                       \r\n        iter_list = [iter_list[1], iter_list[2], iter_list[index - 1] + 2 * iter_list[index - 2] + 3 * iter_list[index -...\r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    iter_list = [1, 2, 3]\n    index = 3\n    while(index < n):\n        iter_list = [iter_list[1], iter_list[2], iter_list[index - 1] + 2 * iter_list[index - 2] + 3 * iter_list[index - 3]]\n        index += 1\n    return iter_list[n - 1] if n <= 3 else iter_list[2]\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    iter_list = [1, 2, 3]\n    index = 3\n    while(index < n):\n        iter_list = [iter_list[1], iter_list[2], iter_list[2] + 2 * iter_list[1] + 3 * iter_list[0]]\n        index += 1\n    return iter_list[n - 1] if n <= 3 else iter_list[2]\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 213, in g_iter","    iter_list = [iter_list[1], iter_list[2], iter_list[index - 1] + 2 * iter_list[index - 2] + 3 * iter_list[index - 3]]","IndexError: list index out of range","","# Error: expected","#     22","# but got","#     IndexError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":587,"studentId":0,"date":null,"diff":"\r\nInputObject                                                              SideIndicator\r\n-----------                                                              -------------\r\n            frst,scnd,thrd = scnd,thrd,thrd + (2 * scnd) + (3 * frst)    =>           \r\n            frst,scnd,thrd, scnd,thrd,thrd + (2 * scnd) + (3 *frst)      <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        frst,scnd,thrd = 1,2,3\n        while n>3:\n            n-=1\n            frst,scnd,thrd, scnd,thrd,thrd + (2 * scnd) + (3 *frst)   \n        return thrd\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        frst,scnd,thrd = 1,2,3\n        while n>3:\n            n-=1\n            frst,scnd,thrd = scnd,thrd,thrd + (2 * scnd) + (3 * frst)   \n        return thrd\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","3","","# Error: expected","#     10","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":588,"studentId":0,"date":null,"diff":"\r\nInputObject                  SideIndicator\r\n-----------                  -------------\r\n        n1, n2, n3 = 3, 2, 1 =>           \r\n        n1, n2, n3 = 1, 2, 3 <=           \r\n        n2 = 2               <=           \r\n        n3 = 3               <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total = 0\n    if n <= 3:\n        total +=n\n    else:\n        n1, n2, n3 = 1, 2, 3\n        n2 = 2\n        n3 = 3\n        i = n-3\n        while i!=0:\n            total = n1+ 2*n2 + 3*n3\n            n3,n2,n1 = n2, n1, total\n            i-=1\n    return total\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    total = 0\n    if n <= 3:\n        total +=n\n    else:\n        n1, n2, n3 = 3, 2, 1\n        i = n-3\n        while i!=0:\n            total = n1+ 2*n2 + 3*n3\n            n3,n2,n1 = n2, n1, total\n            i-=1\n    return total\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","14","","# Error: expected","#     10","# but got","#     14","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":589,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                     SideIndicator\r\n-----------                                                                     -------------\r\n            lst += [(lst[start - 1] + 2 * lst[start - 2] + 3 * lst[start - 3])] =>           \r\n            lst += [(lst[start - 1] * 2 + lst[start - 2] + 3 * lst[start - 3])] <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        lst = [1, 2, 3]\n        start = 3\n        while start < n:\n            lst += [(lst[start - 1] * 2 + lst[start - 2] + 3 * lst[start - 3])]\n            start += 1\n        return lst[n - 1]\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        lst = [1, 2, 3]\n        start = 3\n        while start < n:\n            lst += [(lst[start - 1] + 2 * lst[start - 2] + 3 * lst[start - 3])]\n            start += 1\n        return lst[n - 1]\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","11","","# Error: expected","#     10","# but got","#     11","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":590,"studentId":0,"date":null,"diff":"\r\nInputObject                            SideIndicator\r\n-----------                            -------------\r\n        g_n = g_3 + g_2 * 2 + g_1 * 3  =>           \r\n        g_3 = g_n                      =>           \r\n        temp = g_3 + g_2 * 2 + g_1 * 3 <=           \r\n        g_n += temp                    <=           \r\n        g_3 = temp                     <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if(n<=3):\n        return n\n    g_1, g_2, g_3, g_n, x = 1, 2, 3, 0, 4\n    while x <= n:\n        temp = g_3 + g_2 * 2 + g_1 * 3\n        g_n += temp\n        g_1 = g_2\n        g_2 = g_3\n        g_3 = temp\n        x+=1\n    return g_n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if(n<=3):\n        return n\n    g_1, g_2, g_3, g_n, x = 1, 2, 3, 0, 4\n    while x <= n:\n        g_n = g_3 + g_2 * 2 + g_1 * 3\n        g_1 = g_2\n        g_2 = g_3\n        g_3 = g_n\n        x+=1\n    return g_n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","32","","# Error: expected","#     22","# but got","#     32","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":591,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n            temp = z =>           \r\n            y = temp =>           \r\n        n -= 1       <=           \r\n            y = z    <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    else:\n        x = 1\n        y = 2\n        z = 3\n\n        n -= 1\n        while n > 3:\n            x = y\n            y = z \n            z = z + 2 * y + 3 * x\n            n -= 1\n    return z\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    else:\n        x = 1\n        y = 2\n        z = 3\n\n        while n > 3:\n            temp = z\n            z = z + 2 * y + 3 * x\n            x = y\n            y = temp\n            n -= 1\n    return z\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","3","","# Error: expected","#     10","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":592,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n    counter = 3                                       =>           \r\n        n1, n2, n3 = n2, n3, n3 + (2 * n2) + (3 * n1) =>           \r\n    middle = 6 - start - end                          =>           \r\n    if n > 0:                                         =>           \r\n        move_stack(n - 1, start, end)                 =>           \r\n        print_move(start, end)                        =>           \r\n        move_stack(n - 1, middle, start)              =>           \r\n                                                      =>           \r\n    counter = 0                                       <=           \r\n        n1, n2, n3 = n2, n3, n1 + 2 * n2 + 3 * n3     <=           \r\n    def fib(x):                                       <=           \r\n        original = 0                                  <=           \r\n        new = 1                                       <=           \r\n        counter = 0                                   <=           \r\n        while counter != x:                           <=           \r\n            original, counter = new, orginal + new    <=           \r\n            counter += 1                              <=           \r\n                                                      <=           \r\n                                                      <=           \r\n                                                      <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    n1 = 1\n    n2 = 2\n    n3 = 3\n    counter = 0\n    if n <= 3:\n        return n\n    while n != counter:\n        n1, n2, n3 = n2, n3, n1 + 2 * n2 + 3 * n3\n        counter += 1\n    return n3\n\n    def fib(x):\n        original = 0\n        new = 1\n        counter = 0\n        while counter != x:\n            original, counter = new, orginal + new\n            counter += 1 \n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    n1 = 1\n    n2 = 2\n    n3 = 3\n    counter = 3\n    if n <= 3:\n        return n\n    while n != counter:\n        n1, n2, n3 = n2, n3, n3 + (2 * n2) + (3 * n1)\n        counter += 1\n    return n3\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","657","","# Error: expected","#     10","# but got","#     657","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":595,"studentId":0,"date":null,"diff":"\r\nInputObject SideIndicator\r\n----------- -------------\r\n    i=4     =>           \r\n    i=3     <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    g_1,g_2,g_3=1,2,3\n    i=3\n    while i<=n:\n        g_1,g_2,g_3=g_2,g_3,3*g_1+2*g_2+g_3\n        i+=1\n    return g_3\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    g_1,g_2,g_3=1,2,3\n    i=4\n    while i<=n:\n        g_1,g_2,g_3=g_2,g_3,3*g_1+2*g_2+g_3\n        i+=1\n    return g_3\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","22","","# Error: expected","#     10","# but got","#     22","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":596,"studentId":0,"date":null,"diff":"\r\nInputObject        SideIndicator\r\n-----------        -------------\r\n            n -= 1 =>           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    a = 0 \n    if n <= 3:\n        return n\n    while n > 3:\n        if n - 1 <= 3:\n            a += (n-1) + 2*(n-2) + 3*(n-3)\n        elif n - 2 <= 3:\n            a += 2*(n-2) + 3*(n-3)\n            n -= 1\n    return a\n        \n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    a = 0 \n    if n <= 3:\n        return n\n    while n > 3:\n        if n - 1 <= 3:\n            a += (n-1) + 2*(n-2) + 3*(n-3)\n            n -= 1\n        elif n - 2 <= 3:\n            a += 2*(n-2) + 3*(n-3)\n            n -= 1\n    return a\n        \n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     10","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":597,"studentId":0,"date":null,"diff":"\r\nInputObject        SideIndicator\r\n-----------        -------------\r\n    while i < n-1: =>           \r\n    while i <= n:  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a,b,c,i = 1,2,3,0\n\n    if n <= 3:\n        return n\n    while i <= n:\n        #print(a,b,c)\n        a,b,c = b , c , a*3 + b*2 + c\n        i += 1\n    return a\n\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    a,b,c,i = 1,2,3,0\n\n    if n <= 3:\n        return n\n    while i < n-1:\n        #print(a,b,c)\n        a,b,c = b , c , a*3 + b*2 + c\n        i += 1\n    return a\n\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","51","","# Error: expected","#     10","# but got","#     51","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":598,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n    g1= 1                                      =>           \r\n        g3, g2, g1 = g3 + 2*g2 + 3*g1, g3, g2  =>           \r\n    g1 = 1                                     <=           \r\n        g3 = g2, g1 = g3 + 2*g2 + 3*g1, g3, g2 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    g3 = 3\n    g2 = 2\n    g1 = 1\n    k = 3\n    while k < n:\n        g3 = g2, g1 = g3 + 2*g2 + 3*g1, g3, g2\n        k += 1\n    return g3\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    g3 = 3\n    g2 = 2\n    g1= 1\n    k = 3\n    while k < n:\n        g3, g2, g1 = g3 + 2*g2 + 3*g1, g3, g2\n        k += 1\n    return g3\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 215, in g_iter","    g3 = g2, g1 = g3 + 2*g2 + 3*g1, g3, g2","ValueError: too many values to unpack (expected 2)","","# Error: expected","#     10","# but got","#     ValueError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":599,"studentId":0,"date":null,"diff":"\r\nInputObject                       SideIndicator\r\n-----------                       -------------\r\n                                  =>           \r\n        return temp_result        =>           \r\n            result += temp_result <=           \r\n        return result             <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    numList = [1, 2, 3]\n    result = 0\n    \n    if n <= 3:\n        return numList[n-1]\n\n    else:\n        for x in range(4, n+1):            \n            temp_result = numList[x-2] + 2*numList[x-3] + 3*numList[x-4]\n            numList.append(temp_result)\n            result += temp_result\n        return result\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    numList = [1, 2, 3]\n    result = 0\n    \n    if n <= 3:\n        return numList[n-1]\n\n    else:\n        for x in range(4, n+1):            \n            temp_result = numList[x-2] + 2*numList[x-3] + 3*numList[x-4]\n            numList.append(temp_result)\n            \n        return temp_result\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","32","","# Error: expected","#     22","# but got","#     32","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":600,"studentId":0,"date":null,"diff":"\r\nInputObject                                       SideIndicator\r\n-----------                                       -------------\r\n        largest, large, small = x, largest, large =>           \r\n        largest, large, small = x, lrgest, large  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    largest = 3 \n    large = 2\n    small = 1\n\n    change = 0\n\n    if n <= 3:\n        return n \n    while change < (n - 3): \n        x = largest + 2*large + 3*small \n        largest, large, small = x, lrgest, large\n        change  = change + 1\n    return largest \n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    largest = 3 \n    large = 2\n    small = 1\n\n    change = 0\n\n    if n <= 3:\n        return n \n    while change < (n - 3): \n        x = largest + 2*large + 3*small \n        largest, large, small = x, largest, large\n        change  = change + 1\n    return largest \n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 218, in g_iter","    largest, large, small = x, lrgest, large","NameError: name 'lrgest' is not defined","","# Error: expected","#     10","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":601,"studentId":0,"date":null,"diff":"\r\nInputObject                            SideIndicator\r\n-----------                            -------------\r\n        a, b, c = b, c, c + 2*b + 3*a; =>           \r\n        a = b;                         <=           \r\n        b = c;                         <=           \r\n        c = c + 2*b + 3*a;             <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    # ans = 0;\n    # if (n <= 3):\n    #     return n;\n    # else:\n    #     i = n;\n    #     while (i > 3):\n    #         ans += (i-1) + 2*(i-2) + 3*(i-3);\n    #         i -= 1;\n    # if (n > 4):\n    #     ans -= 4;\n    # return ans;\n\n    if (n < 4):\n        return n;\n    a = 1;\n    b = 2;\n    c = 3;\n    while (n > 3):\n        a = b;\n        b = c;\n        c = c + 2*b + 3*a;\n        n -= 1;\n    return c;\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    # ans = 0;\n    # if (n <= 3):\n    #     return n;\n    # else:\n    #     i = n;\n    #     while (i > 3):\n    #         ans += (i-1) + 2*(i-2) + 3*(i-3);\n    #         i -= 1;\n    # if (n > 4):\n    #     ans -= 4;\n    # return ans;\n\n    if (n < 4):\n        return n;\n    a = 1;\n    b = 2;\n    c = 3;\n    while (n > 3):\n        a, b, c = b, c, c + 2*b + 3*a;\n        n -= 1;\n    return c;\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","15","","# Error: expected","#     10","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":602,"studentId":0,"date":null,"diff":"\r\nInputObject                                                        SideIndicator\r\n-----------                                                        -------------\r\n            final_result+=instance_1+(2*instance_2)+(3*instance_3) =>           \r\n            count+=1                                               =>           \r\n            final_result+=instance_1+2*(instance_2)+3*instance_3   <=           \r\n        elif instance_3 <=3:                                       <=           \r\n            final_result+=instance_1                               <=           \r\n            instance_1=instance_2-1                                <=           \r\n            instance_2=instance_2-2                                <=           \r\n            instance_3=instance_2-3                                <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    instance_1=n-1\n    instance_2=n-2\n    instance_3=n-3\n    final_result=0\n    count=n-3\n    if n<=3:\n        return n\n    while count != 0 :\n        if instance_1 <=3:\n            final_result+=instance_1+2*(instance_2)+3*instance_3\n    \n        elif instance_2 <=3:\n            final_result+=3*(instance_3)+2*(instance_2)\n            instance_1=instance_1-1\n            instance_2=instance_1-2\n            instance_3=instance_1-3\n        elif instance_3 <=3:\n            final_result+=instance_1\n            instance_1=instance_2-1\n            instance_2=instance_2-2\n            instance_3=instance_2-3\n        count-=1\n    return final_result\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    instance_1=n-1\n    instance_2=n-2\n    instance_3=n-3\n    final_result=0\n    count=n-3\n    if n<=3:\n        return n\n    while count != 0 :\n        if instance_1 <=3:\n            final_result+=instance_1+(2*instance_2)+(3*instance_3)\n    \n        elif instance_2 <=3:\n            final_result+=3*(instance_3)+2*(instance_2)\n            instance_1=instance_1-1\n            instance_2=instance_1-2\n            instance_3=instance_1-3\n            count+=1\n        count-=1\n    return final_result\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","17","","# Error: expected","#     22","# but got","#     17","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":603,"studentId":0,"date":null,"diff":"\r\nInputObject                                               SideIndicator\r\n-----------                                               -------------\r\n        g_total += (n-1) + 2 * (n-2) + 3 *(n-3) - n       =>           \r\n        g_total += (n-1) + 2 * (n-2) + 3 *(n-3) - g_total <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    g_total = n\n    while n > 3:\n        g_total += (n-1) + 2 * (n-2) + 3 *(n-3) - g_total\n        n -= 1\n    return g_total\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    g_total = n\n    while n > 3:\n        g_total += (n-1) + 2 * (n-2) + 3 *(n-3) - n\n        n -= 1\n    return g_total\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","10","","# Error: expected","#     22","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":604,"studentId":0,"date":null,"diff":"\r\nInputObject    SideIndicator\r\n-----------    -------------\r\n        n -= 1 =>           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    a, b, c = 1, 2, 3\n    while n > 3:\n        a, b, c = b, c, c + 2 * b + 3 * a\n    return c\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    a, b, c = 1, 2, 3\n    while n > 3:\n        a, b, c = b, c, c + 2 * b + 3 * a\n        n -= 1\n    return c\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     10","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":605,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n            g1, g2, g3 = g1 + 2 * g2 + 3 * g3, g1, g2 =>           \r\n            g1, g2, g3 = g1 + 2 * g2 + 3 * g1, g1, g2 <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def g_incrementer(n):\n        \"\"\"The iteration begins at g(4) and saves and rebinds the values g1, g2,\n        and g3 to get the next g(n). i is a counter that stops the iteration at g(n).\"\"\"\n        g1, g2, g3 = 3, 2, 1\n        i = 4\n        while i <= n:\n            g1, g2, g3 = g1 + 2 * g2 + 3 * g1, g1, g2\n            i = i + 1\n        return g1\n    if n <= 3:\n        return n\n    else:\n        return g_incrementer(n)\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def g_incrementer(n):\n        \"\"\"The iteration begins at g(4) and saves and rebinds the values g1, g2,\n        and g3 to get the next g(n). i is a counter that stops the iteration at g(n).\"\"\"\n        g1, g2, g3 = 3, 2, 1\n        i = 4\n        while i <= n:\n            g1, g2, g3 = g1 + 2 * g2 + 3 * g3, g1, g2\n            i = i + 1\n        return g1\n    if n <= 3:\n        return n\n    else:\n        return g_incrementer(n)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","16","","# Error: expected","#     10","# but got","#     16","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":606,"studentId":0,"date":null,"diff":"\r\nInputObject       SideIndicator\r\n-----------       -------------\r\n        n -= 1    =>           \r\n    return c      =>           \r\n        n = n - 1 <=           \r\n        return c  <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    #\n    # if n <= 3:\n    #     return (n)\n    # else:\n    #     return ((n-1) + (2 * (n-2) + (3 * (n-3)))\n    #\n    #\n    # if n <= 3:\n    #     return n\n    # total = 0\n    # number = 0\n    # while n > 3:\n    #     a = (number * n)\n    #     total = a + total\n    #     number = number + 1\n    #     n = n - 1\n    # return total\n    # a = 1\n    # b = 2\n    # c = 3\n    # while n > 3:\n    #     c = (c*(n-3))\n\n    if n <= 3:\n        return n\n    a, b, c = 1, 2, 3\n    while n > 3:\n        a, b, c = b, c, c + 2 * b + 3 * a\n        n = n - 1\n        return c\n\n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n    #\n    # if n <= 3:\n    #     return (n)\n    # else:\n    #     return ((n-1) + (2 * (n-2) + (3 * (n-3)))\n    #\n    #\n    # if n <= 3:\n    #     return n\n    # total = 0\n    # number = 0\n    # while n > 3:\n    #     a = (number * n)\n    #     total = a + total\n    #     number = number + 1\n    #     n = n - 1\n    # return total\n    # a = 1\n    # b = 2\n    # c = 3\n    # while n > 3:\n    #     c = (c*(n-3))\n\n    if n <= 3:\n        return n\n    a, b, c = 1, 2, 3\n    while n > 3:\n        a, b, c = b, c, c + 2 * b + 3 * a\n        n -= 1\n    return c\n\n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","10",">>> g_iter(5)","10","","# Error: expected","#     22","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"Id":608,"studentId":0,"date":null,"diff":"\r\nInputObject                         SideIndicator\r\n-----------                         -------------\r\n        i=4                         =>           \r\n            a,b,c=b,c,(3*a)+(2*b)+c =>           \r\n        i=1                         <=           \r\n            a,b,c=b,c,3*a+2*b+c     <=           \r\n\r\n\r\n","before":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n   \n   \n    if n<=3:\n        return n\n    else:\n        a, b, c = 1, 2, 3\n        i=1\n        while i<=n:\n            a,b,c=b,c,3*a+2*b+c\n            i+=1\n        return c \n\n\n","after":"def g_iter(n):\n    \"\"\"Return the value of G(n), computed iteratively.\n\n    >>> g_iter(1)\n    1\n    >>> g_iter(2)\n    2\n    >>> g_iter(3)\n    3\n    >>> g_iter(4)\n    10\n    >>> g_iter(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])\n    True\n    \"\"\"\n   \n   \n    if n<=3:\n        return n\n    else:\n        a, b, c = 1, 2, 3\n        i=4\n        while i<=n:\n            a,b,c=b,c,(3*a)+(2*b)+c\n            i+=1\n        return c \n\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for g_iter","",">>> from hw02 import *",">>> g_iter(1)","1",">>> g_iter(2)","2",">>> g_iter(3)","3",">>> g_iter(4)","125","","# Error: expected","#     10","# but got","#     125","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]}]