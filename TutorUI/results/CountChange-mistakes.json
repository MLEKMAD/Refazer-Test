[{"ErrorFlag":2,"Id":1,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n        elif y == 0:     =>           \r\n            return j + k =>           \r\n        elif y == 1:     <=           \r\n            return j + y <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    p = 64\n    while p>amount:\n    \tp = p//2\n    def helper(x, y):\n    \tif x == 0:\n    \t\treturn 1\n    \telif x < 0:\n    \t\treturn 0\n    \telif y == 1:\n    \t\treturn 0\n    \telse:\n    \t\tj = helper(x-y, y)\n    \t\tk = helper(x, y//2)\n    \t\treturn j + y\n    return helper(amount, p)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    p = 64\n    while p>amount:\n    \tp = p//2\n    def helper(x, y):\n    \tif x == 0:\n    \t\treturn 1\n    \telif x < 0:\n    \t\treturn 0\n    \telif y == 0:\n    \t\treturn 0\n    \telse:\n    \t\tj = helper(x-y, y)\n    \t\tk = helper(x, y//2)\n    \t\treturn j + k\n    return helper(amount, p)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","8","","# Error: expected","#     6","# but got","#     8","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":2,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                         SideIndicator\r\n-----------                                                                         -------------\r\n            return counthelper(num-maxpart, maxpart) + counthelper(num, maxpart//2) =>           \r\n            return counthelper(num-maxpart, maxpart) + counthelper(num, maxpart/2)  <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def counthelper(num, maxpart):\n        if num==0:\n            return 1\n        elif num<0:\n            return 0\n        elif maxpart==0:\n            return 0\n        else:\n            return counthelper(num-maxpart, maxpart) + counthelper(num, maxpart/2)\n\n    maxpart=1\n    while maxpart<=amount:\n        maxpart*=2\n\n    return counthelper(amount, maxpart)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def counthelper(num, maxpart):\n        if num==0:\n            return 1\n        elif num<0:\n            return 0\n        elif maxpart==0:\n            return 0\n        else:\n            return counthelper(num-maxpart, maxpart) + counthelper(num, maxpart//2)\n\n    maxpart=1\n    while maxpart<=amount:\n        maxpart*=2\n\n    return counthelper(amount, maxpart)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 326, in counthelper","    return counthelper(num-maxpart, maxpart) + counthelper(num, maxpart/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 326, in counthelper","    return counthelper(num-maxpart, maxpart) + counthelper(num, maxpart/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 326, in counthelper","    return counthelper(num-maxpart, maxpart) + counthelper(num, maxpart/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 326, in counthelper","    return counthelper(num-maxpart, maxpart) + counthelper(num, maxpart/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 326, in counthelper","    return counthelper(num-maxpart, maxpart) + counthelper(num, maxpart/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 326, in counthelper","    return counthelper(num-maxpart, maxpart) + counthelper(num, maxpart/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 319, in counthelper","    if num==0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":3,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        elif m>n:    =>           \r\n            return 0 =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_partitions(n, m):\n        \"\"\"Count the ways to partition n using parts up to m.\"\"\"\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m==0:\n            return 0\n        else:\n            return count_partitions(n-m, m) +count_partitions(n, m*2) \n    return count_partitions(amount, 1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_partitions(n, m):\n        \"\"\"Count the ways to partition n using parts up to m.\"\"\"\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m==0:\n            return 0\n        elif m>n:\n            return 0\n        else:\n            return count_partitions(n-m, m) +count_partitions(n, m*2) \n    return count_partitions(amount, 1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_partitions(n, m):\r\n        if amount==0:\r\n            return 1\r\n        elif n<0:\r\n            return 0\r\n        elif m==0:\r\n            return 0\r\n        else:\r\n            return count_partitions(n-m, m)+count_partitions(n, m*2)\r\n    return count_partitions(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 327, in count_partitions","    return count_partitions(n-m, m) +count_partitions(n, m*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 327, in count_partitions","    return count_partitions(n-m, m) +count_partitions(n, m*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 327, in count_partitions","    return count_partitions(n-m, m) +count_partitions(n, m*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 327, in count_partitions","    return count_partitions(n-m, m) +count_partitions(n, m*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 327, in count_partitions","    return count_partitions(n-m, m) +count_partitions(n, m*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 327, in count_partitions","    return count_partitions(n-m, m) +count_partitions(n, m*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 320, in count_partitions","    if n == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":4,"studentId":0,"date":null,"diff":"\r\nInputObject                                                          SideIndicator\r\n-----------                                                          -------------\r\n        return partitions(amount - n, n) + partitions(amount, 2 * n) =>           \r\n        return partitions(amount - n) + partitions(amount, 2 * n)    <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def partitions(amount, n = 1):\n        if amount == n:\n            return 1\n        if amount < n:\n            return 0\n        return partitions(amount - n) + partitions(amount, 2 * n)\n    return partitions(amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def partitions(amount, n = 1):\n        if amount == n:\n            return 1\n        if amount < n:\n            return 0\n        return partitions(amount - n, n) + partitions(amount, 2 * n)\n    return partitions(amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","31","","# Error: expected","#     6","# but got","#     31","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":5,"studentId":0,"date":null,"diff":"\r\nInputObject                                             SideIndicator\r\n-----------                                             -------------\r\n        without_min = count_using(2 * min_coin, amount) =>           \r\n        without_min = count_using(2*min_coin, amount)   <=           \r\n                                                        <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    return count_using(1, amount)\n\ndef count_using(min_coin, amount):\n    if amount < 0:\n        return 0\n    elif min_coin > amount:\n        return 0\n    elif amount == 0:\n        return 1\n\n    else:\n        with_min = count_using(min_coin, amount - min_coin)\n        without_min = count_using(2*min_coin, amount)\n        return without_min + with_min\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    return count_using(1, amount)\n\ndef count_using(min_coin, amount):\n    if amount < 0:\n        return 0\n    elif amount == 0:\n        return 1\n    elif min_coin > amount:\n        return 0\n    else:\n        without_min = count_using(2 * min_coin, amount)\n        with_min = count_using(min_coin, amount - min_coin)\n        return without_min + with_min\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    return count_using(1, amount)\r\ndef count_using(min_coin, amount):\r\n    if amount<0:\r\n        return 0\r\n    elif min_coin>amount:\r\n        return 0\r\n    elif amount==0:\r\n        return 1\r\n    else:\r\n        with_min = count_using(min_coin, amount-min_coin)\r\n        without_min = count_using(2*min_coin, amount)\r\n        return without_min+k\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":6,"studentId":0,"date":null,"diff":"\r\nInputObject                                   SideIndicator\r\n-----------                                   -------------\r\n    if amount == 0:                           =>           \r\n        return 1                              =>           \r\n    if amount == 1:                           =>           \r\n        return 1                              =>           \r\n    result = 0                                =>           \r\n        result += count_change(i)             =>           \r\n    return result                             =>           \r\n    def cal(array):                           <=           \r\n        temp = 0                              <=           \r\n        outcome = []                          <=           \r\n        for i in range(len(array)//2 +1):     <=           \r\n            for j in range(len(array) - 2*i): <=           \r\n                temp += array[j]              <=           \r\n            outcome.append(temp)              <=           \r\n            temp = 0                          <=           \r\n        return outcome                        <=           \r\n    def cs(array):                            <=           \r\n        result = 0                            <=           \r\n        for i in range(len(array)):           <=           \r\n            result += array[i]                <=           \r\n        return result                         <=           \r\n    a = []                                    <=           \r\n        a.append(1)                           <=           \r\n    if amount >= 16:                          <=           \r\n        result = cal(cal(cal(a)))             <=           \r\n        return cs(result)                     <=           \r\n    if amount >= 8:                           <=           \r\n        result = cal(cal(a))                  <=           \r\n        return cs(result)                     <=           \r\n    if amount >= 4:                           <=           \r\n        result = cal(a)                       <=           \r\n        return cs(result)                     <=           \r\n    return cs(a)                              <=           \r\n                                              <=           \r\n                                              <=           \r\n                                              <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def cal(array):\n        temp = 0\n        outcome = []\n        for i in range(len(array)//2 +1):\n            for j in range(len(array) - 2*i):\n                temp += array[j]\n            outcome.append(temp)\n            temp = 0\n        return outcome\n\n    def cs(array):\n        result = 0\n        for i in range(len(array)):\n            result += array[i]\n        return result\n\n    a = []\n    for i in range(amount//2 + 1):\n        a.append(1)\n    if amount >= 16:\n        result = cal(cal(cal(a)))\n        return cs(result)\n    if amount >= 8:\n        result = cal(cal(a))\n        return cs(result)\n    if amount >= 4:\n        result = cal(a)\n        return cs(result)\n    return cs(a)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if amount == 0:\n        return 1\n    if amount == 1:\n        return 1\n    result = 0\n    for i in range(amount//2 + 1):\n        result += count_change(i)\n    return result\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","22","","# Error: expected","#     14","# but got","#     22","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":7,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n    return count_partitions(amount, 1)         =>           \r\n    return count_partitions(amount, 1, amount) <=           \r\n                                               <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_partitions(remainder, divisor):\n        \"\"\"Count the ways to partition n using parts up to m.\"\"\"\n        if remainder == 0:\n            return 1\n        if remainder <= 0:\n            return 0\n        if divisor > remainder:\n            return 0\n        else:\n            return count_partitions(remainder - divisor, divisor) + count_partitions(remainder, divisor*2)\n    return count_partitions(amount, 1, amount)\n\n\n    \"\"\"ways = 1\n    if amount == 0:\n        return ways\n    if amount == 1:\n        return ways\n    else:\n        ways = 1\n        value = 2\n        while ways <= amount:\n            if (2)**2 < amount:\n                value = (2)** (value + 1)\n                return count_change()\n    return ways\"\"\"\n    \"*** YOUR CODE HERE ***\"\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_partitions(remainder, divisor):\n        \"\"\"Count the ways to partition n using parts up to m.\"\"\"\n        if remainder == 0:\n            return 1\n        if remainder <= 0:\n            return 0\n        if divisor > remainder:\n            return 0\n        else:\n            return count_partitions(remainder - divisor, divisor) + count_partitions(remainder, divisor*2)\n    return count_partitions(amount, 1)\n\n    \"\"\"ways = 1\n    if amount == 0:\n        return ways\n    if amount == 1:\n        return ways\n    else:\n        ways = 1\n        value = 2\n        while ways <= amount:\n            if (2)**2 < amount:\n                value = (2)** (value + 1)\n                return count_change()\n    return ways\"\"\"\n    \"*** YOUR CODE HERE ***\"\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_partitions(remainder, divisor):\r\n        if amount==0:\r\n            return 1\r\n        if remainder<=0:\r\n            return 0\r\n        if divisor>remainder:\r\n            return 0\r\n        else:\r\n            return count_partitions(remainder-divisor, divisor)+count_partitions(remainder, divisor*2)\r\n    return count_partitions(amount, 1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 375, in count_change","    return count_partitions(amount, 1, amount)","TypeError: count_partitions() takes 2 positional arguments but 3 were given","","# Error: expected","#     6","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":8,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n    from math import log =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def change_helper(amount, power):\n        if amount < 0:\n            return 0\n        elif amount == 0 or 2**power==1 : #dont know if i need this\n            return 1\n        else:\n            return change_helper(amount, power-1) + change_helper(amount-2**power, power)\n    return change_helper(amount, int(log(amount, 2))) \n\n\n\n\ndef num_partitions(n, k):\n    \"\"\"Number of distinct ways to express N as a sum of pos int each of which is <= K, where K > 0\"\"\"\n    if n < 0:\n        return 0\n    elif k==1 or n==0:\n        return 1\n    else: \n        return num_partitions(n, k-1) + num_partitions(n-k, k)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    from math import log\n    def change_helper(amount, power):\n        if amount < 0:\n            return 0\n        elif amount == 0 or 2**power==1 : #dont know if i need this\n            return 1\n        else:\n            return change_helper(amount, power-1) + change_helper(amount-2**power, power)\n    return change_helper(amount, int(log(amount, 2))) \n\n\n\n\ndef num_partitions(n, k):\n    \"\"\"Number of distinct ways to express N as a sum of pos int each of which is <= K, where K > 0\"\"\"\n    if n < 0:\n        return 0\n    elif k==1 or n==0:\n        return 1\n    else: \n        return num_partitions(n, k-1) + num_partitions(n-k, k)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def change_helper(amount, power):\r\n        if amount<0:\r\n            return 0\r\n        elif amount==0 or 2**power==1:\r\n            return 1\r\n        else:\r\n            return change_helper(amount, power-1)+change_helper(amount-2**power, power)\r\n    return change_helper(amount, int(log(amount, 2)))\r\ndef num_partitions(n, k):\r\n    if n<0:\r\n        return 0\r\n    elif k==1 or n==0:\r\n        return 1\r\n    else:\r\n        return num_partitions(n, k-1)+num_partitions(n-k, k)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 303, in count_change","    return change_helper(amount, int(log(amount, 2)))","NameError: name 'log' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":9,"studentId":0,"date":null,"diff":"\r\nInputObject                                                             SideIndicator\r\n-----------                                                             -------------\r\n    return count_change_recursive(amount, largest_power_of_two(amount)) =>           \r\n    return count_change_recursive(n, largest_power_of_two(n))           <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def largest_power_of_two(n):\n        p2 = 1\n        while p2*2 <= n:\n            p2 = p2*2\n        return p2\n    def count_change_recursive(n, denom):\n        if n < 0:\n            return 0\n        elif n == 0 or denom == 1:\n            return 1\n        return count_change_recursive(n-denom, denom) + count_change_recursive(n, denom // 2)\n    return count_change_recursive(n, largest_power_of_two(n))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def largest_power_of_two(n):\n        p2 = 1\n        while p2*2 <= n:\n            p2 = p2*2\n        return p2\n    def count_change_recursive(n, denom):\n        if n < 0:\n            return 0\n        elif n == 0 or denom == 1:\n            return 1\n        return count_change_recursive(n-denom, denom) + count_change_recursive(n, denom // 2)\n    return count_change_recursive(amount, largest_power_of_two(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 309, in count_change","    return count_change_recursive(n, largest_power_of_two(n))","NameError: name 'n' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":10,"studentId":0,"date":null,"diff":"\r\nInputObject                    SideIndicator\r\n-----------                    -------------\r\n        if n == 0:             =>           \r\n        elif n < 0:            =>           \r\n            return 0           =>           \r\n        elif m == 0:           =>           \r\n            return 0           =>           \r\n        if n == 1:             <=           \r\n        elif m == 1:           <=           \r\n            return 1           <=           \r\n        elif n == 0 or m == 0: <=           \r\n            return 1           <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def largest_coin(amount):\n        coin = 1\n        while coin < amount:\n            coin = coin * 2\n        return coin // 2\n\n\n    def num_partitions(n, m):\n        if n == 1:\n            return 1\n        elif m == 1:\n            return 1\n        elif n == 0 or m == 0:\n            return 1\n        else:\n            return num_partitions(n - m, m) + num_partitions(n, m // 2)\n\n    return num_partitions(amount, largest_coin(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def largest_coin(amount):\n        coin = 1\n        while coin < amount:\n            coin = coin * 2\n        return coin // 2\n\n\n    def num_partitions(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return num_partitions(n - m, m) + num_partitions(n, m // 2)\n\n    return num_partitions(amount, largest_coin(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 324, in num_partitions","    return num_partitions(n - m, m) + num_partitions(n, m // 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 324, in num_partitions","    return num_partitions(n - m, m) + num_partitions(n, m // 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 324, in num_partitions","    return num_partitions(n - m, m) + num_partitions(n, m // 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 324, in num_partitions","    return num_partitions(n - m, m) + num_partitions(n, m // 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 324, in num_partitions","    return num_partitions(n - m, m) + num_partitions(n, m // 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 324, in num_partitions","    return num_partitions(n - m, m) + num_partitions(n, m // 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 317, in num_partitions","    if n == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":11,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n        if max_coin > n:                    <=           \r\n            return counter(n, max_coin / 2) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n\t\"\"\"Return the number of ways to make change for amount.\n\n\t>>> count_change(7)\n\t6\n\t>>> count_change(10)\n\t14\n\t>>> count_change(20)\n\t60\n\t>>> count_change(100)\n\t9828\n\t\"\"\"\n\tn = amount\n\tmax_coin = 1\n\t\n\t\n\twhile max_coin < n:\n\t\tmax_coin = max_coin * 2\n\tmax_coin = max_coin / 2\n\t\n\tdef counter(n, max_coin):\n\t\tif max_coin > n:\n\t\t\treturn counter(n, max_coin / 2)\n\t\tif max_coin < 1:\n\t\t\treturn 0\n\t\tif n < 0:\n\t\t\treturn 0\n\t\tif n == 0:\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn counter(n - max_coin, max_coin) + counter(n, max_coin / 2)\n\n\treturn counter(n, max_coin)\n\n\n\ndef print_move(origin, destination):\n\t\"\"\"Print instructions to move a disk.\"\"\"\n\tprint(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n\t\"\"\"Return the number of ways to make change for amount.\n\n\t>>> count_change(7)\n\t6\n\t>>> count_change(10)\n\t14\n\t>>> count_change(20)\n\t60\n\t>>> count_change(100)\n\t9828\n\t\"\"\"\n\tn = amount\n\tmax_coin = 1\n\t\n\t\n\twhile max_coin < n:\n\t\tmax_coin = max_coin * 2\n\tmax_coin = max_coin / 2\n\t\n\tdef counter(n, max_coin):\n\t\tif max_coin < 1:\n\t\t\treturn 0\n\t\tif n < 0:\n\t\t\treturn 0\n\t\tif n == 0:\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn counter(n - max_coin, max_coin) + counter(n, max_coin / 2)\n\n\treturn counter(n, max_coin)\n\n\n\ndef print_move(origin, destination):\n\t\"\"\"Print instructions to move a disk.\"\"\"\n\tprint(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 343, in counter","    return counter(n, max_coin / 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 343, in counter","    return counter(n, max_coin / 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 343, in counter","    return counter(n, max_coin / 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 343, in counter","    return counter(n, max_coin / 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 343, in counter","    return counter(n, max_coin / 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 343, in counter","    return counter(n, max_coin / 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 342, in counter","    if max_coin > n:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":12,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n            return 1 =>           \r\n            return   <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    i = 0\n    while 2**i <= amount:\n        i += 1\n    i = i -1\n    def count_partitions(n, m):\n        \"\"\"Count the ways to partition n using parts up to m.\"\"\"\n        if n >= 0 and n <= 1:\n            return 1\n        elif m == 1:\n            return \n        elif n < 0:\n            return 0\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, m/2)\n\n    return count_partitions(amount, 2**i)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    i = 0\n    while 2**i <= amount:\n        i += 1\n    i = i -1\n    def count_partitions(n, m):\n        \"\"\"Count the ways to partition n using parts up to m.\"\"\"\n        if n >= 0 and n <= 1:\n            return 1\n        elif m == 1:\n            return 1\n        elif n < 0:\n            return 0\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, m/2)\n\n    return count_partitions(amount, 2**i)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 330, in count_change","    return count_partitions(amount, 2**i)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 328, in count_partitions","    return count_partitions(n-m, m) + count_partitions(n, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 328, in count_partitions","    return count_partitions(n-m, m) + count_partitions(n, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 328, in count_partitions","    return count_partitions(n-m, m) + count_partitions(n, m/2)","TypeError: unsupported operand type(s) for +: 'int' and 'NoneType'","","# Error: expected","#     6","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":13,"studentId":0,"date":null,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n    elif m > n:  =>           \r\n    elif m == n: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return count_partitions(amount, 1)\n\n\ndef count_partitions(n, m):\n    if n == 0:\n        return 1\n    elif n < 0:\n        return 0\n    elif m == n:\n        return 0\n    else:\n        return count_partitions(n-m, m) + count_partitions(n, m*2)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return count_partitions(amount, 1)\n\n\ndef count_partitions(n, m):\n    if n == 0:\n        return 1\n    elif n < 0:\n        return 0\n    elif m > n:\n        return 0\n    else:\n        return count_partitions(n-m, m) + count_partitions(n, m*2)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    return amount(amount, 1)\r\ndef count_partitions(n, m):\r\n    if n==0:\r\n        return 1\r\n    elif n<0:\r\n        return 0\r\n    elif m==n:\r\n        return 0\r\n    else:\r\n        return count_partitions(n-m, m)+count_partitions(n, m*2)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 321, in count_partitions","    return count_partitions(n-m, m) + count_partitions(n, m*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 321, in count_partitions","    return count_partitions(n-m, m) + count_partitions(n, m*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 321, in count_partitions","    return count_partitions(n-m, m) + count_partitions(n, m*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 321, in count_partitions","    return count_partitions(n-m, m) + count_partitions(n, m*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 321, in count_partitions","    return count_partitions(n-m, m) + count_partitions(n, m*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 321, in count_partitions","    return count_partitions(n-m, m) + count_partitions(n, m*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 314, in count_partitions","    if n == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":14,"studentId":0,"date":null,"diff":"\r\nInputObject                                      SideIndicator\r\n-----------                                      -------------\r\n            without_m=partioner(n,m//2)          =>           \r\n            without_m=partioner(n,coin_value//2) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    coin_value=1\n    while (2*coin_value)<amount:\n        coin_value=coin_value*2    \n    def partioner(n,m):\n        if n==0:\n            return 1\n        elif n<0:\n            return 0\n        elif m==0:\n            return 0\n        else:\n            with_m=partioner(n-m,m)\n            without_m=partioner(n,coin_value//2)\n            return with_m+without_m\n    return partioner(amount,coin_value)\n\n\n\n    \n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    coin_value=1\n    while (2*coin_value)<amount:\n        coin_value=coin_value*2    \n    def partioner(n,m):\n        if n==0:\n            return 1\n        elif n<0:\n            return 0\n        elif m==0:\n            return 0\n        else:\n            with_m=partioner(n-m,m)\n            without_m=partioner(n,m//2)\n            return with_m+without_m\n    return partioner(amount,coin_value)\n\n\n\n    \n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 306, in partioner","    without_m=partioner(n,coin_value//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 306, in partioner","    without_m=partioner(n,coin_value//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 306, in partioner","    without_m=partioner(n,coin_value//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 306, in partioner","    without_m=partioner(n,coin_value//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 306, in partioner","    without_m=partioner(n,coin_value//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 305, in partioner","    with_m=partioner(n-m,m)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 298, in partioner","    if n==0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":15,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        elif y < 1:  =>           \r\n        elif y == 0: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    highest = 1\n    power = 1\n\n    while highest < amount:\n        highest = 2**power\n        power += 1\n\n    highest = highest/2\n\n    def partitions(x, y):\n        if x == 0:\n            return 1\n        elif x < 0:\n            return 0\n        elif y == 0:\n            return 0\n        else:\n            return partitions(x-y, y) + partitions(x, y/2)\n\n    return partitions(amount, highest)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    highest = 1\n    power = 1\n\n    while highest < amount:\n        highest = 2**power\n        power += 1\n\n    highest = highest/2\n\n    def partitions(x, y):\n        if x == 0:\n            return 1\n        elif x < 0:\n            return 0\n        elif y < 1:\n            return 0\n        else:\n            return partitions(x-y, y) + partitions(x, y/2)\n\n    return partitions(amount, highest)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 328, in partitions","    return partitions(x-y, y) + partitions(x, y/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 328, in partitions","    return partitions(x-y, y) + partitions(x, y/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 328, in partitions","    return partitions(x-y, y) + partitions(x, y/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 328, in partitions","    return partitions(x-y, y) + partitions(x, y/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 328, in partitions","    return partitions(x-y, y) + partitions(x, y/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 328, in partitions","    return partitions(x-y, y) + partitions(x, y/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 321, in partitions","    if x == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":16,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n        elif m % 1 != 0: =>           \r\n            return 0     =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \n    def partitions(amount, m):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return partitions(amount - m, m) + partitions(amount, m / 2)\n\n    def largest_coin_finder(amount):\n        m = 1\n        if amount == 1:\n            return m\n\n        while m <= amount:\n            m = m * 2\n        return m\n\n    def is_two_power(m):\n        while m >= 0:\n            m = m / 2\n        if m == 0:\n            return True\n        else: \n            return False\n\n    return partitions(amount, largest_coin_finder(amount))\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \n    def partitions(amount, m):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif m == 0:\n            return 0\n        elif m % 1 != 0:\n            return 0\n        else:\n            return partitions(amount - m, m) + partitions(amount, m / 2)\n\n    def largest_coin_finder(amount):\n        m = 1\n        if amount == 1:\n            return m\n\n        while m <= amount:\n            m = m * 2\n        return m\n\n    def is_two_power(m):\n        while m >= 0:\n            m = m / 2\n        if m == 0:\n            return True\n        else: \n            return False\n\n    return partitions(amount, largest_coin_finder(amount))\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 313, in partitions","    return partitions(amount - m, m) + partitions(amount, m / 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 313, in partitions","    return partitions(amount - m, m) + partitions(amount, m / 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 313, in partitions","    return partitions(amount - m, m) + partitions(amount, m / 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 313, in partitions","    return partitions(amount - m, m) + partitions(amount, m / 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 313, in partitions","    return partitions(amount - m, m) + partitions(amount, m / 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 313, in partitions","    return partitions(amount - m, m) + partitions(amount, m / 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 306, in partitions","    if amount == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":17,"studentId":0,"date":null,"diff":"\r\nInputObject SideIndicator\r\n----------- -------------\r\n            <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    return count_using(1, amount)\n\n    def count_using(min_coin, amount):\n        if amount < 0:\n         return 0\n        elif amount == 0:\n            return 1\n        elif min_coin > amount:\n            return 0\n        else:\n            with_min = count_using(min_coin, amount - min_coin)\n            without_min = count_using(2*min_coin, amount)\n            return with_min + without_min\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    def count_using(min_coin, amount):\n        if amount < 0:\n         return 0\n        elif amount == 0:\n            return 1\n        elif min_coin > amount:\n            return 0\n        else:\n            with_min = count_using(min_coin, amount - min_coin)\n            without_min = count_using(2*min_coin, amount)\n            return with_min + without_min\n    return count_using(1, amount)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    return count_using(1, amount)\r\n    def count_using(min_coin, amount):\r\n        if amount<0:\r\n            return 0\r\n        elif amount==0:\r\n            return 1\r\n        elif min_coin>amount:\r\n            return 0\r\n        else:\r\n            with_min = count_using(min_coin, amount-min_coin)\r\n            without_min = count_using(2*min_coin, amount)\r\n            return with_min+k\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 313, in count_change","    return count_using(1, amount)","UnboundLocalError: local variable 'count_using' referenced before assignment","","# Error: expected","#     6","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":18,"studentId":0,"date":null,"diff":"\r\nInputObject                                                      SideIndicator\r\n-----------                                                      -------------\r\n    def num_ways(change, k):                                     =>           \r\n        if k > change:                                           =>           \r\n        if change == k:                                          =>           \r\n            return num_ways(change, 2*k) + num_ways(change-k, k) =>           \r\n    if n == 1:                                                   =>           \r\n        print_move(start, end)                                   =>           \r\n    else:                                                        =>           \r\n        middle = 6 - start - end                                 =>           \r\n        move_stack(n-1, start, end)                              =>           \r\n        print_move(start, end)                                   =>           \r\n        move_stack(middle, end)                                  =>           \r\n                                                                 =>           \r\n    def num_ways(total, k):                                      <=           \r\n        if k > total:                                            <=           \r\n        elif total == 1:                                         <=           \r\n            return num_ways(total, 2*k) + num_ways(total-k, k)   <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def num_ways(total, k):\n        if k > total:\n            return 0\n        elif total == 1:\n            return 1\n        else:\n            return num_ways(total, 2*k) + num_ways(total-k, k)\n    return num_ways(amount, 1)\n\n    # def num_partitions(n,k):\n    #     if n < 0\n    #         return 0\n    #     elif k == 0 or n == 0:\n    #         return 1\n    #     else:\n    #         return num_partitions(n, k -1) + num_partitions(n-k, k)           \n                \n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def num_ways(change, k):\n        if k > change:\n            return 0\n        if change == k:\n            return 1\n        else:\n            return num_ways(change, 2*k) + num_ways(change-k, k)\n    return num_ways(amount, 1)\n\n    # def num_partitions(n,k):\n    #     if n < 0\n    #         return 0\n    #     elif k == 0 or n == 0:\n    #         return 1\n    #     else:\n    #         return num_partitions(n, k -1) + num_partitions(n-k, k)           \n                \n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def num_ways(total, k):\r\n        if amount>total:\r\n            return 0\r\n        elif total==1:\r\n            return 1\r\n        else:\r\n            return num_ways(total, 2*k)+num_ways(total-k, k)\r\n    return num_ways(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","1","","# Error: expected","#     6","# but got","#     1","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":19,"studentId":0,"date":null,"diff":"\r\nInputObject                                                            SideIndicator\r\n-----------                                                            -------------\r\n        using_min = count_using(amount - smallest_coin, smallest_coin) =>           \r\n        not_using_min = count_using(amount, smallest_coin * 2)         =>           \r\n        if True:                                                       =>           \r\n            move_stack(n-1, start, intermediate_rod)                   =>           \r\n            print_move(start, end)                                     =>           \r\n    return move_stack(n-1, intermediate_rod, end)                      =>           \r\n        using_min = count_with(amount - smallest_coin, smallest_coin)  <=           \r\n        not_using_min = count_with(amount, smallest_coin * 2)          <=           \r\n        move_stack(n-1, start, intermediate_rod)                       <=           \r\n        print_move(start, end)                                         <=           \r\n        move_stack(n-1, intermediate_rod, end)                         <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return count_using(amount, 1)\n\ndef count_using(amount, smallest_coin):\n    if amount == 0:\n        return 1\n    elif amount < 0:\n        return 0\n    elif smallest_coin > amount:\n        return 0\n    else:\n        using_min = count_with(amount - smallest_coin, smallest_coin)\n        not_using_min = count_with(amount, smallest_coin * 2)\n        return using_min + not_using_min\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return count_using(amount, 1)\n\ndef count_using(amount, smallest_coin):\n    if amount == 0:\n        return 1\n    elif amount < 0:\n        return 0\n    elif smallest_coin > amount:\n        return 0\n    else:\n        using_min = count_using(amount - smallest_coin, smallest_coin)\n        not_using_min = count_using(amount, smallest_coin * 2)\n        return using_min + not_using_min\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    return count_using(amount, 1)\r\ndef count_using(amount, smallest_coin):\r\n    if amount==0:\r\n        return 1\r\n    elif amount<0:\r\n        return 0\r\n    elif smallest_coin>amount:\r\n        return 0\r\n    else:\r\n        using_min = count_with(amount-smallest_coin, smallest_coin)\r\n        not_using_min = count_with(amount, smallest_coin*2)\r\n        return using_min+k\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 334, in count_change","    return count_using(amount, 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 344, in count_using","    using_min = count_with(amount - smallest_coin, smallest_coin)","NameError: name 'count_with' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":20,"studentId":0,"date":null,"diff":"\r\nInputObject                                                           SideIndicator\r\n-----------                                                           -------------\r\n    def helper1(amount):                                              =>           \r\n        while i <amount:                                              =>           \r\n    def helper2(amount,maxx):                                         =>           \r\n        if amount==0 or amount==1 or maxx==1:                         =>           \r\n        elif amount<0:                                                =>           \r\n        elif amount==2 or amount==3:                                  =>           \r\n            return helper2(amount,maxx/2)+ helper2(amount-maxx, maxx) =>           \r\n    return helper2(amount,helper1(amount))                            =>           \r\n    def helper1(n):                                                   <=           \r\n        while i <n:                                                   <=           \r\n    def helper2(n,maxx):                                              <=           \r\n        if n==0 or n==1 or maxx==1:                                   <=           \r\n        elif n<0:                                                     <=           \r\n        elif n==2 or n==3:                                            <=           \r\n            return helper2(n,maxx/2)+ helper2(n-maxx, maxx)           <=           \r\n    return helper2(n,helper1(n))                                      <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    def helper1(n):\n        i=1\n        while i <n: \n            i*=2\n        return i//2\n\n    def helper2(n,maxx):\n        if n==0 or n==1 or maxx==1:\n            return 1\n        elif n<0:\n            return 0\n        elif n==2 or n==3:\n            return 2\n        else:\n            return helper2(n,maxx/2)+ helper2(n-maxx, maxx)\n    return helper2(n,helper1(n))\n\n\n#need old sum included to run for that sum \n\n#Q8\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    def helper1(amount):\n        i=1\n        while i <amount: \n            i*=2\n        return i//2\n\n    def helper2(amount,maxx):\n        if amount==0 or amount==1 or maxx==1:\n            return 1\n        elif amount<0:\n            return 0\n        elif amount==2 or amount==3:\n            return 2\n        else:\n            return helper2(amount,maxx/2)+ helper2(amount-maxx, maxx)\n    return helper2(amount,helper1(amount))\n\n\n#need old sum included to run for that sum \n\n#Q8\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 324, in count_change","    return helper2(n,helper1(n))","NameError: name 'n' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":21,"studentId":0,"date":null,"diff":"\r\nInputObject                                                   SideIndicator\r\n-----------                                                   -------------\r\n                without_m = coin_machine(amount, m//2, i)     =>           \r\n                without_m = coin_machine(amount, m**(0.5), i) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"   \n    def largest_denomination(amount,m,i):\n        if amount == 2:\n            return coin_machine(amount,m,i+1)\n        else:\n            while m <= amount-m:\n                i +=1\n                m = 2**i\n        return coin_machine(amount,m,i)\n    def coin_machine(amount,m,i):\n        if i == 0:\n            return largest_denomination(amount, m, i)\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif m == 0:\n            return 0\n        elif m == 1:\n            return 1\n        else:\n            with_m = coin_machine(amount-m, m, i)\n            if m >2:\n                without_m = coin_machine(amount, m**(0.5), i)\n            else:\n                without_m = coin_machine(amount, m-1, i)\n            return (with_m + without_m)\n            \n    return coin_machine(amount, 2, 0)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"   \n    def largest_denomination(amount,m,i):\n        if amount == 2:\n            return coin_machine(amount,m,i+1)\n        else:\n            while m <= amount-m:\n                i +=1\n                m = 2**i\n        return coin_machine(amount,m,i)\n    def coin_machine(amount,m,i):\n        if i == 0:\n            return largest_denomination(amount, m, i)\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif m == 0:\n            return 0\n        elif m == 1:\n            return 1\n        else:\n            with_m = coin_machine(amount-m, m, i)\n            if m >2:\n                without_m = coin_machine(amount, m//2, i)\n            else:\n                without_m = coin_machine(amount, m-1, i)\n            return (with_m + without_m)\n            \n    return coin_machine(amount, 2, 0)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def largest_denomination(amount, m, i):\r\n        if amount==0:\r\n            return coin_machine(amount, m, i+1)\r\n        else:\r\n            while m<=amount-m:\r\n                i += 1\r\n                m = 2**i\r\n        return coin_machine(amount, m, i)\r\n    def coin_machine(amount, m, i):\r\n        if i==0:\r\n            return largest_denomination(amount, m, i)\r\n        if amount==0:\r\n            return 1\r\n        elif amount<0:\r\n            return 0\r\n        elif m==0:\r\n            return 0\r\n        elif m==1:\r\n            return 1\r\n        else:\r\n            with_m = coin_machine(amount-m, m, i)\r\n            if m>2:\r\n                without_m = coin_machine(amount, m**(0.5), i)\r\n            else:\r\n                without_m = coin_machine(amount, m-1, i)\r\n            return (with_m+k)\r\n    return coin_machine(amount, 2, 0)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 326, in coin_machine","    with_m = coin_machine(amount-m, m, i)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 326, in coin_machine","    with_m = coin_machine(amount-m, m, i)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 326, in coin_machine","    with_m = coin_machine(amount-m, m, i)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 326, in coin_machine","    with_m = coin_machine(amount-m, m, i)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 326, in coin_machine","    with_m = coin_machine(amount-m, m, i)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 326, in coin_machine","    with_m = coin_machine(amount-m, m, i)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in coin_machine","    if i == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     14","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":22,"studentId":0,"date":null,"diff":"\r\nInputObject                         SideIndicator\r\n-----------                         -------------\r\n            with_m=helper(i-m,m)    =>           \r\n            without_m=helper(i,m*2) =>           \r\n            with_m=count(i-m,m)     <=           \r\n            without_m=count(i,m*2)  <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper(i,m):\n        if i<m:\n            return 0\n        elif i==m:\n            return 1\n        elif i<0:\n            return 0\n        elif i==0:\n            return 1\n        elif i==0:\n            return 0\n        else:\n            with_m=count(i-m,m)\n            without_m=count(i,m*2)\n            return with_m+without_m\n    return helper(amount,1)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper(i,m):\n        if i<m:\n            return 0\n        elif i==m:\n            return 1\n        elif i<0:\n            return 0\n        elif i==0:\n            return 1\n        elif i==0:\n            return 0\n        else:\n            with_m=helper(i-m,m)\n            without_m=helper(i,m*2)\n            return with_m+without_m\n    return helper(amount,1)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def helper(i, m):\r\n        if i<m:\r\n            return 0\r\n        elif i==m:\r\n            return 1\r\n        elif i<0:\r\n            return 0\r\n        elif i==0:\r\n            return 1\r\n        elif i==0:\r\n            return 0\r\n        else:\r\n            with_m = count(i-m, m)\r\n            without_m = count(i, m*2)\r\n            return with_m+k\r\n    return helper(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 316, in count_change","    return helper(amount,1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 313, in helper","    with_m=count(i-m,m)","NameError: name 'count' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":23,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        elif m == 0: =>           \r\n        elif n == 1: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def current_cent(n, cent):\n        if cent < n and cent*2 > n:\n            return cent\n        else:\n            return current_cent(n, cent*2)\n\n    def count_up(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif n == 1:\n            return 0\n        else:\n            return count_up(n-m, m) + count_up(n, m//2)\n\n    return count_up(amount, current_cent(amount, 1))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def current_cent(n, cent):\n        if cent < n and cent*2 > n:\n            return cent\n        else:\n            return current_cent(n, cent*2)\n\n    def count_up(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_up(n-m, m) + count_up(n, m//2)\n\n    return count_up(amount, current_cent(amount, 1))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 314, in count_up","    return count_up(n-m, m) + count_up(n, m//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 314, in count_up","    return count_up(n-m, m) + count_up(n, m//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 314, in count_up","    return count_up(n-m, m) + count_up(n, m//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 314, in count_up","    return count_up(n-m, m) + count_up(n, m//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 314, in count_up","    return count_up(n-m, m) + count_up(n, m//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 314, in count_up","    return count_up(n-m, m) + count_up(n, m//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 307, in count_up","    if n == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":24,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        elif m > n:  =>           \r\n            return 0 =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def counter(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return counter(n - m, m) + counter(n, 2 * m)\n    return counter(amount, 1)\n    #     >>> def count_partitions(n, m):\n    #     \"\"\"Count the ways to partition n using parts up to m.\"\"\"\n    #     if n == 0:\n    #         return 1\n    #     elif n < 0:\n    #         return 0\n    #     elif m == 0:\n    #         return 0\n    #     else:\n    #         return count_partitions(n-m, m) + count_partitions(n, m-1)\n    # def counter(n, m):\n    #     if n == 0:\n    #         return n \n    #     if n < 0 or m == 0:\n    #         return 0 \n    #     else:\n    #         using_m = counter(n-m, m)\n    #         # with_m = counter(lambda s: link(m, s), using_m)\n    #         without_m = counter(n, m-1)\n    #         return using_m + without_m\n     \n    # return counter(amount, 1) \n\n\n    # def count_change_helper(coin, amount):\n    #     if amount < 0:\n    #         return 0\n    #     elif amount == 0:\n    #         return 1\n    #     elif coin > amount:\n    #         return 0\n    #     else:\n    #         with_coin = count_change_helper(coin, amount - coin)\n    #         without_coin = count_change_helper(2 * coin, amount)\n    #         return with_coin + without_coin\n    # return count_change_helper(1, amount)\n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def counter(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        elif m > n:\n            return 0\n        else:\n            return counter(n - m, m) + counter(n, 2 * m)\n    return counter(amount, 1)\n    #     >>> def count_partitions(n, m):\n    #     \"\"\"Count the ways to partition n using parts up to m.\"\"\"\n    #     if n == 0:\n    #         return 1\n    #     elif n < 0:\n    #         return 0\n    #     elif m == 0:\n    #         return 0\n    #     else:\n    #         return count_partitions(n-m, m) + count_partitions(n, m-1)\n    # def counter(n, m):\n    #     if n == 0:\n    #         return n \n    #     if n < 0 or m == 0:\n    #         return 0 \n    #     else:\n    #         using_m = counter(n-m, m)\n    #         # with_m = counter(lambda s: link(m, s), using_m)\n    #         without_m = counter(n, m-1)\n    #         return using_m + without_m\n     \n    # return counter(amount, 1) \n\n\n    # def count_change_helper(coin, amount):\n    #     if amount < 0:\n    #         return 0\n    #     elif amount == 0:\n    #         return 1\n    #     elif coin > amount:\n    #         return 0\n    #     else:\n    #         with_coin = count_change_helper(coin, amount - coin)\n    #         without_coin = count_change_helper(2 * coin, amount)\n    #         return with_coin + without_coin\n    # return count_change_helper(1, amount)\n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def counter(n, m):\r\n        if amount==0:\r\n            return 1\r\n        elif n<0:\r\n            return 0\r\n        elif m==0:\r\n            return 0\r\n        else:\r\n            return counter(n-m, m)+counter(n, 2*m)\r\n    return counter(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 313, in counter","    return counter(n - m, m) + counter(n, 2 * m)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 313, in counter","    return counter(n - m, m) + counter(n, 2 * m)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 313, in counter","    return counter(n - m, m) + counter(n, 2 * m)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 313, in counter","    return counter(n - m, m) + counter(n, 2 * m)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 313, in counter","    return counter(n - m, m) + counter(n, 2 * m)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 313, in counter","    return counter(n - m, m) + counter(n, 2 * m)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 306, in counter","    if n == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":25,"studentId":0,"date":null,"diff":"\r\nInputObject                                                             SideIndicator\r\n-----------                                                             -------------\r\n            return count_by_coin(amt - coin, coin) + \\                  =>           \r\n                    count_by_coin(amt, find_highest_power2(coin-1))     =>           \r\n        new_coin = find_highest_power2(amt)                             <=           \r\n            return count_by_coin(amt - new_coin, new_coin) + \\          <=           \r\n                    count_by_coin(amt, find_highest_power2(new_coin-1)) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def find_highest_power2(num):\n        if num == 0:\n            return 0\n        elif (num & (num - 1)) == 0:\n            return num\n        else:\n            return find_highest_power2(num-1)\n\n    def count_by_coin(amt, coin):\n        new_coin = find_highest_power2(amt)\n        if amt == 0:\n            return 1\n        elif amt < 0:\n            return 0\n        elif coin == 0:\n            return 0\n        else:\n            return count_by_coin(amt - new_coin, new_coin) + \\\n                    count_by_coin(amt, find_highest_power2(new_coin-1))\n    return count_by_coin(amount, find_highest_power2(amount))                \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def find_highest_power2(num):\n        if num == 0:\n            return 0\n        elif (num & (num - 1)) == 0:\n            return num\n        else:\n            return find_highest_power2(num-1)\n\n    def count_by_coin(amt, coin):\n        if amt == 0:\n            return 1\n        elif amt < 0:\n            return 0\n        elif coin == 0:\n            return 0\n        else:\n            return count_by_coin(amt - coin, coin) + \\\n                    count_by_coin(amt, find_highest_power2(coin-1))\n    return count_by_coin(amount, find_highest_power2(amount))                \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 333, in count_by_coin","    count_by_coin(amt, find_highest_power2(new_coin-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 333, in count_by_coin","    count_by_coin(amt, find_highest_power2(new_coin-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 333, in count_by_coin","    count_by_coin(amt, find_highest_power2(new_coin-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 332, in count_by_coin","    return count_by_coin(amt - new_coin, new_coin) + \\","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 332, in count_by_coin","    return count_by_coin(amt - new_coin, new_coin) + \\","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 324, in count_by_coin","    new_coin = find_highest_power2(amt)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 316, in find_highest_power2","    if num == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":26,"studentId":0,"date":null,"diff":"\r\nInputObject                  SideIndicator\r\n-----------                  -------------\r\n        elif partition == 0: =>           \r\n        elif amount == 0:    <=           \r\n\r\n\r\n","before":"def count_change(amount):\n\t\"\"\"Return the number of ways to make change for amount.\n\n\t>>> count_change(7)\n\t6\n\t>>> count_change(10)\n\t14\n\t>>> count_change(20)\n\t60\n\t>>> count_change(100)\n\t9828\n\t\"\"\"\n\t\"*** YOUR CODE HERE ***\"\n\tdef largest_partition(n):\n\t\ti, largest = 1,1\n\t\twhile i < n:\n\t\t\tif n//i > 0:\n\t\t\t\tlargest = i\n\t\t\ti *= 2\n\t\treturn largest\n\n\tdef count_change_parts(amount, partition):\n\t\tif amount == 0:\n\t\t\treturn 1 \n\t\telif amount < 0:\n\t\t\treturn 0\n\t\telif amount == 0:\n\t\t\treturn 0\n\t\telse:\n\t\t\twith_largest = count_change_parts(amount-partition, partition)\n\t\t\twithout_largest = count_change_parts(amount, partition//2)\n\t\t\treturn with_largest + without_largest\n\treturn count_change_parts(amount, largest_partition(amount))\n\n\ndef print_move(origin, destination):\n\t\"\"\"Print instructions to move a disk.\"\"\"\n\tprint(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n\t\"\"\"Return the number of ways to make change for amount.\n\n\t>>> count_change(7)\n\t6\n\t>>> count_change(10)\n\t14\n\t>>> count_change(20)\n\t60\n\t>>> count_change(100)\n\t9828\n\t\"\"\"\n\t\"*** YOUR CODE HERE ***\"\n\tdef largest_partition(n):\n\t\ti, largest = 1,1\n\t\twhile i < n:\n\t\t\tif n//i > 0:\n\t\t\t\tlargest = i\n\t\t\ti *= 2\n\t\treturn largest\n\n\tdef count_change_parts(amount, partition):\n\t\tif amount == 0:\n\t\t\treturn 1 \n\t\telif amount < 0:\n\t\t\treturn 0\n\t\telif partition == 0:\n\t\t\treturn 0\n\t\telse:\n\t\t\twith_largest = count_change_parts(amount-partition, partition)\n\t\t\twithout_largest = count_change_parts(amount, partition//2)\n\t\t\treturn with_largest + without_largest\n\treturn count_change_parts(amount, largest_partition(amount))\n\n\ndef print_move(origin, destination):\n\t\"\"\"Print instructions to move a disk.\"\"\"\n\tprint(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 336, in count_change_parts","    with_largest = count_change_parts(amount-partition, partition)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 336, in count_change_parts","    with_largest = count_change_parts(amount-partition, partition)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 336, in count_change_parts","    with_largest = count_change_parts(amount-partition, partition)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 336, in count_change_parts","    with_largest = count_change_parts(amount-partition, partition)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 336, in count_change_parts","    with_largest = count_change_parts(amount-partition, partition)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 336, in count_change_parts","    with_largest = count_change_parts(amount-partition, partition)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 329, in count_change_parts","    if amount == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":27,"studentId":0,"date":null,"diff":"\r\nInputObject                     SideIndicator\r\n-----------                     -------------\r\n    return helper(amount, coin) =>           \r\n    return helper(amount)       <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    coin=1\n    def helper(amount, coin):\n        if amount == 0:\n            return 1\n        elif coin > amount:\n            return 0\n        else:\n            a = helper(amount - coin, coin)\n            b= helper(amount, coin*2)\n            return a + b\n    return helper(amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    coin=1\n    def helper(amount, coin):\n        if amount == 0:\n            return 1\n        elif coin > amount:\n            return 0\n        else:\n            a = helper(amount - coin, coin)\n            b= helper(amount, coin*2)\n            return a + b\n    return helper(amount, coin)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    coin = 1\r\n    def helper(amount, coin):\r\n        if amount==0:\r\n            return 1\r\n        elif coin>amount:\r\n            return 0\r\n        else:\r\n            a = helper(amount-coin, coin)\r\n            b = helper(amount, coin*2)\r\n            return a+k\r\n    return helper(amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 320, in count_change","    return helper(amount)","TypeError: helper() missing 1 required positional argument: 'coin'","","# Error: expected","#     6","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":28,"studentId":0,"date":null,"diff":"\r\nInputObject                            SideIndicator\r\n-----------                            -------------\r\n    def largest_power_of_two(n):       =>           \r\n        x=1                            =>           \r\n        while x<n:                     =>           \r\n            x = x*2                    =>           \r\n        return x                       =>           \r\n    power=largest_power_of_two(amount) =>           \r\n                                       =>           \r\n    def largest_power(n):              <=           \r\n        if n > 16:                     <=           \r\n            return 16                  <=           \r\n        elif n > 8:                    <=           \r\n            return 8                   <=           \r\n        elif n > 4:                    <=           \r\n            return 4                   <=           \r\n        elif n > 2:                    <=           \r\n            return 2                   <=           \r\n    power=largest_power(amount)        <=           \r\n            return 1                   <=           \r\n        else:                          <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n    1, 2, 4, 8, 16\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def largest_power(n):\n        if n > 16:\n            return 16\n        elif n > 8:\n            return 8\n        elif n > 4:\n            return 4\n        elif n > 2:\n            return 2\n        else:\n            return 1\n    power=largest_power(amount)\n\n    def count_partitions(n, m):\n        if n == 0:\n            return 1\n        elif m == 0:\n            return 0\n        elif n<0:\n            return 0\n        else:\n            with_m=count_partitions(n-m, m)\n            without_m = count_partitions(n, m//2)\n            return with_m + without_m\n    return count_partitions(amount, power)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n    1, 2, 4, 8, 16\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def largest_power_of_two(n):\n        x=1\n        while x<n:\n            x = x*2\n        return x\n\n    power=largest_power_of_two(amount)\n\n    def count_partitions(n, m):\n        if n == 0:\n            return 1\n        elif m == 0:\n            return 0\n        elif n<0:\n            return 0\n        else:\n            with_m=count_partitions(n-m, m)\n            without_m = count_partitions(n, m//2)\n            return with_m + without_m\n    return count_partitions(amount, power)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","14",">>> count_change(20)","60",">>> count_change(100)","7280","","# Error: expected","#     9828","# but got","#     7280","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":29,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                            SideIndicator\r\n-----------                                                                                            -------------\r\n        if value == 0 or max_coin == 0:                                                                =>           \r\n        elif value < 0:                                                                                =>           \r\n        elif max_coin < 0:                                                                             =>           \r\n        else:                                                                                          =>           \r\n            return real_count_change(value-2**max_coin, max_coin)+real_count_change(value, max_coin-1) =>           \r\n        if value == 1:                                                                                 <=           \r\n        if value <= 0:                                                                                 <=           \r\n        if max_coin < 0:                                                                               <=           \r\n        return real_count_change(value-2**max_coin, max_coin)+real_count_change(value, max_coin-1)     <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    x = 0\n    while 2**x <= amount:\n        x = x + 1\n    x = x - 1\n    def real_count_change(value, max_coin):\n        if value == 1:\n            return 1\n        if value <= 0:\n            return 0\n        if max_coin < 0:\n            return 0\n        return real_count_change(value-2**max_coin, max_coin)+real_count_change(value, max_coin-1)\n    return real_count_change(amount, x)\n\n\n    # def biggest_coin(k):\n    #     x=0\n    #     while 2**x <= k and 2**x <= n:\n    #         x = x+1\n    #     return x-1\n    # if amount == 1:\n    #     return 1\n    # if amount == 0:\n    #     return 0\n    # else:\n    #     return count_change(amount-2**tracker(amount)(amount))+count_change(amount-2**tracker(tracker(amount)(amount)-1)(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    x = 0\n    while 2**x <= amount:\n        x = x + 1\n    x = x - 1\n    def real_count_change(value, max_coin):\n        if value == 0 or max_coin == 0:\n            return 1\n        elif value < 0:\n            return 0\n        elif max_coin < 0:\n            return 0\n        else:\n            return real_count_change(value-2**max_coin, max_coin)+real_count_change(value, max_coin-1)\n    return real_count_change(amount, x)\n\n\n    # def biggest_coin(k):\n    #     x=0\n    #     while 2**x <= k and 2**x <= n:\n    #         x = x+1\n    #     return x-1\n    # if amount == 1:\n    #     return 1\n    # if amount == 0:\n    #     return 0\n    # else:\n    #     return count_change(amount-2**tracker(amount)(amount))+count_change(amount-2**tracker(tracker(amount)(amount)-1)(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    amount = 0\r\n    while 2**x<=amount:\r\n        x = x+1\r\n    x = x-1\r\n    def real_count_change(value, max_coin):\r\n        if value==1:\r\n            return 1\r\n        if value<=0:\r\n            return 0\r\n        if max_coin<0:\r\n            return 0\r\n        return real_count_change(value-2**max_coin, max_coin)+real_count_change(value, max_coin-1)\r\n    return real_count_change(amount, x)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","10","","# Error: expected","#     14","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":30,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n            return counter(num-m,m)+counter(num,m//2) =>           \r\n            return counter(num-m,m)+counter(n,m//2)   <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def counter(num,m):\n        if num<0:\n            return 0\n        if num==1:\n            return 1\n        if m==1:\n            return 1\n        else:\n            return counter(num-m,m)+counter(n,m//2)\n    x=1\n    while (2**x)<amount:\n        x+=1\n    x-=1\n    return counter(amount,2**x)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def counter(num,m):\n        if num<0:\n            return 0\n        if num==1:\n            return 1\n        if m==1:\n            return 1\n        else:\n            return counter(num-m,m)+counter(num,m//2)\n    x=1\n    while (2**x)<amount:\n        x+=1\n    x-=1\n    return counter(amount,2**x)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 334, in count_change","    return counter(amount,2**x)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 329, in counter","    return counter(num-m,m)+counter(n,m//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 329, in counter","    return counter(num-m,m)+counter(n,m//2)","NameError: name 'n' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":31,"studentId":0,"date":null,"diff":"\r\nInputObject                        SideIndicator\r\n-----------                        -------------\r\n    return how_to_count(1, amount) =>           \r\n                                   =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def how_to_count(low, value):\n        if value < 0:\n            return 0\n        elif value == 0:\n            return 1\n        elif low > value:\n            return 0\n        else:\n            low_coin = how_to_count(low, value - low)\n            not_low = how_to_count(2*low, value)\n            return  low_coin + not_low\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    def how_to_count(low, value):\n        if value < 0:\n            return 0\n        elif value == 0:\n            return 1\n        elif low > value:\n            return 0\n        else:\n            low_coin = how_to_count(low, value - low)\n            not_low = how_to_count(2*low, value)\n            return  low_coin + not_low\n    return how_to_count(1, amount)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def how_to_count(low, value):\r\n        if value<0:\r\n            return 0\r\n        elif value==0:\r\n            return 1\r\n        elif low>value:\r\n            return 0\r\n        else:\r\n            low_coin = how_to_count(low, value-low)\r\n            not_low = how_to_count(2*low, value)\r\n            return low_coin+k\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","","# Error: expected","#     6","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":32,"studentId":0,"date":null,"diff":"\r\nInputObject                                               SideIndicator\r\n-----------                                               -------------\r\n    return count_partitions(amount, largest_pwr2(amount)) =>           \r\n    count_partitions(amount, largest_pwr2(amount))        <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n\n    \"\"\"\n    \n    def largest_pwr2(big):\n        x=1\n        while x<big:\n            x*=2\n        return x\n    # if amount==1:\n    #     return 1\n    # elif amount<1:\n    #     return 0\n    # else:\n    #     return count_change(amount-largest_pwr2(amount)) + count_change(amount-largest_pwr2(amount)//2)\n    \n\n\n\n    def count_partitions(n, m):\n        \"\"\"Count the ways to partition n using parts up to m.\"\"\"\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, m//2)\n    count_partitions(amount, largest_pwr2(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n\n    \"\"\"\n    \n    def largest_pwr2(big):\n        x=1\n        while x<big:\n            x*=2\n        return x\n    # if amount==1:\n    #     return 1\n    # elif amount<1:\n    #     return 0\n    # else:\n    #     return count_change(amount-largest_pwr2(amount)) + count_change(amount-largest_pwr2(amount)//2)\n    \n\n\n\n    def count_partitions(n, m):\n        \"\"\"Count the ways to partition n using parts up to m.\"\"\"\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, m//2)\n    return count_partitions(amount, largest_pwr2(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","","# Error: expected","#     6","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":33,"studentId":0,"date":null,"diff":"\r\nInputObject            SideIndicator\r\n-----------            -------------\r\n            if k > n:  =>           \r\n    elif n % 2 == 0:   =>           \r\n        AB             =>           \r\n        AC             =>           \r\n        BC             =>           \r\n        print_move()   =>           \r\n    elif n % 2 == 1:   =>           \r\n        AC             =>           \r\n        AB             =>           \r\n        CB             =>           \r\n                       =>           \r\n                       =>           \r\n                       =>           \r\n            if k <= n: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper1(x, y):\n        if x == 0:\n            return 1\n        elif x < 0:\n            return 0\n        elif y == 0:\n            return 0\n        else:\n            with_y = helper1(x - y, y)\n            without_y = helper1(x, y // 2)\n            return with_y + without_y\n\n    def helper2(n):\n        k = 2\n        while k <= n:\n            k = k * 2\n            if k <= n:\n                return k // 2\n\n    return helper1(amount, helper2(amount))\n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper1(x, y):\n        if x == 0:\n            return 1\n        elif x < 0:\n            return 0\n        elif y == 0:\n            return 0\n        else:\n            with_y = helper1(x - y, y)\n            without_y = helper1(x, y // 2)\n            return with_y + without_y\n\n    def helper2(n):\n        k = 2\n        while k <= n:\n            k = k * 2\n            if k > n:\n                return k // 2\n\n    return helper1(amount, helper2(amount))\n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","4","","# Error: expected","#     6","# but got","#     4","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":34,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                       SideIndicator\r\n-----------                                                                       -------------\r\n            return count_coins(amount, coin*2) + count_coins(amount - coin, coin) =>           \r\n            return count_coins(amount, coin*2) + count_coins(amount - 1, coin)    <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_coins(amount, coin):\n        if amount < coin:\n            return 0\n        elif amount == coin:\n            return 1\n        else:\n            return count_coins(amount, coin*2) + count_coins(amount - 1, coin)\n\n    return count_coins(amount, 1)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_coins(amount, coin):\n        if amount < coin:\n            return 0\n        elif amount == coin:\n            return 1\n        else:\n            return count_coins(amount, coin*2) + count_coins(amount - coin, coin)\n\n    return count_coins(amount, 1)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_coins(amount, coin):\r\n        if amount<coin:\r\n            return 0\r\n        elif amount==coin:\r\n            return 1\r\n        else:\r\n            return count_coins(amount, coin*2)+count_coins(amount-1, coin)\r\n    return count_coins(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","17","","# Error: expected","#     6","# but got","#     17","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":35,"studentId":0,"date":null,"diff":"\r\nInputObject                                        SideIndicator\r\n-----------                                        -------------\r\n            return helper(n-m, m) + helper(n,m//2) =>           \r\n            return helper(n-m, m) + helper(n,m/2)  <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \n    for p in range (0,amount):\n        if 2**p>amount:\n            power=p-1\n            break\n\n    def helper(n,m):\n        if n==0:\n            return 1\n        elif n<0:\n            return 0\n        elif m==0:\n            return 0\n        else:\n            return helper(n-m, m) + helper(n,m/2)\n\n    return helper (amount, 2**power)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \n    for p in range (0,amount):\n        if 2**p>amount:\n            power=p-1\n            break\n\n    def helper(n,m):\n        if n==0:\n            return 1\n        elif n<0:\n            return 0\n        elif m==0:\n            return 0\n        else:\n            return helper(n-m, m) + helper(n,m//2)\n\n    return helper (amount, 2**power)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 328, in helper","    return helper(n-m, m) + helper(n,m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 328, in helper","    return helper(n-m, m) + helper(n,m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 328, in helper","    return helper(n-m, m) + helper(n,m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 328, in helper","    return helper(n-m, m) + helper(n,m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 328, in helper","    return helper(n-m, m) + helper(n,m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 328, in helper","    return helper(n-m, m) + helper(n,m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 321, in helper","    if n==0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":36,"studentId":0,"date":null,"diff":"\r\nInputObject                  SideIndicator\r\n-----------                  -------------\r\n        elif(result>amount): =>           \r\n            return 0         =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    # def fn(current,power):\n    #     if(current==0):\n    #         return 1\n    #     elif(2**power>current):\n    #         return 0\n    #     return fn(current-2**power,power)+fn(current,power +1)\n    # return fn(amount,0)\n\n    def fn(result,power):\n        if(result==amount):\n            return 1\n        elif(2**power>amount):\n            return 0\n        return fn(result+2**power,power) + fn(result,power+1)\n    return fn(0,0) \n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    # def fn(current,power):\n    #     if(current==0):\n    #         return 1\n    #     elif(2**power>current):\n    #         return 0\n    #     return fn(current-2**power,power)+fn(current,power +1)\n    # return fn(amount,0)\n\n    def fn(result,power):\n        if(result==amount):\n            return 1\n        elif(result>amount):\n            return 0\n        elif(2**power>amount):\n            return 0\n        return fn(result+2**power,power) + fn(result,power+1)\n    return fn(0,0) \n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def fn(result, power):\r\n        if (amount==amount):\r\n            return 1\r\n        elif (2**power>amount):\r\n            return 0\r\n        return fn(result+2**power, power)+fn(result, power+1)\r\n    return fn(0, 0)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 320, in fn","    return fn(result+2**power,power) + fn(result,power+1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 320, in fn","    return fn(result+2**power,power) + fn(result,power+1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 320, in fn","    return fn(result+2**power,power) + fn(result,power+1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 320, in fn","    return fn(result+2**power,power) + fn(result,power+1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 320, in fn","    return fn(result+2**power,power) + fn(result,power+1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 320, in fn","    return fn(result+2**power,power) + fn(result,power+1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 316, in fn","    if(result==amount):","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":37,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                                                                        \r\n-----------                                                                                                                                        \r\n    initial_denom = denomination_below_amount(amount)                                                                                              \r\n            return change_options(amount1,denomination_below_amount(amount1) if (denomination_below_amount(amount1) <= denomination) else denomi...\r\n    return change_options(amount,initial_denom)                                                                                                    \r\n            return change_options(amount1,denomination_below_amount(amount1)) + change_options(amount,denomination-1)                              \r\n    return change_options(amount,denomination_below_amount(amount))                                                                                \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def change_options(amount,denomination):\n        if denomination == 0:\n             return 1\n        else:\n            amount1 = amount - 2**denomination\n            return change_options(amount1,denomination_below_amount(amount1)) + change_options(amount,denomination-1)\n    return change_options(amount,denomination_below_amount(amount))\n\ndef denomination_below_amount(amount):\n        n = 0\n        while 2 ** (n + 1) <= amount:\n            n = n + 1\n        return n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    initial_denom = denomination_below_amount(amount)\n    def change_options(amount,denomination):\n        if denomination == 0:\n             return 1\n        else:\n            amount1 = amount - 2**denomination\n            return change_options(amount1,denomination_below_amount(amount1) if (denomination_below_amount(amount1) <= denomination) else denomination) + change_options(amount,denomination-1)\n    return change_options(amount,initial_denom)\n\ndef denomination_below_amount(amount):\n        n = 0\n        while 2 ** (n + 1) <= amount:\n            n = n + 1\n        return n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def change_options(amount, denomination):\r\n        if amount==0:\r\n            return 1\r\n        else:\r\n            amount1 = amount-2**denomination\r\n            return change_options(amount1, denomination_below_amount(amount1))+change_options(amount, denomination-1)\r\n    return change_options(amount, denomination_below_amount(amount))\r\ndef denomination_below_amount(amount):\r\n    n = 0\r\n    while 2**(n+1)<=amount:\r\n        n = n+1\r\n    return n\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","7","","# Error: expected","#     6","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":38,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                SideIndicator\r\n-----------                                                                -------------\r\n            return count_helper(n-m, m) + count_helper(n, m // 2)          =>           \r\n            return count_helper(n-m, m) + count_helper(n, m - pow(2, i-2)) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def max_coin(i):\n        if amount - pow(2, i) < 0:\n            return count_helper(amount, pow(2, i-1))\n        return max_coin(i+1)\n\n    def count_helper(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_helper(n-m, m) + count_helper(n, m - pow(2, i-2))\n    return max_coin(1)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def max_coin(i):\n        if amount - pow(2, i) < 0:\n            return count_helper(amount, pow(2, i-1))\n        return max_coin(i+1)\n\n    def count_helper(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_helper(n-m, m) + count_helper(n, m // 2)\n    return max_coin(1)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def max_coin(i):\r\n        if amount-pow(2, i)<0:\r\n            return count_helper(amount, pow(2, i-1))\r\n        return max_coin(i+1)\r\n    def count_helper(n, m):\r\n        if n==0:\r\n            return 1\r\n        elif n<0:\r\n            return 0\r\n        elif m==0:\r\n            return 0\r\n        elif m>n:\r\n            return 0\r\n        else:\r\n            return count_helper(n-m, m)+count_helper(n, m-pow(2, i-2))\r\n    return max_coin(1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-GreaterThan, Children(LeafConstNode(NameExpressionNode-m), SingleChild(LeafConstNode(NameExpressionNode-n)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(ConstantExpressionNode-0)))))))), 3), Selected(\\x => Match(x, StartsWithTarget(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"BinaryExpressionNode\")))))))))))))))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 319, in count_change","    return max_coin(1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 308, in max_coin","    return max_coin(i+1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 308, in max_coin","    return max_coin(i+1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 307, in max_coin","    return count_helper(amount, pow(2, i-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 318, in count_helper","    return count_helper(n-m, m) + count_helper(n, m - pow(2, i-2))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 318, in count_helper","    return count_helper(n-m, m) + count_helper(n, m - pow(2, i-2))","NameError: name 'i' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":1,"Id":39,"studentId":0,"date":null,"diff":"\r\nInputObject                          SideIndicator\r\n-----------                          -------------\r\n        return 2**int(math.log(k,2)) =>           \r\n        return 2**int(math.log(n,2)) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    import math\n    def biggest_coin(k):\n        return 2**int(math.log(n,2))\n    def coin_partition(n,k):\n        if n<0:\n            return 0\n        elif n==0 or k==1:\n            return 1\n        return coin_partition(n,k/2)+coin_partition(n-k,k)\n    return coin_partition(amount,biggest_coin(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    import math\n    def biggest_coin(k):\n        return 2**int(math.log(k,2))\n    def coin_partition(n,k):\n        if n<0:\n            return 0\n        elif n==0 or k==1:\n            return 1\n        return coin_partition(n,k/2)+coin_partition(n-k,k)\n    return coin_partition(amount,biggest_coin(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 302, in count_change","    return coin_partition(amount,biggest_coin(amount))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 295, in biggest_coin","    return 2**int(math.log(n,2))","NameError: name 'n' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":40,"studentId":0,"date":null,"diff":"\r\nInputObject                                                               SideIndicator\r\n-----------                                                               -------------\r\n    while amount >= 2 ** i:                                               =>           \r\n        i = i + 1                                                         =>           \r\n        if x == 0:                                                        =>           \r\n        elif x < 0 or y < 1:                                              =>           \r\n            return coin_helper(x-y, y) + coin_helper(x, int(y/2))         =>           \r\n    return coin_helper(amount, 2**i)                                      =>           \r\n    while amount > 2 ** i:                                                <=           \r\n        i += 1                                                            <=           \r\n        if x == 1:                                                        <=           \r\n        elif x < 0:                                                       <=           \r\n        elif y == 0:                                                      <=           \r\n            return 0                                                      <=           \r\n            return coin_helper(x-y**i, y**i) + coin_helper(x, y ** (i-1)) <=           \r\n    return coin_helper(amount, 2)                                         <=           \r\n    # ways += int(count_change(remainder)) #recursive?                    <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"  \n    i = 0\n    while amount > 2 ** i:\n        i += 1\n    i = i - 1\n    def coin_helper(x,y):\n        if x == 1:\n            return 1\n        elif x < 0:\n            return 0\n        elif y == 0:\n            return 0\n        else:\n            return coin_helper(x-y**i, y**i) + coin_helper(x, y ** (i-1))\n    return coin_helper(amount, 2)\n\n    # ways += int(count_change(remainder)) #recursive?\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"  \n    i = 0\n    while amount >= 2 ** i:\n        i = i + 1\n    i = i - 1\n\n    def coin_helper(x,y):\n        if x == 0:\n            return 1\n        elif x < 0 or y < 1:\n            return 0\n        else:\n            return coin_helper(x-y, y) + coin_helper(x, int(y/2))\n\n    return coin_helper(amount, 2**i)\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    amount = 0\r\n    while amount>2**i:\r\n        i += 1\r\n    i = i-1\r\n    def coin_helper(x, y):\r\n        if x==1:\r\n            return 1\r\n        elif x<0:\r\n            return 0\r\n        elif y==0:\r\n            return 0\r\n        else:\r\n            return coin_helper(x-y**i, y**i)+coin_helper(x, y**(i-1))\r\n    return coin_helper(amount, 2)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 340, in coin_helper","    return coin_helper(x-y**i, y**i) + coin_helper(x, y ** (i-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 340, in coin_helper","    return coin_helper(x-y**i, y**i) + coin_helper(x, y ** (i-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 340, in coin_helper","    return coin_helper(x-y**i, y**i) + coin_helper(x, y ** (i-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 340, in coin_helper","    return coin_helper(x-y**i, y**i) + coin_helper(x, y ** (i-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 340, in coin_helper","    return coin_helper(x-y**i, y**i) + coin_helper(x, y ** (i-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 340, in coin_helper","    return coin_helper(x-y**i, y**i) + coin_helper(x, y ** (i-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 333, in coin_helper","    if x == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":41,"studentId":0,"date":null,"diff":"\r\nInputObject                 SideIndicator\r\n-----------                 -------------\r\n        elif minimum>total: =>           \r\n        elif minimum<total: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper(minimum, total):\n        if total<0:\n            return 0\n        elif total==0:\n            return 1\n        elif minimum<total:\n            return 0\n        else:\n            include=helper(minimum, total-minimum)\n            dont_include=helper(2*minimum, total)\n            return include+dont_include\n    return helper(1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper(minimum, total):\n        if total<0:\n            return 0\n        elif total==0:\n            return 1\n        elif minimum>total:\n            return 0\n        else:\n            include=helper(minimum, total-minimum)\n            dont_include=helper(2*minimum, total)\n            return include+dont_include\n    return helper(1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def helper(minimum, total):\r\n        if total<0:\r\n            return 0\r\n        elif total==0:\r\n            return 1\r\n        elif minimum<total:\r\n            return 0\r\n        else:\r\n            include = helper(minimum, total-minimum)\r\n            dont_include = helper(2*minimum, total)\r\n            return include+k\r\n    return helper(1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":42,"studentId":0,"date":null,"diff":"\r\nInputObject                   SideIndicator\r\n-----------                   -------------\r\n        if n < 0 or 2**m > n: =>           \r\n        if n < 0:             <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def change(n, m):\n        if n == 0: \n            return 1\n        if n < 0:\n            return 0\n        else:\n            return change(n, m + 1) + change(n - 2**m, m) #m is the nth power of the coin\n    return change(amount, 0)\n        \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def change(n, m):\n        if n == 0: \n            return 1\n        if n < 0 or 2**m > n:\n            return 0\n        else:\n            return change(n, m + 1) + change(n - 2**m, m) #m is the nth power of the coin\n    return change(amount, 0)\n        \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def change(n, m):\r\n        if amount==0:\r\n            return 1\r\n        if n<0:\r\n            return 0\r\n        else:\r\n            return change(n, m+1)+change(n-2**m, m)\r\n    return change(amount, 0)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 328, in change","    return change(n, m + 1) + change(n - 2**m, m) #m is the nth power of the coin","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 328, in change","    return change(n, m + 1) + change(n - 2**m, m) #m is the nth power of the coin","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 328, in change","    return change(n, m + 1) + change(n - 2**m, m) #m is the nth power of the coin","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 328, in change","    return change(n, m + 1) + change(n - 2**m, m) #m is the nth power of the coin","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 328, in change","    return change(n, m + 1) + change(n - 2**m, m) #m is the nth power of the coin","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 328, in change","    return change(n, m + 1) + change(n - 2**m, m) #m is the nth power of the coin","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 323, in change","    if n == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":43,"studentId":0,"date":null,"diff":"\r\nInputObject            SideIndicator\r\n-----------            -------------\r\n        if total < 0:  =>           \r\n            return 0   =>           \r\n        if total == 1: =>           \r\n            return 1   =>           \r\n        if coin == 1:  =>           \r\n            return 1   =>           \r\n    if amount <= 0:    <=           \r\n        return 0       <=           \r\n    if amount == 1:    <=           \r\n        return 1       <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if amount <= 0:\n        return 0\n    if amount == 1:\n        return 1\n    def highest_pow_2(x):\n        while amount - pow(2, x) >= 0:\n            x += 1\n        largest_coin = pow(2, x)\n        remainder = amount - pow(2, x)\n        return largest_coin\n    def recursive(total, coin):\n        return recursive(total - coin, coin) + recursive(total, coin//2)\n    return recursive(amount, highest_pow_2(0))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def highest_pow_2(x):\n        while amount - pow(2, x) >= 0:\n            x += 1\n        largest_coin = pow(2, x)\n        remainder = amount - pow(2, x)\n        return largest_coin\n    def recursive(total, coin):\n        if total < 0:\n            return 0\n        if total == 1:\n            return 1\n        if coin == 1:\n            return 1\n        return recursive(total - coin, coin) + recursive(total, coin//2)\n    return recursive(amount, highest_pow_2(0))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 346, in recursive","    return recursive(total - coin, coin) + recursive(total, coin//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 346, in recursive","    return recursive(total - coin, coin) + recursive(total, coin//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 346, in recursive","    return recursive(total - coin, coin) + recursive(total, coin//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 346, in recursive","    return recursive(total - coin, coin) + recursive(total, coin//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 346, in recursive","    return recursive(total - coin, coin) + recursive(total, coin//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 346, in recursive","    return recursive(total - coin, coin) + recursive(total, coin//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 346, in recursive","    return recursive(total - coin, coin) + recursive(total, coin//2)","RecursionError: maximum recursion depth exceeded","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":44,"studentId":0,"date":null,"diff":"\r\nInputObject                  SideIndicator\r\n-----------                  -------------\r\n        if amount == 0:      =>           \r\n            return 1         =>           \r\n        elif value > amount: =>           \r\n        if value > amount:   <=           \r\n        elif  amount == 0:   <=           \r\n            return 1         <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_partitions(amount,value):\n        if value > amount:\n            return 0\n        elif  amount == 0:\n            return 1    \n        else:\n            return count_partitions(amount-value, value) + count_partitions(amount, value*2)\n    return count_partitions(amount,1)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_partitions(amount,value):\n        if amount == 0:\n            return 1\n        elif value > amount:\n            return 0\n        else:\n            return count_partitions(amount-value, value) + count_partitions(amount, value*2)\n    return count_partitions(amount,1)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_partitions(amount, value):\r\n        if amount>amount:\r\n            return 0\r\n        elif amount==0:\r\n            return 1\r\n        else:\r\n            return count_partitions(amount-value, value)+count_partitions(amount, value*2)\r\n    return count_partitions(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":45,"studentId":0,"date":null,"diff":"\r\nInputObject                                                          SideIndicator\r\n-----------                                                          -------------\r\n            return helper(x - parts, parts) + helper(x, parts//2)    =>           \r\n            return helper(x - parts, parts) + helper(x, parts - (2)) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    #Find coin value that is the power of two closet to the amount\n    factor = 2 \n    power_of_two = 1 \n    while abs(power_of_two*factor - amount) < abs(amount - power_of_two):\n        power_of_two = power_of_two*factor\n    if power_of_two > amount:\n        power_of_two = power_of_two/2\n\n    def helper(x, parts):\n        if x == 0:\n            return 1\n        elif x < 0:\n            return 0\n        elif parts == 0:\n            return 0\n        else:\n            return helper(x - parts, parts) + helper(x, parts - (2))\n\n    return helper(amount,power_of_two)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    #Find coin value that is the power of two closet to the amount\n    factor = 2 \n    power_of_two = 1 \n    while abs(power_of_two*factor - amount) < abs(amount - power_of_two):\n        power_of_two = power_of_two*factor\n    if power_of_two > amount:\n        power_of_two = power_of_two/2\n\n    def helper(x, parts):\n        if x == 0:\n            return 1\n        elif x < 0:\n            return 0\n        elif parts == 0:\n            return 0\n        else:\n            return helper(x - parts, parts) + helper(x, parts//2)\n\n    return helper(amount,power_of_two)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    factor = 2\r\n    power_of_two = 1\r\n    while abs(power_of_two*factor-amount)<abs(amount-power_of_two):\r\n        power_of_two = power_of_two*factor\r\n    if power_of_two>amount:\r\n        power_of_two = power_of_two/2\r\n    def helper(x, parts):\r\n        if x==0:\r\n            return 1\r\n        elif x<0:\r\n            return 0\r\n        elif parts==0:\r\n            return 0\r\n        elif m>n:\r\n            return 0\r\n        else:\r\n            return helper(x-parts, parts)+helper(x, parts-(2))\r\n    return helper(amount, power_of_two)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-GreaterThan, Children(LeafConstNode(NameExpressionNode-m), SingleChild(LeafConstNode(NameExpressionNode-n)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(ConstantExpressionNode-0)))))))), 3), Selected(\\x => Match(x, StartsWithTarget(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"BinaryExpressionNode\")))))))))))))))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":46,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                SideIndicator\r\n-----------                                                                -------------\r\n        return counter(amount - value, value) + counter(amount, value * 2) =>           \r\n        return count(amount - value, value) + count(amount, value * 2)     <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def counter(amount, value):\n        if value > amount:\n            return 0\n        elif amount == 0 or amount == value:\n            return 1\n        return count(amount - value, value) + count(amount, value * 2)\n    return counter(amount, 1)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def counter(amount, value):\n        if value > amount:\n            return 0\n        elif amount == 0 or amount == value:\n            return 1\n        return counter(amount - value, value) + counter(amount, value * 2)\n    return counter(amount, 1)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def counter(amount, value):\r\n        if amount>amount:\r\n            return 0\r\n        elif amount==0 or amount==value:\r\n            return 1\r\n        return count(amount-value, value)+count(amount, value*2)\r\n    return counter(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 323, in count_change","    return counter(amount, 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 322, in counter","    return count(amount - value, value) + count(amount, value * 2)","NameError: name 'count' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":47,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n            print(amount) <=           \r\n            print(amount) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def largest_coin(amount):\n        i=1\n        while i<amount:\n            i= i*2\n        return i//2\n\n    def helper(amount, maxx):\n        if maxx==1 or amount==0 or amount==1:\n            print(amount)\n            return 1\n        elif amount<0:\n            return 0\n        elif amount== 2 or amount==3:\n            print(amount)\n            return 2\n        else: \n            return helper(amount, maxx/2) + helper(amount-maxx, maxx)\n    return helper(amount, largest_coin(amount))\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def largest_coin(amount):\n        i=1\n        while i<amount:\n            i= i*2\n        return i//2\n\n    def helper(amount, maxx):\n        if maxx==1 or amount==0 or amount==1:\n            return 1\n        elif amount<0:\n            return 0\n        elif amount== 2 or amount==3:\n            return 2\n        else: \n            return helper(amount, maxx/2) + helper(amount-maxx, maxx)\n    return helper(amount, largest_coin(amount))\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","7","5.0","3.0","3","6","","# Error: expected","#     6","# but got","#     7","#     5.0","#     3.0","#     3","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":48,"studentId":0,"date":null,"diff":"\r\nInputObject                                                             SideIndicator\r\n-----------                                                             -------------\r\n                                                                        =>           \r\n            return count_partitions(n-m, m) + count_partitions(n, m//2) =>           \r\n                                                                        =>           \r\n                                                                        =>           \r\n    options = [1,2,3]                                                   =>           \r\n    mid = not start and not end in options                              =>           \r\n                                                                        =>           \r\n    move_stack(n-1, start, mid)                                         =>           \r\n    move_stack(1, start, end)                                           =>           \r\n    move_stack(n-1, mid, end)                                           =>           \r\n                                                                        =>           \r\n                                                                        =>           \r\n                                                                        =>           \r\n                                                                        =>           \r\n                                                                        =>           \r\n                                                                        =>           \r\n                                                                        =>           \r\n            return count_partitions(n-m, m) + count_partitions(n, m/2)  <=           \r\n    \"*** YOUR CODE HERE ***\"                                            <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    a = 0\n    k = 1\n    while amount / 2**a > 1:\n        a += 1\n        k *= 2 \n    def count_partitions(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0 \n        elif m == 0:\n            return 0\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, m/2)\n    return count_partitions(amount, k)\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    a = 0\n    k = 1\n    while amount / 2**a > 1:\n        a += 1\n        k *= 2 \n   \n    def count_partitions(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0 \n        elif m == 0:\n            return 0\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, m//2)\n    \n    return count_partitions(amount, k)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 311, in count_partitions","    return count_partitions(n-m, m) + count_partitions(n, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 311, in count_partitions","    return count_partitions(n-m, m) + count_partitions(n, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 311, in count_partitions","    return count_partitions(n-m, m) + count_partitions(n, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 311, in count_partitions","    return count_partitions(n-m, m) + count_partitions(n, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 311, in count_partitions","    return count_partitions(n-m, m) + count_partitions(n, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 311, in count_partitions","    return count_partitions(n-m, m) + count_partitions(n, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 304, in count_partitions","    if n == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":49,"studentId":0,"date":null,"diff":"\r\nInputObject                          SideIndicator\r\n-----------                          -------------\r\n        with_m = partitions(n-m, m)  =>           \r\n        using_m = partitions(n-m, m) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    total = 0;\n    #make array:\n    arr = []\n    for i in [x for x in range(0, amount) if 2**x < amount]:\n        arr =  arr + [2**i]\n    maximum = arr[-1]\n    return partitions(amount, maximum)\n\n\ndef partitions(n, m):\n    #repurposing code from the reading\n    \"\"\"Return a list of partitions of n using parts of up to m.\n    Each partition is represented as a linked list.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n < 0 or m == 0:\n        return 0\n    else:\n        using_m = partitions(n-m, m)\n        without_m = partitions(n, m//2)\n        return with_m + without_m\n\n\n#     coins = [1] * amount;\n#     count, flag, next_arr = group_coins(coins, amount)\n#     return count\n#\n#\n# def group_coins(arr, amount):\n#     count = 1;\n#     temp = []\n#     i=0\n#     flag = False\n#     if len(arr) > 2:\n#         while i <(len(arr)-1):\n#             if arr[i] == arr[i+1]:\n#                 temp += [2*arr[i]];\n#                 count += 2\n#                 i += 2;\n#                 if i+1 == len(arr)-1: flag = True\n#             else:\n#                 temp += [arr[i]];\n#                 i += 1;\n#         if not flag: temp += [arr[-1]]\n#         print(temp)\n#     return count, flag, temp;\n#\n\n#     coins = simple_soln(arr, amount)\n#     count = 1\n#     for i in range(1, len(arr)):\n#         temp_arr = arr[0:i] + arr[i+1:len(arr)]\n#         coins = simple_soln(temp_arr, amount)\n#         count += 1\n#     return count\n#     #possibilities = [range(amount + 1) for x in arr]\n#     #return check_possibilities(possibilities, amount)\n#\n# def simple_soln(arr, amount):\n#     coins = [0] * len(arr)\n#     print(arr)\n#     for i in reversed(range(len(arr))):\n#         while arr[i] <= amount:\n#             amount -= arr[i]\n#             coins[i] += 1\n#     print(coins)\n#     return coins\n\n\n\n\n#tfw you're not allowed to brute force a problem\ndef check_possibilities(pos, amt):\n    coins = [0] * len(pos)\n    count = 0\n    while coins[0] != amt:\n        for i in reversed(range(len(pos))):\n            coins = increase(coins, 1, amt)\n            if makes_n(coins, amt):\n            #    print(coins)\n                count += 1\n    return count\n\n#this function is actually useless now oops\ndef increase(trything, top, amt):\n    arr = trything\n    if arr[-1] < top:\n        arr[-1] += 1\n        return arr\n    else:\n        arr[-1] = 0\n        #even after i made it more efficient :'(\n        if top >= amt: arr = increase(arr[:-1], amt, amt) + [arr[-1]]\n        else: arr = increase(arr[:-1], 2*top+1, amt) + [arr[-1]]\n        return arr\n\n#loud, sad sigh\ndef makes_n(arr, n):\n    total = 0;\n    for i in range(0, len(arr)):\n        total += (2**i)*arr[i]\n    return total == n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    total = 0;\n    #make array:\n    arr = []\n    for i in [x for x in range(0, amount) if 2**x < amount]:\n        arr =  arr + [2**i]\n    maximum = arr[-1]\n    return partitions(amount, maximum)\n\n\ndef partitions(n, m):\n    #repurposing code from the reading\n    \"\"\"Return a list of partitions of n using parts of up to m.\n    Each partition is represented as a linked list.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n < 0 or m == 0:\n        return 0\n    else:\n        with_m = partitions(n-m, m)\n        without_m = partitions(n, m//2)\n        return with_m + without_m\n\n\n#     coins = [1] * amount;\n#     count, flag, next_arr = group_coins(coins, amount)\n#     return count\n#\n#\n# def group_coins(arr, amount):\n#     count = 1;\n#     temp = []\n#     i=0\n#     flag = False\n#     if len(arr) > 2:\n#         while i <(len(arr)-1):\n#             if arr[i] == arr[i+1]:\n#                 temp += [2*arr[i]];\n#                 count += 2\n#                 i += 2;\n#                 if i+1 == len(arr)-1: flag = True\n#             else:\n#                 temp += [arr[i]];\n#                 i += 1;\n#         if not flag: temp += [arr[-1]]\n#         print(temp)\n#     return count, flag, temp;\n#\n\n#     coins = simple_soln(arr, amount)\n#     count = 1\n#     for i in range(1, len(arr)):\n#         temp_arr = arr[0:i] + arr[i+1:len(arr)]\n#         coins = simple_soln(temp_arr, amount)\n#         count += 1\n#     return count\n#     #possibilities = [range(amount + 1) for x in arr]\n#     #return check_possibilities(possibilities, amount)\n#\n# def simple_soln(arr, amount):\n#     coins = [0] * len(arr)\n#     print(arr)\n#     for i in reversed(range(len(arr))):\n#         while arr[i] <= amount:\n#             amount -= arr[i]\n#             coins[i] += 1\n#     print(coins)\n#     return coins\n\n\n\n\n#tfw you're not allowed to brute force a problem\ndef check_possibilities(pos, amt):\n    coins = [0] * len(pos)\n    count = 0\n    while coins[0] != amt:\n        for i in reversed(range(len(pos))):\n            coins = increase(coins, 1, amt)\n            if makes_n(coins, amt):\n            #    print(coins)\n                count += 1\n    return count\n\n#this function is actually useless now oops\ndef increase(trything, top, amt):\n    arr = trything\n    if arr[-1] < top:\n        arr[-1] += 1\n        return arr\n    else:\n        arr[-1] = 0\n        #even after i made it more efficient :'(\n        if top >= amt: arr = increase(arr[:-1], amt, amt) + [arr[-1]]\n        else: arr = increase(arr[:-1], 2*top+1, amt) + [arr[-1]]\n        return arr\n\n#loud, sad sigh\ndef makes_n(arr, n):\n    total = 0;\n    for i in range(0, len(arr)):\n        total += (2**i)*arr[i]\n    return total == n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 302, in count_change","    return partitions(amount, maximum)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in partitions","    using_m = partitions(n-m, m)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 316, in partitions","    without_m = partitions(n, m//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in partitions","    using_m = partitions(n-m, m)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 316, in partitions","    without_m = partitions(n, m//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 317, in partitions","    return with_m + without_m","NameError: name 'with_m' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":50,"studentId":0,"date":null,"diff":"\r\nInputObject                            SideIndicator\r\n-----------                            -------------\r\n    ways = [1]+[0]*amount              =>           \r\n        for i in range(coin,amount+1): =>           \r\n            ways[i]+=ways[i-coin]      =>           \r\n    return ways[amount]                =>           \r\n                                       =>           \r\n    money = ()                         <=           \r\n        num = amount//coin             <=           \r\n        money += coin * num            <=           \r\n        amount -= coin * num           <=           \r\n                                       <=           \r\n    return money                       <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def appro(n):\n        x=0\n        while pow(2,x)<n or pow(2,x)==n:\n            x=x+1\n        return x-1\n    list=[]\n    r=0\n    while r<appro(amount) or r==appro(amount):\n        list=list+[pow(2,r)]\n        r=r+1\n    money = ()\n    for coin in list:\n        num = amount//coin\n        money += coin * num\n        amount -= coin * num\n    \n    return money\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def appro(n):\n        x=0\n        while pow(2,x)<n or pow(2,x)==n:\n            x=x+1\n        return x-1\n    list=[]\n    r=0\n    while r<appro(amount) or r==appro(amount):\n        list=list+[pow(2,r)]\n        r=r+1\n    ways = [1]+[0]*amount\n    for coin in list:\n        for i in range(coin,amount+1):\n            ways[i]+=ways[i-coin]\n    return ways[amount]\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 334, in count_change","    money += coin * num","TypeError: can only concatenate tuple (not \"int\") to tuple","","# Error: expected","#     6","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":51,"studentId":0,"date":null,"diff":"\r\nInputObject            SideIndicator\r\n-----------            -------------\r\n    def a(x):          =>           \r\n        return 2**x    =>           \r\n    return r(0,amount) =>           \r\n    return r(0,n)      <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def r(x,n):\n        def a(x):\n            return 2**x\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif a(x)>n:\n            return 0\n        else:\n            return r(x,n-a(x)) + r(x+1,n)\n    return r(0,n)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def a(x):\n        return 2**x\n    def r(x,n):\n        def a(x):\n            return 2**x\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif a(x)>n:\n            return 0\n        else:\n            return r(x,n-a(x)) + r(x+1,n)\n    return r(0,amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def r(x, n):\r\n        def a(x):\r\n            return 2**amount\r\n        if n==0:\r\n            return 1\r\n        elif n<0:\r\n            return 0\r\n        elif a(x)>n:\r\n            return 0\r\n        else:\r\n            return r(x, n-a(x))+r(x+1, n)\r\n    return r(0, n)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 323, in count_change","    return r(0,n)","NameError: name 'n' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":1,"Id":52,"studentId":0,"date":null,"diff":"\r\nInputObject                                                     SideIndicator\r\n-----------                                                     -------------\r\n    def count_using(min_coin, amount):                          =>           \r\n        if amount < 0:                                          =>           \r\n            return 0                                            =>           \r\n        elif amount == 0:                                       =>           \r\n            return 1                                            =>           \r\n        elif min_coin > amount:                                 =>           \r\n            return 0                                            =>           \r\n        else:                                                   =>           \r\n            with_min = count_using(min_coin, amount - min_coin) =>           \r\n            without_min = count_using(2*min_coin, amount)       =>           \r\n            return with_min + without_min                       =>           \r\ndef count_using(min_coin, amount):                              <=           \r\n    if amount < 0:                                              <=           \r\n        return 0                                                <=           \r\n    elif amount == 0:                                           <=           \r\n        return 1                                                <=           \r\n    elif min_coin > amount:                                     <=           \r\n        return 0                                                <=           \r\n    else:                                                       <=           \r\n        with_min = count_using(min_coin, amount - min_coin)     <=           \r\n        without_min = count_using(2*min_coin, amount)           <=           \r\n        return with_min + without_min                           <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\ndef count_using(min_coin, amount):\n    if amount < 0:\n        return 0\n    elif amount == 0:\n        return 1\n    elif min_coin > amount:\n        return 0\n    else:\n        with_min = count_using(min_coin, amount - min_coin)\n        without_min = count_using(2*min_coin, amount)\n        return with_min + without_min\n\n    return count_using(1, amount)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def count_using(min_coin, amount):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif min_coin > amount:\n            return 0\n        else:\n            with_min = count_using(min_coin, amount - min_coin)\n            without_min = count_using(2*min_coin, amount)\n            return with_min + without_min\n    return count_using(1, amount)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","","# Error: expected","#     6","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":53,"studentId":0,"date":null,"diff":"\r\nInputObject                                          SideIndicator\r\n-----------                                          -------------\r\n    def helper(i, amount):                           =>           \r\n        if amount < 0:                               =>           \r\n            return 0                                 =>           \r\n        elif amount == 0:                            =>           \r\n            return 1                                 =>           \r\n        elif i > amount:                             =>           \r\n            return 0                                 =>           \r\n        else:                                        =>           \r\n            nonpower = helper(i, amount - i)         =>           \r\n            power = helper(i*2, amount)              =>           \r\n            return nonpower + power                  =>           \r\n    return helper(1, amount)                         =>           \r\n    n = amount                                       <=           \r\n    if n == 1:                                       <=           \r\n        return 1                                     <=           \r\n    if n == 2:                                       <=           \r\n        return 2                                     <=           \r\n    if n == 0:                                       <=           \r\n        return 0                                     <=           \r\n    while 0 < n:                                     <=           \r\n        return count_change(n-1) + count_change(n-2) <=           \r\n        n -= 1                                       <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    n = amount\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 0:\n        return 0\n    while 0 < n:\n        return count_change(n-1) + count_change(n-2)\n        n -= 1\n\n    \n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper(i, amount):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif i > amount:\n            return 0\n        else:\n            nonpower = helper(i, amount - i)\n            power = helper(i*2, amount)\n            return nonpower + power\n    return helper(1, amount)\n\n    \n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    amount = amount\r\n    if n==1:\r\n        return 1\r\n    if n==2:\r\n        return 2\r\n    if n==0:\r\n        return 0\r\n    while 0<n:\r\n        return count_change(n-1)+count_change(n-2)\r\n        n -= 1\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","21","","# Error: expected","#     6","# but got","#     21","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":54,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n        if amount == 0:    =>           \r\n        elif amount < 0:   =>           \r\n            return 0       =>           \r\n        elif biggest == 1: =>           \r\n        if biggest == 1:   <=           \r\n        elif amount == 0:  <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    x = 1\n    while x <= amount:\n        x = x * 2\n    def count_partitions(amount, biggest):\n        if biggest == 1:\n            return 1\n        elif amount == 0:\n            return 1\n        else:\n            return count_partitions(amount-biggest, biggest) + count_partitions(amount, biggest/2)\n    return count_partitions(amount, x)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    x = 1\n    while x <= amount:\n        x = x * 2\n    def count_partitions(amount, biggest):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif biggest == 1:\n            return 1\n        else:\n            return count_partitions(amount-biggest, biggest) + count_partitions(amount, biggest/2)\n    return count_partitions(amount, x)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 288, in count_partitions","    return count_partitions(amount-biggest, biggest) + count_partitions(amount, biggest/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 288, in count_partitions","    return count_partitions(amount-biggest, biggest) + count_partitions(amount, biggest/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 288, in count_partitions","    return count_partitions(amount-biggest, biggest) + count_partitions(amount, biggest/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 288, in count_partitions","    return count_partitions(amount-biggest, biggest) + count_partitions(amount, biggest/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 288, in count_partitions","    return count_partitions(amount-biggest, biggest) + count_partitions(amount, biggest/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 288, in count_partitions","    return count_partitions(amount-biggest, biggest) + count_partitions(amount, biggest/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 283, in count_partitions","    if biggest == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":55,"studentId":0,"date":null,"diff":"\r\nInputObject                   SideIndicator\r\n-----------                   -------------\r\n        return 2              =>           \r\n        return condition(n/2) =>           \r\n        return 0              <=           \r\n        condition(n/2)        <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    partitions=amount\n    def counting(amount, partitions):\n        if amount==0:\n            return 1\n        elif partitions==0:\n            return 0\n        elif amount<0:\n            return 0\n        elif condition(partitions)==1:\n            return counting(amount, partitions-1)\n        else:\n            w_counting=counting(amount-partitions, partitions)\n            wout_counting=counting(amount, partitions-1)\n            return w_counting + wout_counting\n    return counting(amount, partitions)\n\ndef condition(n):\n    if n==2 or n==1:\n        return 0\n    elif n%2!=0:\n        return 1\n    else:\n        condition(n/2)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    partitions=amount\n    def counting(amount, partitions):\n        if amount==0:\n            return 1\n        elif partitions==0:\n            return 0\n        elif amount<0:\n            return 0\n        elif condition(partitions)==1:\n            return counting(amount, partitions-1)\n        else:\n            w_counting=counting(amount-partitions, partitions)\n            wout_counting=counting(amount, partitions-1)\n            return w_counting + wout_counting\n    return counting(amount, partitions)\n\ndef condition(n):\n    if n==2 or n==1:\n        return 2\n    elif n%2!=0:\n        return 1\n    else:\n        return condition(n/2)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","7","","# Error: expected","#     6","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":56,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                             SideIndicator\r\n-----------                                                                             -------------\r\n#def pingpong(n): iteratively                                                           =>           \r\n#    i = 1                                                                              =>           \r\n#    ping_num = 0                                                                       =>           \r\n#    increasing = True                                                                  =>           \r\n#    while n >= i:                                                                      =>           \r\n#        if increasing:                                                                 =>           \r\n#            ping_num += 1                                                              =>           \r\n#        else:                                                                          =>           \r\n#            ping_num -= 1                                                              =>           \r\n#        if has_seven(i) or i % 7 ==0:                                                  =>           \r\n#            if increasing == True:                                                     =>           \r\n#                increasing = False                                                     =>           \r\n#            elif increasing == False:                                                  =>           \r\n#                increasing = True                                                      =>           \r\n#        i += 1                                                                         =>           \r\n#    return ping_num                                                                    =>           \r\n    def pingpong_add_or_sub(i,ping_num,increasing):                                     =>           \r\n        if has_seven(i) or i%7==0:                                                      =>           \r\n            return pingpong_helper(i,ping_num,not increasing)                           =>           \r\n            return pingpong_helper(i,ping_num,increasing)                               =>           \r\n    def pingpong_helper(i,ping_num,increasing):                                         =>           \r\n        if i == n:                                                                      =>           \r\n            return ping_num                                                             =>           \r\n        if increasing:                                                                  =>           \r\n            return pingpong_add_or_sub(i+1,ping_num+1,increasing)                       =>           \r\n            return pingpong_add_or_sub(i+1,ping_num-1,increasing)                       =>           \r\n    def count_change_parts(amount,m):                                                   =>           \r\n        elif amount == 0:                                                               =>           \r\n        elif amount < m:                                                                =>           \r\n            with_m = count_change_parts(amount - m,m )                                  =>           \r\n            without_m = count_change_parts(amount, 2 * m)                               =>           \r\n            return without_m + with_m                                                   =>           \r\n    return count_change_parts(amount, 1)                                                =>           \r\n            hanoi_helper(n-1,start,end,middle) #In the case of 2: hanoi_helper(1,1,3,2) =>           \r\n            hanoi_helper(1,start,middle,end) #In the case of 2: hanoi_helper(1,1,2,3)   =>           \r\n            hanoi_helper(n-1,middle,start,end) #In the case of 2: hanoi_helper(1,2,1,3) =>           \r\n                                                                                        =>           \r\n    def pingpong_add_or_sub(a,b,adding):                                                <=           \r\n        if has_seven(a) or a%7==0:                                                      <=           \r\n            return pingpong_helper(a,b,not adding)                                      <=           \r\n            return pingpong_helper(a,b,adding)                                          <=           \r\n    def pingpong_helper(a,b,adding):                                                    <=           \r\n        if a == n:                                                                      <=           \r\n            return b                                                                    <=           \r\n        if adding:                                                                      <=           \r\n            return pingpong_add_or_sub(a+1,b+1,adding)                                  <=           \r\n            return pingpong_add_or_sub(a+1,b-1,adding)                                  <=           \r\n    def count_change_parts(m,amount):                                                   <=           \r\n        elif amount < 0:                                                                <=           \r\n        elif amount == 0 :                                                              <=           \r\n            without_amount = count_change_parts(2 * m, amount)                          <=           \r\n            with_amount = count_change_parts(m, amount - m)                             <=           \r\n            return without_amount + with_amount                                         <=           \r\n    return count_change_parts(1,amount)                                                 <=           \r\n            hanoi_helper(n-1,start,end,middle)                                          <=           \r\n            hanoi_helper(1,start,middle,end)                                            <=           \r\n            hanoi_helper(n-1,middle,start,end)                                          <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_change_parts(m,amount):\n        if amount < 0:\n            return 0\n        elif amount < 0:\n            return 0\n        elif amount == 0 :\n            return 1\n        else:\n            without_amount = count_change_parts(2 * m, amount)\n            with_amount = count_change_parts(m, amount - m)\n            return without_amount + with_amount\n    return count_change_parts(1,amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_change_parts(amount,m):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif amount < m:\n            return 0\n        else:\n            with_m = count_change_parts(amount - m,m )\n            without_m = count_change_parts(amount, 2 * m)\n            return without_m + with_m\n    return count_change_parts(amount, 1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_change_parts(m, amount):\r\n        if amount<0:\r\n            return 0\r\n        elif amount<0:\r\n            return 0\r\n        elif amount==0:\r\n            return 1\r\n        else:\r\n            without_amount = count_change_parts(2*m, amount)\r\n            with_amount = count_change_parts(m, amount-m)\r\n            return without_amount+k\r\n    return count_change_parts(1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 317, in count_change_parts","    without_amount = count_change_parts(2 * m, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 317, in count_change_parts","    without_amount = count_change_parts(2 * m, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 317, in count_change_parts","    without_amount = count_change_parts(2 * m, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 317, in count_change_parts","    without_amount = count_change_parts(2 * m, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 317, in count_change_parts","    without_amount = count_change_parts(2 * m, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 317, in count_change_parts","    without_amount = count_change_parts(2 * m, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 310, in count_change_parts","    if amount < 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":57,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n        if factor==0: =>           \r\n        if factor==1: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(amount, factor):\n        if factor==1:\n            return 0\n        if amount<0:\n            return 1\n        else:\n            return helper(amount-pow(2, factor), factor) + helper(amount, factor-1)\n    count=0\n    while pow(2, count)<amount:\n        count+=1\n    return helper(amount, count-1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(amount, factor):\n        if factor==0:\n            return 1\n        if amount<0:\n            return 0\n        else:\n            return helper(amount-pow(2, factor), factor) + helper(amount, factor-1)\n    count=0\n    while pow(2, count)<amount:\n        count+=1\n    return helper(amount, count-1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def helper(amount, factor):\r\n        if amount==1:\r\n            return 0\r\n        if amount<0:\r\n            return 1\r\n        else:\r\n            return helper(amount-pow(2, factor), factor)+helper(amount, factor-1)\r\n    count = 0\r\n    while pow(2, count)<amount:\r\n        count += 1\r\n    return helper(amount, count-1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","1","","# Error: expected","#     6","# but got","#     1","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":58,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n    def find_m(amout,x):                    =>           \r\n        if amount//pow(2,x)==0:             =>           \r\n            return pow(2,x-1)               =>           \r\n            return find_m(amount,x+1)       =>           \r\n    m = find_m(amount,1)                    =>           \r\n        m                                   =>           \r\n    return count_partitions(amount,m)       =>           \r\n    def find_m():                           <=           \r\n        x == 10000                          <=           \r\n        if repeated(square,x)(2) <= amount: <=           \r\n            return repeated(square,x)(2)    <=           \r\n            repeated(square,x-1)(2)         <=           \r\n    return count_partitions(amount,find_m)  <=           \r\n                                            <=           \r\n                                            <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n\n \n    def count_16(x,amount):\n        if amount >= 16:\n            return count_16(x+1,amount-16)\n        if amount >= 8:\n            return count_8(x+1,amount)\n        else:\n            return count_8(x,amount)\n    def count_8(x,amount):\n        if amount >= 8:\n            return count_8(x+1,amount-8)\n        if amount >= 4:\n            return count_4(x+1,amount)\n        else:\n            return count_4(x,amount)\n    def count_4(x,amount):\n        if amount >= 4:\n            return count_4(x+1,amount-4)\n        if amount >= 2:\n            return count_2(x+1,amount)\n        else:\n            return count_2(x,amount)\n    def count_2(x,amount):\n        if amount >= 2:\n            return count_2(x+1,amount-2)\n        if amount >= 1:\n            return count_1(x+1,amount)\n        else:\n            return count_1(x,amount)\n    def count_1(x,amount):\n        if amount >= 0:\n            return x+1\n\n\n    return count_16(0,amount)\n\n\"\"\"\n    def find_m():\n        x == 10000\n        if repeated(square,x)(2) <= amount:\n            return repeated(square,x)(2)\n        else:\n            repeated(square,x-1)(2)\n\n\n    def count_partitions(n, m):\n  \n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 1:\n            return 1\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, m/2)\n\n    return count_partitions(amount,find_m)\n    \n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n\n \n    def count_16(x,amount):\n        if amount >= 16:\n            return count_16(x+1,amount-16)\n        if amount >= 8:\n            return count_8(x+1,amount)\n        else:\n            return count_8(x,amount)\n    def count_8(x,amount):\n        if amount >= 8:\n            return count_8(x+1,amount-8)\n        if amount >= 4:\n            return count_4(x+1,amount)\n        else:\n            return count_4(x,amount)\n    def count_4(x,amount):\n        if amount >= 4:\n            return count_4(x+1,amount-4)\n        if amount >= 2:\n            return count_2(x+1,amount)\n        else:\n            return count_2(x,amount)\n    def count_2(x,amount):\n        if amount >= 2:\n            return count_2(x+1,amount-2)\n        if amount >= 1:\n            return count_1(x+1,amount)\n        else:\n            return count_1(x,amount)\n    def count_1(x,amount):\n        if amount >= 0:\n            return x+1\n\n\n    return count_16(0,amount)\n\n\"\"\"\n    def find_m(amout,x):\n        if amount//pow(2,x)==0:\n            return pow(2,x-1)\n        else:\n            return find_m(amount,x+1)\n    m = find_m(amount,1)\n    def count_partitions(n, m):\n        m \n  \n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 1:\n            return 1\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, m/2)\n\n    return count_partitions(amount,m)\n    \n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 413, in count_change","    return count_partitions(amount,find_m)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 411, in count_partitions","    return count_partitions(n-m, m) + count_partitions(n, m/2)","TypeError: unsupported operand type(s) for -: 'int' and 'function'","","# Error: expected","#     6","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":59,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                    SideIndicator\r\n-----------                                                                                    -------------\r\n        if amount < 0:                                                                         =>           \r\n            return biggest_coin(amount, max_coin/2) + biggest_coin(amount-max_coin, max_coin)  =>           \r\n        if amount <= 0:                                                                        <=           \r\n            return biggest_coin(amount, max_coin//2) + biggest_coin(amount-max_coin, max_coin) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    a = 0\n    while amount > 2**a:\n        a += 1\n    max_coin = 2**a\n    def biggest_coin(amount,max_coin):\n        if amount <= 0:\n            return 0\n        elif max_coin == 1 or amount == 0:\n            return 1\n        else:\n            return biggest_coin(amount, max_coin//2) + biggest_coin(amount-max_coin, max_coin)\n    return biggest_coin(amount, max_coin)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    a = 0\n    while amount > 2**a:\n        a += 1\n    max_coin = 2**a\n    def biggest_coin(amount,max_coin):\n        if amount < 0:\n            return 0\n        elif max_coin == 1 or amount == 0:\n            return 1\n        else:\n            return biggest_coin(amount, max_coin/2) + biggest_coin(amount-max_coin, max_coin)\n    return biggest_coin(amount, max_coin)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","10","","# Error: expected","#     14","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":60,"studentId":0,"date":null,"diff":"\r\nInputObject                 SideIndicator\r\n-----------                 -------------\r\n        print(amount, coin) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    # Once the machines take over, the denomination of every coin will be a power of two:\n    # 1-cent, 2-cent, 4-cent, 8-cent, 16-cent, etc. There will be no limit to how much a coin can be worth.\n    # 7 1-cent coins 1 + 1 + 1 + 1 + 1 + 1 + 1\n    # 5 1-cent, 1 2-cent coins 1 + 1 + 1 + 1 + 1 + 2\n    # 3 1-cent, 2 2-cent coins 1 + 1 + 1 + 2 + 2\n    # 3 1-cent, 1 4-cent coins 1 + 1 + 1+ 4\n    # 1 1-cent, 3 2-cent coins 1+ 2 + 2 + 2\n    # 1 1-cent, 1 2-cent, 1 4-cent coins 1 + 2 + 4\n\n    # n = 0\n    # while 2**n < amount:\n    #     n = n + 1 \n    # n = n - 1\n\n    # coin = 2**n #trying to get highest coin value\n    def helper(amount, coin):\n        print(amount, coin)\n        if amount < 0:\n            return 0\n        elif amount == 0 or amount == coin:\n            return 1\n        elif amount < coin:\n            return 0\n        else:\n            return helper(amount-coin, coin) \\\n            + helper(amount, coin*2)\n\n    return helper(amount, 1)\n    # need to return it\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    # Once the machines take over, the denomination of every coin will be a power of two:\n    # 1-cent, 2-cent, 4-cent, 8-cent, 16-cent, etc. There will be no limit to how much a coin can be worth.\n    # 7 1-cent coins 1 + 1 + 1 + 1 + 1 + 1 + 1\n    # 5 1-cent, 1 2-cent coins 1 + 1 + 1 + 1 + 1 + 2\n    # 3 1-cent, 2 2-cent coins 1 + 1 + 1 + 2 + 2\n    # 3 1-cent, 1 4-cent coins 1 + 1 + 1+ 4\n    # 1 1-cent, 3 2-cent coins 1+ 2 + 2 + 2\n    # 1 1-cent, 1 2-cent, 1 4-cent coins 1 + 2 + 4\n\n    # n = 0\n    # while 2**n < amount:\n    #     n = n + 1 \n    # n = n - 1\n\n    # coin = 2**n #trying to get highest coin value\n    def helper(amount, coin):\n        if amount < 0:\n            return 0\n        elif amount == 0 or amount == coin:\n            return 1\n        elif amount < coin:\n            return 0\n        else:\n            return helper(amount-coin, coin) \\\n            + helper(amount, coin*2)\n\n    return helper(amount, 1)\n    # need to return it\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def helper(amount, coin):\r\n        printamount, coin\r\n        if amount<0:\r\n            return 0\r\n        elif amount==0 or amount==coin:\r\n            return 1\r\n        elif amount<coin:\r\n            return 0\r\n        else:\r\n            return helper(amount-coin, coin)+helper(amount, coin*2)\r\n    return helper(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","7 1","6 1","5 1","4 1","3 1","2 1","1 1","2 2","3 2","1 2","3 4","4 2","2 2","4 4","5 2","3 2","1 2","3 4","5 4","1 4","5 8","6 2","4 2","2 2","4 4","6 4","2 4","6 8","7 2","5 2","3 2","1 2","3 4","5 4","1 4","5 8","7 4","3 4","7 8","6","","# Error: expected","#     6","# but got","#     7 1","#     6 1","#     5 1","#     4 1","#     3 1","#     2 1","#     1 1","#     2 2","#     3 2","#     1 2","#     3 4","#     4 2","#     2 2","#     4 4","#     5 2","#     3 2","#     1 2","#     3 4","#     5 4","#     1 4","#     5 8","#     6 2","#     4 2","#     2 2","#     4 4","#     6 4","#     2 4","#     6 8","#     7 2","#     5 2","#     3 2","#     1 2","#     3 4","#     5 4","#     1 4","#     5 8","#     7 4","#     3 4","#     7 8","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":61,"studentId":0,"date":null,"diff":"\r\nInputObject                                                         SideIndicator\r\n-----------                                                         -------------\r\n    elif amount % 2 == 1:                                           =>           \r\n        return count_change(amount - 2) + count_change(amount // 2) =>           \r\n    elif amount % 2 == 1:                                           <=           \r\n        return count_change(amount - 2) + count_change(n // 2)      <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    if amount <= 1:\n        return 1\n    elif amount % 2 == 1: \n        return count_change(amount - 1)\n    else:\n        return count_change(amount - 2) + count_change(n // 2)\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    if amount <= 1:\n        return 1\n    elif amount % 2 == 1:\n        return count_change(amount - 1)\n    else:\n        return count_change(amount - 2) + count_change(amount // 2)\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 311, in count_change","    return count_change(amount - 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 313, in count_change","    return count_change(amount - 2) + count_change(n // 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 313, in count_change","    return count_change(amount - 2) + count_change(n // 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 313, in count_change","    return count_change(amount - 2) + count_change(n // 2)","NameError: name 'n' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":62,"studentId":0,"date":null,"diff":"\r\nInputObject                        SideIndicator\r\n-----------                        -------------\r\n    return counting(amount, 1)     =>           \r\n        return counting(amount, 1) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def counting(amount, num):\n        if amount == 0:\n            return 1\n        if amount < 0:\n            return 0\n        elif num > amount:\n            return 0\n        else:\n            return counting(amount-num, num) + counting(amount, 2*num)\n        return counting(amount, 1)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def counting(amount, num):\n        if amount == 0:\n            return 1\n        if amount < 0:\n            return 0\n        elif num > amount:\n            return 0\n        else:\n            return counting(amount-num, num) + counting(amount, 2*num)\n    return counting(amount, 1)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def counting(amount, num):\r\n        if amount==0:\r\n            return 1\r\n        if amount<0:\r\n            return 0\r\n        elif num>amount:\r\n            return 0\r\n        else:\r\n            return counting(amount-num, num)+counting(amount, 2*num)\r\n        return counting(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","","# Error: expected","#     6","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":63,"studentId":0,"date":null,"diff":"\r\nInputObject                                SideIndicator\r\n-----------                                -------------\r\n        if amount == 0:                    =>           \r\n        elif amount < 0 or denom > amount: =>           \r\n        if amount < 0 or denom > amount:   <=           \r\n        elif amount == 0:                  <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(denom, amount):\n        if amount < 0 or denom > amount:\n            return 0\n        elif amount == 0:\n            return 1\n        else:\n            return helper(denom, amount - denom) + helper(2*denom, amount)\n    return helper(1, amount)\n        \ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(denom, amount):\n        if amount == 0:\n            return 1\n        elif amount < 0 or denom > amount:\n            return 0\n        else:\n            return helper(denom, amount - denom) + helper(2*denom, amount)\n    return helper(1, amount)\n        \ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def helper(denom, amount):\r\n        if amount<0 or denom>amount:\r\n            return 0\r\n        elif amount==0:\r\n            return 1\r\n        else:\r\n            return helper(denom, amount-denom)+helper(2*denom, amount)\r\n    return helper(1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":64,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n        elif k < 0 or amount < 0:                     =>           \r\n                                                      =>           \r\n    if n == 0:                                        =>           \r\n        return None                                   =>           \r\n    if n > 1:                                         =>           \r\n        return move_stack(n-1, start, 6 - start- end) =>           \r\n    return move_stack(n-1, 6-start-end, end)          =>           \r\n                                                      =>           \r\n        print(amount)                                 <=           \r\n        elif k < 0:                                   <=           \r\n    \"*** YOUR CODE HERE ***\"                          <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    n = 1\n    while n < amount:\n        n = n*2\n    n = n/2\n    def count_change_helper(amount, k):\n        print(amount)\n        if k == 1 or amount == 0:\n            return 1\n        elif k < 0:\n            return 0\n        else:\n            return count_change_helper(amount, k/2) + count_change_helper(amount - k, k)\n    return count_change_helper (amount, n)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    n = 1\n    while n < amount:\n        n = n*2\n    n = n/2\n    def count_change_helper(amount, k):\n        if k == 1 or amount == 0:\n            return 1\n        elif k < 0 or amount < 0:\n            return 0\n        else:\n            return count_change_helper(amount, k/2) + count_change_helper(amount - k, k)\n    return count_change_helper (amount, n)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","7","7","7","5.0","5.0","3.0","3.0","1.0","1.0","-1.0","-1.0","-3.0","-3.0","-5.0","-5.0","-7.0","-7.0","-9.0","-9.0","-11.0","-11.0","-13.0","-13.0","-15.0","-15.0","-17.0","-17.0","-19.0","-19.0","-21.0","-21.0","-23.0","-23.0","-25.0","-25.0","-27.0","-27.0","-29.0","-29.0","-31.0","-31.0","-33.0","-33.0","-35.0","-35.0","-37.0","-37.0","-39.0","-39.0","-41.0","-41.0","-43.0","-43.0","-45.0","-45.0","-47.0","-47.0","-49.0","-49.0","-51.0","-51.0","-53.0","-53.0","-55.0","-55.0","-57.0","-57.0","-59.0","-59.0","-61.0","-61.0","-63.0","-63.0","-65.0","-65.0","-67.0","-67.0","-69.0","-69.0","-71.0","-71.0","-73.0","-73.0","-75.0","-75.0","-77.0","-77.0","-79.0","-79.0","-81.0","-81.0","-83.0","-83.0","-85.0","-85.0","-87.0","-87.0","-89.0","-89.0","-91.0","-91.0","-93.0","-93.0","-95.0","-95.0","-97.0","-97.0","-99.0","-99.0","-101.0","-101.0","-103.0","-103.0","-105.0","-105.0","-107.0","-107.0","-109.0","-109.0","-111.0","-111.0","-113.0","-113.0","-115.0","-115.0","-117.0","-117.0","-119.0","-119.0","-121.0","-121.0","-123.0","-123.0","-125.0","-125.0","-127.0","-127.0","-129.0","-129.0","-131.0","-131.0","-133.0","-133.0","-135.0","-135.0","-137.0","-137.0","-139.0","-139.0","-141.0","-141.0","-143.0","-143.0","-145.0","-145.0","-147.0","-147.0","-149.0","-149.0","-151.0","-151.0","-153.0","-153.0","-155.0","-155.0","-157.0","-157.0","-159.0","-159.0","-161.0","-161.0","-163.0","-163.0","-165.0","-165.0","-167.0","-167.0","-169.0","-169.0","-171.0","-171.0","-173.0","-173.0","-175.0","-175.0","-177.0","-177.0","-179.0","-179.0","-181.0","-181.0","-183.0","-183.0","-185.0","-185.0","-187.0","-187.0","-189.0","-189.0","-191.0","-191.0","-193.0","-193.0","-195.0","-195.0","-197.0","-197.0","-199.0","-199.0","-201.0","-201.0","-203.0","-203.0","-205.0","-205.0","-207.0","-207.0","-209.0","-209.0","-211.0","-211.0","-213.0","-213.0","-215.0","-215.0","-217.0","-217.0","-219.0","-219.0","-221.0","-221.0","-223.0","-223.0","-225.0","-225.0","-227.0","-227.0","-229.0","-229.0","-231.0","-231.0","-233.0","-233.0","-235.0","-235.0","-237.0","-237.0","-239.0","-239.0","-241.0","-241.0","-243.0","-243.0","-245.0","-245.0","-247.0","-247.0","-249.0","-249.0","-251.0","-251.0","-253.0","-253.0","-255.0","-255.0","-257.0","-257.0","-259.0","-259.0","-261.0","-261.0","-263.0","-263.0","-265.0","-265.0","-267.0","-267.0","-269.0","-269.0","-271.0","-271.0","-273.0","-273.0","-275.0","-275.0","-277.0","-277.0","-279.0","-279.0","-281.0","-281.0","-283.0","-283.0","-285.0","-285.0","-287.0","-287.0","-289.0","-289.0","-291.0","-291.0","-293.0","-293.0","-295.0","-295.0","-297.0","-297.0","-299.0","-299.0","-301.0","-301.0","-303.0","-303.0","-305.0","-305.0","-307.0","-307.0","-309.0","-309.0","-311.0","-311.0","-313.0","-313.0","-315.0","-315.0","-317.0","-317.0","-319.0","-319.0","-321.0","-321.0","-323.0","-323.0","-325.0","-325.0","-327.0","-327.0","-329.0","-329.0","-331.0","-331.0","-333.0","-333.0","-335.0","-335.0","-337.0","-337.0","-339.0","-339.0","-341.0","-341.0","-343.0","-343.0","-345.0","-345.0","-347.0","-347.0","-349.0","-349.0","-351.0","-351.0","-353.0","-353.0","-355.0","-355.0","-357.0","-357.0","-359.0","-359.0","-361.0","-361.0","-363.0","-363.0","-365.0","-365.0","-367.0","-367.0","-369.0","-369.0","-371.0","-371.0","-373.0","-373.0","-375.0","-375.0","-377.0","-377.0","-379.0","-379.0","-381.0","-381.0","-383.0","-383.0","-385.0","-385.0","-387.0","-387.0","-389.0","-389.0","-391.0","-391.0","-393.0","-393.0","-395.0","-395.0","-397.0","-397.0","-399.0","-399.0","-401.0","-401.0","-403.0","-403.0","-405.0","-405.0","-407.0","-407.0","-409.0","-409.0","-411.0","-411.0","-413.0","-413.0","-415.0","-415.0","-417.0","-417.0","-419.0","-419.0","-421.0","-421.0","-423.0","-423.0","-425.0","-425.0","-427.0","-427.0","-429.0","-429.0","-431.0","-431.0","-433.0","-433.0","-435.0","-435.0","-437.0","-437.0","-439.0","-439.0","-441.0","-441.0","-443.0","-443.0","-445.0","-445.0","-447.0","-447.0","-449.0","-449.0","-451.0","-451.0","-453.0","-453.0","-455.0","-455.0","-457.0","-457.0","-459.0","-459.0","-461.0","-461.0","-463.0","-463.0","-465.0","-465.0","-467.0","-467.0","-469.0","-469.0","-471.0","-471.0","-473.0","-473.0","-475.0","-475.0","-477.0","-477.0","-479.0","-479.0","-481.0","-481.0","-483.0","-483.0","-485.0","-485.0","-487.0","-487.0","-489.0","-489.0","-491.0","-491.0","-493.0","-493.0","-495.0","-495.0","-497.0","-497.0","-499.0","-499.0","-501.0","-501.0","-503.0","-503.0","-505.0","-505.0","-507.0","-507.0","-509.0","-509.0","-511.0","-511.0","-513.0","-513.0","-515.0","-515.0","-517.0","-517.0","-519.0","-519.0","-521.0","-521.0","-523.0","-523.0","-525.0","-525.0","-527.0","-527.0","-529.0","-529.0","-531.0","-531.0","-533.0","-533.0","-535.0","-535.0","-537.0","-537.0","-539.0","-539.0","-541.0","-541.0","-543.0","-543.0","-545.0","-545.0","-547.0","-547.0","-549.0","-549.0","-551.0","-551.0","-553.0","-553.0","-555.0","-555.0","-557.0","-557.0","-559.0","-559.0","-561.0","-561.0","-563.0","-563.0","-565.0","-565.0","-567.0","-567.0","-569.0","-569.0","-571.0","-571.0","-573.0","-573.0","-575.0","-575.0","-577.0","-577.0","-579.0","-579.0","-581.0","-581.0","-583.0","-583.0","-585.0","-585.0","-587.0","-587.0","-589.0","-589.0","-591.0","-591.0","-593.0","-593.0","-595.0","-595.0","-597.0","-597.0","-599.0","-599.0","-601.0","-601.0","-603.0","-603.0","-605.0","-605.0","-607.0","-607.0","-609.0","-609.0","-611.0","-611.0","-613.0","-613.0","-615.0","-615.0","-617.0","-617.0","-619.0","-619.0","-621.0","-621.0","-623.0","-623.0","-625.0","-625.0","-627.0","-627.0","-629.0","-629.0","-631.0","-631.0","-633.0","-633.0","-635.0","-635.0","-637.0","-637.0","-639.0","-639.0","-641.0","-641.0","-643.0","-643.0","-645.0","-645.0","-647.0","-647.0","-649.0","-649.0","-651.0","-651.0","-653.0","-653.0","-655.0","-655.0","-657.0","-657.0","-659.0","-659.0","-661.0","-661.0","-663.0","-663.0","-665.0","-665.0","-667.0","-667.0","-669.0","-669.0","-671.0","-671.0","-673.0","-673.0","-675.0","-675.0","-677.0","-677.0","-679.0","-679.0","-681.0","-681.0","-683.0","-683.0","-685.0","-685.0","-687.0","-687.0","-689.0","-689.0","-691.0","-691.0","-693.0","-693.0","-695.0","-695.0","-697.0","-697.0","-699.0","-699.0","-701.0","-701.0","-703.0","-703.0","-705.0","-705.0","-707.0","-707.0","-709.0","-709.0","-711.0","-711.0","-713.0","-713.0","-715.0","-715.0","-717.0","-717.0","-719.0","-719.0","-721.0","-721.0","-723.0","-723.0","-725.0","-725.0","-727.0","-727.0","-729.0","-729.0","-731.0","-731.0","-733.0","-733.0","-735.0","-735.0","-737.0","-737.0","-739.0","-739.0","-741.0","-741.0","-743.0","-743.0","-745.0","-745.0","-747.0","-747.0","-749.0","-749.0","-751.0","-751.0","-753.0","-753.0","-755.0","-755.0","-757.0","-757.0","-759.0","-759.0","-761.0","-761.0","-763.0","-763.0","-765.0","-765.0","-767.0","-767.0","-769.0","-769.0","-771.0","-771.0","-773.0","-773.0","-775.0","-775.0","-777.0","-777.0","-779.0","-779.0","-781.0","-781.0","-783.0","-783.0","-785.0","-785.0","-787.0","-787.0","-789.0","-789.0","-791.0","-791.0","-793.0","-793.0","-795.0","-795.0","-797.0","-797.0","-799.0","-799.0","-801.0","-801.0","-803.0","-803.0","-805.0","-805.0","-807.0","-807.0","-809.0","-809.0","-811.0","-811.0","-813.0","-813.0","-815.0","-815.0","-817.0","-817.0","-819.0","-819.0","-821.0","-821.0","-823.0","-823.0","-825.0","-825.0","-827.0","-827.0","-829.0","-829.0","-831.0","-831.0","-833.0","-833.0","-835.0","-835.0","-837.0","-837.0","-839.0","-839.0","-841.0","-841.0","-843.0","-843.0","-845.0","-845.0","-847.0","-847.0","-849.0","-849.0","-851.0","-851.0","-853.0","-853.0","-855.0","-855.0","-857.0","-857.0","-859.0","-859.0","-861.0","-861.0","-863.0","-863.0","-865.0","-865.0","-867.0","-867.0","-869.0","-869.0","-871.0","-871.0","-873.0","-873.0","-875.0","-875.0","-877.0","-877.0","-879.0","-879.0","-881.0","-881.0","-883.0","-883.0","-885.0","-885.0","-887.0","-887.0","-889.0","-889.0","-891.0","-891.0","-893.0","-893.0","-895.0","-895.0","-897.0","-897.0","-899.0","-899.0","-901.0","-901.0","-903.0","-903.0","-905.0","-905.0","-907.0","-907.0","-909.0","-909.0","-911.0","-911.0","-913.0","-913.0","-915.0","-915.0","-917.0","-917.0","-919.0","-919.0","-921.0","-921.0","-923.0","-923.0","-925.0","-925.0","-927.0","-927.0","-929.0","-929.0","-931.0","-931.0","-933.0","-933.0","-935.0","-935.0","-937.0","-937.0","-939.0","-939.0","-941.0","-941.0","-943.0","-943.0","-945.0","-945.0","-947.0","-947.0","-949.0","-949.0","-951.0","-951.0","-953.0","-953.0","-955.0","-955.0","-957.0","-957.0","-959.0","-959.0","-961.0","-961.0","-963.0","-963.0","-965.0","-965.0","-967.0","-967.0","-969.0","-969.0","-971.0","-971.0","-973.0","-973.0","-975.0","-975.0","-977.0","-977.0","-979.0","-979.0","-981.0","-981.0","-983.0","-983.0","-985.0","-985.0","-987.0","-987.0","-989.0","-989.0","-991.0","-991.0","-993.0","-993.0","-995.0","-995.0","-997.0","-997.0","-999.0","-999.0","-1001.0","-1001.0","-1003.0","-1003.0","-1005.0","-1005.0","-1007.0","-1007.0","-1009.0","-1009.0","-1011.0","-1011.0","-1013.0","-1013.0","-1015.0","-1015.0","-1017.0","-1017.0","-1019.0","-1019.0","-1021.0","-1021.0","-1023.0","-1023.0","-1025.0","-1025.0","-1027.0","-1027.0","-1029.0","-1029.0","-1031.0","-1031.0","-1033.0","-1033.0","-1035.0","-1035.0","-1037.0","-1037.0","-1039.0","-1039.0","-1041.0","-1041.0","-1043.0","-1043.0","-1045.0","-1045.0","-1047.0","-1047.0","-1049.0","-1049.0","-1051.0","-1051.0","-1053.0","-1053.0","-1055.0","-1055.0","-1057.0","-1057.0","-1059.0","-1059.0","-1061.0","-1061.0","-1063.0","-1063.0","-1065.0","-1065.0","-1067.0","-1067.0","-1069.0","-1069.0","-1071.0","-1071.0","-1073.0","-1073.0","-1075.0","-1075.0","-1077.0","-1077.0","-1079.0","-1079.0","-1081.0","-1081.0","-1083.0","-1083.0","-1085.0","-1085.0","-1087.0","-1087.0","-1089.0","-1089.0","-1091.0","-1091.0","-1093.0","-1093.0","-1095.0","-1095.0","-1097.0","-1097.0","-1099.0","-1099.0","-1101.0","-1101.0","-1103.0","-1103.0","-1105.0","-1105.0","-1107.0","-1107.0","-1109.0","-1109.0","-1111.0","-1111.0","-1113.0","-1113.0","-1115.0","-1115.0","-1117.0","-1117.0","-1119.0","-1119.0","-1121.0","-1121.0","-1123.0","-1123.0","-1125.0","-1125.0","-1127.0","-1127.0","-1129.0","-1129.0","-1131.0","-1131.0","-1133.0","-1133.0","-1135.0","-1135.0","-1137.0","-1137.0","-1139.0","-1139.0","-1141.0","-1141.0","-1143.0","-1143.0","-1145.0","-1145.0","-1147.0","-1147.0","-1149.0","-1149.0","-1151.0","-1151.0","-1153.0","-1153.0","-1155.0","-1155.0","-1157.0","-1157.0","-1159.0","-1159.0","-1161.0","-1161.0","-1163.0","-1163.0","-1165.0","-1165.0","-1167.0","-1167.0","-1169.0","-1169.0","-1171.0","-1171.0","-1173.0","-1173.0","-1175.0","-1175.0","-1177.0","-1177.0","-1179.0","-1179.0","-1181.0","-1181.0","-1183.0","-1183.0","-1185.0","-1185.0","-1187.0","-1187.0","-1189.0","-1189.0","-1191.0","-1191.0","-1193.0","-1193.0","-1195.0","-1195.0","-1197.0","-1197.0","-1199.0","-1199.0","-1201.0","-1201.0","-1203.0","-1203.0","-1205.0","-1205.0","-1207.0","-1207.0","-1209.0","-1209.0","-1211.0","-1211.0","-1213.0","-1213.0","-1215.0","-1215.0","-1217.0","-1217.0","-1219.0","-1219.0","-1221.0","-1221.0","-1223.0","-1223.0","-1225.0","-1225.0","-1227.0","-1227.0","-1229.0","-1229.0","-1231.0","-1231.0","-1233.0","-1233.0","-1235.0","-1235.0","-1237.0","-1237.0","-1239.0","-1239.0","-1241.0","-1241.0","-1243.0","-1243.0","-1245.0","-1245.0","-1247.0","-1247.0","-1249.0","-1249.0","-1251.0","-1251.0","-1253.0","-1253.0","-1255.0","-1255.0","-1257.0","-1257.0","-1259.0","-1259.0","-1261.0","-1261.0","-1263.0","-1263.0","-1265.0","-1265.0","-1267.0","-1267.0","-1269.0","-1269.0","-1271.0","-1271.0","-1273.0","-1273.0","-1275.0","-1275.0","-1277.0","-1277.0","-1279.0","-1279.0","-1281.0","-1281.0","-1283.0","-1283.0","-1285.0","-1285.0","-1287.0","-1287.0","-1289.0","-1289.0","-1291.0","-1291.0","-1293.0","-1293.0","-1295.0","-1295.0","-1297.0","-1297.0","-1299.0","-1299.0","-1301.0","-1301.0","-1303.0","-1303.0","-1305.0","-1305.0","-1307.0","-1307.0","-1309.0","-1309.0","-1311.0","-1311.0","-1313.0","-1313.0","-1315.0","-1315.0","-1317.0","-1317.0","-1319.0","-1319.0","-1321.0","-1321.0","-1323.0","-1323.0","-1325.0","-1325.0","-1327.0","-1327.0","-1329.0","-1329.0","-1331.0","-1331.0","-1333.0","-1333.0","-1335.0","-1335.0","-1337.0","-1337.0","-1339.0","-1339.0","-1341.0","-1341.0","-1343.0","-1343.0","-1345.0","-1345.0","-1347.0","-1347.0","-1349.0","-1349.0","-1351.0","-1351.0","-1353.0","-1353.0","-1355.0","-1355.0","-1357.0","-1357.0","-1359.0","-1359.0","-1361.0","-1361.0","-1363.0","-1363.0","-1365.0","-1365.0","-1367.0","-1367.0","-1369.0","-1369.0","-1371.0","-1371.0","-1373.0","-1373.0","-1375.0","-1375.0","-1377.0","-1377.0","-1379.0","-1379.0","-1381.0","-1381.0","-1383.0","-1383.0","-1385.0","-1385.0","-1387.0","-1387.0","-1389.0","-1389.0","-1391.0","-1391.0","-1393.0","-1393.0","-1395.0","-1395.0","-1397.0","-1397.0","-1399.0","-1399.0","-1401.0","-1401.0","-1403.0","-1403.0","-1405.0","-1405.0","-1407.0","-1407.0","-1409.0","-1409.0","-1411.0","-1411.0","-1413.0","-1413.0","-1415.0","-1415.0","-1417.0","-1417.0","-1419.0","-1419.0","-1421.0","-1421.0","-1423.0","-1423.0","-1425.0","-1425.0","-1427.0","-1427.0","-1429.0","-1429.0","-1431.0","-1431.0","-1433.0","-1433.0","-1435.0","-1435.0","-1437.0","-1437.0","-1439.0","-1439.0","-1441.0","-1441.0","-1443.0","-1443.0","-1445.0","-1445.0","-1447.0","-1447.0","-1449.0","-1449.0","-1451.0","-1451.0","-1453.0","-1453.0","-1455.0","-1455.0","-1457.0","-1457.0","-1459.0","-1459.0","-1461.0","-1461.0","-1463.0","-1463.0","-1465.0","-1465.0","-1467.0","-1467.0","-1469.0","-1469.0","-1471.0","-1471.0","-1473.0","-1473.0","-1475.0","-1475.0","-1477.0","-1477.0","-1479.0","-1479.0","-1481.0","-1481.0","-1483.0","-1483.0","-1485.0","-1485.0","-1487.0","-1487.0","-1489.0","-1489.0","-1491.0","-1491.0","-1493.0","-1493.0","-1495.0","-1495.0","-1497.0","-1497.0","-1499.0","-1499.0","-1501.0","-1501.0","-1503.0","-1503.0","-1505.0","-1505.0","-1507.0","-1507.0","-1509.0","-1509.0","-1511.0","-1511.0","-1513.0","-1513.0","-1515.0","-1515.0","-1517.0","-1517.0","-1519.0","-1519.0","-1521.0","-1521.0","-1523.0","-1523.0","-1525.0","-1525.0","-1527.0","-1527.0","-1529.0","-1529.0","-1531.0","-1531.0","-1533.0","-1533.0","-1535.0","-1535.0","-1537.0","-1537.0","-1539.0","-1539.0","-1541.0","-1541.0","-1543.0","-1543.0","-1545.0","-1545.0","-1547.0","-1547.0","-1549.0","-1549.0","-1551.0","-1551.0","-1553.0","-1553.0","-1555.0","-1555.0","-1557.0","-1557.0","-1559.0","-1559.0","-1561.0","-1561.0","-1563.0","-1563.0","-1565.0","-1565.0","-1567.0","-1567.0","-1569.0","-1569.0","-1571.0","-1571.0","-1573.0","-1573.0","-1575.0","-1575.0","-1577.0","-1577.0","-1579.0","-1579.0","-1581.0","-1581.0","-1583.0","-1583.0","-1585.0","-1585.0","-1587.0","-1587.0","-1589.0","-1589.0","-1591.0","-1591.0","-1593.0","-1593.0","-1595.0","-1595.0","-1597.0","-1597.0","-1599.0","-1599.0","-1601.0","-1601.0","-1603.0","-1603.0","-1605.0","-1605.0","-1607.0","-1607.0","-1609.0","-1609.0","-1611.0","-1611.0","-1613.0","-1613.0","-1615.0","-1615.0","-1617.0","-1617.0","-1619.0","-1619.0","-1621.0","-1621.0","-1623.0","-1623.0","-1625.0","-1625.0","-1627.0","-1627.0","-1629.0","-1629.0","-1631.0","-1631.0","-1633.0","-1633.0","-1635.0","-1635.0","-1637.0","-1637.0","-1639.0","-1639.0","-1641.0","-1641.0","-1643.0","-1643.0","-1645.0","-1645.0","-1647.0","-1647.0","-1649.0","-1649.0","-1651.0","-1651.0","-1653.0","-1653.0","-1655.0","-1655.0","-1657.0","-1657.0","-1659.0","-1659.0","-1661.0","-1661.0","-1663.0","-1663.0","-1665.0","-1665.0","-1667.0","-1667.0","-1669.0","-1669.0","-1671.0","-1671.0","-1673.0","-1673.0","-1675.0","-1675.0","-1677.0","-1677.0","-1679.0","-1679.0","-1681.0","-1681.0","-1683.0","-1683.0","-1685.0","-1685.0","-1687.0","-1687.0","-1689.0","-1689.0","-1691.0","-1691.0","-1693.0","-1693.0","-1695.0","-1695.0","-1697.0","-1697.0","-1699.0","-1699.0","-1701.0","-1701.0","-1703.0","-1703.0","-1705.0","-1705.0","-1707.0","-1707.0","-1709.0","-1709.0","-1711.0","-1711.0","-1713.0","-1713.0","-1715.0","-1715.0","-1717.0","-1717.0","-1719.0","-1719.0","-1721.0","-1721.0","-1723.0","-1723.0","-1725.0","-1725.0","-1727.0","-1727.0","-1729.0","-1729.0","-1731.0","-1731.0","-1733.0","-1733.0","-1735.0","-1735.0","-1737.0","-1737.0","-1739.0","-1739.0","-1741.0","-1741.0","-1743.0","-1743.0","-1745.0","-1745.0","-1747.0","-1747.0","-1749.0","-1749.0","-1751.0","-1751.0","-1753.0","-1753.0","-1755.0","-1755.0","-1757.0","-1757.0","-1759.0","-1759.0","-1761.0","-1761.0","-1763.0","-1763.0","-1765.0","-1765.0","-1767.0","-1767.0","-1769.0","-1769.0","-1771.0","-1771.0","-1773.0","-1773.0","-1775.0","-1775.0","-1777.0","-1777.0","-1779.0","-1779.0","-1781.0","-1781.0","-1783.0","-1783.0","-1785.0","-1785.0","-1787.0","-1787.0","-1789.0","-1789.0","-1791.0","-1791.0","-1793.0","-1793.0","-1795.0","-1795.0","-1797.0","-1797.0","-1799.0","-1799.0","-1801.0","-1801.0","-1803.0","-1803.0","-1805.0","-1805.0","-1807.0","-1807.0","-1809.0","-1809.0","-1811.0","-1811.0","-1813.0","-1813.0","-1815.0","-1815.0","-1817.0","-1817.0","-1819.0","-1819.0","-1821.0","-1821.0","-1823.0","-1823.0","-1825.0","-1825.0","-1827.0","-1827.0","-1829.0","-1829.0","-1831.0","-1831.0","-1833.0","-1833.0","-1835.0","-1835.0","-1837.0","-1837.0","-1839.0","-1839.0","-1841.0","-1841.0","-1843.0","-1843.0","-1845.0","-1845.0","-1847.0","-1847.0","-1849.0","-1849.0","-1851.0","-1851.0","-1853.0","-1853.0","-1855.0","-1855.0","-1857.0","-1857.0","-1859.0","-1859.0","-1861.0","-1861.0","-1863.0","-1863.0","-1865.0","-1865.0","-1867.0","-1867.0","-1869.0","-1869.0","-1871.0","-1871.0","-1873.0","-1873.0","-1875.0","-1875.0","-1877.0","-1877.0","-1879.0","-1879.0","-1881.0","-1881.0","-1883.0","-1883.0","-1885.0","-1885.0","-1887.0","-1887.0","-1889.0","-1889.0","-1891.0","-1891.0","-1893.0","-1893.0","-1895.0","-1895.0","-1897.0","-1897.0","-1899.0","-1899.0","-1901.0","-1901.0","-1903.0","-1903.0","-1905.0","-1905.0","-1907.0","-1907.0","-1909.0","-1909.0","-1911.0","-1911.0","-1913.0","-1913.0","-1915.0","-1915.0","-1917.0","-1917.0","-1919.0","-1919.0","-1921.0","-1921.0","-1923.0","-1923.0","-1925.0","-1925.0","-1927.0","-1927.0","-1929.0","-1929.0","-1931.0","-1931.0","-1933.0","-1933.0","-1935.0","-1935.0","-1937.0","-1937.0","-1939.0","-1939.0","-1941.0","-1941.0","-1943.0","-1943.0","-1945.0","-1945.0","-1947.0","-1947.0","-1949.0","-1949.0","-1951.0","-1951.0","-1953.0","-1953.0","-1955.0","-1955.0","-1957.0","-1957.0","-1959.0","-1959.0","-1961.0","-1961.0","-1963.0","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 313, in count_change_helper","    return count_change_helper(amount, k/2) + count_change_helper(amount - k, k)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 313, in count_change_helper","    return count_change_helper(amount, k/2) + count_change_helper(amount - k, k)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 313, in count_change_helper","    return count_change_helper(amount, k/2) + count_change_helper(amount - k, k)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 313, in count_change_helper","    return count_change_helper(amount, k/2) + count_change_helper(amount - k, k)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 313, in count_change_helper","    return count_change_helper(amount, k/2) + count_change_helper(amount - k, k)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 307, in count_change_helper","    print(amount)","  File \"ok\\client\\utils\\output.py\", line 57, in write","    self._current_stream.write(msg)","RecursionError: maximum recursion depth exceeded","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":65,"studentId":0,"date":null,"diff":"\r\nInputObject                                                             SideIndicator\r\n-----------                                                             -------------\r\n    coin=1                                                              =>           \r\n    while (coin<=amount):                                               =>           \r\n        coin=coin*2                                                     =>           \r\n        elif (coin==0):                                                 =>           \r\n            return 0                                                    =>           \r\n            return helper(coin//2, amount) + helper (coin,amount-coin)  =>           \r\n    return helper(coin, amount)                                         =>           \r\n                                                                        =>           \r\n            return helper(amount,coin*2)/ helper (amount-(coin*2),coin) <=           \r\n    return helper(1, amount)                                            <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    # def calculatecoins(amount):\n    #     x=1\n    #     y=0\n    #     while (amount>=x):\n    #         y+=1\n    #         x=x*2\n    #     return y\n    def helper(coin, amount):\n        if (amount<0):\n            return 0\n        elif (amount==0):\n            return 1\n        else:\n            return helper(amount,coin*2)/ helper (amount-(coin*2),coin)\n    return helper(1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    # def calculatecoins(amount):\n    #     x=1\n    #     y=0\n    #     while (amount>=x):\n    #         y+=1\n    #         x=x*2\n    #     return y\n    coin=1\n    while (coin<=amount):\n        coin=coin*2\n\n    def helper(coin, amount):\n        if (amount<0):\n            return 0\n        elif (amount==0):\n            return 1\n        elif (coin==0):\n            return 0\n        else:\n            return helper(coin//2, amount) + helper (coin,amount-coin)\n    return helper(coin, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def helper(coin, amount):\r\n        if (amount<0):\r\n            return 0\r\n        elif (amount==0):\r\n            return 1\r\n        else:\r\n            return helper(amount, coin*2)/helper(amount-(coin*2), coin)\r\n    return helper(1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 336, in helper","    return helper(amount,coin*2)/ helper (amount-(coin*2),coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 336, in helper","    return helper(amount,coin*2)/ helper (amount-(coin*2),coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 336, in helper","    return helper(amount,coin*2)/ helper (amount-(coin*2),coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 336, in helper","    return helper(amount,coin*2)/ helper (amount-(coin*2),coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 336, in helper","    return helper(amount,coin*2)/ helper (amount-(coin*2),coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 336, in helper","    return helper(amount,coin*2)/ helper (amount-(coin*2),coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 331, in helper","    if (amount<0):","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":66,"studentId":0,"date":null,"diff":"\r\nInputObject                          SideIndicator\r\n-----------                          -------------\r\n            return findcoin(coin*2)  =>           \r\n            return findcoin(coin**2) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def findcoin(coin):\n        if coin>amount:\n            return coin//2\n        else:\n            return findcoin(coin**2)\n    coin = findcoin(1)\n\n    def count_partitions(n,m):\n        if n == 0:\n            return 1\n        elif m==0:\n            return 0\n        elif n<0:\n            return 0\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, m//2)\n\n    return count_partitions(amount, coin)\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def findcoin(coin):\n        if coin>amount:\n            return coin//2\n        else:\n            return findcoin(coin*2)\n    coin = findcoin(1)\n\n    def count_partitions(n,m):\n        if n == 0:\n            return 1\n        elif m==0:\n            return 0\n        elif n<0:\n            return 0\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, m//2)\n\n    return count_partitions(amount, coin)\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 352, in findcoin","    return findcoin(coin**2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 352, in findcoin","    return findcoin(coin**2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 352, in findcoin","    return findcoin(coin**2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 352, in findcoin","    return findcoin(coin**2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 352, in findcoin","    return findcoin(coin**2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 352, in findcoin","    return findcoin(coin**2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 349, in findcoin","    if coin>amount:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":67,"studentId":0,"date":null,"diff":"\r\nInputObject                                            SideIndicator\r\n-----------                                            -------------\r\n    if  (amount & (amount-1) == 0) and (amount != 0):  =>           \r\n        while not (n & (n-1) == 0) and (n != 0):       =>           \r\n    if  amount!= 0 and ((amount & (amount - 1)) == 0): <=           \r\n        while not n!= 0 and ((n & (n - 1)) == 0):      <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    import math\n    if  amount!= 0 and ((amount & (amount - 1)) == 0):\n        n=amount\n    else:\n        n=amount\n        while not n!= 0 and ((n & (n - 1)) == 0):\n            n-=1\n    def partitions(amount,n):\n        if amount==0 or amount==1:\n            return 1\n        if amount<0:\n            return 0\n        if n==0 or n==1:\n            return 1\n        else:\n            return partitions(amount-n,n)+ partitions(amount,n-(n//2))\n    return partitions(amount,n)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    import math\n    if  (amount & (amount-1) == 0) and (amount != 0):\n        n=amount\n    else:\n        n=amount\n        while not (n & (n-1) == 0) and (n != 0):\n            n-=1\n    def partitions(amount,n):\n        if amount==0 or amount==1:\n            return 1\n        if amount<0:\n            return 0\n        if n==0 or n==1:\n            return 1\n        else:\n            return partitions(amount-n,n)+ partitions(amount,n-(n//2))\n    return partitions(amount,n)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","7","","# Error: expected","#     6","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":68,"studentId":0,"date":null,"diff":"\r\nInputObject                                         SideIndicator\r\n-----------                                         -------------\r\n        #if amount >= 0:                            =>           \r\n        #    print(amount, coin_val, max_num_coins) =>           \r\n        if amount >= 0:                             <=           \r\n            print(amount, coin_val, max_num_coins)  <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"\"\"nahhh\n\n    def count_helper(max_power):\n        if max_power == 0:\n            return 1\n        else:\n            return amount // (2 ** max_power) + count_helper(max_power - 1)\n    return count_helper(amount // 2 - 1)\n    \"\"\"\n\n    \"\"\"nope\n    def count_helper(curr_power, amount):\n        \n        if 2 ** curr_power > amount:\n            return 0\n        if amount == 0:\n            return 1\n        # elif amount - (2**curr_power) == 0:\n        #     return 0\n        # elif amount % (2**curr_power) == 0:\n        #     return 1\n        #elif amount // (2**curr_power) == 0:\n        #    return 1\n        else:\n            #return amount // curr_power\n            ##return amount // (2 ** curr_power) + count_helper(curr_power - 1, amount) + count_helper(curr_power, amount - 2 ** curr_power)\n            #return amount % (2**curr_power) + count_helper(curr_power + 1, amount) + count_helper(curr_power, amount - 2 ** curr_power)\n            return count_helper(2**curr_power, amount - (2**curr_power)) + count_helper(2**(curr_power + 1), amount)\n\n    return count_helper(0, amount)\n    \"\"\"\n\n    \"\"\"##BEST attempt so far\n    def count_helper(coin_val, amount):\n        #if coin_val == 1:\n        #    return 1 + count_helper(2*coin_val, amount)\n        if coin_val > amount:\n            return 0\n        elif amount <= 0:\n            return 0\n        elif coin_val == 1:\n            return 1\n        #elif coin_val == amount:\n        #    return 1\n        else:\n            #return amount % coin_val + count_helper(2*coin_val, amount) + count_helper(2*coin_val, amount - coin_val) + count_helper(coin_val, amount - coin_val)\n            return 1 + count_helper(2*coin_val, amount) + count_helper(2*coin_val, amount - coin_val) #+ count_helper(coin_val, amount - coin_val)\n    return count_helper(1, amount)\n    \n    \"\"\"\n\n    \"\"\"not really either\n    def count_helper(coin_val, amount):\n        if coin_val > amount:\n            return 0\n        elif amount <= 0:\n            return 0\n        else:\n            return amount % coin_val + count_helper(coin_val // 2, amount) + count_helper(coin_val // 2, amount - coin_val)\n\n    return count_helper(amount // 2 + 1, amount)\n\n    \"\"\"\n\n    #amount_passed_in = amount\n    #max_coin_val = 1\n    #while amount // 2 != 0:\n    #    amount_passed_in = amount_passed_in // 2\n    #    max_coin_val = max_coin_val * 2\n    \n    ##def max_num_coins(amount, coin_val):\n    ##    return amount // coin_val\n\n    def count_helper(amount, coin_val):\n        max_num_coins = amount // coin_val\n        if amount >= 0:\n            print(amount, coin_val, max_num_coins)\n        #if coin_val == amount:\n        #    return 1\n        if coin_val == 1:\n            return 1\n        elif coin_val <= 0:\n            return 0 \n        elif amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n\n        else:\n            #return count_helper(coin_val, amount - coin_val) + count_helper(coin_val // 2, amount) + count_helper(coin_val // 2, amount - coin_val)\n            \n            w_max_num_coins = count_helper(amount - coin_val, coin_val)\n            wo_max_num_coins = count_helper(amount, coin_val // 2)\n\n            return w_max_num_coins + wo_max_num_coins\n            \"\"\"w_max_num_coins = 0\n            wo_max_num_coins = 0\n            for i in range(max_num_coins + 1):\n                wo_max_num_coins\n\n            sum([count_helper(amount, coin_val) for num_coin in range(max_num_coins + 1)]) \n            return w_max_num_coins + wo_max_num_coins\"\"\"\n\n        \"\"\"\n        if coin_val > amount:\n            return 0\n        elif coin_val == 1:\n            return 1\n        elif coin_val*2 <= amount:\n            return count_helper(coin_val // 2, amount) + count_helper(coin_val // 2, amount - coin_val) + count_helper(coin_val, amount - coin_val)\n        else:\n            return count_helper(coin_val // 2, amount) + count_helper(coin_val // 2, amount - coin_val)\n        \"\"\"\n\n    max_coin_val = 1\n    while max_coin_val * 2 < amount:\n        max_coin_val = max_coin_val * 2\n\n    #max_num_coins = amount // max_coin_val\n    return count_helper(amount, max_coin_val)\n\n    #def max_num_coins(coin_val, amount):\n    #    return amount // coin_val\n\n    #fix max_val_coin with helper function\n    #fix base cases \n    #return different partitions - w and w/o max_val of coin, don't forget //\n    \n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"\"\"nahhh\n\n    def count_helper(max_power):\n        if max_power == 0:\n            return 1\n        else:\n            return amount // (2 ** max_power) + count_helper(max_power - 1)\n    return count_helper(amount // 2 - 1)\n    \"\"\"\n\n    \"\"\"nope\n    def count_helper(curr_power, amount):\n        \n        if 2 ** curr_power > amount:\n            return 0\n        if amount == 0:\n            return 1\n        # elif amount - (2**curr_power) == 0:\n        #     return 0\n        # elif amount % (2**curr_power) == 0:\n        #     return 1\n        #elif amount // (2**curr_power) == 0:\n        #    return 1\n        else:\n            #return amount // curr_power\n            ##return amount // (2 ** curr_power) + count_helper(curr_power - 1, amount) + count_helper(curr_power, amount - 2 ** curr_power)\n            #return amount % (2**curr_power) + count_helper(curr_power + 1, amount) + count_helper(curr_power, amount - 2 ** curr_power)\n            return count_helper(2**curr_power, amount - (2**curr_power)) + count_helper(2**(curr_power + 1), amount)\n\n    return count_helper(0, amount)\n    \"\"\"\n\n    \"\"\"##BEST attempt so far\n    def count_helper(coin_val, amount):\n        #if coin_val == 1:\n        #    return 1 + count_helper(2*coin_val, amount)\n        if coin_val > amount:\n            return 0\n        elif amount <= 0:\n            return 0\n        elif coin_val == 1:\n            return 1\n        #elif coin_val == amount:\n        #    return 1\n        else:\n            #return amount % coin_val + count_helper(2*coin_val, amount) + count_helper(2*coin_val, amount - coin_val) + count_helper(coin_val, amount - coin_val)\n            return 1 + count_helper(2*coin_val, amount) + count_helper(2*coin_val, amount - coin_val) #+ count_helper(coin_val, amount - coin_val)\n    return count_helper(1, amount)\n    \n    \"\"\"\n\n    \"\"\"not really either\n    def count_helper(coin_val, amount):\n        if coin_val > amount:\n            return 0\n        elif amount <= 0:\n            return 0\n        else:\n            return amount % coin_val + count_helper(coin_val // 2, amount) + count_helper(coin_val // 2, amount - coin_val)\n\n    return count_helper(amount // 2 + 1, amount)\n\n    \"\"\"\n\n    #amount_passed_in = amount\n    #max_coin_val = 1\n    #while amount // 2 != 0:\n    #    amount_passed_in = amount_passed_in // 2\n    #    max_coin_val = max_coin_val * 2\n    \n    ##def max_num_coins(amount, coin_val):\n    ##    return amount // coin_val\n\n    def count_helper(amount, coin_val):\n        max_num_coins = amount // coin_val\n        #if amount >= 0:\n        #    print(amount, coin_val, max_num_coins)\n        #if coin_val == amount:\n        #    return 1\n        if coin_val == 1:\n            return 1\n        elif coin_val <= 0:\n            return 0 \n        elif amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n\n        else:\n            #return count_helper(coin_val, amount - coin_val) + count_helper(coin_val // 2, amount) + count_helper(coin_val // 2, amount - coin_val)\n            \n            w_max_num_coins = count_helper(amount - coin_val, coin_val)\n            wo_max_num_coins = count_helper(amount, coin_val // 2)\n\n            return w_max_num_coins + wo_max_num_coins\n            \"\"\"w_max_num_coins = 0\n            wo_max_num_coins = 0\n            for i in range(max_num_coins + 1):\n                wo_max_num_coins\n\n            sum([count_helper(amount, coin_val) for num_coin in range(max_num_coins + 1)]) \n            return w_max_num_coins + wo_max_num_coins\"\"\"\n\n        \"\"\"\n        if coin_val > amount:\n            return 0\n        elif coin_val == 1:\n            return 1\n        elif coin_val*2 <= amount:\n            return count_helper(coin_val // 2, amount) + count_helper(coin_val // 2, amount - coin_val) + count_helper(coin_val, amount - coin_val)\n        else:\n            return count_helper(coin_val // 2, amount) + count_helper(coin_val // 2, amount - coin_val)\n        \"\"\"\n\n    max_coin_val = 1\n    while max_coin_val * 2 < amount:\n        max_coin_val = max_coin_val * 2\n\n    #max_num_coins = amount // max_coin_val\n    return count_helper(amount, max_coin_val)\n\n    #def max_num_coins(coin_val, amount):\n    #    return amount // coin_val\n\n    #fix max_val_coin with helper function\n    #fix base cases \n    #return different partitions - w and w/o max_val of coin, don't forget //\n    \n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","7 4 1","3 4 0","3 2 1","1 2 0","1 1 1","3 1 3","7 2 3","5 2 2","3 2 1","1 2 0","1 1 1","3 1 3","5 1 5","7 1 7","6","","# Error: expected","#     6","# but got","#     7 4 1","#     3 4 0","#     3 2 1","#     1 2 0","#     1 1 1","#     3 1 3","#     7 2 3","#     5 2 2","#     3 2 1","#     1 2 0","#     1 1 1","#     3 1 3","#     5 1 5","#     7 1 7","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":69,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                            SideIndicator\r\n-----------                                                                            -------------\r\n        if amount < 0:                                                                 =>           \r\n        if amount == 0:                                                                =>           \r\n            return 1                                                                   =>           \r\n            return 0                                                                   =>           \r\n        return helper(amount - 2**expon_num, expon_num) + helper(amount, expon_num+1)  =>           \r\n    return helper(amount, 0) #+ helper(amount-1,0)                                     =>           \r\n        expon_num += 1                                                                 =>           \r\n        return\"\"\"                                                                      =>           \r\n                                                                                       =>           \r\n                                                                                       =>           \r\n    if amount < 0:                                                                     <=           \r\n        amount -= 2**expon_num                                                         <=           \r\n        return helper(amount, expon_num) + helper(amount, expon_num+1)                 <=           \r\n    return helper(amount, 0) #+ helper(amount-1,                                       <=           \r\n        return 0                                                                       <=           \r\n    if amount == 0:                                                                    <=           \r\n        return 1                                                                       <=           \r\n        expon_num += 1\"\"\"                                                              <=           \r\n        return                                                                         <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    if amount < 0:\n        return 0\n    if amount == 0:\n        return 1\n    def helper(amount, expon_num):\n        if 2**expon_num > amount:\n            return 0\n        amount -= 2**expon_num\n        return helper(amount, expon_num) + helper(amount, expon_num+1) \n    return helper(amount, 0) #+ helper(amount-1,\n\n    \"\"\"if amount < 0 or coin_list == []:\n        return 0\n    if amount == 0:\n        return 1\n    coin_list = []\n    expon_num = 0\n    while 2**expon_num < amount:\n        coin_list.append(2**expon_num)\n        expon_num += 1\"\"\"\n    def all_but_first(amount, c_list):\n        return\n    def subtract(amount, c_list):\n        return\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    def helper(amount, expon_num):\n        if amount < 0:\n            return 0\n        if amount == 0:\n            return 1\n        if 2**expon_num > amount:\n            return 0\n        return helper(amount - 2**expon_num, expon_num) + helper(amount, expon_num+1) \n    \n    return helper(amount, 0) #+ helper(amount-1,0)\n\n    \"\"\"if amount < 0 or coin_list == []:\n        return 0\n    if amount == 0:\n        return 1\n    coin_list = []\n    expon_num = 0\n    while 2**expon_num < amount:\n        coin_list.append(2**expon_num)\n        expon_num += 1\n    def all_but_first(amount, c_list):\n        return\n    def subtract(amount, c_list):\n        return\"\"\"\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    if amount<0:\r\n        return 0\r\n    if amount==0:\r\n        return 1\r\n    def helper(amount, expon_num):\r\n        if 2**expon_num>amount:\r\n            return 0\r\n        amount -= 2**expon_num\r\n        return helper(amount, expon_num)+helper(amount, expon_num+1)\r\n    return helper(amount, 0)\r\n    def all_but_first(amount, c_list):\r\n        return \r\n    def subtract(amount, c_list):\r\n        return \r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":70,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        if n<0:         =>           \r\n            return 0    =>           \r\n        elif powers==0: =>           \r\n        # if n<0:       <=           \r\n        #     return 0  <=           \r\n        if powers==0:   <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \n    def checkit(n,powers):\n        # if n<0:\n        #     return 0\n        if powers==0:\n            return 1\n        else: \n            var1= checkit(n-2**powers,powers)\n            var2= checkit(n,powers - 1)\n            return var1+var2\n    def theloop(x):\n        y=0\n        while 2**y<=x:\n            y+=1\n        return y-1\n    powers=theloop(amount)\n    return checkit(amount, powers)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\nfrom operator import sub","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \n    def checkit(n,powers):\n        if n<0:\n            return 0\n        elif powers==0:\n            return 1\n        else: \n            var1= checkit(n-2**powers,powers)\n            var2= checkit(n,powers - 1)\n            return var1+var2\n    def theloop(x):\n        y=0\n        while 2**y<=x:\n            y+=1\n        return y-1\n    powers=theloop(amount)\n    return checkit(amount, powers)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\nfrom operator import sub","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def checkit(n, powers):\r\n        if powers==0:\r\n            return 1\r\n        else:\r\n            var1 = checkit(n-2**powers, powers)\r\n            var2 = checkit(n, powers-1)\r\n            return var1+k\r\n    def theloop(x):\r\n        y = 0\r\n        while 2**y<=x:\r\n            y += 1\r\n        return y-1\r\n    powers = theloop(amount)\r\n    return checkit(amount, powers)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 317, in checkit","    var1= checkit(n-2**powers,powers)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 317, in checkit","    var1= checkit(n-2**powers,powers)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 317, in checkit","    var1= checkit(n-2**powers,powers)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 317, in checkit","    var1= checkit(n-2**powers,powers)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 317, in checkit","    var1= checkit(n-2**powers,powers)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 317, in checkit","    var1= checkit(n-2**powers,powers)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 314, in checkit","    if powers==0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":71,"studentId":0,"date":null,"diff":"\r\nInputObject                                                             SideIndicator\r\n-----------                                                             -------------\r\n            return partition(n-biggest,biggest)+partition(n,biggest//2) =>           \r\n            return helper(n-biggest,biggest)+helper(n,biggest//2)       <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def partition(n,biggest):\n        if n==0:\n            return 1\n        elif n<0:\n            return 0\n        elif biggest==0:\n            return 0\n        else:\n            return helper(n-biggest,biggest)+helper(n,biggest//2)\n    i=1\n    while i<amount:\n        i=i*2\n    biggest=i\n\n    return partition(amount, biggest)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def partition(n,biggest):\n        if n==0:\n            return 1\n        elif n<0:\n            return 0\n        elif biggest==0:\n            return 0\n        else:\n            return partition(n-biggest,biggest)+partition(n,biggest//2)\n    i=1\n    while i<amount:\n        i=i*2\n    biggest=i\n\n    return partition(amount, biggest)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 313, in count_change","    return partition(amount, biggest)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 307, in partition","    return helper(n-biggest,biggest)+helper(n,biggest//2)","NameError: name 'helper' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":72,"studentId":0,"date":null,"diff":"\r\nInputObject                                                           SideIndicator\r\n-----------                                                           -------------\r\n    def helper(coin, amount):                                         =>           \r\n        if amount == 0:                                               =>           \r\n        elif amount < 1 or amount < coin:                             =>           \r\n        return helper(coin, amount - coin) + helper(2 * coin, amount) =>           \r\n    return helper(1, amount)                                          =>           \r\n    def helper(coin, value):                                          <=           \r\n        if value == 0:                                                <=           \r\n        elif value < 1 or value < coin:                               <=           \r\n        return helper(coin, value - coin) + helper(2 * coin, value)   <=           \r\n    return helper(1, value)                                           <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    def helper(coin, value):\n        if value == 0:\n            return 1\n        elif value < 1 or value < coin:\n            return 0\n        return helper(coin, value - coin) + helper(2 * coin, value)\n    return helper(1, value)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    def helper(coin, amount):\n        if amount == 0:\n            return 1\n        elif amount < 1 or amount < coin:\n            return 0\n        return helper(coin, amount - coin) + helper(2 * coin, amount)\n    return helper(1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def helper(coin, value):\r\n        if amount==0:\r\n            return 1\r\n        elif value<1 or value<coin:\r\n            return 0\r\n        return helper(coin, value-coin)+helper(2*coin, value)\r\n    return helper(1, value)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 312, in count_change","    return helper(1, value)","NameError: name 'value' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":73,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                    SideIndicator\r\n-----------                                                                    -------------\r\n    return accumulate(combiner if pred(n) else lambda x,y:x, base, n, term)    =>           \r\n    if n<=3:                                                                   =>           \r\n        return n                                                               =>           \r\n    x,y,z = 1,2,3                                                              =>           \r\n    while n>3:                                                                 =>           \r\n        x,y,z = y, z, z + 2*y + 3*x                                            =>           \r\n        n-=1                                                                   =>           \r\n    return z                                                                   =>           \r\n    def max_(amount):                                                          =>           \r\n    return num_partitions(amount, max_(amount))                                =>           \r\n    if n==1:                                                                   =>           \r\n        print_move(start, end)                                                 =>           \r\n        return                                                                 =>           \r\n    move_stack(n-1, start, 6-start-end)                                        =>           \r\n    print_move(start, end)                                                     =>           \r\n    move_stack(n-1, 6-start-end, end)                                          =>           \r\n                                                                               =>           \r\n                                                                               =>           \r\n    return accumulate(combiner if pred(n) else lambda x,y:base, base, n, term) <=           \r\n    def max_coin(amount):                                                      <=           \r\n    num_partitions(amount, max_coin(amount))                                   <=           \r\n    \"*** YOUR CODE HERE ***\"                                                   <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def max_coin(amount):\n        w=1\n        while w < amount:\n            w = w*2\n        return int(w/2)\n\n    def num_partitions(n,k):\n        if n<0:\n            return 0\n        elif k==1 or n==0:\n            return 1\n        else:\n            return num_partitions(n,k/2) + num_partitions(n-k, k)\n    num_partitions(amount, max_coin(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def max_(amount):\n        w=1\n        while w < amount:\n            w = w*2\n        return int(w/2)\n\n    def num_partitions(n,k):\n        if n<0:\n            return 0\n        elif k==1 or n==0:\n            return 1\n        else:\n            return num_partitions(n,k/2) + num_partitions(n-k, k)\n    return num_partitions(amount, max_(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","","# Error: expected","#     6","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":74,"studentId":0,"date":null,"diff":"\r\nInputObject                                              SideIndicator\r\n-----------                                              -------------\r\n    >>> count_change(20)                                 =>           \r\n    60                                                   =>           \r\n        else:                                            =>           \r\n        if listc != 2:                                   <=           \r\n            gtotals.append(gtotals[-1] + gtotals[listp]) <=           \r\n    print(gtotals)                                       <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    counter = amount // 2\n    gtotals = [2]\n    listp, listc = 0, 0\n    while counter > len(gtotals):\n        if listc == 2:\n            listp += 1\n            gtotals.append(gtotals[-1] + gtotals[listp])\n            listc = 0\n        if listc != 2:\n            gtotals.append(gtotals[-1] + gtotals[listp])\n            listc += 1\n    print(gtotals)\n    return gtotals[counter - 1]    \n        \ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(20)\n    60\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    counter = amount // 2\n    gtotals = [2]\n    listp, listc = 0, 0\n    while counter > len(gtotals):\n        if listc == 2:\n            listp += 1\n            listc = 0\n        else:\n            gtotals.append(gtotals[-1] + gtotals[listp])\n            listc += 1\n    return gtotals[counter - 1]    \n        \ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","[2, 4, 6]","6","","# Error: expected","#     6","# but got","#     [2, 4, 6]","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":75,"studentId":0,"date":null,"diff":"\r\nInputObject                               SideIndicator\r\n-----------                               -------------\r\n        if amount<0:                      =>           \r\n        elif amount==0:                   =>           \r\n            y=count_help(amount, small*2) =>           \r\n        if amount==0:                     <=           \r\n        elif amount<0:                    <=           \r\n            y=count_help(amount, small+2) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_help(amount,small):\n        if amount==0:\n            return 1\n        elif amount<0:\n            return 0\n        elif small>amount:\n            return 0\n        elif small==0:\n            return 0\n        else:\n            x=count_help(amount-small, small)\n            y=count_help(amount, small+2)\n            return x+y\n    return count_help(amount,1)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_help(amount,small):\n        if amount<0:\n            return 0\n        elif amount==0:\n            return 1\n        elif small>amount:\n            return 0\n        elif small==0:\n            return 0\n        else:\n            x=count_help(amount-small, small)\n            y=count_help(amount, small*2)\n            return x+y\n    return count_help(amount,1)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_help(amount, small):\r\n        if amount==0:\r\n            return 1\r\n        elif amount<0:\r\n            return 0\r\n        elif small>amount:\r\n            return 0\r\n        elif small==0:\r\n            return 0\r\n        else:\r\n            x = count_help(amount-small, small)\r\n            y = count_help(amount, small+2)\r\n            return x+k\r\n    return count_help(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","5","","# Error: expected","#     6","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":76,"studentId":0,"date":null,"diff":"\r\nInputObject                     SideIndicator\r\n-----------                     -------------\r\n    return helper(amount, base) =>           \r\n    return helper(base, amount) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    base=1\n    while (base*2)<=amount:\n        base*=2\n        \n    def helper(a,base):\n        if base==0:\n            return 0\n        if a==0:\n            return 1\n        if a<0:\n            return 0\n        return helper(a-base, base)+ helper(a, base//2)\n    return helper(base, amount)\n        \n\n    \n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    base=1\n    while (base*2)<=amount:\n        base*=2\n        \n    def helper(a,base):\n        if base==0:\n            return 0\n        if a==0:\n            return 1\n        if a<0:\n            return 0\n        return helper(a-base, base)+ helper(a, base//2)\n    return helper(amount, base)\n        \n\n    \n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","2","","# Error: expected","#     6","# but got","#     2","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":77,"studentId":0,"date":null,"diff":"\r\nInputObject            SideIndicator\r\n-----------            -------------\r\n        elif amount<0: =>           \r\n            return 0   =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def largest_power(amount):\n        a=0\n        while 2**(a+1)<=amount:\n            a+=1\n        return a\n    def count(power, amount):\n        if amount==0:\n            return 1\n        elif power<0:\n            return 0\n        else:\n            return count(power, amount-2**power)+count(power-1, amount)\n    return count(largest_power(amount), amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def largest_power(amount):\n        a=0\n        while 2**(a+1)<=amount:\n            a+=1\n        return a\n    def count(power, amount):\n        if amount==0:\n            return 1\n        elif amount<0:\n            return 0\n        elif power<0:\n            return 0\n        else:\n            return count(power, amount-2**power)+count(power-1, amount)\n    return count(largest_power(amount), amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def largest_power(amount):\r\n        amount = 0\r\n        while 2**(a+1)<=amount:\r\n            a += 1\r\n        return a\r\n    def count(power, amount):\r\n        if amount==0:\r\n            return 1\r\n        elif power<0:\r\n            return 0\r\n        else:\r\n            return count(power, amount-2**power)+count(power-1, amount)\r\n    return count(largest_power(amount), amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 319, in count","    return count(power, amount-2**power)+count(power-1, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 319, in count","    return count(power, amount-2**power)+count(power-1, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 319, in count","    return count(power, amount-2**power)+count(power-1, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 319, in count","    return count(power, amount-2**power)+count(power-1, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 319, in count","    return count(power, amount-2**power)+count(power-1, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 319, in count","    return count(power, amount-2**power)+count(power-1, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 314, in count","    if amount==0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":78,"studentId":0,"date":null,"diff":"\r\nInputObject                                                            SideIndicator\r\n-----------                                                            -------------\r\n        elif m >= n:                                                   =>           \r\n            return count_partitions(n-m, m) + count_partitions(n, m*2) =>           \r\n    return count_partitions(amount,1)                                  =>           \r\n        elif m >= amount:                                              <=           \r\n            return count_partitions(n+m, m) + count_partitions(n, m*2) <=           \r\n    return count_partitions(1,1)                                       <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_partitions(n, m):\n        if n == m:\n            return 1\n        elif n > amount:\n            return 0\n        elif m >= amount:\n            return 0\n        else:\n            return count_partitions(n+m, m) + count_partitions(n, m*2)\n    return count_partitions(1,1)\n    \n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_partitions(n, m):\n        if n == m:\n            return 1\n        elif n > amount:\n            return 0\n        elif m >= n:\n            return 0\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, m*2)\n    return count_partitions(amount,1)\n    \n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_partitions(n, m):\r\n        if amount==m:\r\n            return 1\r\n        elif n>amount:\r\n            return 0\r\n        elif m>=amount:\r\n            return 0\r\n        else:\r\n            return count_partitions(n+m, m)+count_partitions(n, m*2)\r\n    return count_partitions(1, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","1","","# Error: expected","#     6","# but got","#     1","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":79,"studentId":0,"date":null,"diff":"\r\nInputObject SideIndicator\r\n----------- -------------\r\n            =>           \r\n            =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def help_count(max_change, amount): \n        if max_change == 1: \n            return 1 \n        if amount < max_change: \n            return help_count(max_change // 2, amount)\n        elif amount == max_change: \n            return 1 + help_count(max_change // 2, amount)\n        else: \n            return help_count(max_change // 2, amount) + help_count(max_change, amount - max_change)\n\n    return help_count(max_coin(amount), amount)\n\n    def max_coin(amount): \n        i = 0 \n        while (2 ** i) <= amount: \n            i += 1\n        return 2 ** (i - 1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def max_coin(amount): \n        i = 0 \n        while (2 ** i) <= amount: \n            i += 1\n        return 2 ** (i - 1)\n\n    def help_count(max_change, amount): \n        if max_change == 1: \n            return 1 \n        if amount < max_change: \n            return help_count(max_change // 2, amount)\n        elif amount == max_change: \n            return 1 + help_count(max_change // 2, amount)\n        else: \n            return help_count(max_change // 2, amount) + help_count(max_change, amount - max_change)\n\n    return help_count(max_coin(amount), amount)\n\n   \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 323, in count_change","    return help_count(max_coin(amount), amount)","UnboundLocalError: local variable 'max_coin' referenced before assignment","","# Error: expected","#     6","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":80,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                   SideIndicator\r\n-----------                                                                                   -------------\r\n        power = 0                                                                             =>           \r\n        max_coin = 0                                                                          =>           \r\n        while max_coin < amount:                                                              =>           \r\n            max_coin = 2**power                                                               =>           \r\n            power += 1                                                                        =>           \r\n        return power                                                                          =>           \r\n    def count_partition(amount, coin):                                                        =>           \r\n        elif amount < 0 or coin == 0:                                                         =>           \r\n            return count_partition(amount - coin, coin) + count_partition(amount, coin//2)    =>           \r\n    return count_partition(amount, 2**max_power())                                            =>           \r\n            coin = 0                                                                          <=           \r\n            power = 0                                                                         <=           \r\n            while coin < amount:                                                              <=           \r\n                power += 1                                                                    <=           \r\n                coin = 2**power                                                               <=           \r\n            return power                                                                      <=           \r\n    def count_partition(amount, power):                                                       <=           \r\n        coin = 2**power                                                                       <=           \r\n        elif coin == 0 or amount < 0:                                                         <=           \r\n            return count_partition(amount - coin, power) + count_partition(amount, power - 1) <=           \r\n    return count_partition(amount, max_power())                                               <=           \r\n                                                                                              <=           \r\n                                                                                              <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def max_power():\n            coin = 0\n            power = 0\n            while coin < amount:\n                power += 1\n                coin = 2**power\n            return power\n    def count_partition(amount, power):\n        coin = 2**power\n        if amount == 0 or amount == 1:\n            return 1\n        elif coin == 0 or amount < 0:\n            return 0\n        else:\n            return count_partition(amount - coin, power) + count_partition(amount, power - 1)\n    return count_partition(amount, max_power())\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def max_power():\n        power = 0\n        max_coin = 0\n        while max_coin < amount:\n            max_coin = 2**power\n            power += 1\n        return power\n    def count_partition(amount, coin):\n        if amount == 0 or amount == 1:\n            return 1\n        elif amount < 0 or coin == 0:\n            return 0\n        else:\n            return count_partition(amount - coin, coin) + count_partition(amount, coin//2)\n    return count_partition(amount, 2**max_power())\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def max_power():\r\n        amount = 0\r\n        power = 0\r\n        while coin<amount:\r\n            power += 1\r\n            coin = 2**power\r\n        return power\r\n    def count_partition(amount, power):\r\n        coin = 2**power\r\n        if amount==0 or amount==1:\r\n            return 1\r\n        elif coin==0 or amount<0:\r\n            return 0\r\n        else:\r\n            return count_partition(amount-coin, power)+count_partition(amount, power-1)\r\n    return count_partition(amount, max_power())\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 337, in count_partition","    return count_partition(amount - coin, power) + count_partition(amount, power - 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 337, in count_partition","    return count_partition(amount - coin, power) + count_partition(amount, power - 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 337, in count_partition","    return count_partition(amount - coin, power) + count_partition(amount, power - 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 337, in count_partition","    return count_partition(amount - coin, power) + count_partition(amount, power - 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 337, in count_partition","    return count_partition(amount - coin, power) + count_partition(amount, power - 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 337, in count_partition","    return count_partition(amount - coin, power) + count_partition(amount, power - 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 332, in count_partition","    if amount == 0 or amount == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":81,"studentId":0,"date":null,"diff":"\r\nInputObject                                                        SideIndicator\r\n-----------                                                        -------------\r\n    def count(n, m):                                               =>           \r\n        if n == 0:                                                 =>           \r\n            return 1                                               =>           \r\n        elif n < 0:                                                =>           \r\n            return 0                                               =>           \r\n        elif m > amount:                                           =>           \r\n            return 0                                               =>           \r\n            return count(n-m, m) + count(n, m*2)                   =>           \r\n    return count(amount, 1)                                        =>           \r\n        else:                                                      =>           \r\n    if n == 0:                                                     <=           \r\n        return 1                                                   <=           \r\n    elif n < 0:                                                    <=           \r\n        return 0                                                   <=           \r\n    elif m > n:                                                    <=           \r\n        return 0                                                   <=           \r\n    else:                                                          <=           \r\n        return count_partitions(n-m, m) + count_partitions(n, m*2) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return 1\n    elif n < 0:\n        return 0\n    elif m > n:\n        return 0\n    else:\n        return count_partitions(n-m, m) + count_partitions(n, m*2)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m > amount:\n            return 0\n        else:\n            return count(n-m, m) + count(n, m*2)\n    return count(amount, 1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    if amount==0:\r\n        return 1\r\n    elif n<0:\r\n        return 0\r\n    elif m>n:\r\n        return 0\r\n    else:\r\n        return count_partitions(n-m, m)+count_partitions(n, m*2)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 305, in count_change","    if n == 0:","NameError: name 'n' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":82,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n        if amount == 0:                      =>           \r\n        elif amount < 0 or coinvalue>amount: =>           \r\n    1 1 1 1 1 1 1                            <=           \r\n    1 1 1 1 1 2                              <=           \r\n    1 1 1 2 2                                <=           \r\n    1 2 2 2                                  <=           \r\n    1 2 4                                    <=           \r\n    1 4 4                                    <=           \r\n    >>> count_change(10)                     <=           \r\n    14                                       <=           \r\n    4 4 2                                    <=           \r\n    4 4 1 1                                  <=           \r\n    4 2 2 1 1                                <=           \r\n    4 2 2 2                                  <=           \r\n    4 2 1 1 1 1                              <=           \r\n    4 1 1 1 1 1 1                            <=           \r\n    2 2 1 1 1 1 1 1                          <=           \r\n    2 1 1 1 1 1 1 1 1                        <=           \r\n    1 1 1 1 1 1 1 1 1 1                      <=           \r\n                                             <=           \r\n        if amount < 0 or coinvalue>amount:   <=           \r\n        elif amount == 0:                    <=           \r\n                                             <=           \r\n                                             <=           \r\n                                             <=           \r\n                                             <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n\n    1 1 1 1 1 1 1\n    1 1 1 1 1 2\n    1 1 1 2 2\n    1 2 2 2\n    1 2 4 \n    1 4 4\n    >>> count_change(10)\n    14\n\n    4 4 2\n    4 4 1 1\n    4 2 2 1 1\n    4 2 2 2\n    4 2 1 1 1 1\n    4 1 1 1 1 1 1\n    2 2 1 1 1 1 1 1\n    2 1 1 1 1 1 1 1 1\n    1 1 1 1 1 1 1 1 1 1\n  \n\n\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def change(amount,coinvalue):\n    \tif amount < 0 or coinvalue>amount:\n    \t\treturn 0\n    \telif amount == 0:\n    \t\treturn 1\n    \treturn change(amount-coinvalue,coinvalue)+change(amount,coinvalue*2)\n    return change(amount,1)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def change(amount,coinvalue):\n    \tif amount == 0:\n    \t\treturn 1\n    \telif amount < 0 or coinvalue>amount:\n    \t\treturn 0\n    \treturn change(amount-coinvalue,coinvalue)+change(amount,coinvalue*2)\n    return change(amount,1)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def change(amount, coinvalue):\r\n        if amount<0 or coinvalue>amount:\r\n            return 0\r\n        elif amount==0:\r\n            return 1\r\n        return change(amount-coinvalue, coinvalue)+change(amount, coinvalue*2)\r\n    return change(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":83,"studentId":0,"date":null,"diff":"\r\nInputObject                                                SideIndicator\r\n-----------                                                -------------\r\n            return count_change_rec(amount, power / 2) \\   =>           \r\n                 + count_change_rec(amount - power, power) =>           \r\n            return count_change_rec(n, power / 2) \\        <=           \r\n                 + count_change_rec(n - power, power)      <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def largest_power_of_two(lim):\n        acc = 1\n        while acc < lim:\n            acc *= 2\n\n        return acc\n\n    if amount < 0:\n        return 0\n    elif amount == 0:\n        return 1\n    elif amount < 3:\n        return amount\n\n    def count_change_rec(amount, power):\n        if amount < 0:\n            return 0\n        elif power == 1 or amount == 0:\n            return 1\n        else:\n            return count_change_rec(n, power / 2) \\\n                 + count_change_rec(n - power, power)\n\n    return count_change_rec(amount, largest_power_of_two(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def largest_power_of_two(lim):\n        acc = 1\n        while acc < lim:\n            acc *= 2\n\n        return acc\n\n    if amount < 0:\n        return 0\n    elif amount == 0:\n        return 1\n    elif amount < 3:\n        return amount\n\n    def count_change_rec(amount, power):\n        if amount < 0:\n            return 0\n        elif power == 1 or amount == 0:\n            return 1\n        else:\n            return count_change_rec(amount, power / 2) \\\n                 + count_change_rec(amount - power, power)\n\n    return count_change_rec(amount, largest_power_of_two(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 317, in count_change","    return count_change_rec(amount, largest_power_of_two(amount))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 314, in count_change_rec","    return count_change_rec(n, power / 2) \\","NameError: name 'n' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":84,"studentId":0,"date":null,"diff":"\r\nInputObject                       SideIndicator\r\n-----------                       -------------\r\n        if amount == 1 or k <= 1: =>           \r\n        elif amount < 0:          =>           \r\n            return 0              =>           \r\n        if amount <= 1 or k <= 1: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def highest_change(amount):\n        n = 1\n        while n < amount//2:\n            n = n*2\n        return n\n    k = highest_change(amount)\n    def possibilites(amount, k):\n        if amount <= 1 or k <= 1:\n            return 1\n        else:\n            return possibilites(amount, k//2) + possibilites(amount-k, k)\n    return possibilites(amount, k) \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def highest_change(amount):\n        n = 1\n        while n < amount//2:\n            n = n*2\n        return n\n    k = highest_change(amount)\n    def possibilites(amount, k):\n        if amount == 1 or k <= 1:\n            return 1\n        elif amount < 0:\n            return 0\n        else:\n            return possibilites(amount, k//2) + possibilites(amount-k, k)\n    return possibilites(amount, k) \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","7","","# Error: expected","#     6","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":85,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        if n < 0:    =>           \r\n        elif n == 0: =>           \r\n            return 1 =>           \r\n        if n <= 0:   <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    largest_power_of_2 = 1\n    while largest_power_of_2 <= amount:\n        largest_power_of_2 = largest_power_of_2 * 2\n    largest_power_of_2 = largest_power_of_2 / 2\n    def count_partitions(n, m):\n        if n <= 0:\n            return 0\n        elif m == 1:\n            return 1\n        else:\n            return count_partitions(n - m, m) + count_partitions(n, m // 2)\n    return count_partitions(amount, largest_power_of_2)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    largest_power_of_2 = 1\n    while largest_power_of_2 <= amount:\n        largest_power_of_2 = largest_power_of_2 * 2\n    largest_power_of_2 = largest_power_of_2 / 2\n    def count_partitions(n, m):\n        if n < 0:\n            return 0\n        elif n == 0:\n            return 1\n        elif m == 1:\n            return 1\n        else:\n            return count_partitions(n - m, m) + count_partitions(n, m // 2)\n    return count_partitions(amount, largest_power_of_2)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","10","","# Error: expected","#     14","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":86,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        elif b > a:  =>           \r\n        elif b == 0: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_p(a,b):\n        \n\n        if a == 0:\n            return 1\n        elif a < 0:\n            return 0\n        elif b == 0:\n            return 0\n        else:\n            return count_p(a-b, b) + count_p(a, 2*b)\n\n    return count_p(amount, 1)\n\n    \"*** YOUR CODE HERE ***\"\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_p(a,b):\n        \n\n        if a == 0:\n            return 1\n        elif a < 0:\n            return 0\n        elif b > a:\n            return 0\n        else:\n            return count_p(a-b, b) + count_p(a, 2*b)\n\n    return count_p(amount, 1)\n\n    \"*** YOUR CODE HERE ***\"\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_p(a, b):\r\n        if a==0:\r\n            return 1\r\n        elif a<0:\r\n            return 0\r\n        elif b==0:\r\n            return 0\r\n        elif m>n:\r\n            return 0\r\n        else:\r\n            return count_p(a-b, b)+count_p(a, 2*b)\r\n    return count_p(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-GreaterThan, Children(LeafConstNode(NameExpressionNode-m), SingleChild(LeafConstNode(NameExpressionNode-n)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(ConstantExpressionNode-0)))))))), 3), Selected(\\x => Match(x, StartsWithTarget(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"BinaryExpressionNode\")))))))))))))))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 339, in count_p","    return count_p(a-b, b) + count_p(a, 2*b)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 339, in count_p","    return count_p(a-b, b) + count_p(a, 2*b)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 339, in count_p","    return count_p(a-b, b) + count_p(a, 2*b)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 339, in count_p","    return count_p(a-b, b) + count_p(a, 2*b)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 339, in count_p","    return count_p(a-b, b) + count_p(a, 2*b)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 339, in count_p","    return count_p(a-b, b) + count_p(a, 2*b)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 332, in count_p","    if a == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":87,"studentId":0,"date":null,"diff":"","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(amount, change):\n        if amount<change:\n            return 0\n        if amount==0:\n            return 1\n        else:\n            return helper(amount-change,change)+helper(amount, change*2)\n    return helper(amount, 1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(amount, change):\n        if amount==0:\n            return 1\n        if amount<change:\n            return 0\n        else:\n            return helper(amount-change,change)+helper(amount, change*2)\n    return helper(amount, 1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def helper(amount, change):\r\n        if amount<change:\r\n            return 0\r\n        if amount==0:\r\n            return 1\r\n        else:\r\n            return helper(amount-change, change)+helper(amount, change*2)\r\n    return helper(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":88,"studentId":0,"date":null,"diff":"\r\nInputObject                       SideIndicator\r\n-----------                       -------------\r\n        elif coin_value > amount: =>           \r\n            return 0              =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(amount, coin_value):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        else:\n            return helper(amount - coin_value, coin_value) + helper(amount, coin_value * 2) \n    return helper(amount, 1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(amount, coin_value):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif coin_value > amount:\n            return 0\n        else:\n            return helper(amount - coin_value, coin_value) + helper(amount, coin_value * 2) \n    return helper(amount, 1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def helper(amount, coin_value):\r\n        if amount<0:\r\n            return 0\r\n        elif amount==0:\r\n            return 1\r\n        else:\r\n            return helper(amount-coin_value, coin_value)+helper(amount, coin_value*2)\r\n    return helper(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 309, in helper","    return helper(amount - coin_value, coin_value) + helper(amount, coin_value * 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 309, in helper","    return helper(amount - coin_value, coin_value) + helper(amount, coin_value * 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 309, in helper","    return helper(amount - coin_value, coin_value) + helper(amount, coin_value * 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 309, in helper","    return helper(amount - coin_value, coin_value) + helper(amount, coin_value * 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 309, in helper","    return helper(amount - coin_value, coin_value) + helper(amount, coin_value * 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 309, in helper","    return helper(amount - coin_value, coin_value) + helper(amount, coin_value * 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 304, in helper","    if amount < 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":89,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                                    SideIndicator\r\n-----------                                                                                                    -------------\r\n        if n == 1:                                                                                             =>           \r\n        elif 2**currentPower == 1:                                                                             =>           \r\n            return 1                                                                                           =>           \r\n            return count_partitions(n-2**currentPower,currentPower)+count_partitions(n,(currentPower-1))       =>           \r\n    return count_partitions(amount,currentPower)                                                               =>           \r\n        if n == 0:                                                                                             <=           \r\n        elif m == 0:                                                                                           <=           \r\n            return 0                                                                                           <=           \r\n            return count_partitions(n-2**currentPower,2**currentPower)+count_partitions(n,2**(currentPower-1)) <=           \r\n    return count_partitions(amount,2**currentPower)                                                            <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def highest2ndPower(n):\n        \"\"\"Return the highest power of 2 less than n\n        \"\"\"\n        currentPower = 0\n        currentTotal = 0\n        while currentTotal < n:\n            currentPower += 1\n            currentTotal = 2**currentPower\n        return currentPower - 1\n\n    currentPower = highest2ndPower(amount)\n\n    def count_partitions(n,currentPower):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0 \n        else:\n            return count_partitions(n-2**currentPower,2**currentPower)+count_partitions(n,2**(currentPower-1))\n\n    return count_partitions(amount,2**currentPower)\n\n\n\n\n\n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def highest2ndPower(n):\n        \"\"\"Return the highest power of 2 less than n\n        \"\"\"\n        currentPower = 0\n        currentTotal = 0\n        while currentTotal < n:\n            currentPower += 1\n            currentTotal = 2**currentPower\n        return currentPower - 1\n\n    currentPower = highest2ndPower(amount)\n\n    def count_partitions(n,currentPower):\n        if n == 1:\n            return 1\n        elif n < 0:\n            return 0\n        elif 2**currentPower == 1:\n            return 1 \n        else:\n            return count_partitions(n-2**currentPower,currentPower)+count_partitions(n,(currentPower-1))\n\n    return count_partitions(amount,currentPower)\n\n\n\n\n\n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def highest2ndPower(n):\r\n        amount = 0\r\n        currentTotal = 0\r\n        while currentTotal<n:\r\n            currentPower += 1\r\n            currentTotal = 2**currentPower\r\n        return currentPower-1\r\n    currentPower = highest2ndPower(amount)\r\n    def count_partitions(n, currentPower):\r\n        if n==0:\r\n            return 1\r\n        elif n<0:\r\n            return 0\r\n        elif m==0:\r\n            return 0\r\n        else:\r\n            return count_partitions(n-2**currentPower, 2**currentPower)+count_partitions(n, 2**(currentPower-1))\r\n    return count_partitions(amount, 2**currentPower)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 344, in count_change","    return count_partitions(amount,2**currentPower)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 339, in count_partitions","    elif m == 0:","NameError: name 'm' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":90,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n            return 1 =>           \r\n            return 0 <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    n =  1\n    while 2**n< amount:\n        n = n +1\n    def something(amount, i):\n        if amount ==1:\n            return 1\n        if amount ==0:\n            return 0\n        if amount <0:\n            return 0\n        if i == 1:\n            return 1\n        return something (amount-i,i)+ something(amount,i/2)\n    return something(amount,2**n)\n    \ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    n =  1\n    while 2**n< amount:\n        n = n +1\n    def something(amount, i):\n        if amount ==1:\n            return 1\n        if amount ==0:\n            return 1\n        if amount <0:\n            return 0\n        if i == 1:\n            return 1\n        return something (amount-i,i)+ something(amount,i/2)\n    return something(amount,2**n)\n    \ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","10","","# Error: expected","#     14","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":91,"studentId":0,"date":null,"diff":"\r\nInputObject                                                             SideIndicator\r\n-----------                                                             -------------\r\n        total = 0                                                       =>           \r\n            if i == amount:                                             =>           \r\n                return total + 1                                        =>           \r\n            else:                                                       =>           \r\n                total, amount = total + helper(2*i, amount), amount - i =>           \r\n    total = 0                                                           <=           \r\n        if i == amount:                                                 <=           \r\n            return total + 1                                            <=           \r\n            total, amount = total + helper(2*i, amount), amount - i     <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    '1=1, 2,3=2, 4,5=4, 6,7 = 6 , 8,9= 8'\n    i = 1\n    total = 0\n\n    def helper(i, amount) :\n        if i == amount:\n            return total + 1\n        while i <= amount:\n            total, amount = total + helper(2*i, amount), amount - i\n        return total\n    return helper(i, amount)\n    # if amount <= 1 :\n    #     return 1\n    # elif amount % 2 == 0 : \n    #     total = (2 * (count_change(amount - 2)))\n    #     return total\n    # else:\n    #     return (count_change(amount - 1))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    '1=1, 2,3=2, 4,5=4, 6,7 = 6 , 8,9= 8'\n    i = 1\n\n    def helper(i, amount) :\n        total = 0\n        while i <= amount:\n            if i == amount:\n                return total + 1\n            else:\n                total, amount = total + helper(2*i, amount), amount - i\n        return total\n    return helper(i, amount)\n    # if amount <= 1 :\n    #     return 1\n    # elif amount % 2 == 0 : \n    #     total = (2 * (count_change(amount - 2)))\n    #     return total\n    # else:\n    #     return (count_change(amount - 1))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    amount = 1\r\n    total = 0\r\n    def helper(i, amount):\r\n        if i==amount:\r\n            return total+1\r\n        while i<=amount:\r\n            total, amount = total+helper(2*i, amount), amount-i\r\n        return total\r\n    return helper(i, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 331, in count_change","    return helper(i, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 329, in helper","    total, amount = total + helper(2*i, amount), amount - i","UnboundLocalError: local variable 'total' referenced before assignment","","# Error: expected","#     6","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":92,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n        elif amount < m: =>           \r\n            return 0     =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n\n    num partitions from lecture (see book for more explanation):\n\n    if n < 0:\n        return 0\n    elif k == 1 or n == 0:\n        return 1\n    else:\n        return num_partitions(n, k-1) + num_partitions(n-k, k)\n\n\n    1st coin = 1\n    coin = 2*coin\n    \"\"\"\n\n\n    def change_count(amount, m):\n        if amount == 0:\n            return 0\n        elif amount == m:\n            return 1\n        # if k == 1:\n        #     return amount/k\n        else:\n            return change_count(amount-m, m) + change_count(amount, 2*m)\n    return change_count(amount, 1)\n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n\n    num partitions from lecture (see book for more explanation):\n\n    if n < 0:\n        return 0\n    elif k == 1 or n == 0:\n        return 1\n    else:\n        return num_partitions(n, k-1) + num_partitions(n-k, k)\n\n\n    1st coin = 1\n    coin = 2*coin\n    \"\"\"\n\n\n    def change_count(amount, m):\n        if amount == 0:\n            return 0\n        elif amount == m:\n            return 1\n        elif amount < m:\n            return 0\n        # if k == 1:\n        #     return amount/k\n        else:\n            return change_count(amount-m, m) + change_count(amount, 2*m)\n    return change_count(amount, 1)\n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def change_count(amount, m):\r\n        if amount==0:\r\n            return 0\r\n        elif amount==m:\r\n            return 1\r\n        else:\r\n            return change_count(amount-m, m)+change_count(amount, 2*m)\r\n    return change_count(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 357, in change_count","    return change_count(amount-m, m) + change_count(amount, 2*m)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 357, in change_count","    return change_count(amount-m, m) + change_count(amount, 2*m)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 357, in change_count","    return change_count(amount-m, m) + change_count(amount, 2*m)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 357, in change_count","    return change_count(amount-m, m) + change_count(amount, 2*m)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 357, in change_count","    return change_count(amount-m, m) + change_count(amount, 2*m)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 357, in change_count","    return change_count(amount-m, m) + change_count(amount, 2*m)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 350, in change_count","    if amount == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":93,"studentId":0,"date":null,"diff":"\r\nInputObject                               SideIndicator\r\n-----------                               -------------\r\n        elif amount < 0 or coin > amount: =>           \r\n        elif amount < 0:                  <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count(coin, amount):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        else:\n            return count(coin, amount - coin) + count(coin * 2, amount)\n    return count(1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count(coin, amount):\n        if amount == 0:\n            return 1\n        elif amount < 0 or coin > amount:\n            return 0\n        else:\n            return count(coin, amount - coin) + count(coin * 2, amount)\n    return count(1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count(coin, amount):\r\n        if amount==0:\r\n            return 1\r\n        elif amount<0:\r\n            return 0\r\n        else:\r\n            return count(coin, amount-coin)+count(coin*2, amount)\r\n    return count(1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 294, in count","    return count(coin, amount - coin) + count(coin * 2, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 294, in count","    return count(coin, amount - coin) + count(coin * 2, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 294, in count","    return count(coin, amount - coin) + count(coin * 2, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 294, in count","    return count(coin, amount - coin) + count(coin * 2, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 294, in count","    return count(coin, amount - coin) + count(coin * 2, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 294, in count","    return count(coin, amount - coin) + count(coin * 2, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 289, in count","    if amount == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":94,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        if(2**k>n):  =>           \r\n            return 0 =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def help(k,n):\n        if(n==0):\n            return 1\n        if(n<0):\n            return 0\n        return help(k,n-2**k)+help(k+1,n)\n    return help(0,amount)\n        \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def help(k,n):\n        if(n==0):\n            return 1\n        if(n<0):\n            return 0\n        if(2**k>n):\n            return 0\n        return help(k,n-2**k)+help(k+1,n)\n    return help(0,amount)\n        \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def help(k, n):\r\n        if (amount==0):\r\n            return 1\r\n        if (n<0):\r\n            return 0\r\n        return help(k, n-2**k)+help(k+1, n)\r\n    return help(0, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 302, in help","    return help(k,n-2**k)+help(k+1,n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 302, in help","    return help(k,n-2**k)+help(k+1,n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 302, in help","    return help(k,n-2**k)+help(k+1,n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 302, in help","    return help(k,n-2**k)+help(k+1,n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 302, in help","    return help(k,n-2**k)+help(k+1,n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 302, in help","    return help(k,n-2**k)+help(k+1,n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 298, in help","    if(n==0):","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":95,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n    return count(amount,k) =>           \r\n    return count           <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    k = 1\n    while(k<amount):\n        k*=2\n    k = k//2\n    def count(amount, k):\n        if amount == 0:\n            return 1\n        elif amount<0:\n            return 0\n        elif k == 0:\n            return 0\n \n        return count(amount-k, k) + count(amount, k//2)\n    return count\n        \ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    k = 1\n    while(k<amount):\n        k*=2\n    k = k//2\n    def count(amount, k):\n        if amount == 0:\n            return 1\n        elif amount<0:\n            return 0\n        elif k == 0:\n            return 0\n \n        return count(amount-k, k) + count(amount, k//2)\n    return count(amount,k)\n        \ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","<function count_change.<locals>.count at 0x000002133CF97598>","","# Error: expected","#     6","# but got","#     <function count_change.<locals>.count at 0x000002133CF97598>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":96,"studentId":0,"date":null,"diff":"\r\nInputObject                    SideIndicator\r\n-----------                    -------------\r\n        elif minimum > amount: =>           \r\n        elif minimum < amount: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_way(minimum, amount):\n        if amount < 0: \n            return 0\n        elif amount == 0:\n            return 1\n        elif minimum < amount:\n            return 0\n        else: \n            with_min = count_way(minimum, amount - minimum)\n            without_min = count_way(2*minimum, amount)\n            return with_min + without_min\n\n    return count_way(1, amount) #minimum coin is 1\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_way(minimum, amount):\n        if amount < 0: \n            return 0\n        elif amount == 0:\n            return 1\n        elif minimum > amount:\n            return 0\n        else: \n            with_min = count_way(minimum, amount - minimum)\n            without_min = count_way(2*minimum, amount)\n            return with_min + without_min\n\n    return count_way(1, amount) #minimum coin is 1\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_way(minimum, amount):\r\n        if amount<0:\r\n            return 0\r\n        elif amount==0:\r\n            return 1\r\n        elif minimum<amount:\r\n            return 0\r\n        else:\r\n            with_min = count_way(minimum, amount-minimum)\r\n            without_min = count_way(2*minimum, amount)\r\n            return with_min+k\r\n    return count_way(1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":97,"studentId":0,"date":null,"diff":"\r\nInputObject                     SideIndicator\r\n-----------                     -------------\r\n    coins = []                  =>           \r\n        coins.append(pow(2, x)) =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x = 0\n    while pow(2, x) < amount:\n        x += 1\n    def count_partitions(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, m//2)\n    return count_partitions(amount, coins[x-1])\n\n    \n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    coins = []\n    x = 0\n    while pow(2, x) < amount:\n        coins.append(pow(2, x))\n        x += 1\n    def count_partitions(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, m//2)\n    return count_partitions(amount, coins[x-1])\n\n    \n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 310, in count_change","    return count_partitions(amount, coins[x-1])","NameError: name 'coins' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":98,"studentId":0,"date":null,"diff":"","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def counter(amount, coin = 1):\n        if amount < 0:\n            return 0\n        elif coin > amount:\n            return 0\n        elif amount == 0:\n            return 1\n        else:\n            change_with_coin = counter(amount - coin, coin)\n            change_other_coins = counter(amount, coin*2)\n            return change_with_coin + change_other_coins\n    return counter(amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def counter(amount, coin = 1):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif coin > amount:\n            return 0\n        else:\n            change_with_coin = counter(amount - coin, coin)\n            change_other_coins = counter(amount, coin*2)\n            return change_with_coin + change_other_coins\n    return counter(amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def counter(amount, coin = 1):\r\n        if amount<0:\r\n            return 0\r\n        elif coin>amount:\r\n            return 0\r\n        elif amount==0:\r\n            return 1\r\n        else:\r\n            change_with_coin = counter(amount-coin, coin)\r\n            change_other_coins = counter(amount, coin*2)\r\n            return change_with_coin+k\r\n    return counter(amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":99,"studentId":0,"date":null,"diff":"\r\nInputObject                                                           SideIndicator\r\n-----------                                                           -------------\r\n    def helper(amount, m):                                            =>           \r\n        if amount == 0:                                               =>           \r\n            return 1                                                  =>           \r\n        elif amount < 0:                                              =>           \r\n            return 0                                                  =>           \r\n        elif m == 0:                                                  =>           \r\n            return 0                                                  =>           \r\n        else:                                                         =>           \r\n            return helper(amount - m, m) + helper(amount, m // 2)     =>           \r\n    return helper(amount, possible_list[len(possible_list) - 1])      =>           \r\n                                                                      =>           \r\n                                                                      =>           \r\n    if amount == 1:                                                   <=           \r\n        return 1                                                      <=           \r\n    else:                                                             <=           \r\n        biggest = possible_list[len(possible_list) - 1]               <=           \r\n        return count_change(biggest) + count_change(amount - biggest) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def is_powerof2(x):\n        for n in range(0, x):\n            if x == 2 ** n:\n                return True\n        return False\n    possible_list = []\n    for i in range(1, amount):\n        if is_powerof2(i):\n            possible_list.append(i)\n    if amount == 1:\n        return 1\n    else:\n        biggest = possible_list[len(possible_list) - 1]\n        return count_change(biggest) + count_change(amount - biggest)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def is_powerof2(x):\n        for n in range(0, x):\n            if x == 2 ** n:\n                return True\n        return False\n\n    possible_list = []\n    for i in range(1, amount):\n        if is_powerof2(i):\n            possible_list.append(i)\n\n    def helper(amount, m):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return helper(amount - m, m) + helper(amount, m // 2)\n    return helper(amount, possible_list[len(possible_list) - 1])\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def is_powerof2(x):\r\n        for amount in range(0, x):\r\n            if x==2**n:\r\n                return True\r\n        return False\r\n    possible_list = []\r\n    for i in range(1, amount):\r\n        if is_powerof2(i):\r\n            possible_list.append(i)\r\n    if amount==1:\r\n        return 1\r\n    else:\r\n        biggest = possible_list[len(possible_list)-1]\r\n        return count_change(biggest)+count_change(amount-biggest)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","7","","# Error: expected","#     6","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":100,"studentId":0,"date":null,"diff":"\r\nInputObject                               SideIndicator\r\n-----------                               -------------\r\n        if 2**i>amount:                   =>           \r\n            max_change=2**(i-1)           =>           \r\n        if  amount<0:                     =>           \r\n    return c(amount,max_change)           =>           \r\n                                          =>           \r\n    l=[]                                  <=           \r\n        if 2**i<amount:                   <=           \r\n            l.append(2**i)                <=           \r\n            break                         <=           \r\n        if max_change>amount or amount<0: <=           \r\n        #elif amount==2:                  <=           \r\n            #return 2                     <=           \r\n        else:                             <=           \r\n                                          <=           \r\n    return c(amount,l[-1])                <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    l=[]\n    for i in range(amount):\n        if 2**i<amount:\n            l.append(2**i)\n        else:\n            break\n    def c (amount, max_change):\n        if max_change>amount or amount<0:\n            return 0\n        if amount==0 or amount==1 or max_change==1:\n            return 1\n        #elif amount==2:\n            #return 2\n        \n        else:\n            return c(amount,max_change/2)+c(amount-max_change,max_change)\n        \n    return c(amount,l[-1])\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    for i in range(amount):\n        if 2**i>amount:\n            max_change=2**(i-1)\n\n    def c (amount, max_change):\n        if  amount<0:\n            return 0\n        if amount==0 or amount==1 or max_change==1:\n            return 1\n        else:\n            return c(amount,max_change/2)+c(amount-max_change,max_change)\n        \n    return c(amount,max_change)\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","3","","# Error: expected","#     6","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":101,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n    def help(a,power2): =>           \r\n    def help(a,b):      <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def pow_of_two(m):\n        m, pow2= 1, 1\n        while m<=amount:\n            if (2**pow2) <= amount:\n                pow2 = m\n            m+=1\n        return (pow2 - 1)\n    def help(a,b):\n        if a == 0:\n            return 1\n        elif a < 0:\n            return 0\n        elif power2 == 0:\n            return 1\n        else: \n            return help(a-(2**power2), power2) + help(a, power2-1)\n    power2 = pow_of_two(amount)\n    return help(amount, power2)\n    \"\"\"if amount == 0:\n        return 1\n    elif amount < 0:\n        return 0\n    else:\n        return count_change(pow_of_two(amount)) + count_change(amount-1)\"\"\" \n    \n  \n    \n    \n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def pow_of_two(m):\n        m, pow2= 1, 1\n        while m<=amount:\n            if (2**pow2) <= amount:\n                pow2 = m\n            m+=1\n        return (pow2 - 1)\n    def help(a,power2):\n        if a == 0:\n            return 1\n        elif a < 0:\n            return 0\n        elif power2 == 0:\n            return 1\n        else: \n            return help(a-(2**power2), power2) + help(a, power2-1)\n    power2 = pow_of_two(amount)\n    return help(amount, power2)\n    \"\"\"if amount == 0:\n        return 1\n    elif amount < 0:\n        return 0\n    else:\n        return count_change(pow_of_two(amount)) + count_change(amount-1)\"\"\" \n    \n  \n    \n    \n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def pow_of_two(m):\r\n        amount, pow2 = 1, 1\r\n        while m<=amount:\r\n            if (2**pow2)<=amount:\r\n                pow2 = m\r\n            m += 1\r\n        return (pow2-1)\r\n    def help(a, b):\r\n        if a==0:\r\n            return 1\r\n        elif a<0:\r\n            return 0\r\n        elif power2==0:\r\n            return 1\r\n        else:\r\n            return help(a-(2**power2), power2)+help(a, power2-1)\r\n    power2 = pow_of_two(amount)\r\n    return help(amount, power2)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 341, in help","    return help(a-(2**power2), power2) + help(a, power2-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 341, in help","    return help(a-(2**power2), power2) + help(a, power2-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 341, in help","    return help(a-(2**power2), power2) + help(a, power2-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 341, in help","    return help(a-(2**power2), power2) + help(a, power2-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 341, in help","    return help(a-(2**power2), power2) + help(a, power2-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 341, in help","    return help(a-(2**power2), power2) + help(a, power2-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 334, in help","    if a == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":102,"studentId":0,"date":null,"diff":"\r\nInputObject                                                           SideIndicator\r\n-----------                                                           -------------\r\n    return change(1, amount)                                          =>           \r\ndef change(coin, amount):                                             =>           \r\n    elif coin > amount:                                               =>           \r\n        return 0                                                      =>           \r\n        return change(coin, amount - coin) + change(2 * coin, amount) =>           \r\n                                                                      =>           \r\n    coin = 1                                                          <=           \r\n        return count_change(amount - coin) + count_change(amount)     <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    coin = 1\n    if amount < 0:\n        return 0\n    elif amount == 0:\n        return 1\n    else:\n        return count_change(amount - coin) + count_change(amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    return change(1, amount)\n\ndef change(coin, amount):\n    if amount < 0:\n        return 0\n    elif amount == 0:\n        return 1\n    elif coin > amount:\n        return 0\n    else:\n        return change(coin, amount - coin) + change(2 * coin, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    amount = 1\r\n    if amount<0:\r\n        return 0\r\n    elif amount==0:\r\n        return 1\r\n    else:\r\n        return count_change(amount-coin)+count_change(amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 304, in count_change","    return count_change(amount - coin) + count_change(amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 304, in count_change","    return count_change(amount - coin) + count_change(amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 304, in count_change","    return count_change(amount - coin) + count_change(amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 304, in count_change","    return count_change(amount - coin) + count_change(amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 304, in count_change","    return count_change(amount - coin) + count_change(amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 304, in count_change","    return count_change(amount - coin) + count_change(amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 299, in count_change","    if amount < 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":103,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        if a == 0:   =>           \r\n        if a < 0:    =>           \r\n            return 0 =>           \r\n        if a <= 0:   <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def coins(k):\n        if (amount / 2**k) < 2:\n            return 2**k\n        else:\n            return coins(k+1)\n    cent = coins(0)\n    def helper(a, c):\n        if a <= 0:\n            return 1\n        if c == 1:\n            return 1\n        else:\n            return helper(a-c, c) + helper(a, c//2)\n    return helper(amount, cent)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def coins(k):\n        if (amount / 2**k) < 2:\n            return 2**k\n        else:\n            return coins(k+1)\n    cent = coins(0)\n    def helper(a, c):\n        if a == 0:\n            return 1\n        if a < 0:\n            return 0\n        if c == 1:\n            return 1\n        else:\n            return helper(a-c, c) + helper(a, c//2)\n    return helper(amount, cent)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","9","","# Error: expected","#     6","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":104,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        if n == 0:      =>           \r\n            return 1    =>           \r\n    if amount % 2 == 0: <=           \r\n        amount -= 1     <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_powers_two(n, i):     #i is 2^k\n        if n < 1 or i < 1:\n            return 0\n        elif n == 1 or i == 1:\n            return 1\n        else:\n            return count_powers_two(n, i // 2) + count_powers_two(n - i, i)\n    i = 0\n    while 2**(i+1) <= amount:        #Max 2^i\n        i += 1\n    if amount % 2 == 0:\n        amount -= 1\n    return count_powers_two(amount, 2**i)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_powers_two(n, i):     #i is 2^k\n        if n == 0:\n            return 1\n        if n < 1 or i < 1:\n            return 0\n        elif n == 1 or i == 1:\n            return 1\n        else:\n            return count_powers_two(n, i // 2) + count_powers_two(n - i, i)\n    i = 0\n    while 2**(i+1) <= amount:        #Max 2^i\n        i += 1\n    return count_powers_two(amount, 2**i)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","10","","# Error: expected","#     14","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":105,"studentId":0,"date":null,"diff":"\r\nInputObject    SideIndicator\r\n-----------    -------------\r\n    print(lst) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    fn1, fn2 = lambda x: 2**x, lambda x: x <= amount \n    lst = list(filter(fn2, map(fn1, list(range(0, amount)))))\n    a = lst[len(lst)-1]\n    print(lst)\n    def help(amount, m):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            \"\"\"print (lst)\n\n            a = lst[len(lst)-1]\n            print(a)\"\"\" \n            '''if abs(count) > len(lst):\n                return 0\n            with_big = help(amount-a, a, count-1)\n            without_big = help(amount, lst[count], count-1)\n            print(with_big, without_big)\n            total = without_big + with_big'''\n            return help(amount-m, m) + help(amount, m//2)\n    return help(amount, a)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    fn1, fn2 = lambda x: 2**x, lambda x: x <= amount \n    lst = list(filter(fn2, map(fn1, list(range(0, amount)))))\n    a = lst[len(lst)-1]\n    def help(amount, m):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            \"\"\"print (lst)\n\n            a = lst[len(lst)-1]\n            print(a)\"\"\" \n            '''if abs(count) > len(lst):\n                return 0\n            with_big = help(amount-a, a, count-1)\n            without_big = help(amount, lst[count], count-1)\n            print(with_big, without_big)\n            total = without_big + with_big'''\n            return help(amount-m, m) + help(amount, m//2)\n    return help(amount, a)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","[1, 2, 4]","6","","# Error: expected","#     6","# but got","#     [1, 2, 4]","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":106,"studentId":0,"date":null,"diff":"\r\nInputObject                                            SideIndicator\r\n-----------                                            -------------\r\n        if amount == 0 or amount == 1:                 =>           \r\n        elif amount < 0 or largest == 0:               =>           \r\n            return 0                                   =>           \r\n        if amount <= 0 or amount == 1 or largest == 1: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def biggest_base(num):\n        x = num\n        while x > 0:\n            if 2**x <= num:\n                return 2**x\n            x -= 1\n\n    def count_partitions(amount, largest):\n        if amount <= 0 or amount == 1 or largest == 1:\n            return 1\n        return count_partitions(amount-largest, largest) \\\n            + count_partitions(amount, largest // 2)\n    return count_partitions(amount, biggest_base(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def biggest_base(num):\n        x = num\n        while x > 0:\n            if 2**x <= num:\n                return 2**x\n            x -= 1\n\n    def count_partitions(amount, largest):\n        if amount == 0 or amount == 1:\n            return 1\n        elif amount < 0 or largest == 0:\n            return 0\n        return count_partitions(amount-largest, largest) \\\n            + count_partitions(amount, largest // 2)\n    return count_partitions(amount, biggest_base(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","7","","# Error: expected","#     6","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":107,"studentId":0,"date":null,"diff":"\r\nInputObject                                               SideIndicator\r\n-----------                                               -------------\r\n        b = count_helper(amount, value_coin*2)            =>           \r\n        b = count_helper(amount-value_coin, value_coin*2) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_helper(amount, value_coin):\n        if amount < 0:\n            return 0\n        if amount == 0:\n            return 1\n        if value_coin > amount:\n            return 0\n        a = count_helper(amount-value_coin, value_coin)\n        b = count_helper(amount-value_coin, value_coin*2)\n        return a+b\n    return count_helper(amount, 1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_helper(amount, value_coin):\n        if amount < 0:\n            return 0\n        if amount == 0:\n            return 1\n        if value_coin > amount:\n            return 0\n        a = count_helper(amount-value_coin, value_coin)\n        b = count_helper(amount, value_coin*2)\n        return a+b\n    return count_helper(amount, 1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_helper(amount, value_coin):\r\n        if amount<0:\r\n            return 0\r\n        if amount==0:\r\n            return 1\r\n        if value_coin>amount:\r\n            return 0\r\n        a = count_helper(amount-value_coin, value_coin)\r\n        b = count_helper(amount-value_coin, value_coin*2)\r\n        return a+k\r\n    return count_helper(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","10","","# Error: expected","#     6","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":108,"studentId":0,"date":null,"diff":"\r\nInputObject                                                       SideIndicator\r\n-----------                                                       -------------\r\n    if amount == 1 or amount == 0:                                =>           \r\n        return count_change(amount//2) + count_change(amount - 2) =>           \r\n    if amount == 1:                                               <=           \r\n        return count_change(amount//2) + count_change(amount - 3) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if amount == 1:\n        return 1\n    elif amount % 2 != 0:\n        return count_change(amount - 1)\n    else:\n        return count_change(amount//2) + count_change(amount - 3)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if amount == 1 or amount == 0:\n        return 1\n    elif amount % 2 != 0:\n        return count_change(amount - 1)\n    else:\n        return count_change(amount//2) + count_change(amount - 2)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 311, in count_change","    return count_change(amount//2) + count_change(amount - 3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 309, in count_change","    return count_change(amount - 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 311, in count_change","    return count_change(amount//2) + count_change(amount - 3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 309, in count_change","    return count_change(amount - 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 311, in count_change","    return count_change(amount//2) + count_change(amount - 3)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 309, in count_change","    return count_change(amount - 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 306, in count_change","    if amount == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":109,"studentId":0,"date":null,"diff":"\r\nInputObject                                                       SideIndicator\r\n-----------                                                       -------------\r\n            return helper(n - m, m) + helper(n, m//2)             =>           \r\n            return count_change(n - m, m) + count_change(n, m//2) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_change(n - m, m) + count_change(n, m//2)\n\n    def helper_2(m):\n        if m > amount:\n            return m//2\n        else:\n            return helper_2(m * 2)\n\n    return helper(amount, helper_2(1))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return helper(n - m, m) + helper(n, m//2)\n\n    def helper_2(m):\n        if m > amount:\n            return m//2\n        else:\n            return helper_2(m * 2)\n\n    return helper(amount, helper_2(1))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 319, in count_change","    return helper(amount, helper_2(1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 311, in helper","    return count_change(n - m, m) + count_change(n, m//2)","TypeError: count_change() takes 1 positional argument but 2 were given","","# Error: expected","#     6","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":110,"studentId":0,"date":null,"diff":"\r\nInputObject                                                     SideIndicator\r\n-----------                                                     -------------\r\n    return count_using(1, amount)                               =>           \r\ndef count_using(min_coin, amount):                              =>           \r\n    if amount < 0:                                              =>           \r\n        return 0                                                =>           \r\n    elif amount == 0:                                           =>           \r\n        return 1                                                =>           \r\n    elif min_coin > amount:                                     =>           \r\n        return 0                                                =>           \r\n        with_min = count_using(min_coin, amount - min_coin)     =>           \r\n        without_min = count_using(2*min_coin, amount)           =>           \r\n        return with_min + without_min                           =>           \r\n    else:                                                       =>           \r\n                                                                =>           \r\n                                                                =>           \r\n    def count_using(min_coin, amount):                          <=           \r\n        if amount < 0:                                          <=           \r\n            return 0                                            <=           \r\n        elif amount == 0:                                       <=           \r\n            return 1                                            <=           \r\n        elif min_coin > amount:                                 <=           \r\n            return 0                                            <=           \r\n        else:                                                   <=           \r\n            with_min = count_using(min_coin, amount - min_coin) <=           \r\n            without_min = count_using(2*min_coin, amount)       <=           \r\n            return with_min + without_min                       <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_using(min_coin, amount):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif min_coin > amount:\n            return 0\n        else:\n            with_min = count_using(min_coin, amount - min_coin)\n            without_min = count_using(2*min_coin, amount)\n            return with_min + without_min\n    #return helper(amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    return count_using(1, amount)\n\ndef count_using(min_coin, amount):\n    if amount < 0:\n        return 0\n    elif amount == 0:\n        return 1\n    elif min_coin > amount:\n        return 0\n    else:\n        with_min = count_using(min_coin, amount - min_coin)\n        without_min = count_using(2*min_coin, amount)\n        return with_min + without_min\n\n    #return helper(amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_using(min_coin, amount):\r\n        if amount<0:\r\n            return 0\r\n        elif amount==0:\r\n            return 1\r\n        elif min_coin>amount:\r\n            return 0\r\n        else:\r\n            with_min = count_using(min_coin, amount-min_coin)\r\n            without_min = count_using(2*min_coin, amount)\r\n            return with_min+k\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","","# Error: expected","#     6","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":111,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                       SideIndicator\r\n-----------                                                                       -------------\r\n            with_largest = partitions(amount-2**(exponentials[-1]), exponentials) =>           \r\n    return partitions(amount, usuable_exponents)                                  =>           \r\n    exponentials = [2**i for i in usuable_exponents]                              <=           \r\n        elif amount - 2**(exponentials[-1]) < 0:                                  <=           \r\n            return 0                                                              <=           \r\n            with_largest = partitions(amount-exponentials[-1], exponentials)      <=           \r\n    return partitions(amount, exponentials)                                       <=           \r\n                                                                                  <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    usuable_exponents = [i for i in range(amount) if 2**i <= amount]\n    exponentials = [2**i for i in usuable_exponents]\n    def partitions(amount, exponentials):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif exponentials == [0]:\n            return 1\n        elif amount - 2**(exponentials[-1]) < 0:\n            return 0\n        else:\n            with_largest = partitions(amount-exponentials[-1], exponentials)\n            without_largest = partitions(amount, exponentials[:-1])\n            return with_largest + without_largest\n    return partitions(amount, exponentials)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    usuable_exponents = [i for i in range(amount) if 2**i <= amount]\n    def partitions(amount, exponentials):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif exponentials == [0]:\n            return 1\n        else:\n            with_largest = partitions(amount-2**(exponentials[-1]), exponentials)\n            without_largest = partitions(amount, exponentials[:-1])\n            return with_largest + without_largest\n    return partitions(amount, usuable_exponents)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":112,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n            return 1 =>           \r\n            return 0 <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def num_change(x):\n        count = 1\n        while pow(2, count) <= x:\n            count += 1\n        return count\n\n    def counter(x, y):\n        if x == 0:\n            return 1\n        elif x < 0:\n            return 0\n        elif y == 0:\n            return 0\n        else:\n            return counter(x - pow(2, y), y) + counter(x, y - 1)\n\n    power = num_change(amount) - 1\n    return counter(amount, power)\n\n\n\n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def num_change(x):\n        count = 1\n        while pow(2, count) <= x:\n            count += 1\n        return count\n\n    def counter(x, y):\n        if x == 0:\n            return 1\n        elif x < 0:\n            return 0\n        elif y == 0:\n            return 1\n        else:\n            return counter(x - pow(2, y), y) + counter(x, y - 1)\n\n    power = num_change(amount) - 1\n    return counter(amount, power)\n\n\n\n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def num_change(x):\r\n        amount = 1\r\n        while pow(2, count)<=x:\r\n            count += 1\r\n        return count\r\n    def counter(x, y):\r\n        if x==0:\r\n            return 1\r\n        elif x<0:\r\n            return 0\r\n        elif y==0:\r\n            return 0\r\n        else:\r\n            return counter(x-pow(2, y), y)+counter(x, y-1)\r\n    power = num_change(amount)-1\r\n    return counter(amount, power)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":113,"studentId":0,"date":null,"diff":"\r\nInputObject                              SideIndicator\r\n-----------                              -------------\r\n        elif amount < 0:                 =>           \r\n            return 0                     =>           \r\n        else:                            =>           \r\n    return counter(amount, max_coin(2) ) =>           \r\n        else:                            <=           \r\n    return counter(amount, max_coin(1) ) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \n    def max_coin(coin):\n        if coin > amount:\n            return coin / 2\n        else: \n            return max_coin(coin * 2)\n\n        \n    def counter(amount, largest_coin): \n        if amount == 0:\n            return 1\n        elif largest_coin == 1:\n            return 1 \n        else: \n            return counter(amount - largest_coin, largest_coin) + counter(amount, largest_coin / 2)\n    return counter(amount, max_coin(1) )\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \n    def max_coin(coin):\n        if coin > amount:\n            return coin / 2\n        else: \n            return max_coin(coin * 2)\n\n        \n    def counter(amount, largest_coin): \n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif largest_coin == 1:\n            return 1 \n        else:\n            return counter(amount - largest_coin, largest_coin) + counter(amount, largest_coin / 2)\n    return counter(amount, max_coin(2) )\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 317, in counter","    return counter(amount - largest_coin, largest_coin) + counter(amount, largest_coin / 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 317, in counter","    return counter(amount - largest_coin, largest_coin) + counter(amount, largest_coin / 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 317, in counter","    return counter(amount - largest_coin, largest_coin) + counter(amount, largest_coin / 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 317, in counter","    return counter(amount - largest_coin, largest_coin) + counter(amount, largest_coin / 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 317, in counter","    return counter(amount - largest_coin, largest_coin) + counter(amount, largest_coin / 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 317, in counter","    return counter(amount - largest_coin, largest_coin) + counter(amount, largest_coin / 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 312, in counter","    if amount == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":114,"studentId":0,"date":null,"diff":"\r\nInputObject                                             SideIndicator\r\n-----------                                             -------------\r\n    # print ('print', k, ways_count_change(amt - k, k)) =>           \r\n    print ('print', k, ways_count_change(amt - k, k))   <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    #think about counting partitions - look over notes\n\n    #should i need to def a function for previous_multiple_of_2?\n\n    # if (amount/2) % 2 == 0: #multiple of 2 \n    #     k = amount\n    # else: \n    #     k = #max multiple of 2 closest to amount \n    counter = 0\n    amt = amount \n    while amount > 1:\n        counter = counter + 1\n        amount = amount//2\n    k = pow(2, counter)\n\n    # save original \"amount\" -> it has been changed above in while statement\n    def ways_count_change(amt, k):\n        if amt < 0:\n            return 0 \n        elif k == 1 or amt == 0:\n            return 1 \n        else:  \n            return ways_count_change(amt, k/2) + ways_count_change(amt - k, k)\n            #\"k - 1\" needs to be lower multiple of 2 closest to n\n    print ('print', k, ways_count_change(amt - k, k))\n    return ways_count_change(amt, k)\n\n\n\n\n    # #Base Cases \n    # def ways_count_change(amount):\n    #     # one_cent = ways_count_change(amount - 1)\n    #     # two_cent = ways_count_change(amount - 2)\n    #     if amount == 0:\n    #         return 0 \n    #     if amount == 1: \n    #         return 1 #one 1 cent\n    #     if amount == 2: \n    #         return 2 \n    #     else: \n    #         return one_cent + two_cent #??? \n    # # print (ways_count_change(amount - 1))\n    # # print (ways_count_change(amount - 2))\n    # return ways_count_change(amount)\n\n    # # think of the stairs example in discussion\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    #think about counting partitions - look over notes\n\n    #should i need to def a function for previous_multiple_of_2?\n\n    # if (amount/2) % 2 == 0: #multiple of 2 \n    #     k = amount\n    # else: \n    #     k = #max multiple of 2 closest to amount \n    counter = 0\n    amt = amount \n    while amount > 1:\n        counter = counter + 1\n        amount = amount//2\n    k = pow(2, counter)\n\n    # save original \"amount\" -> it has been changed above in while statement\n    def ways_count_change(amt, k):\n        if amt < 0:\n            return 0 \n        elif k == 1 or amt == 0:\n            return 1 \n        else:  \n            return ways_count_change(amt, k/2) + ways_count_change(amt - k, k)\n            #\"k - 1\" needs to be lower multiple of 2 closest to n\n    # print ('print', k, ways_count_change(amt - k, k))\n    return ways_count_change(amt, k)\n\n\n\n\n    # #Base Cases \n    # def ways_count_change(amount):\n    #     # one_cent = ways_count_change(amount - 1)\n    #     # two_cent = ways_count_change(amount - 2)\n    #     if amount == 0:\n    #         return 0 \n    #     if amount == 1: \n    #         return 1 #one 1 cent\n    #     if amount == 2: \n    #         return 2 \n    #     else: \n    #         return one_cent + two_cent #??? \n    # # print (ways_count_change(amount - 1))\n    # # print (ways_count_change(amount - 2))\n    # return ways_count_change(amount)\n\n    # # think of the stairs example in discussion\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","print 4 2","6","","# Error: expected","#     6","# but got","#     print 4 2","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":115,"studentId":0,"date":null,"diff":"\r\nInputObject                              SideIndicator\r\n-----------                              -------------\r\n        elif amount == 0:                =>           \r\n        elif amount == 0 or amount == 1: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def count_helper(amount, coin_types):\n        if amount < 0:\n            return 0\n        elif amount == 0 or amount == 1:\n            return 1\n        elif coin_types > amount:\n            return 0\n        else:\n            return count_helper(amount-coin_types, coin_types) + count_helper(amount, coin_types*2)\n\n    return count_helper(amount, 1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def count_helper(amount, coin_types):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif coin_types > amount:\n            return 0\n        else:\n            return count_helper(amount-coin_types, coin_types) + count_helper(amount, coin_types*2)\n\n    return count_helper(amount, 1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_helper(amount, coin_types):\r\n        if amount<0:\r\n            return 0\r\n        elif amount==0 or amount==1:\r\n            return 1\r\n        elif coin_types>amount:\r\n            return 0\r\n        else:\r\n            return count_helper(amount-coin_types, coin_types)+count_helper(amount, coin_types*2)\r\n    return count_helper(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","11","","# Error: expected","#     6","# but got","#     11","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":116,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                 SideIndicator\r\n-----------                                                                 -------------\r\n            return count_partitions(n-m, m) + count_partitions(n, m//2)     =>           \r\n            return count_partitions(n-m, m) + count_partitions(n, m-2)      <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def maxcoin(amount):\n        n=0\n        while 2**n <= amount:\n            if amount == 2**n:\n                return amount\n            n+=1\n        return maxcoin(amount-1)\n   \n    m= maxcoin(amount)\n\n    def count_partitions(n, m):\n        \"\"\"Count the ways to partition n using parts up to m.\"\"\"\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, m-2)    \n\n    return count_partitions(amount,m)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def maxcoin(amount):\n        n=0\n        while 2**n <= amount:\n            if amount == 2**n:\n                return amount\n            n+=1\n        return maxcoin(amount-1)\n   \n    m= maxcoin(amount)\n\n    def count_partitions(n, m):\n        \"\"\"Count the ways to partition n using parts up to m.\"\"\"\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, m//2)    \n\n    return count_partitions(amount,m)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def maxcoin(amount):\r\n        n = 0\r\n        while 2**n<=amount:\r\n            if amount==2**n:\r\n                return amount\r\n            n += 1\r\n        return maxcoin(amount-1)\r\n    m = maxcoin(amount)\r\n    def count_partitions(n, m):\r\n        if n==0:\r\n            return 1\r\n        elif n<0:\r\n            return 0\r\n        elif m==0:\r\n            return 0\r\n        elif m>n:\r\n            return 0\r\n        else:\r\n            return count_partitions(n-m, m)+count_partitions(n, m-2)\r\n    return count_partitions(amount, m)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-GreaterThan, Children(LeafConstNode(NameExpressionNode-m), SingleChild(LeafConstNode(NameExpressionNode-n)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(ConstantExpressionNode-0)))))))), 3), Selected(\\x => Match(x, StartsWithTarget(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"BinaryExpressionNode\")))))))))))))))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":117,"studentId":0,"date":null,"diff":"\r\nInputObject                            SideIndicator\r\n-----------                            -------------\r\n        if amount == 0:                =>           \r\n        if amount == 1 or amount == 0: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n\n\n    def helper(amount, smallest_denom = 1):\n        if amount == 1 or amount == 0:\n            return 1\n        if amount < 0:\n            return 0\n        if smallest_denom > amount:\n            return 0\n\n        return (helper(amount - smallest_denom, smallest_denom) + helper(amount, smallest_denom * 2))\n    return helper(amount,1)\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n\n\n    def helper(amount, smallest_denom = 1):\n        if amount == 0:\n            return 1\n        if amount < 0:\n            return 0\n        if smallest_denom > amount:\n            return 0\n\n        return (helper(amount - smallest_denom, smallest_denom) + helper(amount, smallest_denom * 2))\n    return helper(amount,1)\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def helper(amount, smallest_denom = 1):\r\n        if amount==1 or amount==0:\r\n            return 1\r\n        if amount<0:\r\n            return 0\r\n        if smallest_denom>amount:\r\n            return 0\r\n        return (helper(amount-smallest_denom, smallest_denom)+helper(amount, smallest_denom*2))\r\n    return helper(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","11","","# Error: expected","#     6","# but got","#     11","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":118,"studentId":0,"date":null,"diff":"\r\nInputObject                            SideIndicator\r\n-----------                            -------------\r\n    def largest_coin(x):               =>           \r\n        y = 0                          =>           \r\n        while pow(2,y) <= x:           =>           \r\n            y += 1                     =>           \r\n        return  y - 1                  =>           \r\n    m = largest_coin(amount)           =>           \r\n    return count_partitions(amount, m) =>           \r\n                                       =>           \r\n                                       =>           \r\n                                       <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_partitions(n, m):\n        if n < 0:\n            return 0\n        elif n == 0:\n            return 1\n        elif m == 0:\n            return 1 \n\n        else:\n            partitions = count_partitions(n - pow(2,m),m)\n            not_partition = count_partitions(n, m-1)\n            return partitions + not_partition\n\n        \n        \n        \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_partitions(n, m):\n        if n < 0:\n            return 0\n        elif n == 0:\n            return 1\n        elif m == 0:\n            return 1 \n\n        else:\n            partitions = count_partitions(n - pow(2,m),m)\n            not_partition = count_partitions(n, m-1)\n            return partitions + not_partition\n\n    def largest_coin(x):\n        y = 0\n        while pow(2,y) <= x:\n            y += 1\n        return  y - 1\n\n    m = largest_coin(amount)\n\n    return count_partitions(amount, m)\n        \n        \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_partitions(n, m):\r\n        if n<0:\r\n            return 0\r\n        elif n==0:\r\n            return 1\r\n        elif m==0:\r\n            return 1\r\n        else:\r\n            partitions = count_partitions(n-pow(2, m), m)\r\n            not_partition = count_partitions(n, m-1)\r\n            return partitions+k\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","","# Error: expected","#     6","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":119,"studentId":0,"date":null,"diff":"\r\nInputObject                                                           SideIndicator\r\n-----------                                                           -------------\r\n        if power == 0:                                                =>           \r\n            return 0                                                  =>           \r\n        return helper(amount-power, power) + helper(amount, power//2) =>           \r\n        return helper(amount-power, power) + helper(amount, power/2)  <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(amount, power):\n        if amount == 0:\n            return 1\n        if amount < 0:\n            return 0\n        if amount == 1:\n            return 1\n        \n        return helper(amount-power, power) + helper(amount, power/2)\n    largest_power = 1\n    while amount > largest_power*2:\n        largest_power = largest_power*2\n    if largest_power > amount:\n        print(\"ERROR\", amount)\n        return\n    #if amount / largest_power == 2:\n    #\treturn 1 + count_change(amount/2)\n    #print (amount, largest_power)\n    return helper(amount, largest_power)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(amount, power):\n        if amount == 0:\n            return 1\n        if amount < 0:\n            return 0\n        if amount == 1:\n            return 1\n        if power == 0:\n        \treturn 0\n        \n        return helper(amount-power, power) + helper(amount, power//2)\n    largest_power = 1\n    while amount > largest_power*2:\n        largest_power = largest_power*2\n    if largest_power > amount:\n        print(\"ERROR\", amount)\n        return\n    #if amount / largest_power == 2:\n    #\treturn 1 + count_change(amount/2)\n    #print (amount, largest_power)\n    return helper(amount, largest_power)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 345, in helper","    return helper(amount-power, power) + helper(amount, power/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 345, in helper","    return helper(amount-power, power) + helper(amount, power/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 345, in helper","    return helper(amount-power, power) + helper(amount, power/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 345, in helper","    return helper(amount-power, power) + helper(amount, power/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 345, in helper","    return helper(amount-power, power) + helper(amount, power/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 345, in helper","    return helper(amount-power, power) + helper(amount, power/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 338, in helper","    if amount == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":120,"studentId":0,"date":null,"diff":"\r\nInputObject                     SideIndicator\r\n-----------                     -------------\r\n    def num_ways(amount, coin): =>           \r\n    def num_ways(number, coin): <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def closest_power(amount):\n        \"\"\"returns the closest_coin coint to the amount given\n\n        >>>closest_power(7)\n        4\n        \"\"\"\n        current_coin, previous_coin, position = 0, 0, 0\n\n        while current_coin < amount:\n            previous_coin = current_coin\n            current_coin = 2**position\n            position += 1\n            if previous_coin < amount and current_coin > amount:\n                return previous_coin\n\n    def num_ways(number, coin):\n        #\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif coin == 1:\n            return 1\n        elif coin == 0:\n            return 0\n\n        else:\n            return num_ways(amount - coin, coin) + num_ways(amount, coin//2)\n\n    return num_ways(amount, closest_power(amount))\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def closest_power(amount):\n        \"\"\"returns the closest_coin coint to the amount given\n\n        >>>closest_power(7)\n        4\n        \"\"\"\n        current_coin, previous_coin, position = 0, 0, 0\n\n        while current_coin < amount:\n            previous_coin = current_coin\n            current_coin = 2**position\n            position += 1\n            if previous_coin < amount and current_coin > amount:\n                return previous_coin\n\n    def num_ways(amount, coin):\n        #\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif coin == 1:\n            return 1\n        elif coin == 0:\n            return 0\n\n        else:\n            return num_ways(amount - coin, coin) + num_ways(amount, coin//2)\n\n    return num_ways(amount, closest_power(amount))\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 353, in num_ways","    return num_ways(amount - coin, coin) + num_ways(amount, coin//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 353, in num_ways","    return num_ways(amount - coin, coin) + num_ways(amount, coin//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 353, in num_ways","    return num_ways(amount - coin, coin) + num_ways(amount, coin//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 353, in num_ways","    return num_ways(amount - coin, coin) + num_ways(amount, coin//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 353, in num_ways","    return num_ways(amount - coin, coin) + num_ways(amount, coin//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 353, in num_ways","    return num_ways(amount - coin, coin) + num_ways(amount, coin//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 343, in num_ways","    if amount == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":121,"studentId":0,"date":null,"diff":"\r\nInputObject                         SideIndicator\r\n-----------                         -------------\r\n        elif max_coin > var_amount: <=           \r\n            return 0                <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    exp = 1\n    while (2 ** (exp + 1)) < amount:\n        exp += 1\n    def cc_helper(var_amount, max_coin):\n        if var_amount == 0:\n            return 1\n        elif max_coin > var_amount:\n            return 0\n        elif var_amount < 0 or max_coin <= 0:\n            return 0\n        else:\n            return cc_helper(var_amount - max_coin, max_coin) + cc_helper(var_amount, max_coin // 2)\n    return cc_helper(amount, 2 ** exp)\n#    p = 1\n#    while 2 ** p < amount:\n#        p += 1\n#    p -= 1\n#    def cc_helper(a, b, c):\n#        if amount - c == 0:\n#            return d\n#        if a == 1:\n#            return 1\n#        else:\n#            c =\n#            return cc_helper(a - (2 ** p), p - 1, d + 1)\n#    return cc_helper(amount, p, c, 1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    exp = 1\n    while (2 ** (exp + 1)) < amount:\n        exp += 1\n    def cc_helper(var_amount, max_coin):\n        if var_amount == 0:\n            return 1\n        elif var_amount < 0 or max_coin <= 0:\n            return 0\n        else:\n            return cc_helper(var_amount - max_coin, max_coin) + cc_helper(var_amount, max_coin // 2)\n    return cc_helper(amount, 2 ** exp)\n#    p = 1\n#    while 2 ** p < amount:\n#        p += 1\n#    p -= 1\n#    def cc_helper(a, b, c):\n#        if amount - c == 0:\n#            return d\n#        if a == 1:\n#            return 1\n#        else:\n#            c =\n#            return cc_helper(a - (2 ** p), p - 1, d + 1)\n#    return cc_helper(amount, p, c, 1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","3","","# Error: expected","#     6","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":122,"studentId":0,"date":null,"diff":"\r\nInputObject                    SideIndicator\r\n-----------                    -------------\r\n    coins = [1,2,4,8,16,32,64] =>           \r\n    coins = [1,2,4,8,16,32]    <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    coins = [1,2,4,8,16,32]\n    ways = [0] * (amount + 1)\n    ways[0] = 1\n    for coin in coins:\n        for j in list(range(coin, amount + 1)):\n            ways[j] += ways[j - coin]\n    return ways[amount]\n \n\n\n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    coins = [1,2,4,8,16,32,64]\n    ways = [0] * (amount + 1)\n    ways[0] = 1\n    for coin in coins:\n        for j in list(range(coin, amount + 1)):\n            ways[j] += ways[j - coin]\n    return ways[amount]\n \n\n\n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    amount = [1, 2, 4, 8, 16, 32]\r\n    ways = [0]*(amount+1)\r\n    ways[0] = 1\r\n    for coin in coins:\r\n        for j in list(range(coin, amount+1)):\r\n            ways[j] += ways[j-coin]\r\n    return ways[amount]\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","14",">>> count_change(20)","60",">>> count_change(100)","9544","","# Error: expected","#     9828","# but got","#     9544","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":123,"studentId":0,"date":null,"diff":"\r\nInputObject                                                   SideIndicator\r\n-----------                                                   -------------\r\n            return helper(amount-m, m) + helper(amount, m*2)  =>           \r\n            return helper(amount-m, m) + helper(amount, m*22) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    if amount % 2 != 0:\n        return count_change(amount-1)\n\n    m = 1\n\n    def helper(amount, m):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif m > amount:\n            return 0\n        else:\n            return helper(amount-m, m) + helper(amount, m*22)\n\n    return helper(amount, m)\n    \n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    if amount % 2 != 0:\n        return count_change(amount-1)\n\n    m = 1\n\n    def helper(amount, m):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif m > amount:\n            return 0\n        else:\n            return helper(amount-m, m) + helper(amount, m*2)\n\n    return helper(amount, m)\n    \n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","1","","# Error: expected","#     6","# but got","#     1","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":124,"studentId":0,"date":null,"diff":"\r\nInputObject                            SideIndicator\r\n-----------                            -------------\r\n    return count(amount, 2 ** amount)  =>           \r\n    return count(amount, 100)          <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count(n, k):\n        if n < 0:\n            return 0\n        elif k == 1 or n == 0:\n            return 1\n        else:\n            return count(n, k//2) + count(n - k, k)\n    return count(amount, 100) \n  \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count(n, k):\n        if n < 0:\n            return 0\n        elif k == 1 or n == 0:\n            return 1\n        else:\n            return count(n, k//2) + count(n - k, k)\n    return count(amount, 2 ** amount) \n  \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","4","","# Error: expected","#     6","# but got","#     4","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":125,"studentId":0,"date":null,"diff":"\r\nInputObject        SideIndicator\r\n-----------        -------------\r\n        elif m<0:  =>           \r\n        elif m==0: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def power_of_two(amount):\n        x=0\n        while amount>(2**x):\n            x+=1\n        return x-1\n    def helper(n, m):\n        if n==0:\n            return 1\n        elif m==0:\n            return 0\n        elif n<0:\n            return 0\n        else:\n            return helper(n-(2**m), m)+helper(n, m-1)\n    return helper(amount, power_of_two(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def power_of_two(amount):\n        x=0\n        while amount>(2**x):\n            x+=1\n        return x-1\n    def helper(n, m):\n        if n==0:\n            return 1\n        elif m<0:\n            return 0\n        elif n<0:\n            return 0\n        else:\n            return helper(n-(2**m), m)+helper(n, m-1)\n    return helper(amount, power_of_two(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def power_of_two(amount):\r\n        amount = 0\r\n        while amount>(2**x):\r\n            x += 1\r\n        return x-1\r\n    def helper(n, m):\r\n        if n==0:\r\n            return 1\r\n        elif m==0:\r\n            return 0\r\n        elif n<0:\r\n            return 0\r\n        else:\r\n            return helper(n-(2**m), m)+helper(n, m-1)\r\n    return helper(amount, power_of_two(amount))\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":126,"studentId":0,"date":null,"diff":"","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_with_smallest_coin(coin, amount):\n        if coin > amount:\n            return 0\n        if amount == 0:\n            return 1\n        else:\n            return count_with_smallest_coin(coin, amount - coin) + count_with_smallest_coin(2*coin, amount)\n\n    return count_with_smallest_coin(1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_with_smallest_coin(coin, amount):\n        if amount == 0:\n            return 1\n        if coin > amount:\n            return 0\n        else:\n            return count_with_smallest_coin(coin, amount - coin) + count_with_smallest_coin(2*coin, amount)\n\n    return count_with_smallest_coin(1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_with_smallest_coin(coin, amount):\r\n        if amount>amount:\r\n            return 0\r\n        if amount==0:\r\n            return 1\r\n        else:\r\n            return count_with_smallest_coin(coin, amount-coin)+count_with_smallest_coin(2*coin, amount)\r\n    return count_with_smallest_coin(1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":127,"studentId":0,"date":null,"diff":"\r\nInputObject                                             SideIndicator\r\n-----------                                             -------------\r\n            with_min = count_partitions(n, amount - n)  <=           \r\n            without_min = count_partitions(2*n, amount) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_partitions(n, amount):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif n > amount:\n            return 0\n        else:\n            with_min = count_partitions(n, amount - n)\n            without_min = count_partitions(2*n, amount)\n            return count_partitions(n, amount - n) + count_partitions(2*n, amount)\n    return count_partitions(1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_partitions(n, amount):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif n > amount:\n            return 0\n        else:\n            return count_partitions(n, amount - n) + count_partitions(2*n, amount)\n    return count_partitions(1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_partitions(n, amount):\r\n        if min_coin>amount:\r\n            return 0\r\n        elif amount<0:\r\n            return 0\r\n        elif amount==0:\r\n            return 0\r\n        else:\r\n            without_min = count_partitions(2*n, amount)\r\n            with_min = count_partitions(n, amount-min_coin)\r\n            return count_partitions(n, amount-n)+count_partitions(2*n, amount)\r\n    return count_partitions(1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-amount), SingleChild(LeafConstNode(ConstantExpressionNode-0))))), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-GreaterThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-min_coin)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-GreaterThan, Children(LeafConstNode(NameExpressionNode-min_coin), SingleChild(LeafConstNode(NameExpressionNode-amount))))), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-without_min)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-with_min)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(NameExpressionNode-min_coin)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))))))))))))))))))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","14",">>> count_change(20)","60",">>> count_change(100)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     9828","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":128,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        if n==0:     =>           \r\n            return 0 =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def max_coin(amount):\n        n=0\n        t=True\n        while t==True:\n            if 2**n<=amount:\n                n=n+1\n                t=True\n            else:\n                return 2**(n-1)\n\n    def change_counter(amount, n):\n        if amount==0:\n            return 1\n        elif amount<0:\n            return 0\n        else:\n            return change_counter(amount-n,n)+change_counter(amount,n//2)\n\n    return change_counter(amount,max_coin(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def max_coin(amount):\n        n=0\n        t=True\n        while t==True:\n            if 2**n<=amount:\n                n=n+1\n                t=True\n            else:\n                return 2**(n-1)\n\n    def change_counter(amount, n):\n        if amount==0:\n            return 1\n        elif amount<0:\n            return 0\n        if n==0:\n            return 0\n        else:\n            return change_counter(amount-n,n)+change_counter(amount,n//2)\n\n    return change_counter(amount,max_coin(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in change_counter","    return change_counter(amount-n,n)+change_counter(amount,n//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in change_counter","    return change_counter(amount-n,n)+change_counter(amount,n//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in change_counter","    return change_counter(amount-n,n)+change_counter(amount,n//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in change_counter","    return change_counter(amount-n,n)+change_counter(amount,n//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in change_counter","    return change_counter(amount-n,n)+change_counter(amount,n//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in change_counter","    return change_counter(amount-n,n)+change_counter(amount,n//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 310, in change_counter","    if amount==0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":129,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n    while n**k <= m:  =>           \r\n    while n**kj <= m: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def change_helper(x, y):\n        if x == 0:\n            return 1\n        elif x < 0:\n            return 0\n        elif y == 0:\n            return 0\n        else:\n            return change_helper(x - y, y) + change_helper(x, power_of_two(y - 1))\n\n    return change_helper(amount, power_of_two(amount))\n\n\ndef power_of_two(x):\n    \"\"\"Return the largest power of two less than or equal to x.\"\"\"\n    if x <= 0:\n        return 0\n    while test_power(x, 2) != True:\n        x -= 1\n    return x\n\ndef test_power(m, n):\n    \"\"\"Tests if m is a power of n.\"\"\"\n    k = 0\n    while n**kj <= m:\n        if n**k == m:\n            return True\n        k += 1\n    return False\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def change_helper(x, y):\n        if x == 0:\n            return 1\n        elif x < 0:\n            return 0\n        elif y == 0:\n            return 0\n        else:\n            return change_helper(x - y, y) + change_helper(x, power_of_two(y - 1))\n\n    return change_helper(amount, power_of_two(amount))\n\n\ndef power_of_two(x):\n    \"\"\"Return the largest power of two less than or equal to x.\"\"\"\n    if x <= 0:\n        return 0\n    while test_power(x, 2) != True:\n        x -= 1\n    return x\n\ndef test_power(m, n):\n    \"\"\"Tests if m is a power of n.\"\"\"\n    k = 0\n    while n**k <= m:\n        if n**k == m:\n            return True\n        k += 1\n    return False\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def change_helper(x, y):\r\n        if amount==0:\r\n            return 1\r\n        elif x<0:\r\n            return 0\r\n        elif y==0:\r\n            return 0\r\n        else:\r\n            return change_helper(x-y, y)+change_helper(x, power_of_two(y-1))\r\n    return change_helper(amount, power_of_two(amount))\r\ndef power_of_two(x):\r\n    if x<=0:\r\n        return 0\r\n    while test_power(x, 2)!=True:\r\n        x -= 1\r\n    return x\r\ndef test_power(m, n):\r\n    k = 0\r\n    while n**kj<=m:\r\n        if n**k==m:\r\n            return True\r\n        k += 1\r\n    return False\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 323, in count_change","    return change_helper(amount, power_of_two(amount))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 330, in power_of_two","    while test_power(x, 2) != True:","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 337, in test_power","    while n**kj <= m:","NameError: name 'kj' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":130,"studentId":0,"date":null,"diff":"\r\nInputObject                           SideIndicator\r\n-----------                           -------------\r\n        if n == 0:                    =>           \r\n    def m(amount, n):                 =>           \r\n        while (amount // n) > 0:      =>           \r\n    x = m(amount, 2)                  =>           \r\n        if n== 0:                     <=           \r\n    def m(n):                         <=           \r\n        while (amount // n) > (n//2): <=           \r\n    x = m(2)                          <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_partitions(n, m):\n        if n== 0:\n            return 1\n        elif n<0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, m//2)\n\n\n    def m(n):\n        while (amount // n) > (n//2):\n            n = 2*n\n        return n\n\n    x = m(2)\n    return count_partitions(amount, x)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_partitions(n, m):\n        if n == 0:\n            return 1\n        elif n<0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, m//2)\n\n\n    def m(amount, n):\n        while (amount // n) > 0:\n            n = 2*n\n        return n\n\n    x = m(amount, 2)\n    return count_partitions(amount, x)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","12","","# Error: expected","#     14","# but got","#     12","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":131,"studentId":0,"date":null,"diff":"\r\nInputObject                           SideIndicator\r\n-----------                           -------------\r\n    elif amount%2==1:                 =>           \r\n        return count_change(amount-1) =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if amount==1:\n        return 1\n    else:\n        return count_change(amount//2) + count_change(amount - 1)\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if amount==1:\n        return 1\n    elif amount%2==1:\n        return count_change(amount-1)\n    else:\n        return count_change(amount//2) + count_change(amount - 1)\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","13","","# Error: expected","#     6","# but got","#     13","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":132,"studentId":0,"date":null,"diff":"\r\nInputObject                               SideIndicator\r\n-----------                               -------------\r\n    def helper(amount, base):             =>           \r\n        if amount <= 0:                   =>           \r\n            a = helper(amount-base, base) =>           \r\n            b = helper(amount, 2*base)    =>           \r\n    def helper(total, base):              <=           \r\n        if total <= 0:                    <=           \r\n            a = helper(total-base, base)  <=           \r\n            b = helper(total, 2*base)     <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper(total, base):\n        if total <= 0:\n            return 0\n        elif base > amount:\n            return 0\n        elif base == amount:\n            return 1\n        else:\n            a = helper(total-base, base)\n            b = helper(total, 2*base)\n        return a + b\n    return helper(amount, 1)\n\n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper(amount, base):\n        if amount <= 0:\n            return 0\n        elif base > amount:\n            return 0\n        elif base == amount:\n            return 1\n        else:\n            a = helper(amount-base, base)\n            b = helper(amount, 2*base)\n        return a + b\n    return helper(amount, 1)\n\n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def helper(total, base):\r\n        if amount<=0:\r\n            return 0\r\n        elif base>amount:\r\n            return 0\r\n        elif base==amount:\r\n            return 1\r\n        else:\r\n            a = helper(total-base, base)\r\n            b = helper(total, 2*base)\r\n        return a+b\r\n    return helper(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":133,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                       SideIndicator\r\n-----------                                                                       -------------\r\n            other_total = other_total + total + count_change_counter(2*x, amount) =>           \r\n            other_total = other_total + total                                     <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_change_counter(x, amount):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif x > amount:\n            return 0\n        else:\n            total = 0\n            other_total = 0\n            total = total + count_change_counter(x, amount-x)\n            other_total = other_total + total\n            return other_total\n    return count_change_counter(1, amount)        \n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_change_counter(x, amount):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif x > amount:\n            return 0\n        else:\n            total = 0\n            other_total = 0\n            total = total + count_change_counter(x, amount-x)\n            other_total = other_total + total + count_change_counter(2*x, amount)\n            return other_total\n    return count_change_counter(1, amount)        \n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_change_counter(x, amount):\r\n        if amount<0:\r\n            return 0\r\n        elif amount==0:\r\n            return 1\r\n        elif x>amount:\r\n            return 0\r\n        else:\r\n            total = 0\r\n            other_total = 0\r\n            total = total+count_change_counter(x, amount-x)\r\n            other_total = other_total+k\r\n            return other_total\r\n    return count_change_counter(1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","1","","# Error: expected","#     6","# but got","#     1","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":134,"studentId":0,"date":null,"diff":"\r\nInputObject                 SideIndicator\r\n-----------                 -------------\r\n        if amount < change: =>           \r\n        if change == 0:     <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_helper(amount, change):\n\n        if amount == 0:\n            return 1\n        if amount < 0:\n            return 0\n        if change == 0:\n            return 0\n\n        first_count_helper = count_helper(amount - change, change)\n        sec_count_helper = count_helper(amount, change*2)\n\n        return first_count_helper + sec_count_helper\n\n\n    return count_helper(amount, 1) \n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_helper(amount, change):\n\n        if amount == 0:\n            return 1\n        if amount < 0:\n            return 0\n        if amount < change:\n            return 0\n\n        first_count_helper = count_helper(amount - change, change)\n        sec_count_helper = count_helper(amount, change*2)\n\n        return first_count_helper + sec_count_helper\n\n\n    return count_helper(amount, 1) \n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_helper(amount, change):\r\n        if amount==0:\r\n            return 1\r\n        if amount<0:\r\n            return 0\r\n        if change==0:\r\n            return 0\r\n        first_count_helper = count_helper(amount-change, change)\r\n        sec_count_helper = count_helper(amount, change*2)\r\n        return first_count_helper+k\r\n    return count_helper(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 350, in count_helper","    sec_count_helper = count_helper(amount, change*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 350, in count_helper","    sec_count_helper = count_helper(amount, change*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 350, in count_helper","    sec_count_helper = count_helper(amount, change*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 350, in count_helper","    sec_count_helper = count_helper(amount, change*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 350, in count_helper","    sec_count_helper = count_helper(amount, change*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 349, in count_helper","    first_count_helper = count_helper(amount - change, change)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 342, in count_helper","    if amount == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":135,"studentId":0,"date":null,"diff":"\r\nInputObject                             SideIndicator\r\n-----------                             -------------\r\n    return helper(amount, maxcoinvalue) =>           \r\n    helper(amount, maxcoinvalue)        <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    def helper(amount, maxcoinvalue):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif maxcoinvalue == 1:\n            return 1\n        else:\n            return helper(amount-maxcoinvalue, maxcoinvalue) + helper(amount, maxcoinvalue//2)\n\n\n    def maxpartitionvalue(amount):\n        k = 2\n        while k < amount:\n            k *= 2\n        return k // 2\n\n\n    maxcoinvalue = maxpartitionvalue(amount)\n    \n    helper(amount, maxcoinvalue)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    def helper(amount, maxcoinvalue):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif maxcoinvalue == 1:\n            return 1\n        else:\n            return helper(amount-maxcoinvalue, maxcoinvalue) + helper(amount, maxcoinvalue//2)\n\n\n    def maxpartitionvalue(amount):\n        k = 2\n        while k < amount:\n            k *= 2\n        return k // 2\n\n\n    maxcoinvalue = maxpartitionvalue(amount)\n    \n    return helper(amount, maxcoinvalue)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","","# Error: expected","#     6","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":136,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n    return calc(1,amount) =>           \r\n                          <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def calc(mini,amount):\n        if amount <0:\n            return 0\n        elif amount ==0:\n            return 1\n        elif mini > amount:\n            return 0\n        else:\n            addmini = calc(mini,amount - mini)\n            submini = calc(2*mini, amount)\n            return addmini + submini\n        return calc(mini, amount)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def calc(mini,amount):\n        if amount <0:\n            return 0\n        elif amount ==0:\n            return 1\n        elif mini > amount:\n            return 0\n        else:\n            addmini = calc(mini,amount - mini)\n            submini = calc(2*mini, amount)\n            return addmini + submini\n        return calc(mini, amount)\n    return calc(1,amount)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def calc(mini, amount):\r\n        if amount<0:\r\n            return 0\r\n        elif amount==0:\r\n            return 1\r\n        elif mini>amount:\r\n            return 0\r\n        else:\r\n            addmini = calc(mini, amount-mini)\r\n            submini = calc(2*mini, amount)\r\n            return addmini+k\r\n        return calc(mini, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","","# Error: expected","#     6","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":137,"studentId":0,"date":null,"diff":"\r\nInputObject                                                 SideIndicator\r\n-----------                                                 -------------\r\n        without_smallest = counter(smallest_coin*2, amount) =>           \r\n        without_smallest = counter(min_coin*2, amount)      <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    return counter(1, amount)\n\ndef counter(smallest_coin, amount):\n    if amount < 0:\n        return 0\n    elif amount == 0:\n        return 1\n    elif smallest_coin > amount:\n        return 0\n    else:\n        with_smallest = counter(smallest_coin, amount - smallest_coin)\n        without_smallest = counter(min_coin*2, amount)\n        return with_smallest + without_smallest\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    return counter(1, amount)\n\ndef counter(smallest_coin, amount):\n    if amount < 0:\n        return 0\n    elif amount == 0:\n        return 1\n    elif smallest_coin > amount:\n        return 0\n    else:\n        with_smallest = counter(smallest_coin, amount - smallest_coin)\n        without_smallest = counter(smallest_coin*2, amount)\n        return with_smallest + without_smallest\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    return counter(1, amount)\r\ndef counter(smallest_coin, amount):\r\n    if amount<0:\r\n        return 0\r\n    elif amount==0:\r\n        return 1\r\n    elif smallest_coin>amount:\r\n        return 0\r\n    else:\r\n        with_smallest = counter(smallest_coin, amount-smallest_coin)\r\n        without_smallest = counter(min_coin*2, amount)\r\n        return with_smallest+k\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 297, in count_change","    return counter(1, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 307, in counter","    with_smallest = counter(smallest_coin, amount - smallest_coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 307, in counter","    with_smallest = counter(smallest_coin, amount - smallest_coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 307, in counter","    with_smallest = counter(smallest_coin, amount - smallest_coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 307, in counter","    with_smallest = counter(smallest_coin, amount - smallest_coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 307, in counter","    with_smallest = counter(smallest_coin, amount - smallest_coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 307, in counter","    with_smallest = counter(smallest_coin, amount - smallest_coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 308, in counter","    without_smallest = counter(min_coin*2, amount)","NameError: name 'min_coin' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":138,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n            y = count_change_helper(a, b*2) =>           \r\n            y = count_change_helper(a, y*2) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_change_helper(a,b):\n        if b>a:\n            return 0\n        elif a==b:\n            return 1\n        elif b==0:\n            return 1\n        else:\n            x = count_change_helper(a-b,b)\n            y = count_change_helper(a, y*2)\n            return x+y\n    return count_change_helper(amount, 1)\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_change_helper(a,b):\n        if b>a:\n            return 0\n        elif a==b:\n            return 1\n        elif b==0:\n            return 1\n        else:\n            x = count_change_helper(a-b,b)\n            y = count_change_helper(a, b*2)\n            return x+y\n    return count_change_helper(amount, 1)\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_change_helper(a, b):\r\n        if b>a:\r\n            return 0\r\n        elif a==b:\r\n            return 1\r\n        elif b==0:\r\n            return 1\r\n        else:\r\n            x = count_change_helper(a-b, b)\r\n            y = count_change_helper(a, y*2)\r\n            return x+k\r\n    return count_change_helper(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 344, in count_change","    return count_change_helper(amount, 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 341, in count_change_helper","    x = count_change_helper(a-b,b)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 341, in count_change_helper","    x = count_change_helper(a-b,b)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 341, in count_change_helper","    x = count_change_helper(a-b,b)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 341, in count_change_helper","    x = count_change_helper(a-b,b)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 341, in count_change_helper","    x = count_change_helper(a-b,b)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 342, in count_change_helper","    y = count_change_helper(a, y*2)","UnboundLocalError: local variable 'y' referenced before assignment","","# Error: expected","#     6","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":139,"studentId":0,"date":null,"diff":"\r\nInputObject                   SideIndicator\r\n-----------                   -------------\r\n        if x == 1 and x == i: =>           \r\n        elif x == 0:          =>           \r\n            return 1          =>           \r\n        elif x < 0:           =>           \r\n        if x == 1:            <=           \r\n        elif x <= 0:          <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i = 1\n    while 2 ** i <= amount:\n        i += 1\n    i = 2 ** (i - 1)\n\n    def process(i, x):\n        if x == 1:\n            return 1\n        elif i == 0:\n            return 0\n        elif x <= 0:\n            return 0\n        else:\n            return process(i, x - i) + process(i // 2, x)\n    return process(i, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i = 1\n    while 2 ** i <= amount:\n        i += 1\n    i = 2 ** (i - 1)\n\n    def process(i, x):\n        if x == 1 and x == i:\n            return 1\n        elif i == 0:\n            return 0\n        elif x == 0:\n            return 1\n        elif x < 0:\n            return 0\n        else:\n            return process(i, x - i) + process(i // 2, x)\n    return process(i, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","10","","# Error: expected","#     14","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":140,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n    return count_parts(amount, at_most)      =>           \r\n    return count_partitions(amount, at_most) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_parts(number, at_most):\n        if number < 0:\n            return 0\n        elif number == 0:\n            return 1\n        elif at_most == 0:\n            return 1\n        else:\n            contains = count_parts(number - pow(2, at_most), at_most)\n            not_contains = count_parts(number, at_most - 1)\n        return contains + not_contains\n    def find_at_most(number):\n        k = 0\n        while pow(2, k) <= number:\n            k+=1\n        return k - 1\n    at_most = find_at_most(amount)\n\n    return count_partitions(amount, at_most)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_parts(number, at_most):\n        if number < 0:\n            return 0\n        elif number == 0:\n            return 1\n        elif at_most == 0:\n            return 1\n        else:\n            contains = count_parts(number - pow(2, at_most), at_most)\n            not_contains = count_parts(number, at_most - 1)\n        return contains + not_contains\n    def find_at_most(number):\n        k = 0\n        while pow(2, k) <= number:\n            k+=1\n        return k - 1\n    at_most = find_at_most(amount)\n\n    return count_parts(amount, at_most)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_parts(number, at_most):\r\n        if number<0:\r\n            return 0\r\n        elif number==0:\r\n            return 1\r\n        elif at_most==0:\r\n            return 1\r\n        else:\r\n            contains = count_parts(number-pow(2, at_most), at_most)\r\n            not_contains = count_parts(number, at_most-1)\r\n        return contains+k\r\n    def find_at_most(number):\r\n        k = 0\r\n        while pow(2, k)<=number:\r\n            k += 1\r\n        return k-1\r\n    at_most = find_at_most(amount)\r\n    return count_partitions(amount, at_most)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in count_change","    return count_partitions(amount, at_most)","NameError: name 'count_partitions' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":141,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                       SideIndicator\r\n-----------                                                                       -------------\r\n        return count_helper(amount-value, value) + count_helper(amount, value//2) =>           \r\n        return count_helper(amount/value, value) + count_helper(amount, value/2)  <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    return count_helper(amount, closest_square(amount))\n\ndef count_helper(amount, value):\n    if amount < 0:\n        return 0\n    elif amount == 0:\n        return 1\n    elif value == 0:\n        return 0\n    else:\n        return count_helper(amount/value, value) + count_helper(amount, value/2)\n\ndef closest_square(value):\n    \"\"\"Return the closest square that is lower than the given value\"\"\"\n    if(value == 0 or value == 1):\n        return value\n    else:\n        num = 2\n        while(value >= num*2):\n            num *= 2\n        return num\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    return count_helper(amount, closest_square(amount))\n\ndef count_helper(amount, value):\n    if amount < 0:\n        return 0\n    elif amount == 0:\n        return 1\n    elif value == 0:\n        return 0\n    else:\n        return count_helper(amount-value, value) + count_helper(amount, value//2)\n\ndef closest_square(value):\n    \"\"\"Return the closest square that is lower than the given value\"\"\"\n    if(value == 0 or value == 1):\n        return value\n    else:\n        num = 2\n        while(value >= num*2):\n            num *= 2\n        return num\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 306, in count_helper","    return count_helper(amount/value, value) + count_helper(amount, value/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 306, in count_helper","    return count_helper(amount/value, value) + count_helper(amount, value/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 306, in count_helper","    return count_helper(amount/value, value) + count_helper(amount, value/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 306, in count_helper","    return count_helper(amount/value, value) + count_helper(amount, value/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 306, in count_helper","    return count_helper(amount/value, value) + count_helper(amount, value/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 306, in count_helper","    return count_helper(amount/value, value) + count_helper(amount, value/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 299, in count_helper","    if amount < 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":142,"studentId":0,"date":null,"diff":"\r\nInputObject                            SideIndicator\r\n-----------                            -------------\r\n    return count_partitions(amount, 1) =>           \r\n    count_partitions(amount, 1)        <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    def count_partitions(amount, m):  \n        if amount == 0:\n            return 1   \n        if amount < 0:\n            return 0\n        if m > amount:\n            return 0   \n        else:\n            return count_partitions(amount-m, m) + count_partitions(amount, 2 * m)\n    count_partitions(amount, 1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    def count_partitions(amount, m):  \n        if amount == 0:\n            return 1   \n        if amount < 0:\n            return 0\n        if m > amount:\n            return 0   \n        else:\n            return count_partitions(amount-m, m) + count_partitions(amount, 2 * m)\n    return count_partitions(amount, 1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_partitions(amount, m):\r\n        if amount==0:\r\n            return 1\r\n        if amount<0:\r\n            return 0\r\n        if m>amount:\r\n            return 0\r\n        else:\r\n            return count_partitions(amount-m, m)+count_partitions(amount, 2*m)\r\n    count_partitions(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","","# Error: expected","#     6","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":143,"studentId":0,"date":null,"diff":"\r\nInputObject                                                         SideIndicator\r\n-----------                                                         -------------\r\n    def order(k, count):                                            =>           \r\n        if count == n:                                              =>           \r\n            return k                                                =>           \r\n        elif k % 7 == 0 or has_seven(k):                            =>           \r\n            return switch(k)                                        =>           \r\n        elif k - 1 == k:                                            =>           \r\n            return order(k+1, count+1)                              =>           \r\n            return order(k-1, count+1)                              =>           \r\n            return order(k+1, count+1)                              =>           \r\n        elif k + 1 == k:                                            =>           \r\n            return order(k-1, count+1)                              =>           \r\n    return order(1, 1)                                              =>           \r\n        if final == 0:                                              =>           \r\n        elif final < 0:                                             =>           \r\n            return 0                                                =>           \r\n        elif m == 0:                                                =>           \r\n            return count_help(final-m, m) + count_help(final, m//2) =>           \r\n    m = 0                                                           =>           \r\n    while m <= amount:                                              =>           \r\n        if pow(2, m) > amount:                                      =>           \r\n            count = pow(2, m - 1)                                   =>           \r\n        m += 1                                                      =>           \r\n    return count_help(amount, count)                                =>           \r\n                                                                    =>           \r\n    def up(k, count):                                               <=           \r\n        while k <= n:                                               <=           \r\n            if count == n:                                          <=           \r\n                return k                                            <=           \r\n            if k % 7 == 0 or has_seven(k):                          <=           \r\n                return switch(k)                                    <=           \r\n    def down(k, count):                                             <=           \r\n        while k <= n:                                               <=           \r\n            if count == n:                                          <=           \r\n                return k                                            <=           \r\n            if k % 7 == 0 or has_seven(k):                          <=           \r\n                return switch(k)                                    <=           \r\n            return up(k+1, count+1)                                 <=           \r\n            return down(k-1, count+1)                               <=           \r\n    return up(1, count)                                             <=           \r\n        if final == 1:                                              <=           \r\n        elif final < 1:                                             <=           \r\n        elif m == 1:                                                <=           \r\n            return 1                                                <=           \r\n            return count_help(final-m, m) + count_help(final, m-1)  <=           \r\n    while m <= final:                                               <=           \r\n        if pow(2, m-1) % 2 == 0:                                    <=           \r\n            return final                                            <=           \r\n            m -= 1                                                  <=           \r\n    return count_help(final, m)                                     <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_help(final, m):\n        if final == 1:\n            return 1\n        elif final < 1:\n            return 0\n        elif m == 1:\n            return 1\n        else:\n            return count_help(final-m, m) + count_help(final, m-1)\n    while m <= final:\n        if pow(2, m-1) % 2 == 0:\n            return final\n            m -= 1\n    return count_help(final, m)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_help(final, m):\n        if final == 0:\n            return 1\n        elif final < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_help(final-m, m) + count_help(final, m//2)\n    m = 0\n    while m <= amount:\n        if pow(2, m) > amount:\n            count = pow(2, m - 1)\n        m += 1\n    return count_help(amount, count)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 325, in count_change","    while m <= final:","UnboundLocalError: local variable 'm' referenced before assignment","","# Error: expected","#     6","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":144,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                SideIndicator\r\n-----------                                                                -------------\r\n    def count_partitions(n, m):                                            =>           \r\n        if n == 0:                                                         =>           \r\n            return 1                                                       =>           \r\n        elif n < 0:                                                        =>           \r\n            return 0                                                       =>           \r\n        elif m > n:                                                        =>           \r\n            return 0                                                       =>           \r\n        else:                                                              =>           \r\n            return count_partitions(n - m, m) + count_partitions(n, m * 2) =>           \r\n    return count_partitions(amount, 1)                                     =>           \r\n                                                                           =>           \r\n    coinList=[1]                                                           <=           \r\n    x=2                                                                    <=           \r\n    ways=[0]*(amount+1)                                                    <=           \r\n    ways[0]=1                                                              <=           \r\n    while x<=amount:                                                       <=           \r\n        coinList=coinList+[x]                                              <=           \r\n        x=pow(x,2)                                                         <=           \r\n    for coin in coinList:                                                  <=           \r\n        for y in range(coin,amount+1):                                     <=           \r\n            ways[y]+=ways[y-coin]                                          <=           \r\n    return ways[amount]                                                    <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    coinList=[1]\n    x=2\n    ways=[0]*(amount+1)\n    ways[0]=1\n    while x<=amount:\n        coinList=coinList+[x]\n        x=pow(x,2)\n    for coin in coinList:\n        for y in range(coin,amount+1):\n            ways[y]+=ways[y-coin]\n    return ways[amount]\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_partitions(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m > n:\n            return 0\n        else:\n            return count_partitions(n - m, m) + count_partitions(n, m * 2)\n    return count_partitions(amount, 1)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    amount = [1]\r\n    x = 2\r\n    ways = [0]*(amount+1)\r\n    ways[0] = 1\r\n    while x<=amount:\r\n        coinList = coinList+[x]\r\n        x = pow(x, 2)\r\n    for coin in coinList:\r\n        for y in range(coin, amount+1):\r\n            ways[y] += ways[y-coin]\r\n    return ways[amount]\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","12","","# Error: expected","#     14","# but got","#     12","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":145,"studentId":0,"date":null,"diff":"\r\nInputObject                          SideIndicator\r\n-----------                          -------------\r\n        if amount < 0:               =>           \r\n        elif x>amount:               =>           \r\n            return 0                 =>           \r\n        if amount < 0 or x > amount: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper(x, amount):\n        if amount < 0 or x > amount:\n            return 0\n        elif amount == 0:\n            return 1\n        else:\n            s = helper(x, amount -x)\n            t = helper(2*x, amount)\n            return s+t\n    return helper(1, amount)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper(x, amount):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif x>amount:\n            return 0\n        else:\n            s = helper(x, amount -x)\n            t = helper(2*x, amount)\n            return s+t\n    return helper(1, amount)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def helper(x, amount):\r\n        if amount<0 or x>amount:\r\n            return 0\r\n        elif amount==0:\r\n            return 1\r\n        else:\r\n            s = helper(x, amount-x)\r\n            t = helper(2*x, amount)\r\n            return s+k\r\n    return helper(1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":146,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                  SideIndicator\r\n-----------                                                                  -------------\r\n    def helper(amount, power):                                               =>           \r\n        elif power < 0:                                                      =>           \r\n        else:                                                                =>           \r\n            bigcoin = 2**power                                               =>           \r\n            nextbigcoin = 2**(power-1)                                       =>           \r\n            return helper(amount - bigcoin, power) + helper(amount, power-1) =>           \r\n    return helper(amount, maxpower(amount))                                  =>           \r\ndef maxpower(amount):                                                        =>           \r\n    return maxpower                                                          =>           \r\n    def helper(amount, bigcoin):                                             <=           \r\n        elif bigcoin == 0:                                                   <=           \r\n        else:                                                                <=           \r\n            nextbigcoin = maxcoin(bigcoin-1)                                 <=           \r\n            return helper(amount - bigcoin, nextbigcoin)                     <=           \r\n    return helper(amount, maxcoin(amount))                                   <=           \r\ndef maxcoin(amount):                                                         <=           \r\n    return 2**maxpower                                                       <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper(amount, bigcoin):\n        if amount < 0: \n            return 0\n        elif amount == 0:\n            return 1\n        elif bigcoin == 0:\n            return 0\n        else:            \n            nextbigcoin = maxcoin(bigcoin-1)\n            return helper(amount - bigcoin, nextbigcoin)\n    return helper(amount, maxcoin(amount))\n    \n\ndef maxcoin(amount):\n    maxpower = 0 # starts at 2^0\n    total = 1 # starts at 1 at the minumum \n\n    while total <= amount:\n        maxpower += 1\n        total  = 2**maxpower\n    maxpower = maxpower - 1\n    return 2**maxpower\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper(amount, power):\n        if amount < 0: \n            return 0\n        elif amount == 0:\n            return 1\n        elif power < 0:\n            return 0\n        else:  \n            bigcoin = 2**power         \n            nextbigcoin = 2**(power-1)\n            return helper(amount - bigcoin, power) + helper(amount, power-1)\n    return helper(amount, maxpower(amount))\n    \n\ndef maxpower(amount):\n    maxpower = 0 # starts at 2^0\n    total = 1 # starts at 1 at the minumum \n\n    while total <= amount:\n        maxpower += 1\n        total  = 2**maxpower\n    maxpower = maxpower - 1\n    return maxpower\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def helper(amount, bigcoin):\r\n        if amount<0:\r\n            return 0\r\n        elif amount==0:\r\n            return 1\r\n        elif bigcoin==0:\r\n            return 0\r\n        else:\r\n            nextbigcoin = maxcoin(bigcoin-1)\r\n            return helper(amount-bigcoin, nextbigcoin)\r\n    return helper(amount, maxcoin(amount))\r\ndef maxcoin(amount):\r\n    maxpower = 0\r\n    total = 1\r\n    while total<=amount:\r\n        maxpower += 1\r\n        total = 2**maxpower\r\n    maxpower = maxpower-1\r\n    return 2**maxpower\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","1","","# Error: expected","#     6","# but got","#     1","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":147,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                         SideIndicator\r\n-----------                                                                         -------------\r\n    def helper(target, coin):                                                       =>           \r\n        if target == 0 or target == 1 or coin == 1:                                 =>           \r\n            return 1                                                                =>           \r\n        if target < 1:                                                              =>           \r\n            return 0                                                                =>           \r\n        return helper(target, coin / 2) + helper(target - coin, coin)               =>           \r\n    max_coin = 2**(floor(log(amount)/log(2)))                                       =>           \r\n    return helper(amount, max_coin)                                                 =>           \r\n    if amount == 1:                                                                 <=           \r\n        return 1                                                                    <=           \r\n    # highest = (floor(log(amount)/log(2)))**2                                      <=           \r\n    return (floor(log(amount)/log(2)))**2 + count_change(floor(log(amount)/log(2))) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    from math import log, floor\n\n    if amount == 1:\n        return 1\n\n    # highest = (floor(log(amount)/log(2)))**2\n    return (floor(log(amount)/log(2)))**2 + count_change(floor(log(amount)/log(2)))\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    from math import log, floor\n\n    def helper(target, coin):\n        if target == 0 or target == 1 or coin == 1:\n            return 1\n        if target < 1:\n            return 0\n        return helper(target, coin / 2) + helper(target - coin, coin)\n\n    max_coin = 2**(floor(log(amount)/log(2)))\n    return helper(amount, max_coin)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    if amount==1:\r\n        return 1\r\n    return (floor(log(amount)/log(2)))**2+count_change(floor(log(amount)/log(2)))\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","11","","# Error: expected","#     14","# but got","#     11","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":148,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        elif amount <0: =>           \r\n        elif factor <0: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def i_finder(amount):\n        i=0\n        while pow(2,i)<amount:\n            i+=1\n        return i-1\n    factor = i_finder(amount)\n    def helper(amount, factor):\n        if factor == 0:\n            return 1\n        elif factor <0:\n            return 0\n        else:\n            return helper(amount - pow(2,factor), factor) + helper(amount, factor-1)\n    return helper(amount, factor)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def i_finder(amount):\n        i=0\n        while pow(2,i)<amount:\n            i+=1\n        return i-1\n    factor = i_finder(amount)\n    def helper(amount, factor):\n        if factor == 0:\n            return 1\n        elif amount <0:\n            return 0\n        else:\n            return helper(amount - pow(2,factor), factor) + helper(amount, factor-1)\n    return helper(amount, factor)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def i_finder(amount):\r\n        amount = 0\r\n        while pow(2, i)<amount:\r\n            i += 1\r\n        return i-1\r\n    factor = i_finder(amount)\r\n    def helper(amount, factor):\r\n        if factor==0:\r\n            return 1\r\n        elif factor<0:\r\n            return 0\r\n        else:\r\n            return helper(amount-pow(2, factor), factor)+helper(amount, factor-1)\r\n    return helper(amount, factor)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 340, in helper","    return helper(amount - pow(2,factor), factor) + helper(amount, factor-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 340, in helper","    return helper(amount - pow(2,factor), factor) + helper(amount, factor-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 340, in helper","    return helper(amount - pow(2,factor), factor) + helper(amount, factor-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 340, in helper","    return helper(amount - pow(2,factor), factor) + helper(amount, factor-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 340, in helper","    return helper(amount - pow(2,factor), factor) + helper(amount, factor-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 340, in helper","    return helper(amount - pow(2,factor), factor) + helper(amount, factor-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 335, in helper","    if factor == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":149,"studentId":0,"date":null,"diff":"\r\nInputObject                                                     SideIndicator\r\n-----------                                                     -------------\r\n    if amount == 0:                                             =>           \r\n    elif amount % 2 == 1:                                       =>           \r\n        return count_change(amount - 1)                         =>           \r\n        return count_change(amount-1) + count_change(amount//2) =>           \r\n    if amount == 0 or amount == 1:                              <=           \r\n        k = amount//2                                           <=           \r\n        return count_change(amount - k) +  count_change(k)      <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if amount == 0 or amount == 1:\n        return 1\n    else:\n        k = amount//2\n        return count_change(amount - k) +  count_change(k)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if amount == 0:\n        return 1\n    elif amount % 2 == 1:\n        return count_change(amount - 1)\n    else:\n        return count_change(amount-1) + count_change(amount//2)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","7","","# Error: expected","#     6","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":150,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n            return 1      =>           \r\n            return amount <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    n=0\n    while 2**n<=amount:\n    \tn=n+1\n    max_coin=2**(n-1)\n    def count(amount,most_worth_coin):\n    \tif most_worth_coin==1:\n    \t\treturn amount\n    \telif amount<most_worth_coin:\n    \t\treturn count(amount,most_worth_coin//2)\n    \telse:\n    \t\tsum=0\n    \t\tfor i in range(0,amount//most_worth_coin+1):\n    \t\t\tsum=sum+count(amount-i*most_worth_coin,most_worth_coin//2)\n    \t\treturn sum\n    return count(amount,max_coin)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    n=0\n    while 2**n<=amount:\n    \tn=n+1\n    max_coin=2**(n-1)\n    def count(amount,most_worth_coin):\n    \tif most_worth_coin==1:\n    \t\treturn 1\n    \telif amount<most_worth_coin:\n    \t\treturn count(amount,most_worth_coin//2)\n    \telse:\n    \t\tsum=0\n    \t\tfor i in range(0,amount//most_worth_coin+1):\n    \t\t\tsum=sum+count(amount-i*most_worth_coin,most_worth_coin//2)\n    \t\treturn sum\n    return count(amount,max_coin)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","20","","# Error: expected","#     6","# but got","#     20","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":151,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n    >>> count_change(6) <=           \r\n    5                   <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n    >>> count_change(1)\n    1\n    >>> count_change(2)\n    2\n    >>> count_change(3)\n    2\n    >>> count_change(4)\n    4\n    >>> count_change(5)\n    4\n    >>> count_change(6)\n    5\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    power_cap = 0\n    while pow(2, power_cap) <= amount:\n        power_cap += 1\n    power_cap -= 1\n\n    def counter(amt, power):\n        coin = pow(2, power)\n        if amt == 0:\n            return 1\n        elif amt < 0:\n            return 0\n        elif power == 0:\n            return 1\n        else:\n            return counter(amt - coin, power) + counter(amt, power - 1)\n    \n    return counter(amount, power_cap)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n    >>> count_change(1)\n    1\n    >>> count_change(2)\n    2\n    >>> count_change(3)\n    2\n    >>> count_change(4)\n    4\n    >>> count_change(5)\n    4\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    power_cap = 0\n    while pow(2, power_cap) <= amount:\n        power_cap += 1\n    power_cap -= 1\n\n    def counter(amt, power):\n        coin = pow(2, power)\n        if amt == 0:\n            return 1\n        elif amt < 0:\n            return 0\n        elif power == 0:\n            return 1\n        else:\n            return counter(amt - coin, power) + counter(amt, power - 1)\n    \n    return counter(amount, power_cap)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    power_cap = 0\r\n    while pow(2, power_cap)<=amount:\r\n        power_cap += 1\r\n    power_cap -= 1\r\n    def counter(amt, power):\r\n        coin = pow(2, power)\r\n        if amt==0:\r\n            return 1\r\n        elif amt<0:\r\n            return 0\r\n        elif power==0:\r\n            return 1\r\n        elif m>n:\r\n            return 0\r\n        else:\r\n            return counter(amt-coin, power)+counter(amt, power-1)\r\n    return counter(amount, power_cap)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-GreaterThan, Children(LeafConstNode(NameExpressionNode-m), SingleChild(LeafConstNode(NameExpressionNode-n)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(ConstantExpressionNode-0)))))))), 3), Selected(\\x => Match(x, StartsWithTarget(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"BinaryExpressionNode\")))))))))))))))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(1)","1",">>> count_change(2)","2",">>> count_change(3)","2",">>> count_change(4)","4",">>> count_change(5)","4",">>> count_change(6)","6","","# Error: expected","#     5","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":152,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        elif m < 1:  =>           \r\n        elif m == 0: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def power_2(a):\n        i=2\n        while 2*i < a:\n            i = square(i)\n        return i\n    m = power_2(amount)\n    def count_part(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            with_m, without_m = count_part(n-m, m), count_part(n, m/2)\n            return with_m + without_m\n    return count_part(amount, m)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def power_2(a):\n        i=2\n        while 2*i < a:\n            i = square(i)\n        return i\n    m = power_2(amount)\n    def count_part(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m < 1:\n            return 0\n        else:\n            with_m, without_m = count_part(n-m, m), count_part(n, m/2)\n            return with_m + without_m\n    return count_part(amount, m)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def power_2(a):\r\n        i = 2\r\n        while 2*i<a:\r\n            i = square(i)\r\n        return i\r\n    m = power_2(amount)\r\n    def count_part(n, m):\r\n        if n==0:\r\n            return 1\r\n        elif n<0:\r\n            return 0\r\n        elif m==0:\r\n            return 0\r\n        else:\r\n            with_m, without_m = count_part(n-m, m), count_part(n, m/2)\r\n            return with_m+k\r\n    return count_part(amount, m)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in count_part","    with_m, without_m = count_part(n-m, m), count_part(n, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in count_part","    with_m, without_m = count_part(n-m, m), count_part(n, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in count_part","    with_m, without_m = count_part(n-m, m), count_part(n, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in count_part","    with_m, without_m = count_part(n-m, m), count_part(n, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in count_part","    with_m, without_m = count_part(n-m, m), count_part(n, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in count_part","    with_m, without_m = count_part(n-m, m), count_part(n, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 308, in count_part","    if n == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":153,"studentId":0,"date":null,"diff":"\r\nInputObject                                                         SideIndicator\r\n-----------                                                         -------------\r\n            not_including = change_partitions(number, at_most - 1)  =>           \r\n            not_cincluding = change_partitions(number, at_most - 1) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def change_partitions(number, at_most):\n        if number < 0:\n            return 0\n        elif number == 0:\n            return 1\n        elif at_most == 0:\n            return 1\n        else:\n            including = change_partitions(number - pow(2, at_most), at_most)\n            not_cincluding = change_partitions(number, at_most - 1)\n            return including + not_including\n\n    def find_at_most(number):\n        k = 0\n        while pow(2, k) <= number:\n            k+= 1\n        return k - 1\n\n    at_most = find_at_most(amount)\n\n    return change_partitions(amount, at_most)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def change_partitions(number, at_most):\n        if number < 0:\n            return 0\n        elif number == 0:\n            return 1\n        elif at_most == 0:\n            return 1\n        else:\n            including = change_partitions(number - pow(2, at_most), at_most)\n            not_including = change_partitions(number, at_most - 1)\n            return including + not_including\n\n    def find_at_most(number):\n        k = 0\n        while pow(2, k) <= number:\n            k+= 1\n        return k - 1\n\n    at_most = find_at_most(amount)\n\n    return change_partitions(amount, at_most)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def change_partitions(number, at_most):\r\n        if number<0:\r\n            return 0\r\n        elif number==0:\r\n            return 1\r\n        elif at_most==0:\r\n            return 1\r\n        else:\r\n            including = change_partitions(number-pow(2, at_most), at_most)\r\n            not_cincluding = change_partitions(number, at_most-1)\r\n            return including+k\r\n    def find_at_most(number):\r\n        k = 0\r\n        while pow(2, k)<=number:\r\n            k += 1\r\n        return k-1\r\n    at_most = find_at_most(amount)\r\n    return change_partitions(amount, at_most)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 328, in count_change","    return change_partitions(amount, at_most)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 316, in change_partitions","    including = change_partitions(number - pow(2, at_most), at_most)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 317, in change_partitions","    not_cincluding = change_partitions(number, at_most - 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 316, in change_partitions","    including = change_partitions(number - pow(2, at_most), at_most)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 318, in change_partitions","    return including + not_including","NameError: name 'not_including' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":154,"studentId":0,"date":null,"diff":"\r\nInputObject                  SideIndicator\r\n-----------                  -------------\r\n        elif(coin > amount): =>           \r\n        elif(n > amount):    <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def num_ways(amount, coin):\n        if(amount < 0):\n            return 0\n        elif(amount == 0):\n            return 1\n        elif(n > amount):\n            return 0\n        else:\n            return num_ways(amount - coin , coin) + num_ways(amount, coin * 2)\n\n    return num_ways(amount, 1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def num_ways(amount, coin):\n        if(amount < 0):\n            return 0\n        elif(amount == 0):\n            return 1\n        elif(coin > amount):\n            return 0\n        else:\n            return num_ways(amount - coin , coin) + num_ways(amount, coin * 2)\n\n    return num_ways(amount, 1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def num_ways(amount, coin):\r\n        if (amount<0):\r\n            return 0\r\n        elif (amount==0):\r\n            return 1\r\n        elif (n>amount):\r\n            return 0\r\n        else:\r\n            return num_ways(amount-coin, coin)+num_ways(amount, coin*2)\r\n    return num_ways(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 320, in count_change","    return num_ways(amount, 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in num_ways","    elif(n > amount):","NameError: name 'n' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":155,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n    coin = 1                                 =>           \r\n    while coin <= amount:                    =>           \r\n        coin *= 2                            =>           \r\n    return counter_helper(amount, coin // 2) =>           \r\n                                             =>           \r\n    return counter_helper(amount, 16)        <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def counter_helper(amount, coin):\n        if amount == 0:\n            return 1\n        elif amount < 0 or coin == 0:\n            return 0\n        return counter_helper(amount-coin, coin) + counter_helper(amount, coin // 2)\n    return counter_helper(amount, 16)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    coin = 1\n    while coin <= amount:\n        coin *= 2\n\n    def counter_helper(amount, coin):\n        if amount == 0:\n            return 1\n        elif amount < 0 or coin == 0:\n            return 0\n        return counter_helper(amount-coin, coin) + counter_helper(amount, coin // 2)\n    return counter_helper(amount, coin // 2)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","14",">>> count_change(20)","60",">>> count_change(100)","7280","","# Error: expected","#     9828","# but got","#     7280","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":156,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                     SideIndicator\r\n-----------                                                                                     -------------\r\ndef accumulate(combiner, base, n, term):                                                        =>           \r\n    def implement(combiner, base, n, term, pred = None):                                        =>           \r\n        return reduce(combiner, filter_list(n, pred, map_list(n, term, range(1, n + 1))), base) =>           \r\n    def implement(amount, lim):                                                                 =>           \r\n        if amount < 0:                                                                          =>           \r\n            return 0                                                                            =>           \r\n        elif amount == 0:                                                                       =>           \r\n            return 1                                                                            =>           \r\n        elif lim > amount:                                                                      =>           \r\n            return 0                                                                            =>           \r\n        else:                                                                                   =>           \r\n            return implement(amount - lim, lim) + implement(amount, lim * 2)                    =>           \r\n    return implement(amount, 1)                                                                 =>           \r\n                                                                                                =>           \r\ndef accumulate(combiner, base, n, term, pred = None):                                           <=           \r\n    return reduce(combiner, filter_list(n, pred, map_list(n, term, range(1, n + 1))), base)     <=           \r\n    if amount < 0:                                                                              <=           \r\n        return 0                                                                                <=           \r\n    elif amount == 1:                                                                           <=           \r\n        return 1                                                                                <=           \r\n    else:                                                                                       <=           \r\n        return count_change(amount - 1) + count_change(amount - 2)                              <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    if amount < 0:\n        return 0\n    elif amount == 1:\n        return 1\n    else:\n        return count_change(amount - 1) + count_change(amount - 2)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def implement(amount, lim):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif lim > amount:\n            return 0\n        else:\n            return implement(amount - lim, lim) + implement(amount, lim * 2)\n\n    return implement(amount, 1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    if amount<0:\r\n        return 0\r\n    elif amount==1:\r\n        return 1\r\n    else:\r\n        return count_change(amount-1)+count_change(amount-2)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","13","","# Error: expected","#     6","# but got","#     13","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":157,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                               SideIndicator\r\n-----------                                                                                               -------------\r\n            return next_count_partition(n-m, close_power(m)) + next_count_partition(n, close_power(m//2)) =>           \r\n            return next_count_partition(n-m, close_power(m)) + next_count_partition(n, m-1)               <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def close_power(num):\n        k, power = 1, 0\n        if num == 1:\n            return 1 \n        else:    \n            while 2**k <= num:\n                power = 2**k\n                k += 1\n            return power\n\n    def next_count_partition(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return next_count_partition(n-m, close_power(m)) + next_count_partition(n, m-1)\n                        \n    return next_count_partition(amount, close_power(amount))    \n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def close_power(num):\n        k, power = 1, 0\n        if num == 1:\n            return 1 \n        else:    \n            while 2**k <= num:\n                power = 2**k\n                k += 1\n            return power\n\n    def next_count_partition(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return next_count_partition(n-m, close_power(m)) + next_count_partition(n, close_power(m//2))\n                        \n    return next_count_partition(amount, close_power(amount))    \n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def close_power(num):\r\n        amount, power = 1, 0\r\n        if num==1:\r\n            return 1\r\n        else:\r\n            while 2**k<=num:\r\n                power = 2**k\r\n                k += 1\r\n            return power\r\n    def next_count_partition(n, m):\r\n        if n==0:\r\n            return 1\r\n        elif n<0:\r\n            return 0\r\n        elif m==0:\r\n            return 0\r\n        else:\r\n            return next_count_partition(n-m, close_power(m))+next_count_partition(n, m-1)\r\n    return next_count_partition(amount, close_power(amount))\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","10","","# Error: expected","#     6","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":158,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n        while z < amount: =>           \r\n        while y < amount: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def max_power(amount):\n        z = 1\n        while y < amount:\n            z = z*2\n        return z//2\n\n    def count_partitions(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, m//2)\n    return count_partitions(amount, max_power(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def max_power(amount):\n        z = 1\n        while z < amount:\n            z = z*2\n        return z//2\n\n    def count_partitions(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, m//2)\n    return count_partitions(amount, max_power(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 338, in count_change","    return count_partitions(amount, max_power(amount))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 325, in max_power","    while y < amount:","NameError: name 'y' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":159,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n        got_coins = makin_change(coins, amount-coins) =>           \r\n        got_coins = makin_change(coins, amount)       <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    return makin_change(1, amount)\n\ndef makin_change(coins, amount):\n    if amount < 0:\n        return 0\n    if amount == 0:\n        return 1\n    if coins > amount:\n        return 0\n    else:\n        got_coins = makin_change(coins, amount)\n        zero_coins = makin_change(2 * coins, amount)\n    return got_coins + zero_coins\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    return makin_change(1, amount)\n\ndef makin_change(coins, amount):\n    if amount < 0:\n        return 0\n    if amount == 0:\n        return 1\n    if coins > amount:\n        return 0\n    else:\n        got_coins = makin_change(coins, amount-coins)\n        zero_coins = makin_change(2 * coins, amount)\n    return got_coins + zero_coins\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    return makin_change(1, amount)\r\ndef makin_change(coins, amount):\r\n    if amount<0:\r\n        return 0\r\n    if amount==0:\r\n        return 1\r\n    if coins>amount:\r\n        return 0\r\n    else:\r\n        got_coins = makin_change(coins, amount)\r\n        zero_coins = makin_change(2*coins, amount)\r\n    return got_coins+k\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in makin_change","    got_coins = makin_change(coins, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in makin_change","    got_coins = makin_change(coins, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in makin_change","    got_coins = makin_change(coins, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in makin_change","    got_coins = makin_change(coins, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in makin_change","    got_coins = makin_change(coins, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in makin_change","    got_coins = makin_change(coins, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 308, in makin_change","    if amount < 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":160,"studentId":0,"date":null,"diff":"\r\nInputObject                       SideIndicator\r\n-----------                       -------------\r\n    def partition(amount, power): =>           \r\n    def part(amount, power):      <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def part(amount, power):\n        if amount == 0:\n            return 1\n        if 2**power > amount:\n            return 0\n        return partition(amount - 2**power, power) + partition(amount, power+1)\n\n    if amount == 0:\n        return 0\n    return partition(amount, 0)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def partition(amount, power):\n        if amount == 0:\n            return 1\n        if 2**power > amount:\n            return 0\n        return partition(amount - 2**power, power) + partition(amount, power+1)\n\n    if amount == 0:\n        return 0\n    return partition(amount, 0)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def part(amount, power):\r\n        if amount==0:\r\n            return 1\r\n        if 2**power>amount:\r\n            return 0\r\n        return partition(amount-2**power, power)+partition(amount, power+1)\r\n    if amount==0:\r\n        return 0\r\n    return partition(amount, 0)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 380, in count_change","    return partition(amount, 0)","NameError: name 'partition' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":161,"studentId":0,"date":null,"diff":"\r\nInputObject                                                     SideIndicator\r\n-----------                                                     -------------\r\n    return count_using(1, amount)                               =>           \r\ndef count_using(min_coin, amount):                              =>           \r\n    if amount < 0:                                              =>           \r\n        return 0                                                =>           \r\n    elif amount == 0:                                           =>           \r\n        return 1                                                =>           \r\n    elif min_coin > amount:                                     =>           \r\n        return 0                                                =>           \r\n    else:                                                       =>           \r\n        with_min = count_using(min_coin, amount - min_coin)     =>           \r\n        without_min = count_using(2*min_coin, amount)           =>           \r\n        return with_min + without_min                           =>           \r\n    def count_using(min_coin, amount):                          <=           \r\n        if amount < 0:                                          <=           \r\n            return 0                                            <=           \r\n        elif amount == 0:                                       <=           \r\n            return 1                                            <=           \r\n        elif min_coin > amount:                                 <=           \r\n            return 0                                            <=           \r\n        else:                                                   <=           \r\n            with_min = count_using(min_coin, amount - min_coin) <=           \r\n            without_min = count_using(2**min_coin, amount)      <=           \r\n            return with_min + without_min                       <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_using(min_coin, amount):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif min_coin > amount:\n            return 0\n        else:\n            with_min = count_using(min_coin, amount - min_coin)\n            without_min = count_using(2**min_coin, amount)\n            return with_min + without_min\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    return count_using(1, amount)\ndef count_using(min_coin, amount):\n    if amount < 0:\n        return 0\n    elif amount == 0:\n        return 1\n    elif min_coin > amount:\n        return 0\n    else:\n        with_min = count_using(min_coin, amount - min_coin)\n        without_min = count_using(2*min_coin, amount)\n        return with_min + without_min\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_using(min_coin, amount):\r\n        if amount<0:\r\n            return 0\r\n        elif amount==0:\r\n            return 1\r\n        elif min_coin>amount:\r\n            return 0\r\n        else:\r\n            with_min = count_using(min_coin, amount-min_coin)\r\n            without_min = count_using(2**min_coin, amount)\r\n            return with_min+k\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","","# Error: expected","#     6","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":162,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n            return 1 =>           \r\n        elif m == 1: =>           \r\n            return 1 =>           \r\n            return 0 <=           \r\n        elif m == 0: <=           \r\n            return 0 <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    z = 1\n    while z<amount:\n        z *= 2\n    def change_count(amount,m):\n        if amount == 1:\n            return 0\n        elif amount < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return change_count(amount,m//2) + change_count(amount-m,m)\n    return change_count(amount,z)\n\n    def count_partitions(n, m):\n        \"\"\"Count the ways to partition n using parts up to m.\"\"\"\n    if n == 0:\n        return 1\n    elif n < 0:\n        return 0\n    elif m == 0:\n        return 0\n    else:\n        return count_partitions(n-m, m) + count_partitions(n, m-1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    z = 1\n    while z<amount:\n        z *= 2\n    def change_count(amount,m):\n        if amount == 1:\n            return 1\n        elif amount < 0:\n            return 0\n        elif m == 1:\n            return 1\n        else:\n            return change_count(amount,m//2) + change_count(amount-m,m)\n    return change_count(amount,z)\n\n    def count_partitions(n, m):\n        \"\"\"Count the ways to partition n using parts up to m.\"\"\"\n    if n == 0:\n        return 1\n    elif n < 0:\n        return 0\n    elif m == 0:\n        return 0\n    else:\n        return count_partitions(n-m, m) + count_partitions(n, m-1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":163,"studentId":0,"date":null,"diff":"\r\nInputObject                  SideIndicator\r\n-----------                  -------------\r\n            return 1         =>           \r\n                             =>           \r\n                             =>           \r\n            return 0         <=           \r\n    \"*** YOUR CODE HERE ***\" <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \n    def count_partitions(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_partitions(n-pow(2, m), m) + count_partitions(n, m-1)\n    def find_m(number):\n        count = 0\n        while pow(2, count) <= number:\n            count += 1\n        return count -1\n    m = find_m(amount)\n    return count_partitions(amount, m)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \n    def count_partitions(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 1\n        else:\n            return count_partitions(n-pow(2, m), m) + count_partitions(n, m-1)\n    def find_m(number):\n        count = 0\n        while pow(2, count) <= number:\n            count += 1\n        return count -1\n    m = find_m(amount)\n    return count_partitions(amount, m)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_partitions(n, m):\r\n        if amount==0:\r\n            return 1\r\n        elif n<0:\r\n            return 0\r\n        elif m==0:\r\n            return 0\r\n        else:\r\n            return count_partitions(n-pow(2, m), m)+count_partitions(n, m-1)\r\n    def find_m(number):\r\n        count = 0\r\n        while pow(2, count)<=number:\r\n            count += 1\r\n        return count-1\r\n    m = find_m(amount)\r\n    return count_partitions(amount, m)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":164,"studentId":0,"date":null,"diff":"\r\nInputObject                      SideIndicator\r\n-----------                      -------------\r\n        if amount == c:          =>           \r\n        elif amount < c:         =>           \r\n        elif amount <=0:         =>           \r\n        if amount == 0:          <=           \r\n        elif amount < 0:         <=           \r\n        elif amount >=0 and c<0: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def cent(c, amount):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif amount >=0 and c<0:\n            return 0\n        else:\n            with_cent = cent(c, amount-c)\n            without_cent =cent(c*2, amount)\n            return with_cent + without_cent\n    return cent(1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def cent(c, amount):\n        if amount == c:\n            return 1\n        elif amount < c:\n            return 0\n        elif amount <=0:\n            return 0\n        else:\n            with_cent = cent(c, amount-c)\n            without_cent =cent(c*2, amount)\n            return with_cent + without_cent\n    return cent(1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 350, in cent","    without_cent =cent(c*2, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 350, in cent","    without_cent =cent(c*2, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 350, in cent","    without_cent =cent(c*2, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 350, in cent","    without_cent =cent(c*2, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 350, in cent","    without_cent =cent(c*2, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 349, in cent","    with_cent = cent(c, amount-c)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 342, in cent","    if amount == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":165,"studentId":0,"date":null,"diff":"\r\nInputObject                                               SideIndicator\r\n-----------                                               -------------\r\n    # whats the highest value of n thats below the amount =>           \r\n    whats the highest value of n thats below the amount   <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    whats the highest value of n thats below the amount\n    \"\"\"\n    def helper(n, maxpiece): # power of 2 thats below n\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif maxpiece == 0:\n            return 0\n        else:\n            return helper(n - maxpiece, maxpiece) + helper(n, maxpiece // 2) # (using the largest piece) + (not using the largest piece)\n\n    k = 1\n    while k <= amount:\n        k *= 2\n    maxpiece = k\n\n    return helper(amount, maxpiece)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    # whats the highest value of n thats below the amount\n    def helper(n, maxpiece): # power of 2 thats below n\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif maxpiece == 0:\n            return 0\n        else:\n            return helper(n - maxpiece, maxpiece) + helper(n, maxpiece // 2) # (using the largest piece) + (not using the largest piece)\n\n    k = 1\n    while k <= amount:\n        k *= 2\n    maxpiece = k\n\n    return helper(amount, maxpiece)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","14",">>> count_change(20)","60",">>> count_change(100)","9828","","# Error: expected","#     9828","#     whats the highest value of n thats below the amount","# but got","#     9828","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":166,"studentId":0,"date":null,"diff":"\r\nInputObject                                                  SideIndicator\r\n-----------                                                  -------------\r\n        if number < 0:                                       =>           \r\n            # There is no way to represent a negative number =>           \r\n            return 0                                         =>           \r\n        elif number == 0:                                    =>           \r\n        if number == 0:                                      <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_partitions(number, at_most):\n        if number == 0:\n            # There is only one way to represent zero\n            return 1\n        elif at_most == 0:\n            # There is only one way to represent a number using one (2^0)\n            return 1\n        else:\n            # The representation may contains 2^at_most or not\n            contains = count_partitions(number - pow(2, at_most), at_most)\n            not_contains = count_partitions(number, at_most - 1)\n            return contains + not_contains\n\n    def find_at_most(number):\n        k = 0\n        while pow(2, k) <= number:\n            k += 1\n        return k - 1\n\n    at_most = find_at_most(amount)\n\n    return count_partitions(amount, at_most)\n\n\n\n\n\n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_partitions(number, at_most):\n        if number < 0:\n            # There is no way to represent a negative number\n            return 0\n        elif number == 0:\n            # There is only one way to represent zero\n            return 1\n        elif at_most == 0:\n            # There is only one way to represent a number using one (2^0)\n            return 1\n        else:\n            # The representation may contains 2^at_most or not\n            contains = count_partitions(number - pow(2, at_most), at_most)\n            not_contains = count_partitions(number, at_most - 1)\n            return contains + not_contains\n\n    def find_at_most(number):\n        k = 0\n        while pow(2, k) <= number:\n            k += 1\n        return k - 1\n\n    at_most = find_at_most(amount)\n\n    return count_partitions(amount, at_most)\n\n\n\n\n\n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_partitions(number, at_most):\r\n        if number==0:\r\n            return 1\r\n        elif at_most==0:\r\n            return 1\r\n        else:\r\n            contains = count_partitions(number-pow(2, at_most), at_most)\r\n            not_contains = count_partitions(number, at_most-1)\r\n            return contains+k\r\n    def find_at_most(number):\r\n        k = 0\r\n        while pow(2, k)<=number:\r\n            k += 1\r\n        return k-1\r\n    at_most = find_at_most(amount)\r\n    return count_partitions(amount, at_most)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 329, in count_partitions","    contains = count_partitions(number - pow(2, at_most), at_most)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 329, in count_partitions","    contains = count_partitions(number - pow(2, at_most), at_most)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 329, in count_partitions","    contains = count_partitions(number - pow(2, at_most), at_most)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 329, in count_partitions","    contains = count_partitions(number - pow(2, at_most), at_most)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 329, in count_partitions","    contains = count_partitions(number - pow(2, at_most), at_most)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 329, in count_partitions","    contains = count_partitions(number - pow(2, at_most), at_most)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 321, in count_partitions","    if number == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":167,"studentId":0,"date":null,"diff":"\r\nInputObject                                                      SideIndicator\r\n-----------                                                      -------------\r\n            return change(amount - x, x) + change(amount, x//2)  =>           \r\n            return change(amount - x, x) or change(amount, x//2) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    from math import log\n    def change(amount, x):\n        if amount == 0:\n            return 1\n        elif x == 0 or amount < 0:\n            return 0\n        else:\n            return change(amount - x, x) or change(amount, x//2)\n\n    return change(amount, int(2**(log(amount)//log(2)))) #log base 2 (n) is equal to the great power of 2 that fits in n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    from math import log\n    def change(amount, x):\n        if amount == 0:\n            return 1\n        elif x == 0 or amount < 0:\n            return 0\n        else:\n            return change(amount - x, x) + change(amount, x//2)\n\n    return change(amount, int(2**(log(amount)//log(2)))) #log base 2 (n) is equal to the great power of 2 that fits in n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","1","","# Error: expected","#     6","# but got","#     1","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":168,"studentId":0,"date":null,"diff":"\r\nInputObject                                                     SideIndicator\r\n-----------                                                     -------------\r\n        if amount < 0:                                          =>           \r\n            return 0                                            =>           \r\n        elif amount == 0:                                       =>           \r\n            return 1                                            =>           \r\n        elif min_coin > amount:                                 =>           \r\n            return 0                                            =>           \r\n        else:                                                   =>           \r\n            with_min = count_using(min_coin, amount - min_coin) =>           \r\n            without_min = count_using(2 * min_coin, amount)     =>           \r\n            return with_min + without_min                       =>           \r\n                                                                <=           \r\n        with_min = count_using(min_coin, amount - min_coin)     <=           \r\n        without_min = count_using(2 * min_coin, amount)         <=           \r\n        return with_min + without_min                           <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_using(min_coin, amount):\n        \n        with_min = count_using(min_coin, amount - min_coin)\n        without_min = count_using(2 * min_coin, amount)\n        return with_min + without_min\n    return count_using(1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_using(min_coin, amount):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif min_coin > amount:\n            return 0\n        else:\n            with_min = count_using(min_coin, amount - min_coin)\n            without_min = count_using(2 * min_coin, amount)\n            return with_min + without_min\n    return count_using(1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_using(min_coin, amount):\r\n        amount = count_using(min_coin, amount-min_coin)\r\n        without_min = count_using(2*min_coin, amount)\r\n        return with_min+without_min\r\n    return count_using(1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 294, in count_using","    with_min = count_using(min_coin, amount - min_coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 294, in count_using","    with_min = count_using(min_coin, amount - min_coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 294, in count_using","    with_min = count_using(min_coin, amount - min_coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 294, in count_using","    with_min = count_using(min_coin, amount - min_coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 294, in count_using","    with_min = count_using(min_coin, amount - min_coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 294, in count_using","    with_min = count_using(min_coin, amount - min_coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 294, in count_using","    with_min = count_using(min_coin, amount - min_coin)","RecursionError: maximum recursion depth exceeded","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":169,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                             SideIndicator\r\n-----------                                                                             -------------\r\n    return accumulate(combiner, base, n, lambda x: number if pred(x) == True else base) =>           \r\n        if 2 * m > amount:                                                              =>           \r\n            return helper(amount - m, m)                                                =>           \r\n    return helper(amount - m, m) + helper(amount, 2 * m)                                =>           \r\n        if 2 * m == amount:                                                             <=           \r\n            return                                                                      <=           \r\n    return helper(amount - m, m) + helper(amount, 2 * m)                                <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    if amount == 0:\n        return 0\n    if amount < 0:\n        return 0\n    m = 1\n    def helper(amount, m):\n        if amount == 0:\n            return 1\n        if amount < 0:\n            return 0 #invalid partition\n        if 2 * m == amount:\n            return \n        return helper(amount - m, m) + helper(amount, 2 * m)\n    return helper(amount - m, m) + helper(amount, 2 * m)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    if amount == 0:\n        return 0\n    if amount < 0:\n        return 0\n    m = 1\n    def helper(amount, m):\n        if amount == 0:\n            return 1\n        if amount < 0:\n            return 0 #invalid partition\n        if 2 * m > amount:\n            return helper(amount - m, m)\n        return helper(amount - m, m) + helper(amount, 2 * m)\n    return helper(amount - m, m) + helper(amount, 2 * m) \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    if amount==0:\r\n        return 0\r\n    if amount<0:\r\n        return 0\r\n    m = 1\r\n    def helper(amount, m):\r\n        if amount==0:\r\n            return 1\r\n        if amount<0:\r\n            return 0\r\n        if 2*m==amount:\r\n            return \r\n        return helper(amount-m, m)+helper(amount, 2*m)\r\n    return helper(amount-m, m)+helper(amount, 2*m)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 376, in helper","    return helper(amount - m, m) + helper(amount, 2 * m)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 376, in helper","    return helper(amount - m, m) + helper(amount, 2 * m)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 376, in helper","    return helper(amount - m, m) + helper(amount, 2 * m)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 376, in helper","    return helper(amount - m, m) + helper(amount, 2 * m)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 376, in helper","    return helper(amount - m, m) + helper(amount, 2 * m)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 376, in helper","    return helper(amount - m, m) + helper(amount, 2 * m)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 370, in helper","    if amount == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":170,"studentId":0,"date":null,"diff":"","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper(amount, chunk_size):\n        value = 2**chunk_size\n        if value > amount:\n            return 0\n        if amount < 0:\n            return 0\n        if amount == 0:\n            return 1 \n        x = helper(amount - value, chunk_size) \n        y = helper(amount, chunk_size + 1)\n        return x + y\n    return helper(amount, 0)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper(amount, chunk_size):\n        value = 2**chunk_size\n        if amount == 0:\n            return 1 \n        if value > amount:\n            return 0\n        if amount < 0:\n            return 0\n        x = helper(amount - value, chunk_size) \n        y = helper(amount, chunk_size + 1)\n        return x + y\n    return helper(amount, 0)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def helper(amount, chunk_size):\r\n        value = 2**chunk_size\r\n        if value>amount:\r\n            return 0\r\n        if amount<0:\r\n            return 0\r\n        if amount==0:\r\n            return 1\r\n        x = helper(amount-value, chunk_size)\r\n        y = helper(amount, chunk_size+1)\r\n        return x+k\r\n    return helper(amount, 0)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":171,"studentId":0,"date":null,"diff":"\r\nInputObject                                                           SideIndicator\r\n-----------                                                           -------------\r\n            partition_using_cent1 = partitioner(amount - cent, cent)  =>           \r\n            partition_using_future_cent = partitioner(amount, 2*cent) =>           \r\n            partition_using_cent1 = counter(amount - cent, cent)      <=           \r\n            partition_using_future_cent = counter(amount, 2*cent)     <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def partitioner(amount, cent):\n        if amount == 0:\n            return 1\n        elif cent > amount:\n            return 0\n        else:\n            partition_using_cent1 = counter(amount - cent, cent)\n            partition_using_future_cent = counter(amount, 2*cent)\n            return partition_using_cent1 + partition_using_future_cent\n    return partitioner(amount, 1)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def partitioner(amount, cent):\n        if amount == 0:\n            return 1\n        elif cent > amount:\n            return 0\n        else:\n            partition_using_cent1 = partitioner(amount - cent, cent)\n            partition_using_future_cent = partitioner(amount, 2*cent)\n            return partition_using_cent1 + partition_using_future_cent\n    return partitioner(amount, 1)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def partitioner(amount, cent):\r\n        if amount==0:\r\n            return 1\r\n        elif cent>amount:\r\n            return 0\r\n        else:\r\n            partition_using_cent1 = counter(amount-cent, cent)\r\n            partition_using_future_cent = counter(amount, 2*cent)\r\n            return partition_using_cent1+k\r\n    return partitioner(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 304, in count_change","    return partitioner(amount, 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 301, in partitioner","    partition_using_cent1 = counter(amount - cent, cent)","NameError: name 'counter' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":172,"studentId":0,"date":null,"diff":"\r\nInputObject                                                             SideIndicator\r\n-----------                                                             -------------\r\n    def helper(amount, coin):                                           =>           \r\n        if amount == 0:                                                 =>           \r\n            return 1                                                    =>           \r\n        elif amount < 0:                                                =>           \r\n            return 0                                                    =>           \r\n        elif coin > amount:                                             =>           \r\n            return 0                                                    =>           \r\n        else:                                                           =>           \r\n            return helper(amount - coin,coin) + helper(amount,coin * 2) =>           \r\n    return helper(amount, 1)                                            =>           \r\n                                                                        =>           \r\n    if amount == 0:                                                     <=           \r\n        return 0                                                        <=           \r\n    elif amount == 1:                                                   <=           \r\n        return 1                                                        <=           \r\n    else:                                                               <=           \r\n        return count_change(amount - 1) + count_change(amount)          <=           \r\n                                                                        <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    if amount == 0:\n        return 0\n    elif amount == 1:\n        return 1\n    else:\n        return count_change(amount - 1) + count_change(amount)\n\n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper(amount, coin):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif coin > amount:\n            return 0\n        else:\n            return helper(amount - coin,coin) + helper(amount,coin * 2)\n\n    return helper(amount, 1)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    if amount==0:\r\n        return 0\r\n    elif amount==1:\r\n        return 1\r\n    else:\r\n        return count_change(amount-1)+count_change(amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 398, in count_change","    return count_change(amount - 1) + count_change(amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 398, in count_change","    return count_change(amount - 1) + count_change(amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 398, in count_change","    return count_change(amount - 1) + count_change(amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 398, in count_change","    return count_change(amount - 1) + count_change(amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 398, in count_change","    return count_change(amount - 1) + count_change(amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 398, in count_change","    return count_change(amount - 1) + count_change(amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 393, in count_change","    if amount == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":173,"studentId":0,"date":null,"diff":"\r\nInputObject                            SideIndicator\r\n-----------                            -------------\r\n    return count_partitions(amount ,1) =>           \r\n    return count_partitions(n ,1)      <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_partitions(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m > n:\n            return 0\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, 2*m)\n    return count_partitions(n ,1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_partitions(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m > n:\n            return 0\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, 2*m)\n    return count_partitions(amount ,1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_partitions(n, m):\r\n        if amount==0:\r\n            return 1\r\n        elif n<0:\r\n            return 0\r\n        elif m>n:\r\n            return 0\r\n        else:\r\n            return count_partitions(n-m, m)+count_partitions(n, 2*m)\r\n    return count_partitions(n, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 306, in count_change","    return count_partitions(n ,1)","NameError: name 'n' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":174,"studentId":0,"date":null,"diff":"\r\nInputObject                                            SideIndicator\r\n-----------                                            -------------\r\n        contains = count_coins(coins, amount - coins)  =>           \r\n        doesnot_contain = count_coins(2*coins, amount) =>           \r\n        contains = count_using(coins, amount - coins)  <=           \r\n        doesnot_contain = count_using(2*coins, amount) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    return count_coins(1,amount)\n\ndef count_coins(coins, amount):\n    if amount < 0:\n        return 0\n    elif amount == 0:\n        return 1\n    elif coins > amount:\n        return 0\n    else:\n        contains = count_using(coins, amount - coins)\n        doesnot_contain = count_using(2*coins, amount)\n        return contains + doesnot_contain\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    return count_coins(1,amount)\n\ndef count_coins(coins, amount):\n    if amount < 0:\n        return 0\n    elif amount == 0:\n        return 1\n    elif coins > amount:\n        return 0\n    else:\n        contains = count_coins(coins, amount - coins)\n        doesnot_contain = count_coins(2*coins, amount)\n        return contains + doesnot_contain\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    return count_coins(1, amount)\r\ndef count_coins(coins, amount):\r\n    if amount<0:\r\n        return 0\r\n    elif amount==0:\r\n        return 1\r\n    elif coins>amount:\r\n        return 0\r\n    else:\r\n        contains = count_using(coins, amount-coins)\r\n        doesnot_contain = count_using(2*coins, amount)\r\n        return contains+k\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 299, in count_change","    return count_coins(1,amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 309, in count_coins","    contains = count_using(coins, amount - coins)","NameError: name 'count_using' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":175,"studentId":0,"date":null,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n        b = 2**n =>           \r\n        b = 2*n  <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_partitions(amount,b):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif b == 0:\n            return 0    \n        else:\n            with_b = count_partitions(amount-b,b)\n            without_b = count_partitions(amount, b//2)\n            return with_b + without_b \n\n    n = 0\n    b = 1\n    while b<amount:\n        n = n+1\n        b = 2*n\n    else:    \n        return count_partitions(amount, b)\n        \n    \"\"\"n = 0\n    n = n +1         \n    b = 1\n    increment_b = 2*b\n    if b == 1:\n        return count_partitions(amount,b)\n    while b % 2** n == 0:\n        return count_paritions(amount, b)\"\"\"\n    \n                    \n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_partitions(amount,b):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif b == 0:\n            return 0    \n        else:\n            with_b = count_partitions(amount-b,b)\n            without_b = count_partitions(amount, b//2)\n            return with_b + without_b \n\n    n = 0\n    b = 1\n    while b<amount:\n        n = n+1\n        b = 2**n\n    else:    \n        return count_partitions(amount, b)\n        \n    \"\"\"n = 0\n    n = n +1         \n    b = 1\n    increment_b = 2*b\n    if b == 1:\n        return count_partitions(amount,b)\n    while b % 2** n == 0:\n        return count_paritions(amount, b)\"\"\"\n    \n                    \n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","11","","# Error: expected","#     14","# but got","#     11","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":176,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n            print(amount) <=           \r\n            print(amount) <=           \r\n            print(amount) <=           \r\n            print(amount) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"\"\"\n\n    def count_helper(amount, cents):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif len(cents) == 1:\n            return 0\n        else:\n            next_cents = cents[0]\n            return count_helper(amount - next_cents, cents) + count_helper(amount, cents[1:])\n    return count_helper(amount, largest_cent(amount))\n    \"\"\"\n    def largest_cent(amount):\n        n = 0\n        cent = []\n        while n < amount:\n            cent = 2**n\n            n += 1\n        return cent\n    def count_helper(amount, cents):\n        if amount == 0:\n            print(amount)\n            return 1\n        elif amount < 0:\n            print(amount)\n            return 0\n        elif cents == 0:\n            print(amount)\n            return 0\n        else:\n            print(amount)\n            return count_helper(amount - cents, cents) + count_helper(amount, cents // 2)\n    return count_helper(amount, largest_cent(amount))\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"\"\"\n\n    def count_helper(amount, cents):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif len(cents) == 1:\n            return 0\n        else:\n            next_cents = cents[0]\n            return count_helper(amount - next_cents, cents) + count_helper(amount, cents[1:])\n    return count_helper(amount, largest_cent(amount))\n    \"\"\"\n    def largest_cent(amount):\n        n = 0\n        cent = []\n        while n < amount:\n            cent = 2**n\n            n += 1\n        return cent\n    def count_helper(amount, cents):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif cents == 0:\n            return 0\n        else:\n            return count_helper(amount - cents, cents) + count_helper(amount, cents // 2)\n    return count_helper(amount, largest_cent(amount))\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","7","-57","7","-25","7","-9","7","-1","7","3","-1","3","1","-1","1","0","1","3","2","1","0","1","2","3","7","5","3","1","-1","1","0","1","3","2","1","0","1","2","3","5","4","3","2","1","0","1","2","3","4","5","7","6","5","4","3","2","1","0","1","2","3","4","5","6","7","6","","# Error: expected","#     6","# but gotest summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":177,"studentId":0,"date":null,"diff":"\r\nInputObject                   SideIndicator\r\n-----------                   -------------\r\n        elif largest_coin==1: <=           \r\n            return 1          <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    power = 0\n    while pow(2, power) < amount:\n        power = power + 1\n    power = power - 1\n    def count_partitions(total, largest_coin):\n        if total == 0:\n            return 1\n        elif largest_coin == 0:\n            return 1\n        elif largest_coin==1:\n            return 1\n        elif total < 0:\n            return 0\n        else:\n            return count_partitions(total - pow(2,largest_coin), largest_coin) + count_partitions(total, largest_coin-1)\n    return count_partitions(amount, power)\n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    power = 0\n    while pow(2, power) < amount:\n        power = power + 1\n    power = power - 1\n    def count_partitions(total, largest_coin):\n        if total == 0:\n            return 1\n        elif largest_coin == 0:\n            return 1\n        elif total < 0:\n            return 0\n        else:\n            return count_partitions(total - pow(2,largest_coin), largest_coin) + count_partitions(total, largest_coin-1)\n    return count_partitions(amount, power)\n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    amount = 0\r\n    while pow(2, power)<amount:\r\n        power = power+1\r\n    power = power-1\r\n    def count_partitions(total, largest_coin):\r\n        if total==0:\r\n            return 1\r\n        elif largest_coin==0:\r\n            return 1\r\n        elif largest_coin==1:\r\n            return 1\r\n        elif total<0:\r\n            return 0\r\n        else:\r\n            return count_partitions(total-pow(2, largest_coin), largest_coin)+count_partitions(total, largest_coin-1)\r\n    return count_partitions(amount, power)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","2","","# Error: expected","#     6","# but got","#     2","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":178,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n    return count_partitions(amount, largest//2) =>           \r\n    count_partitions(amount, largest//2)        <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_partitions(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, m//2)\n    largest = 1\n    while largest <= amount:\n        largest *= 2\n    count_partitions(amount, largest//2)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_partitions(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, m//2)\n    largest = 1\n    while largest <= amount:\n        largest *= 2\n    return count_partitions(amount, largest//2)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","","# Error: expected","#     6","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":179,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                             SideIndicator\r\n-----------                                                                             -------------\r\n        yes_min, no_min = coin(amount-min_denom, min_denom), coin(amount , 2*min_denom) =>           \r\n        yes_min, no_min = coin(amount-min_denom, amount), coin(amount , 2*min_denom)    <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def coin(amount, min_denom):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif min_denom > amount:\n            return 0\n        yes_min, no_min = coin(amount-min_denom, amount), coin(amount , 2*min_denom)\n        return yes_min + no_min\n    return coin(amount, 1)\n\n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def coin(amount, min_denom):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif min_denom > amount:\n            return 0\n        yes_min, no_min = coin(amount-min_denom, min_denom), coin(amount , 2*min_denom)\n        return yes_min + no_min\n    return coin(amount, 1)\n\n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def coin(amount, min_denom):\r\n        if amount<0:\r\n            return 0\r\n        elif amount==0:\r\n            return 1\r\n        elif min_denom>amount:\r\n            return 0\r\n        yes_min, no_min = coin(amount-min_denom, amount), coin(amount, 2*min_denom)\r\n        return yes_min+k\r\n    return coin(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":180,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n    print (i)                               <=           \r\n      print (total, \"Passed in number\")     <=           \r\n      print (power, \" The power passed in\") <=           \r\n        print (\"Returned 1\")                <=           \r\n        print (\"Second if\")                 <=           \r\n        print (\"Third if\")                  <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    #first to find the highest power that can fit in the ammount\n    i = 0;\n    while amount > pow(2, i):\n      i += 1;\n\n    print (i)\n    #i now has the highest power possible so\n    def count (total, power):\n      print (total, \"Passed in number\")\n      print (power, \" The power passed in\")\n      if total == 0:\n        print (\"Returned 1\")\n        return 1\n      elif total < 0:\n        print (\"Second if\")\n        return 0\n      elif power < 0:\n        print (\"Third if\")\n        return 0\n      else:\n        return count(total - pow(2,power), power) + count(total, power - 1)\n\n    return count (amount,i -1)\n\n    def count_partitions(n, m):\n      \"\"\"Count the ways to partition n using parts up to m.\"\"\"\n      co\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    #first to find the highest power that can fit in the ammount\n    i = 0;\n    while amount > pow(2, i):\n      i += 1;\n\n    #i now has the highest power possible so\n    def count (total, power):\n      if total == 0:\n        return 1\n      elif total < 0:\n        return 0\n      elif power < 0:\n        return 0\n      else:\n        return count(total - pow(2,power), power) + count(total, power - 1)\n\n    return count (amount,i -1)\n\n    def count_partitions(n, m):\n      \"\"\"Count the ways to partition n using parts up to m.\"\"\"\n      co\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    amount = 0\r\n    while amount>pow(2, i):\r\n        i += 1\r\n    print(i)\r\n    def count(total, power):\r\n        printtotal, \"Passed in number\"\r\n        printpower, \" The power passed in\"\r\n        if total==0:\r\n            print(\"Returned 1\")\r\n            return 1\r\n        elif total<0:\r\n            print(\"Second if\")\r\n            return 0\r\n        elif power<0:\r\n            print(\"Third if\")\r\n            return 0\r\n        else:\r\n            return count(total-pow(2, power), power)+count(total, power-1)\r\n    return count(amount, i-1)\r\n    def count_partitions(n, m):\r\n        co\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","3","7 Passed in number","2  The power passed in","3 Passed in number","2  The power passed in","-1 Passed in number","2  The power passed in","Second if","3 Passed in number","1  The power passed in","1 Passed in number","1  The power passed in","-1 Passed in number","1  The power passed in","Second if","1 Passed in number","0  The power passed in","0 Passed in number","0  The power passed in","Returned 1","1 Passed in number","-1  The power passed in","Third if","3 Passed in number","0  The power passed in","2 Passed in number","0  The power passed in","1 Passed in number","0  The power passed in","0 Passed in number","0  The power passed in","Returned 1","1 Passed in number","-1  The power passed in","Third if","2 Passed in number","-1  The power passed in","Third if","3 Passed in number","-1  The power passed in","Third if","7 Passed in number","1  The power passed in","5 Passed in number","1  The power passed in","3 Passed in number","1  The power passed in","1 Passed in number","1  The power passed in","-1 Passed in number","1  The power passed in","Second if","1 Passed in number","0  The power passed in","0 Passed in number","0  The power passed in","Returned 1","1 Passed in number","-1  The power passed in","Third if","3 Passed in number","0  The power passed in","2 Passed in number","0  The power passed in","1 Passed in number","0  The power passed in","0 Passed in number","0  The power passed in","Returned 1","1 Passed in number","-1  The power passed in","Third if","2 Passed in number","-1  The power passed in","Third if","3 Passed in number","-1  The power passed in","Third if","5 Passed in number","0  The power passed in","4 Passed in number","0  The power passed in","3 Passed in number","0  The power passed in","2 Passed in number","0  The power passed in","1 Passed in number","0  The power passed in","0 Passed in number","0  The power passed in","Returned 1","1 Passed in number","-1  The power passed in","Third if","2 Passed in number","-1  The power passed in","Third if","3 Passed in number","-1  The power passed in","Third if","4 Passed in number","-1  The power passed in","Third if","5 Passed in number","-1  The power passed in","Third if","7 Passed in number","0  The power passed in","6 Passed in number","0  The power passed in","5 Passed in number","0  The power passed in","4 Passed in number","0  The power passed in","3 Passed in number","0  The power passed in","2 Passed in number","0  The power passed in","1 Passed in number","0  The power passed in","0 Passed in number","0  The power passed in","Returned 1","1 Passed in number","-1  The power passed in","Third if","2 Passed in number","-1  The power passed in","Third if","3 Passed in number","-1  The power passed in","Third if","4 Passed in number","-1  The power passed in","Third if","5 Passed in number","-1  The power passed in","Third if","6 Passed in number","-1  The power passed in","Third if","7 Passed in number","-1  The power passed in","Third if","6","","# Error: expected","#     6","# but got","#     3","#     7 Passed in number","#     2  The power passed in","#     3 Passed in number","#     2  The power passed in","#     -1 Passed in number","#     2  The power passed in","#     Second if","#     3 Passed in number","#     1  The power passed in","#     1 Passed in number","#     1  The power passed in","#     -1 Passed in number","#     1  The power passed in","#     Second if","#     1 Passed in number","#     0  The power passed in","#     0 Passed in number","#     0  The power passed in","#     Returned 1","#     1 Passed in number","#     -1  The power passed in","#     Third if","#     3 Passed in number","#     0  The power passed in","#     2 Passed in number","#     0  The power passed in","#     1 Passed in number","#     0  The power passed in","#     0 Passed in number","#     0  The power passed in","#     Returned 1","#     1 Passed in number","#     -1  The power passed in","#     Third if","#     2 Passed in number","#     -1  The power passed in","#     Third if","#     3 Passed in number","#     -1  The power passed in","#     Third if","#     7 Passed in number","#     1  The power passed in","#     5 Passed in number","#     1  The power passed in","#     3 Passed in number","#     1  The power passed in","#     1 Passed in number","#     1  The power passed in","#     -1 Passed in number","#     1  The power passed in","#     Second if","#     1 Passed in number","#     0  The power passed in","#     0 Passed in number","#     0  The power passed in","#     Returned 1","#     1 Passed in number","#     -1  The power passed in","#     Third if","#     3 Passed in number","#     0  The power passed in","#     2 Passed in number","#     0  The power passed in","#     1 Passed in number","#     0  The power passed in","#     0 Passed in number","#     0  The power passed in","#     Returned 1","#     1 Passed in number","#     -1  The power passed in","#     Third if","#     2 Passed in number","#     -1  The power passed in","#     Third if","#     3 Passed in number","#     -1  The power passed in","#     Third if","#     5 Passed in number","#     0  The power passed in","#     4 Passed in number","#     0  The power passed in","#     3 Passed in number","#     0  The power passed in","#     2 Passed in number","#     0  The power passed in","#     1 Passed in number","#     0  The power passed in","#     0 Passed in number","#     0  The power passed in","#     Returned 1","#     1 Passed in number","#     -1  The power passed in","#     Third if","#     2 Passed in number","#     -1  The power passed in","#     Third if","#     3 Passed in number","#     -1  The power passed in","#     Third if","#     4 Passed in number","#     -1  The power passed in","#     Third if","#     5 Passed in number","#     -1  The power passed in","#     Third if","#     7 Passed in number","#     0  The power passed in","#     6 Passed in number","#     0  The power passed in","#     5 Passed in number","#     0  The power passed in","#     4 Passed in number","#     0  The power passed in","#     3 Passed in number","#     0  The power passed in","#     2 Passed in number","#     0  The power passed in","#     1 Passed in number","#     0  The power passed in","#     0 Passed in number","#     0  The power passed in","#     Returned 1","#     1 Passed in number","#     -1  The power passed in","#     Third if","#     2 Passed in number","#     -1  The power passed in","#     Third if","#     3 Passed in number","#     -1  The power passed in","#     Third if","#     4 Passed in number","#     -1  The power passed in","#     Third if","#     5 Passed in number","#     -1  The power passed in","#     Third if","#     6 Passed in number","#     -1  The power passed in","#     Third if","#     7 Passed in number","#     -1  The power passed in","#     Third if","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":181,"studentId":0,"date":null,"diff":"\r\nInputObject                                                    SideIndicator\r\n-----------                                                    -------------\r\n        not_min_coin = count_smallest_coin(amount, min_coin*2) =>           \r\n        no_min_coin = count_smallest_coin(amount, min_coin*2)  <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_smallest_coin(amount, min_coin=1):\n        if amount < min_coin:\n            return 0\n        elif amount == min_coin:\n            return 1\n\n        use_min_coin = count_smallest_coin(amount-min_coin, min_coin)\n        no_min_coin = count_smallest_coin(amount, min_coin*2)\n        return use_min_coin + not_min_coin\n\n    return count_smallest_coin(amount)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_smallest_coin(amount, min_coin=1):\n        if amount < min_coin:\n            return 0\n        elif amount == min_coin:\n            return 1\n\n        use_min_coin = count_smallest_coin(amount-min_coin, min_coin)\n        not_min_coin = count_smallest_coin(amount, min_coin*2)\n        return use_min_coin + not_min_coin\n\n    return count_smallest_coin(amount)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_smallest_coin(amount, min_coin = 1):\r\n        if amount<min_coin:\r\n            return 0\r\n        elif amount==min_coin:\r\n            return 1\r\n        use_min_coin = count_smallest_coin(amount-min_coin, min_coin)\r\n        no_min_coin = count_smallest_coin(amount, min_coin*2)\r\n        return use_min_coin+not_min_coin\r\n    return count_smallest_coin(amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 342, in count_change","    return count_smallest_coin(amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 338, in count_smallest_coin","    use_min_coin = count_smallest_coin(amount-min_coin, min_coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 338, in count_smallest_coin","    use_min_coin = count_smallest_coin(amount-min_coin, min_coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 338, in count_smallest_coin","    use_min_coin = count_smallest_coin(amount-min_coin, min_coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 338, in count_smallest_coin","    use_min_coin = count_smallest_coin(amount-min_coin, min_coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 338, in count_smallest_coin","    use_min_coin = count_smallest_coin(amount-min_coin, min_coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 340, in count_smallest_coin","    return use_min_coin + not_min_coin","NameError: name 'not_min_coin' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":182,"studentId":0,"date":null,"diff":"\r\nInputObject  SideIndicator\r\n-----------  -------------\r\n    print(m) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def largest_pow_of_2_less_than_x(x):\n        i=0\n        while pow(2,i)< x:\n            i+=1\n        return i-1\n    m = largest_pow_of_2_less_than_x(amount)\n    print(m)\n    def count_partitions(n,m):\n        if n==0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 1\n        else:\n            return count_partitions(n-2**m,m) + count_partitions(n,m-1)\n    return count_partitions(amount,m)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def largest_pow_of_2_less_than_x(x):\n        i=0\n        while pow(2,i)< x:\n            i+=1\n        return i-1\n    m = largest_pow_of_2_less_than_x(amount)\n    def count_partitions(n,m):\n        if n==0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 1\n        else:\n            return count_partitions(n-2**m,m) + count_partitions(n,m-1)\n    return count_partitions(amount,m)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def largest_pow_of_2_less_than_x(x):\r\n        amount = 0\r\n        while pow(2, i)<x:\r\n            i += 1\r\n        return i-1\r\n    m = largest_pow_of_2_less_than_x(amount)\r\n    print(m)\r\n    def count_partitions(n, m):\r\n        if n==0:\r\n            return 1\r\n        elif n<0:\r\n            return 0\r\n        elif m==0:\r\n            return 1\r\n        else:\r\n            return count_partitions(n-2**m, m)+count_partitions(n, m-1)\r\n    return count_partitions(amount, m)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","2","6","","# Error: expected","#     6","# but got","#     2","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":183,"studentId":0,"date":null,"diff":"\r\nInputObject     SideIndicator\r\n-----------     -------------\r\n    print(coin) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    coin = 1\n    count = 0\n    while coin < amount:\n        count += 1\n        coin = 2 ** count\n    if coin > amount:\n        coin = 2 ** (count - 1)\n    def cashier(total, coin):\n        if(total == 0):\n            return 1\n        elif ( total < 0):\n            return 0\n        elif coin == 0:\n            return 0\n        else:\n            return cashier(total - coin, coin) + cashier(total, coin // 2)\n    print(coin)\n    return cashier(amount, coin)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    coin = 1\n    count = 0\n    while coin < amount:\n        count += 1\n        coin = 2 ** count\n    if coin > amount:\n        coin = 2 ** (count - 1)\n    def cashier(total, coin):\n        if(total == 0):\n            return 1\n        elif ( total < 0):\n            return 0\n        elif coin == 0:\n            return 0\n        else:\n            return cashier(total - coin, coin) + cashier(total, coin // 2)\n    return cashier(amount, coin)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","4","6","","# Error: expected","#     6","# but got","#     4","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":184,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n        if amount<0:       =>           \r\n            return 0       =>           \r\n        if min_num>amount: =>           \r\n            return 0       =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count(min_num, amount):\n        if amount ==0:\n            return 1\n        inc_min=count(min_num, amount-min_num)\n        no_min=count(2*min_num, amount)\n        return inc_min + no_min\n    return count(1, amount)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count(min_num, amount):\n        if amount ==0:\n            return 1\n        if amount<0:\n            return 0\n        if min_num>amount:\n            return 0\n        inc_min=count(min_num, amount-min_num)\n        no_min=count(2*min_num, amount)\n        return inc_min + no_min\n    return count(1, amount)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count(min_num, amount):\r\n        if amount==0:\r\n            return 1\r\n        inc_min = count(min_num, amount-min_num)\r\n        no_min = count(2*min_num, amount)\r\n        return inc_min+k\r\n    return count(1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 302, in count","    inc_min=count(min_num, amount-min_num)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 302, in count","    inc_min=count(min_num, amount-min_num)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 302, in count","    inc_min=count(min_num, amount-min_num)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 302, in count","    inc_min=count(min_num, amount-min_num)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 302, in count","    inc_min=count(min_num, amount-min_num)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 302, in count","    inc_min=count(min_num, amount-min_num)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 300, in count","    if amount ==0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":185,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        return 2**(n-1) =>           \r\n        return n**(n-1) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def k_calculator(amount):\n        n=1\n        while 2**n < amount:\n            n+=1\n        return n**(n-1)\n    def next_k(k):\n        n = 1\n        while 2**n != k: \n            n+=1\n        return 2**(n-1)\n\n    def combo_counter(amount, k): \n        if amount < 0:\n          return 0 \n        elif k == 1 or amount == 0:\n          return 1\n        else: \n            return combo_counter(amount,  next_k(k)) + combo_counter(amount-k, k)\n    return combo_counter(amount, k_calculator(amount))\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def k_calculator(amount):\n        n=1\n        while 2**n < amount:\n            n+=1\n        return 2**(n-1)\n    def next_k(k):\n        n = 1\n        while 2**n != k: \n            n+=1\n        return 2**(n-1)\n\n    def combo_counter(amount, k): \n        if amount < 0:\n          return 0 \n        elif k == 1 or amount == 0:\n          return 1\n        else: \n            return combo_counter(amount,  next_k(k)) + combo_counter(amount-k, k)\n    return combo_counter(amount, k_calculator(amount))\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def k_calculator(amount):\r\n        amount = 1\r\n        while 2**n<amount:\r\n            n += 1\r\n        return n**(n-1)\r\n    def next_k(k):\r\n        n = 1\r\n        while 2**n!=k:\r\n            n += 1\r\n        return 2**(n-1)\r\n    def combo_counter(amount, k):\r\n        if amount<0:\r\n            return 0\r\n        elif k==1 or amount==0:\r\n            return 1\r\n        else:\r\n            return combo_counter(amount, next_k(k))+combo_counter(amount-k, k)\r\n    return combo_counter(amount, k_calculator(amount))\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     6","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":186,"studentId":0,"date":null,"diff":"\r\nInputObject                               SideIndicator\r\n-----------                               -------------\r\n            # print('(remainder < 0)', n) =>           \r\n            # print('remainder == 0', n)  =>           \r\n            # print('(n > remainder)', n) =>           \r\n            print('(remainder < 0)', n)   <=           \r\n            print('remainder == 0', n)    <=           \r\n            print('(n > remainder)', n)   <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def coin_generator(n, remainder):\n        if (remainder < 0):\n            print('(remainder < 0)', n)\n            return 0\n        elif remainder == 0:\n            print('remainder == 0', n)\n            return 1\n        elif (n > remainder):\n            print('(n > remainder)', n)\n            return 0\n        else:\n            return coin_generator(n, remainder - n) + coin_generator(2*n,remainder)\n    return coin_generator(1, amount)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def coin_generator(n, remainder):\n        if (remainder < 0):\n            # print('(remainder < 0)', n)\n            return 0\n        elif remainder == 0:\n            # print('remainder == 0', n)\n            return 1\n        elif (n > remainder):\n            # print('(n > remainder)', n)\n            return 0\n        else:\n            return coin_generator(n, remainder - n) + coin_generator(2*n,remainder)\n    return coin_generator(1, amount)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def coin_generator(n, remainder):\r\n        if (remainder<0):\r\n            printcoin, n\r\n            return 0\r\n        elif remainder==0:\r\n            print\"remainder == 0\", n\r\n            return 1\r\n        elif (n>remainder):\r\n            print\"(n > remainder)\", n\r\n            return 0\r\n        else:\r\n            return coin_generator(n, remainder-n)+coin_generator(2*n, remainder)\r\n    return coin_generator(1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-coin)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"ConstantExpressionNode\")))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","remainder == 0 1","(n > remainder) 2","remainder == 0 2","(n > remainder) 4","(n > remainder) 2","(n > remainder) 4","remainder == 0 2","(n > remainder) 4","remainder == 0 4","(n > remainder) 8","(n > remainder) 2","(n > remainder) 4","(n > remainder) 4","(n > remainder) 8","remainder == 0 2","(n > remainder) 4","remainder == 0 4","(n > remainder) 8","(n > remainder) 4","(n > remainder) 8","(n > remainder) 2","(n > remainder) 4","(n > remainder) 4","(n > remainder) 8","(n > remainder) 4","(n > remainder) 8","6","","# Error: expected","#     6","# but got","#     remainder == 0 1","#     (n > remainder) 2","#     remainder == 0 2","#     (n > remainder) 4","#     (n > remainder) 2","#     (n > remainder) 4","#     remainder == 0 2","#     (n > remainder) 4","#     remainder == 0 4","#     (n > remainder) 8","#     (n > remainder) 2","#     (n > remainder) 4","#     (n > remainder) 4","#     (n > remainder) 8","#     remainder == 0 2","#     (n > remainder) 4","#     remainder == 0 4","#     (n > remainder) 8","#     (n > remainder) 4","#     (n > remainder) 8","#     (n > remainder) 2","#     (n > remainder) 4","#     (n > remainder) 4","#     (n > remainder) 8","#     (n > remainder) 4","#     (n > remainder) 8","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":187,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                         SideIndicator\r\n-----------                                                                         -------------\r\n #       >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2                =>           \r\n    return accumulate(lambda x, y: x if pred(y) else combiner(x, y), base, n, term) =>           \r\n        #(combiner = lambda x: pred if true else n), base, n, term)                 =>           \r\n    def helper(min_coin, amount):                                                   =>           \r\n        if amount < 0:                                                              =>           \r\n        else:                                                                       =>           \r\n            with_min_coin = helper(min_coin, amount - min_coin)                     =>           \r\n            without_min_coin = helper(2 * min_coin, amount)                         =>           \r\n                                                                                    =>           \r\n    return helper(1, amount)                                                        =>           \r\n                                                                                    =>           \r\n    return accumulate(combiner if pred(n) else lambda x, y: x, base, n, term)       <=           \r\n    def helper_func2(min_coin, amount):                                             <=           \r\n        if amount <0:                                                               <=           \r\n        else:                                                                       <=           \r\n            with_min_coin = helper_func2(min_coin, amount - min_coin)               <=           \r\n            without_min_coin = helper_func2(2*min_coin, amount)                     <=           \r\n        return helper_func2(1, amount)                                              <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper_func2(min_coin, amount):\n        if amount <0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif min_coin > amount:\n            return 0\n        else:\n            with_min_coin = helper_func2(min_coin, amount - min_coin)\n            without_min_coin = helper_func2(2*min_coin, amount)\n            return with_min_coin + without_min_coin\n        return helper_func2(1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(min_coin, amount):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif min_coin > amount:\n            return 0\n        else: \n            with_min_coin = helper(min_coin, amount - min_coin)\n            without_min_coin = helper(2 * min_coin, amount)\n            return with_min_coin + without_min_coin\n    \n    return helper(1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def helper_func2(min_coin, amount):\r\n        if amount<0:\r\n            return 0\r\n        elif amount==0:\r\n            return 1\r\n        elif min_coin>amount:\r\n            return 0\r\n        else:\r\n            with_min_coin = helper_func2(min_coin, amount-min_coin)\r\n            without_min_coin = helper_func2(2*min_coin, amount)\r\n            return with_min_coin+k\r\n        return helper_func2(1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","","# Error: expected","#     6","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":188,"studentId":0,"date":null,"diff":"\r\nInputObject                                       SideIndicator\r\n-----------                                       -------------\r\n            return change(x,y-2) + change(x,y//2) =>           \r\n            return change(x,y-2) + change(x-y,y)  <=           \r\n                                                  <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def change(x,y):\n        if x<0 or y<0:\n            return 0\n        elif x==0 or y ==0:\n            return 1\n        elif y ==1:\n            return 1\n        else:\n            return change(x,y-2) + change(x-y,y)\n\n    last_even = 0\n\n    if amount%2 == 0:\n         last_even = amount\n    else:\n        last_even = amount-1\n\n    return change(amount, last_even)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    last_even = 0\n\n    def change(x,y):\n        if x<0 or y<0:\n            return 0\n        elif x==0 or y ==0:\n            return 1\n        elif y ==1:\n            return 1\n        else:\n            return change(x,y-2) + change(x,y//2)\n\n    if amount%2 == 0:\n         last_even = amount\n    else:\n        last_even = amount-1\n\n    return change(amount, last_even)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","7","","# Error: expected","#     6","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":189,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                SideIndicator\r\n-----------                                                                -------------\r\n            contains = count_partitions(num - pow(2, at_most), at_most)    =>           \r\n            contains = count_partitions(number - pow(2, at_most), at_most) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_partitions(num, at_most):\n        if num < 0:\n            #can't represent a neg num\n            return 0\n        elif num == 0:\n            #only 1 way to represent zero\n            return 1\n        elif at_most == 0:\n            #there is only 1 way to rep a number using one\n            return 1\n        else:\n            #the rep may contain 2^at_most or not\n            contains = count_partitions(number - pow(2, at_most), at_most)\n            not_contains = count_partitions(num, at_most - 1)\n            return contains + not_contains\n\n    def find_at_most(num):\n        k = 0\n        while pow(2,k) <= num:\n            k += 1\n        return k - 1\n\n    at_most = find_at_most(amount)\n\n    return count_partitions(amount, at_most)\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_partitions(num, at_most):\n        if num < 0:\n            #can't represent a neg num\n            return 0\n        elif num == 0:\n            #only 1 way to represent zero\n            return 1\n        elif at_most == 0:\n            #there is only 1 way to rep a number using one\n            return 1\n        else:\n            #the rep may contain 2^at_most or not\n            contains = count_partitions(num - pow(2, at_most), at_most)\n            not_contains = count_partitions(num, at_most - 1)\n            return contains + not_contains\n\n    def find_at_most(num):\n        k = 0\n        while pow(2,k) <= num:\n            k += 1\n        return k - 1\n\n    at_most = find_at_most(amount)\n\n    return count_partitions(amount, at_most)\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_partitions(num, at_most):\r\n        if num<0:\r\n            return 0\r\n        elif num==0:\r\n            return 1\r\n        elif at_most==0:\r\n            return 1\r\n        else:\r\n            contains = count_partitions(number-pow(2, at_most), at_most)\r\n            not_contains = count_partitions(num, at_most-1)\r\n            return contains+k\r\n    def find_at_most(num):\r\n        k = 0\r\n        while pow(2, k)<=num:\r\n            k += 1\r\n        return k-1\r\n    at_most = find_at_most(amount)\r\n    return count_partitions(amount, at_most)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 346, in count_change","    return count_partitions(amount, at_most)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 334, in count_partitions","    contains = count_partitions(number - pow(2, at_most), at_most)","NameError: name 'number' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":190,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n        if amount < 0:    =>           \r\n        elif amount == 0: =>           \r\n        if amount <= 0:   <=           \r\n        elif amount == 1: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_partitions(amount, min_worth):\n        if amount <= 0:\n            return 0\n        elif amount == 1:\n            return 1\n        elif min_worth > amount:\n            return 0\n        else:\n            return count_partitions(amount - min_worth, min_worth) + count_partitions(amount, min_worth * 2)\n    return count_partitions(amount, 1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_partitions(amount, min_worth):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif min_worth > amount:\n            return 0\n        else:\n            return count_partitions(amount - min_worth, min_worth) + count_partitions(amount, min_worth * 2)\n    return count_partitions(amount, 1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_partitions(amount, min_worth):\r\n        if amount<=0:\r\n            return 0\r\n        elif amount==1:\r\n            return 1\r\n        elif min_worth>amount:\r\n            return 0\r\n        else:\r\n            return count_partitions(amount-min_worth, min_worth)+count_partitions(amount, min_worth*2)\r\n    return count_partitions(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","10","","# Error: expected","#     14","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":191,"studentId":0,"date":null,"diff":"\r\nInputObject                                                     SideIndicator\r\n-----------                                                     -------------\r\n            return largest_two_smaller_than_amount(amount, n*2) =>           \r\n            return largest_number(amount, n*2)                  <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def largest_two_smaller_than_amount(amount, n=1):\n        if n > amount:\n            return n/2\n        else:\n            return largest_number(amount, n*2)\n\n\n    def count_partitions(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, m/2 if m!=1 else m-1)\n\n    return count_partitions(amount, largest_two_smaller_than_amount(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def largest_two_smaller_than_amount(amount, n=1):\n        if n > amount:\n            return n/2\n        else:\n            return largest_two_smaller_than_amount(amount, n*2)\n\n\n    def count_partitions(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, m/2 if m!=1 else m-1)\n\n    return count_partitions(amount, largest_two_smaller_than_amount(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 349, in count_change","    return count_partitions(amount, largest_two_smaller_than_amount(amount))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 336, in largest_two_smaller_than_amount","    return largest_number(amount, n*2)","NameError: name 'largest_number' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":192,"studentId":0,"date":null,"diff":"\r\nInputObject                     SideIndicator\r\n-----------                     -------------\r\n                if amount == 0: =>           \r\n                if amount <0:   =>           \r\n                    return 1    =>           \r\n                if amount <=0:  <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def limit(maxi):\n        if maxi > amount:\n            def g(amount, maxi):\n                if amount <=0:\n                    return 0\n                if maxi == 1:\n                    return 1\n                return g(amount, maxi//2) + g(amount - maxi, maxi)\n            return g(amount, maxi//2)\n        return limit(maxi*2)\n    return limit(1)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def limit(maxi):\n        if maxi > amount:\n            def g(amount, maxi):\n                if amount == 0:\n                    return 1\n                if amount <0:\n                    return 0\n                if maxi == 1:\n                    return 1\n                return g(amount, maxi//2) + g(amount - maxi, maxi)\n            return g(amount, maxi//2)\n        return limit(maxi*2)\n    return limit(1)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","10","","# Error: expected","#     14","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":193,"studentId":0,"date":null,"diff":"\r\nInputObject                                       SideIndicator\r\n-----------                                       -------------\r\n    greatest_pow_two = 2**int(log(amount,2))      =>           \r\n        if bigcoin <= 1:                          =>           \r\n            return bigcoin                        =>           \r\n            return counter(value, bigcoin//2)     =>           \r\n            return 1 + counter(value, bigcoin//2) =>           \r\n    greatest_pow_two = int(log(amount))           <=           \r\n            return 0                              <=           \r\n            return 1                              <=           \r\n        if bigcoin == 1:                          <=           \r\n            return value                          <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    from math import log\n\n    greatest_pow_two = int(log(amount))\n    added = 0\n    def counter(value, bigcoin):\n        if bigcoin > value:\n            return 0\n        if value == bigcoin:\n            return 1\n        if bigcoin == 1:\n            return value\n        return counter(value-bigcoin, bigcoin) + counter(value, bigcoin//2)\n    return counter(amount,greatest_pow_two)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    from math import log\n\n    greatest_pow_two = 2**int(log(amount,2))\n    added = 0\n    def counter(value, bigcoin):\n        if bigcoin <= 1:\n            return bigcoin\n        if bigcoin > value:\n            return counter(value, bigcoin//2)\n        if value == bigcoin:\n            return 1 + counter(value, bigcoin//2)\n        return counter(value-bigcoin, bigcoin) + counter(value, bigcoin//2)\n    return counter(amount,greatest_pow_two)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","7","","# Error: expected","#     6","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":1,"Id":194,"studentId":0,"date":null,"diff":"\r\nInputObject SideIndicator\r\n----------- -------------\r\n            =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\ndef count_change_helper(amount, coin):\n    if amount < 0:\n        return 0\n    elif amount == 0:\n        return 1\n    elif coin > amount:\n        return 0\n    else:\n        withcoin = count_change_helper(amount - coin, coin)\n        withoutcoin = count_change_helper(amount, coin*2)\n        return withcoin + withoutcoin\n    return count_change_helper(amount, 1)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    return count_change_helper(amount, 1)\n\ndef count_change_helper(amount, coin):\n    if amount < 0:\n        return 0\n    elif amount == 0:\n        return 1\n    elif coin > amount:\n        return 0\n    else:\n        withcoin = count_change_helper(amount - coin, coin)\n        withoutcoin = count_change_helper(amount, coin*2)\n        return withcoin + withoutcoin\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","","# Error: expected","#     6","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":1,"Id":195,"studentId":0,"date":null,"diff":"\r\nInputObject SideIndicator\r\n----------- -------------\r\n            =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\ndef count_change_helper(amount, coin):\n    if amount < 0:\n        return 0\n    elif amount == 0:\n        return 1\n    elif coin > amount:\n        return 0\n    else:\n        withcoin = count_change_helper(amount - coin, coin)\n        withoutcoin = count_change_helper(amount, coin*2)\n        return withcoin + withoutcoin\n    return count_change_helper(amount, 1)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    return count_change_helper(amount, 1)\n\ndef count_change_helper(amount, coin):\n    if amount < 0:\n        return 0\n    elif amount == 0:\n        return 1\n    elif coin > amount:\n        return 0\n    else:\n        withcoin = count_change_helper(amount - coin, coin)\n        withoutcoin = count_change_helper(amount, coin*2)\n        return withcoin + withoutcoin\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","","# Error: expected","#     6","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":196,"studentId":0,"date":null,"diff":"\r\nInputObject                        SideIndicator\r\n-----------                        -------------\r\n    def coin_choices(amount, low): =>           \r\n        elif low>amount:           =>           \r\n    def coin_choices(amont, low):  <=           \r\n        elif small>amount:         <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"\"\"\n    top = 1\n    def level_cap(amount,top):\n        if amount - top <= 0:\n            return top\n    return level_cap(amount, top ** 2)\n\n    def count_partitions(n,m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, m%2)\n    return count_partitions(amount, level_cap(amount,top))\n    \"\"\"\n    def coin_choices(amont, low):\n        if amount<0:\n            return 0\n        elif amount ==0:\n            return 1\n        elif small>amount:\n            return 0\n        else:\n            x=coin_choices(amount-low,low)\n            y=coin_choices(amount, low*2)\n            return x + y\n    return coin_choices(amount,1)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"\"\"\n    top = 1\n    def level_cap(amount,top):\n        if amount - top <= 0:\n            return top\n    return level_cap(amount, top ** 2)\n\n    def count_partitions(n,m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, m%2)\n    return count_partitions(amount, level_cap(amount,top))\n    \"\"\"\n    def coin_choices(amount, low):\n        if amount<0:\n            return 0\n        elif amount ==0:\n            return 1\n        elif low>amount:\n            return 0\n        else:\n            x=coin_choices(amount-low,low)\n            y=coin_choices(amount, low*2)\n            return x + y\n    return coin_choices(amount,1)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def coin_choices(amont, low):\r\n        if amount<0:\r\n            return 0\r\n        elif amount==0:\r\n            return 1\r\n        elif small>amount:\r\n            return 0\r\n        else:\r\n            x = coin_choices(amount-low, low)\r\n            y = coin_choices(amount, low*2)\r\n            return x+k\r\n    return coin_choices(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 376, in count_change","    return coin_choices(amount,1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 370, in coin_choices","    elif small>amount:","NameError: name 'small' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":197,"studentId":0,"date":null,"diff":"\r\nInputObject                              SideIndicator\r\n-----------                              -------------\r\n    elif amount % 2 == 1:                =>           \r\n        return count_change(amount - 1)  =>           \r\n    #elif amount % 2 == 1:               <=           \r\n     #   return count_change(amount - 1) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    if amount < 0:\n        return 0\n    elif amount == 0:\n        return 1\n    #elif amount % 2 == 1:\n     #   return count_change(amount - 1)\n    return count_change(amount - 1) + count_change(amount / 2)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    if amount < 0:\n        return 0\n    elif amount == 0:\n        return 1\n    elif amount % 2 == 1:\n        return count_change(amount - 1)\n    return count_change(amount - 1) + count_change(amount / 2)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 292, in count_change","    return count_change(amount - 1) + count_change(amount / 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 292, in count_change","    return count_change(amount - 1) + count_change(amount / 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 292, in count_change","    return count_change(amount - 1) + count_change(amount / 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 292, in count_change","    return count_change(amount - 1) + count_change(amount / 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 292, in count_change","    return count_change(amount - 1) + count_change(amount / 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 292, in count_change","    return count_change(amount - 1) + count_change(amount / 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 286, in count_change","    if amount < 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":198,"studentId":0,"date":null,"diff":"\r\nInputObject                                                       SideIndicator\r\n-----------                                                       -------------\r\n    if n == 1:                                                    =>           \r\n        print_move(start,end)                                     =>           \r\n    else:                                                         =>           \r\n        other = 2                                                 =>           \r\n        if (start == 2 and end == 3 or start == 3 and end == 2):  =>           \r\n            other = 1                                             =>           \r\n        elif(start == 2 and end == 1 or start == 1 and end == 2): =>           \r\n            other = 3                                             =>           \r\n        move_stack(n-1, start, other)                             =>           \r\n        print_move(start,end)                                     =>           \r\n        move_stack(n-1, other, end);                              =>           \r\n        print (possibilities)                                     <=           \r\n    \"Different Strategy for Even and Odd\"                         <=           \r\n    #if odd(n):                                                   <=           \r\n    #else:                                                        <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    listDenomination = count_change_helper(amount)\n    listDenom = [1]\n    def count_change_subhelper(amount,listDemon):\n        possibilities = [1] # this array technically calculates the possibilities for all amounts ranging to the amount of desire\n        for x in range (1,amount+1):\n            possibilities.append(0)\n        for x in listDemon: #goes through all the coins, technically doing the recursion\n            for y in range(x, amount + 1): # partition counter, adds in the possibilities for previous ones to current one\n                possibilities[y] += possibilities[y-x]\n        print (possibilities)\n        return possibilities[amount]\n    return count_change_subhelper(amount,listDenomination)\n\ndef count_change_helper(amount):\n    temp,maxExp = amount,0\n    listOfChange = []\n    while temp / 2 >= 1:\n        maxExp += 1\n        temp = temp/2\n    for x in range (0, maxExp + 1):\n        listOfChange.append(2**(maxExp-x))\n    return listOfChange\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    listDenomination = count_change_helper(amount)\n    listDenom = [1]\n    def count_change_subhelper(amount,listDemon):\n        possibilities = [1] # this array technically calculates the possibilities for all amounts ranging to the amount of desire\n        for x in range (1,amount+1):\n            possibilities.append(0)\n        for x in listDemon: #goes through all the coins, technically doing the recursion\n            for y in range(x, amount + 1): # partition counter, adds in the possibilities for previous ones to current one\n                possibilities[y] += possibilities[y-x]\n        return possibilities[amount]\n    return count_change_subhelper(amount,listDenomination)\n\ndef count_change_helper(amount):\n    temp,maxExp = amount,0\n    listOfChange = []\n    while temp / 2 >= 1:\n        maxExp += 1\n        temp = temp/2\n    for x in range (0, maxExp + 1):\n        listOfChange.append(2**(maxExp-x))\n    return listOfChange\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    amount = count_change_helper(amount)\r\n    listDenom = [1]\r\n    def count_change_subhelper(amount, listDemon):\r\n        possibilities = [1]\r\n        for x in range(1, amount+1):\r\n            possibilities.append(0)\r\n        for x in listDemon:\r\n            for y in range(x, amount+1):\r\n                possibilities[y] += possibilities[y-x]\r\n        print(possibilities)\r\n        return possibilities[amount]\r\n    return count_change_subhelper(amount, listDenomination)\r\ndef count_change_helper(amount):\r\n    temp, maxExp = amount, 0\r\n    listOfChange = []\r\n    while temp/2>=1:\r\n        maxExp += 1\r\n        temp = temp/2\r\n    for x in range(0, maxExp+1):\r\n        listOfChange.append(2**(maxExp-x))\r\n    return listOfChange\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","[1, 1, 2, 2, 4, 4, 6, 6]","6","","# Error: expected","#     6","# but got","#     [1, 1, 2, 2, 4, 4, 6, 6]","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":1,"Id":199,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                            SideIndicator\r\n-----------                                                                            -------------\r\n        return count_with(small, amount - small) + count_with(small*2, amount)         =>           \r\n        return count_with(small, amount - small) + count_with(small*2, amount - small) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\ndef count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    def count_with(small, amount):\n        if amount < 0:\n            return 0\n        if amount == 0:\n            return 1\n        if small > amount:\n            return 0\n        return count_with(small, amount - small) + count_with(small*2, amount - small)\n\n    return count_with(1, amount)\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\ndef count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    def count_with(small, amount):\n        if amount < 0:\n            return 0\n        if amount == 0:\n            return 1\n        if small > amount:\n            return 0\n        return count_with(small, amount - small) + count_with(small*2, amount)\n\n    return count_with(1, amount)\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","10","","# Error: expected","#     6","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":200,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n    def greatest_pow(n):                       =>           \r\n        if is_pow(n):                          =>           \r\n            return n                           =>           \r\n            return greatest_pow(n-1)           =>           \r\n        elif n < 0 or m == 0:                  =>           \r\n        else:                                  =>           \r\n            m = greatest_pow(m)                =>           \r\n                                               =>           \r\n        elif n < 0 or m == 0 or not is_pow(m): <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def is_pow(n, k=1):\n        if n==k:\n            return True\n        elif k>n:\n            return False\n        return is_pow(n, k*2)\n\n    def partition(n, m):\n        if n == 0:\n            return 1\n        elif n < 0 or m == 0 or not is_pow(m):\n            return 0\n        else:\n            return partition(n-m, m) + partition(n, m-1)\n\n    return partition(amount, amount)\n\n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def is_pow(n, k=1):\n        if n==k:\n            return True\n        elif k>n:\n            return False\n        return is_pow(n, k*2)\n\n    def greatest_pow(n):\n        if is_pow(n):\n            return n\n        else:\n            return greatest_pow(n-1)\n\n    def partition(n, m):\n        if n == 0:\n            return 1\n        elif n < 0 or m == 0:\n            return 0\n        else:\n            m = greatest_pow(m)\n            return partition(n-m, m) + partition(n, m-1)\n\n    return partition(amount, amount)\n\n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def is_pow(n, k = 1):\r\n        if amount==k:\r\n            return True\r\n        elif k>n:\r\n            return False\r\n        return is_pow(n, k*2)\r\n    def partition(n, m):\r\n        if n==0:\r\n            return 1\r\n        elif n<0 or m==0 or not is_pow(m):\r\n            return 0\r\n        else:\r\n            return partition(n-m, m)+partition(n, m-1)\r\n    return partition(amount, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":201,"studentId":0,"date":null,"diff":"\r\nInputObject                                               SideIndicator\r\n-----------                                               -------------\r\n            a = 1                                         =>           \r\n            while a < n:                                  =>           \r\n                if  2 ** a % 2 == 0:                      =>           \r\n                    coin = 2 ** a                         =>           \r\n                a += 1                                    =>           \r\n               # n -= 1                                   =>           \r\n            return coin                                   =>           \r\n            while n:                                      <=           \r\n                if (math.log(n))/ (math.log(2)) % 2 == 0: <=           \r\n                    return n                              <=           \r\n                n -= 1                                    <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    n = amount\n    x = amount\n    coin = 0\n    if n == 1:\n        return 1\n    elif n == 0:\n        return 0\n    else: \n        # while x:\n        #     if (x ** .5) % 2 == 0:\n        #         coin = x\n        #         break\n        #     x -= 1\n        def powers_of_two(n):\n            \"\"\"Itirates from N downwards until it finds the greatest power of two smaller than N.\"\"\"\n            while n: \n                if (math.log(n))/ (math.log(2)) % 2 == 0:\n                    return n              \n                n -= 1\n        def count_partitions(n,m):\n                if n == 0:\n                    return 1\n                elif n < 0:\n                    return 0\n                elif m == 0:\n                    return 0\n                else:\n                    return (count_partitions(n-m, m) + count_partitions(n, m // 2)) \n        \n        return count_partitions(n,powers_of_two(n))\n\n\n\n        \n\n   \n    \n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    n = amount\n    x = amount\n    coin = 0\n    if n == 1:\n        return 1\n    elif n == 0:\n        return 0\n    else: \n        # while x:\n        #     if (x ** .5) % 2 == 0:\n        #         coin = x\n        #         break\n        #     x -= 1\n        def powers_of_two(n):\n            \"\"\"Itirates from N downwards until it finds the greatest power of two smaller than N.\"\"\"\n            a = 1\n            while a < n: \n                if  2 ** a % 2 == 0:\n                    coin = 2 ** a  \n                a += 1            \n               # n -= 1\n            return coin\n        def count_partitions(n,m):\n                if n == 0:\n                    return 1\n                elif n < 0:\n                    return 0\n                elif m == 0:\n                    return 0\n                else:\n                    return (count_partitions(n-m, m) + count_partitions(n, m // 2)) \n        \n        return count_partitions(n,powers_of_two(n))\n\n\n\n        \n\n   \n    \n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","12","","# Error: expected","#     14","# but got","#     12","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":202,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                       SideIndicator\r\n-----------                                                                       -------------\r\n                                                                                  =>           \r\n        if amount < 0 or len(kinds) == 0:                                         =>           \r\n        elif amount == 0:                                                         =>           \r\n        lowest = kinds[0]                                                         =>           \r\n        return count_kinds(amount, kinds[1:]) + count_kinds(amount-lowest, kinds) =>           \r\n    # Create a list of possible coins for a certain amount                        <=           \r\n    # Helper function for the list of coins                                       <=           \r\n        if amount < 0 or len(kinds) == 0: # Base case for absurd function calls   <=           \r\n        elif amount == 0: # Base case for the lowest amount                       <=           \r\n        return count_kinds(amount, kinds[1:]) + count_kinds(amount-1, kinds)      <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    # Create a list of possible coins for a certain amount\n    listcoins = []\n    k = 0\n    while 2**k<=amount:\n        listcoins += [2**k]\n        k += 1\n\n    # Helper function for the list of coins\n    def count_kinds(amount, kinds):\n        if amount < 0 or len(kinds) == 0: # Base case for absurd function calls\n            return 0\n        elif amount == 0: # Base case for the lowest amount\n            return 1\n        return count_kinds(amount, kinds[1:]) + count_kinds(amount-1, kinds) \n\n    return count_kinds(amount, kinds=listcoins)\n\n\n\n###################\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    listcoins = []\n    k = 0\n    while 2**k<=amount:\n        listcoins += [2**k]\n        k += 1\n\n    def count_kinds(amount, kinds):\n\n        if amount < 0 or len(kinds) == 0:\n            return 0\n        elif amount == 0:\n            return 1\n        lowest = kinds[0]\n        return count_kinds(amount, kinds[1:]) + count_kinds(amount-lowest, kinds)\n\n    return count_kinds(amount, kinds=listcoins)\n\n\n\n###################\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","36","","# Error: expected","#     6","# but got","#     36","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":203,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n        if amount < 0:    =>           \r\n        elif amount == 0: =>           \r\n        if amount == 0:   <=           \r\n        elif amount == 1: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def change_counter(amount, list):\n        if amount == 0:\n            return 0\n        elif amount == 1:\n            return 1\n        elif list == []:\n            return 0\n        else:\n            return change_counter(amount - list[-1], list) + change_counter(amount, list[:-1])\n    def make_coins_list(n):\n        list = []\n        k = 1\n        while k < n:\n            list += [k]\n            k = k * 2\n        return list\n    return change_counter(amount, make_coins_list(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def change_counter(amount, list):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif list == []:\n            return 0\n        else:\n            return change_counter(amount - list[-1], list) + change_counter(amount, list[:-1])\n    def make_coins_list(n):\n        list = []\n        k = 1\n        while k < n:\n            list += [k]\n            k = k * 2\n        return list\n    return change_counter(amount, make_coins_list(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 312, in change_counter","    return change_counter(amount - list[-1], list) + change_counter(amount, list[:-1])","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 312, in change_counter","    return change_counter(amount - list[-1], list) + change_counter(amount, list[:-1])","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 312, in change_counter","    return change_counter(amount - list[-1], list) + change_counter(amount, list[:-1])","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 312, in change_counter","    return change_counter(amount - list[-1], list) + change_counter(amount, list[:-1])","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 312, in change_counter","    return change_counter(amount - list[-1], list) + change_counter(amount, list[:-1])","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 312, in change_counter","    return change_counter(amount - list[-1], list) + change_counter(amount, list[:-1])","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 305, in change_counter","    if amount == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":204,"studentId":0,"date":null,"diff":"\r\nInputObject                                SideIndicator\r\n-----------                                -------------\r\n    power = 0                              =>           \r\n    m = amount                             =>           \r\n    while m >= 2:                          =>           \r\n        power = power + 1                  =>           \r\n        m = m / 2                          =>           \r\n    def helper(x,p):                       =>           \r\n        if x < 0:                          =>           \r\n        if x == 0 or p == 0:               =>           \r\n            return 1                       =>           \r\n        with_p = helper(x-pow(2,p),p)      =>           \r\n        without_p = helper(x,p-1)          =>           \r\n        return with_p + without_p          =>           \r\n    return helper(amount,power)            =>           \r\n                                           =>           \r\n                                           =>           \r\n    def ways(n, m):                        <=           \r\n        if n == 1 or n == 0:               <=           \r\n        elif m >= n:                       <=           \r\n            return 0                       <=           \r\n        else:                              <=           \r\n            with_m = ways(n - m, m)        <=           \r\n            without_m = ways(n - m, m * 2) <=           \r\n            return with_m + without_m      <=           \r\n    return ways(amount, 1)                 <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def ways(n, m):\n        if n == 1 or n == 0:\n            return 0\n        elif m >= n:\n            return 0\n        else:\n            with_m = ways(n - m, m)\n            without_m = ways(n - m, m * 2)\n            return with_m + without_m\n    return ways(amount, 1)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    power = 0\n    m = amount\n    while m >= 2:\n        power = power + 1\n        m = m / 2\n    def helper(x,p):\n        if x < 0:\n            return 0\n        if x == 0 or p == 0:\n            return 1\n        with_p = helper(x-pow(2,p),p)\n        without_p = helper(x,p-1)\n        return with_p + without_p\n    return helper(amount,power)\n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def ways(n, m):\r\n        if n==0 or n==0:\r\n            return 0\r\n        elif m>=n:\r\n            return 0\r\n        else:\r\n            with_m = ways(n-m, m)\r\n            without_m = ways(n-m, m*2)\r\n            return with_m+k\r\n    return ways(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":205,"studentId":0,"date":null,"diff":"\r\nInputObject                                   SideIndicator\r\n-----------                                   -------------\r\n        total2 = count_helper(2*coin, amount) =>           \r\n        return total + total2                 =>           \r\n        return total                          <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    return count_helper(1, amount)\n\ndef count_helper(coin, amount):\n    if amount == 0:\n        return 1\n    elif coin > amount:\n        return 0\n    else:\n        total = count_helper(coin, amount - coin)\n        return total\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    return count_helper(1, amount)\n\ndef count_helper(coin, amount):\n    if amount == 0:\n        return 1\n    elif coin > amount:\n        return 0\n    else:\n        total = count_helper(coin, amount - coin)\n        total2 = count_helper(2*coin, amount)\n        return total + total2\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    return amount(1, amount)\r\ndef count_helper(coin, amount):\r\n    if amount==0:\r\n        return 1\r\n    elif coin>amount:\r\n        return 0\r\n    else:\r\n        total = count_helper(coin, amount-coin)\r\n        return total\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","1","","# Error: expected","#     6","# but got","#     1","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":206,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                                 SideIndicator\r\n-----------                                                                                                 -------------\r\n    def partition(amount, biggest_coin):                                                                    =>           \r\n        elif biggest_coin == 0:                                                                             =>           \r\n            return partition(amount - biggest_coin, biggest_coin) + partition(amount, biggest_coin // 2)    =>           \r\n    return partition(amount, biggest_coin)                                                                  =>           \r\n    def partition(amount, biggest_power):                                                                   <=           \r\n        elif biggest_power == 0:                                                                            <=           \r\n            return partition(amount - biggest_power, biggest_power) + partition(amount, biggest_power // 2) <=           \r\n    return partition(amount, biggest_power)                                                                 <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    biggest_power = 0\n    while(2**(biggest_power + 1) < amount):\n        biggest_power += 1\n    biggest_coin = 2**biggest_power\n    def partition(amount, biggest_power):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif biggest_power == 0:\n            return 0\n        else:\n            return partition(amount - biggest_power, biggest_power) + partition(amount, biggest_power // 2)\n    return partition(amount, biggest_power)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    biggest_power = 0\n    while(2**(biggest_power + 1) < amount):\n        biggest_power += 1\n    biggest_coin = 2**biggest_power\n    def partition(amount, biggest_coin):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif biggest_coin == 0:\n            return 0\n        else:\n            return partition(amount - biggest_coin, biggest_coin) + partition(amount, biggest_coin // 2)\n    return partition(amount, biggest_coin)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","4","","# Error: expected","#     6","# but got","#     4","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":207,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                     SideIndicator\r\n-----------                                                                     -------------\r\n    def counter(num, hightwo):                                                  =>           \r\n        if num < 0:                                                             =>           \r\n            return 0                                                            =>           \r\n        elif num == 0:                                                          =>           \r\n            return 1                                                            =>           \r\n        elif hightwo == 0:                                                      =>           \r\n            return 1                                                            =>           \r\n            perfectfit = counter(num - pow(2, hightwo), hightwo)                =>           \r\n            remainder = counter(num, hightwo - 1)                               =>           \r\n            return perfectfit + remainder                                       =>           \r\n    def twopowermax(num):                                                       =>           \r\n        k = 0                                                                   =>           \r\n        while pow(2, k) <= num:                                                 =>           \r\n            k += 1                                                              =>           \r\n        return k -1                                                             =>           \r\n    hightwo = twopowermax(amount)                                               =>           \r\n    return counter(amount, hightwo)                                             =>           \r\n                                                                                =>           \r\n    if amount <= 1:                                                             <=           \r\n        return 1                                                                <=           \r\n    highest = 1                                                                 <=           \r\n    def powertwo(highest):                                                      <=           \r\n        if highest*2 < amount:                                                  <=           \r\n            return powertwo(highest*2)                                          <=           \r\n            return highest                                                      <=           \r\n    powertwomax = powertwo(highest)                                             <=           \r\n    return count_change(amount - highest) + count_change(amount - (highest//2)) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    if amount <= 1:\n        return 1\n    highest = 1\n    def powertwo(highest):\n        if highest*2 < amount:\n            return powertwo(highest*2)\n        else:\n            return highest\n    powertwomax = powertwo(highest)\n    return count_change(amount - highest) + count_change(amount - (highest//2))\n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def counter(num, hightwo):\n        if num < 0:\n            return 0\n        elif num == 0:\n            return 1\n        elif hightwo == 0:\n            return 1\n        else:\n            perfectfit = counter(num - pow(2, hightwo), hightwo)\n            remainder = counter(num, hightwo - 1)\n            return perfectfit + remainder\n    def twopowermax(num):\n        k = 0\n        while pow(2, k) <= num:\n            k += 1\n        return k -1\n\n    hightwo = twopowermax(amount)\n    return counter(amount, hightwo)\n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 340, in count_change","    return count_change(amount - highest) + count_change(amount - (highest//2))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 340, in count_change","    return count_change(amount - highest) + count_change(amount - (highest//2))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 340, in count_change","    return count_change(amount - highest) + count_change(amount - (highest//2))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 340, in count_change","    return count_change(amount - highest) + count_change(amount - (highest//2))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 340, in count_change","    return count_change(amount - highest) + count_change(amount - (highest//2))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 339, in count_change","    powertwomax = powertwo(highest)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 335, in powertwo","    if highest*2 < amount:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":208,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n            return 1 =>           \r\n            return 0 <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def maxEx(n):\n        exponent = 0\n        while pow(2, exponent) < n or pow(2, exponent) == n:\n            exponent += 1\n        return exponent - 1\n    \n    def count(n, i): \n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif i == 0:\n            return 0\n        else:\n            a = count(n - pow(2, i), i) \n            b = count(n, i - 1)\n            return a + b\n    return count(amount, maxEx(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def maxEx(n):\n        exponent = 0\n        while pow(2, exponent) < n or pow(2, exponent) == n:\n            exponent += 1\n        return exponent - 1\n    \n    def count(n, i): \n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif i == 0:\n            return 1\n        else:\n            a = count(n - pow(2, i), i) \n            b = count(n, i - 1)\n            return a + b\n    return count(amount, maxEx(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def maxEx(n):\r\n        exponent = 0\r\n        while pow(2, exponent)<n or pow(2, exponent)==n:\r\n            exponent += 1\r\n        return exponent-1\r\n    def count(n, i):\r\n        if n==0:\r\n            return 1\r\n        elif n<0:\r\n            return 0\r\n        elif i==0:\r\n            return 0\r\n        else:\r\n            a = count(n-pow(2, i), i)\r\n            b = count(n, i-1)\r\n            return a+k\r\n    return count(amount, maxEx(amount))\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":209,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n    return count_partitions(amount, 2**amount) =>           \r\n    return count_partitions(amount, 32)        <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if amount <= 0:\n        return 0\n    if amount == 1:\n        return 1\n    def count_partitions(n, m):\n\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, m//2)\n\n    return count_partitions(amount, 32)\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if amount <= 0:\n        return 0\n    if amount == 1:\n        return 1\n    def count_partitions(n, m):\n\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, m//2)\n\n    return count_partitions(amount, 2**amount)\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","14",">>> count_change(20)","60",">>> count_change(100)","9544","","# Error: expected","#     9828","# but got","#     9544","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":210,"studentId":0,"date":null,"diff":"\r\nInputObject                             SideIndicator\r\n-----------                             -------------\r\n            max_coin = 2 ** (n - 1)     =>           \r\n    return help_count(amount, max_coin) =>           \r\n            max_coin = 2 ** (i - 1)     <=           \r\n    return c(amount, max_coin)          <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def help_count(amount, max_coin):\n        if amount < 0:\n            return 0\n        if amount == 0 or amount == 1 or max_coin == 1:\n            return 1\n        else:\n            return help_count(amount, max_coin / 2) + help_count(amount - max_coin, max_coin)\n    for n in range(amount):\n        if 2**n > amount:\n            max_coin = 2 ** (i - 1)    \n    return c(amount, max_coin)\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def help_count(amount, max_coin):\n        if amount < 0:\n            return 0\n        if amount == 0 or amount == 1 or max_coin == 1:\n            return 1\n        else:\n            return help_count(amount, max_coin / 2) + help_count(amount - max_coin, max_coin)\n    for n in range(amount):\n        if 2**n > amount:\n            max_coin = 2 ** (n - 1)    \n    return help_count(amount, max_coin)\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 299, in count_change","    max_coin = 2 ** (i - 1)","NameError: name 'i' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":211,"studentId":0,"date":null,"diff":"\r\nInputObject                                                             SideIndicator\r\n-----------                                                             -------------\r\n            return count_partitions(n-m, m) + count_partitions(n, m//2) =>           \r\n            return count_partitions(n, m) + count_partitions(n, m//2)   <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    def doubling(amount, m):\n        if m < amount: \n            return doubling(amount, m*2)\n        else: \n            return m//2  \n\n    coin = doubling(amount, 1)\n\n    def count_partitions(n, m):\n        if n == 0:\n            return 1 \n        elif n < 0: \n            return 0 \n        elif m == 0:\n            return 0 \n        else:\n            return count_partitions(n, m) + count_partitions(n, m//2)\n\n    return count_partitions(amount, coin)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    def doubling(amount, m):\n        if m < amount: \n            return doubling(amount, m*2)\n        else: \n            return m//2  \n\n    coin = doubling(amount, 1)\n\n    def count_partitions(n, m):\n        if n == 0:\n            return 1 \n        elif n < 0: \n            return 0 \n        elif m == 0:\n            return 0 \n        else:\n            return count_partitions(n-m, m) + count_partitions(n, m//2)\n\n    return count_partitions(amount, coin)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 327, in count_partitions","    return count_partitions(n, m) + count_partitions(n, m//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 327, in count_partitions","    return count_partitions(n, m) + count_partitions(n, m//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 327, in count_partitions","    return count_partitions(n, m) + count_partitions(n, m//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 327, in count_partitions","    return count_partitions(n, m) + count_partitions(n, m//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 327, in count_partitions","    return count_partitions(n, m) + count_partitions(n, m//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 327, in count_partitions","    return count_partitions(n, m) + count_partitions(n, m//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 320, in count_partitions","    if n == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":212,"studentId":0,"date":null,"diff":"\r\nInputObject                                            SideIndicator\r\n-----------                                            -------------\r\n        if amount == 1 or coin == 1:                   =>           \r\n        if amount == 1 or amount == coin or coin == 1: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def closest_power_of_two(amount):\n        def is_power_of_two(x):\n            counter = 1\n            power = 0\n            while power <= x:\n                power = 2 ** counter\n                if power == x:\n                    return True\n                counter += 1\n            return False\n        x = amount\n        while x > 0:\n            if is_power_of_two(x):\n                return x\n            x -= 1\n    def coin_combo(amount, coin):\n        if amount < 0 or coin < 0:\n            return 0\n        if amount == 1 or amount == coin or coin == 1:\n            return 1\n        elif amount == 2:\n            return 2\n        else:\n            return coin_combo(amount, coin // 2) + coin_combo(amount - coin, coin)\n    return coin_combo(amount, closest_power_of_two(amount))\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def closest_power_of_two(amount):\n        def is_power_of_two(x):\n            counter = 1\n            power = 0\n            while power <= x:\n                power = 2 ** counter\n                if power == x:\n                    return True\n                counter += 1\n            return False\n        x = amount\n        while x > 0:\n            if is_power_of_two(x):\n                return x\n            x -= 1\n    def coin_combo(amount, coin):\n        if amount < 0 or coin < 0:\n            return 0\n        if amount == 1 or coin == 1:\n            return 1\n        elif amount == 2:\n            return 2\n        else:\n            return coin_combo(amount, coin // 2) + coin_combo(amount - coin, coin)\n    return coin_combo(amount, closest_power_of_two(amount))\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","12","","# Error: expected","#     14","# but got","#     12","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":213,"studentId":0,"date":null,"diff":"\r\nInputObject                                                   SideIndicator\r\n-----------                                                   -------------\r\n            return helpme(amount-m, m) + helpme(amount, m//2) =>           \r\n            return helpme(amount-m, m) + helpme(amount, m/2)  <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    i = 1\n    lol = 0\n    while amount > 2*lol:\n        lol = 2**i\n        i += 1\n    \n    def helpme(amount, m):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return helpme(amount-m, m) + helpme(amount, m/2)\n            \n    return helpme(amount, lol)\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    i = 1\n    lol = 0\n    while amount > 2*lol:\n        lol = 2**i\n        i += 1\n    \n    def helpme(amount, m):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return helpme(amount-m, m) + helpme(amount, m//2)\n            \n    return helpme(amount, lol)\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 337, in helpme","    return helpme(amount-m, m) + helpme(amount, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 337, in helpme","    return helpme(amount-m, m) + helpme(amount, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 337, in helpme","    return helpme(amount-m, m) + helpme(amount, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 337, in helpme","    return helpme(amount-m, m) + helpme(amount, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 337, in helpme","    return helpme(amount-m, m) + helpme(amount, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 337, in helpme","    return helpme(amount-m, m) + helpme(amount, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 330, in helpme","    if amount == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":214,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n    while p<amount:                                   =>           \r\n        p=2*p                                         =>           \r\n        return this_does_not_make_cents(amount,p)     =>           \r\n    l=[p]                                             <=           \r\n    while l[-1]<amount:                               <=           \r\n        l.append(2*p)                                 <=           \r\n        return this_does_not_make_cents(amount,l[-2]) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def this_does_not_make_cents(n,o):\n        if n==0:\n            return 1\n        elif n<0:\n            return 0\n        elif o==0:\n            return 0\n        else:\n            with_o = this_does_not_make_cents(n-o,o)\n            without_o = this_does_not_make_cents(n,o//2)\n            return with_o + without_o\n    p=1\n    l=[p]\n    while l[-1]<amount:\n        l.append(2*p)\n    else:\n        return this_does_not_make_cents(amount,l[-2])\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def this_does_not_make_cents(n,o):\n        if n==0:\n            return 1\n        elif n<0:\n            return 0\n        elif o==0:\n            return 0\n        else:\n            with_o = this_does_not_make_cents(n-o,o)\n            without_o = this_does_not_make_cents(n,o//2)\n            return with_o + without_o\n    p=1\n    while p<amount:\n        p=2*p\n    else:\n        return this_does_not_make_cents(amount,p)\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     6","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":215,"studentId":0,"date":null,"diff":"\r\nInputObject                                                      SideIndicator\r\n-----------                                                      -------------\r\n            total += total_partitions(amount - largest, largest) =>           \r\n            total += count_partitions(amount - big, big)         <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def total_partitions(amount, difference):\n        if amount == 1 or amount == 0:\n            return 1\n        total = 1\n        largest = 1\n        while largest*2 <= min(amount, difference):\n            largest *= 2\n            total += count_partitions(amount - big, big)\n        return total\n\n    return total_partitions(amount, amount)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def total_partitions(amount, difference):\n        if amount == 1 or amount == 0:\n            return 1\n        total = 1\n        largest = 1\n        while largest*2 <= min(amount, difference):\n            largest *= 2\n            total += total_partitions(amount - largest, largest)\n        return total\n\n    return total_partitions(amount, amount)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def total_partitions(amount, difference):\r\n        if amount==1 or amount==0:\r\n            return 1\r\n        total = 1\r\n        largest = 1\r\n        while largest*2<=min(amount, difference):\r\n            largest *= 2\r\n            total += count_partitions(amount-big, big)\r\n        return total\r\n    return total_partitions(amount, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 306, in count_change","    return total_partitions(amount, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 303, in total_partitions","    total += count_partitions(amount - big, big)","NameError: name 'count_partitions' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":216,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n    def find_at_most(number):                =>           \r\n        k = 0                                =>           \r\n        while pow(2, k) <= number:           =>           \r\n            k += 1                           =>           \r\n        return k - 1                         =>           \r\n    at_most = find_at_most(amount)           =>           \r\n    return count_partitions(amount, at_most) =>           \r\n                                             =>           \r\n                                             =>           \r\n                                             =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_partitions(n,k):\n        if n<0:\n            return 0\n        elif k==0 or n==0: \n            return 1\n        else:\n            contains = count_partitions(n - pow(2, k), k)\n            not_contains = count_partitions(n, k - 1)\n            return contains + not_contains\n            #return count_partitions(n, k-1) + count_partitions(n-k, k)\n    #return count_partitions(amount, amount%2)\n\n\n\n    ##account partitions example in lecture \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_partitions(n,k):\n        if n<0:\n            return 0\n        elif k==0 or n==0: \n            return 1\n        else:\n            contains = count_partitions(n - pow(2, k), k)\n            not_contains = count_partitions(n, k - 1)\n            return contains + not_contains\n    def find_at_most(number):\n        k = 0\n        while pow(2, k) <= number:\n            k += 1\n        return k - 1\n\n    at_most = find_at_most(amount)\n\n    return count_partitions(amount, at_most)\n\n            #return count_partitions(n, k-1) + count_partitions(n-k, k)\n    #return count_partitions(amount, amount%2)\n\n\n\n    ##account partitions example in lecture \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_partitions(n, k):\r\n        if n<0:\r\n            return 0\r\n        elif k==0 or n==0:\r\n            return 1\r\n        else:\r\n            contains = count_partitions(n-pow(2, k), k)\r\n            not_contains = count_partitions(n, k-1)\r\n            return contains+k\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","","# Error: expected","#     6","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":217,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                       SideIndicator\r\n-----------                                                                                       -------------\r\n            return count_coin(amount-biggestcoin, biggestcoin)+count_coin(amount, biggestcoin//2) =>           \r\n            return count_coin(amount-biggestcoin, biggestcoin)+(amount, biggestcoin//2)           <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_coin(amount, biggestcoin):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif biggestcoin==0:\n            return 0\n        else:\n            return count_coin(amount-biggestcoin, biggestcoin)+(amount, biggestcoin//2)\n\n    biggestcoin = 1\n    k = 0\n    while 2**k < amount:\n        k += 1\n    biggestcoin = 2**k\n\n    return count_coin(amount, biggestcoin)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_coin(amount, biggestcoin):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif biggestcoin==0:\n            return 0\n        else:\n            return count_coin(amount-biggestcoin, biggestcoin)+count_coin(amount, biggestcoin//2)\n\n    biggestcoin = 1\n    k = 0\n    while 2**k < amount:\n        k += 1\n    biggestcoin = 2**k\n\n    return count_coin(amount, biggestcoin)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 357, in count_change","    return count_coin(amount, biggestcoin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 349, in count_coin","    return count_coin(amount-biggestcoin, biggestcoin)+(amount, biggestcoin//2)","TypeError: unsupported operand type(s) for +: 'int' and 'tuple'","","# Error: expected","#     6","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":218,"studentId":0,"date":null,"diff":"\r\nInputObject            SideIndicator\r\n-----------            -------------\r\n        if amount < x: =>           \r\n            return 0   =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count(amount, x):\n        if amount < 0:\n            return 0\n        if amount == 0:\n            return 1\n        return count(amount-x, x) + count(amount, 2*x)\n    if amount < 0:\n        return 0\n    if amount == 0:\n        return 1\n    else: \n        return count(amount, 1)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count(amount, x):\n        if amount < 0:\n            return 0\n        if amount == 0:\n            return 1\n        if amount < x:\n            return 0\n        return count(amount-x, x) + count(amount, 2*x)\n    if amount < 0:\n        return 0\n    if amount == 0:\n        return 1\n    else: \n        return count(amount, 1)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count(amount, x):\r\n        if amount<0:\r\n            return 0\r\n        if amount==0:\r\n            return 1\r\n        return count(amount-x, x)+count(amount, 2*x)\r\n    if amount<0:\r\n        return 0\r\n    if amount==0:\r\n        return 1\r\n    else:\r\n        return count(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 295, in count","    return count(amount-x, x) + count(amount, 2*x)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 295, in count","    return count(amount-x, x) + count(amount, 2*x)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 295, in count","    return count(amount-x, x) + count(amount, 2*x)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 295, in count","    return count(amount-x, x) + count(amount, 2*x)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 295, in count","    return count(amount-x, x) + count(amount, 2*x)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 295, in count","    return count(amount-x, x) + count(amount, 2*x)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 291, in count","    if amount < 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":219,"studentId":0,"date":null,"diff":"\r\nInputObject                        SideIndicator\r\n-----------                        -------------\r\n    return helper(amount , amount) =>           \r\n    return helper(amount , 16)     <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper(n, k):\n        def pow_2(num):\n            if num == 2:\n                return True\n            i = 2\n            while num >= i:\n                if num == i:\n                    return True\n                i *= 2\n            return False\n\n        if pow_2(k) or k == 1:\n            if  n < 0:\n                return 0\n            elif k == 1 or n == 0:\n                return 1\n            else:\n                return helper(n,k-1) + helper(n-k, k)\n        return helper(n, k-1)\n    return helper(amount , 16)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper(n, k):\n        def pow_2(num):\n            if num == 2:\n                return True\n            i = 2\n            while num >= i:\n                if num == i:\n                    return True\n                i *= 2\n            return False\n\n        if pow_2(k) or k == 1:\n            if  n < 0:\n                return 0\n            elif k == 1 or n == 0:\n                return 1\n            else:\n                return helper(n,k-1) + helper(n-k, k)\n        return helper(n, k-1)\n    return helper(amount , amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def helper(n, k):\r\n        def pow_2(num):\r\n            if amount==2:\r\n                return True\r\n            i = 2\r\n            while num>=i:\r\n                if num==i:\r\n                    return True\r\n                i *= 2\r\n            return False\r\n        if pow_2(k) or k==1:\r\n            if n<0:\r\n                return 0\r\n            elif k==1 or n==0:\r\n                return 1\r\n            else:\r\n                return helper(n, k-1)+helper(n-k, k)\r\n        return helper(n, k-1)\r\n    return helper(amount, 16)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","14",">>> count_change(20)","60",">>> count_change(100)","7280","","# Error: expected","#     9828","# but got","#     7280","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":220,"studentId":0,"date":null,"diff":"\r\nInputObject                                                         SideIndicator\r\n-----------                                                         -------------\r\n    if amount <= 1:                                                 =>           \r\n        return count_change(amount - 2) + count_change(amount // 2) =>           \r\n    if amount == 0 or amount == 1:                                  <=           \r\n        count_change(amount - 2) + count_change(amount // 2)        <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if amount == 0 or amount == 1:\n        return 1\n    else:\n        count_change(amount - 2) + count_change(amount // 2)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if amount <= 1:\n        return 1\n    else:\n        return count_change(amount - 2) + count_change(amount // 2)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 318, in count_change","    count_change(amount - 2) + count_change(amount // 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 318, in count_change","    count_change(amount - 2) + count_change(amount // 2)","TypeError: unsupported operand type(s) for +: 'NoneType' and 'NoneType'","","# Error: expected","#     6","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":221,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        p = 2 ** exp =>           \r\n        p = 2 ** p   <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    def denom(x, exp):\n        p = 2 ** p\n        if x < p:\n            return 0\n        else:\n            return (1 if x == p else 0) + denom(x - p, exp) + denom(x, exp + 1)\n    return denom(amount, 0)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    def denom(x, exp):\n        p = 2 ** exp\n        if x < p:\n            return 0\n        else:\n            return (1 if x == p else 0) + denom(x - p, exp) + denom(x, exp + 1)\n    return denom(amount, 0)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 373, in count_change","    return denom(amount, 0)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 368, in denom","    p = 2 ** p","UnboundLocalError: local variable 'p' referenced before assignment","","# Error: expected","#     6","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":222,"studentId":0,"date":null,"diff":"\r\nInputObject                       SideIndicator\r\n-----------                       -------------\r\n    def apartitions(n, powerof2): =>           \r\n    def partitions(n, powerof2):  <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def power(n):\n        total = 1\n        while total < n:\n            total *= 2 \n        return total \n    def partitions(n, powerof2):\n        if powerof2 <= 1:\n            return 1\n        elif n < 0:\n            return 0\n        else:\n            return apartitions(n - powerof2, powerof2) + apartitions(n, powerof2 // 2)\n    return apartitions(amount, power(amount))\n        \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def power(n):\n        total = 1\n        while total < n:\n            total *= 2 \n        return total \n    def apartitions(n, powerof2):\n        if powerof2 <= 1:\n            return 1\n        elif n < 0:\n            return 0\n        else:\n            return apartitions(n - powerof2, powerof2) + apartitions(n, powerof2 // 2)\n    return apartitions(amount, power(amount))\n        \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 325, in count_change","    return apartitions(amount, power(amount))","NameError: name 'apartitions' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":223,"studentId":0,"date":null,"diff":"\r\nInputObject                                                          SideIndicator\r\n-----------                                                          -------------\r\nimport math                                                          =>           \r\n        if type(math.log10(amount)) == int:                          =>           \r\n        remain = amount - n                                          =>           \r\n        if amount == 0  or amount == 1:                              =>           \r\n        elif amount < 0:                                             =>           \r\n        elif n < 1:                                                  =>           \r\n            return partition(amount, n/2) + partition(remain, n)     =>           \r\n                                                                     =>           \r\n        if amount == 1:                                              <=           \r\n        elif type(amount) == int:                                    <=           \r\n            return is_pow_two(amount / 2)                            <=           \r\n        if n == 1:                                                   <=           \r\n        elif n <= 1:                                                 <=           \r\n        elif amount == 0:                                            <=           \r\n        elif not is_pow_two(amount):                                 <=           \r\n            return partition(amount, n/2) + partition(amount - n, n) <=           \r\n            return 1 + 2 * partition(amount, n/2)                    <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    #Determines the largest coin that can pay for a given amount\n    def biggest_pow_two(amount):\n        pow_two = 1\n        exponent = 0\n        while pow_two * 2 <= amount:\n            pow_two *= 2\n            exponent += 1\n        return pow_two\n\n    def is_pow_two(amount):\n        if amount == 1:\n            return True\n        elif type(amount) == int:\n            return is_pow_two(amount / 2)\n        else:\n            return False\n\n    def partition(amount, n):\n        if n == 1:\n            return 1\n        elif n <= 1:\n            return 0\n        elif amount == 0:\n            return 0\n        elif not is_pow_two(amount):\n            return partition(amount, n/2) + partition(amount - n, n)\n        else:\n            return 1 + 2 * partition(amount, n/2)\n\n    return partition(amount, biggest_pow_two(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    #Determines the largest coin that can pay for a given amount\n    def biggest_pow_two(amount):\n        pow_two = 1\n        exponent = 0\n        while pow_two * 2 <= amount:\n            pow_two *= 2\n            exponent += 1\n        return pow_two\n\n    def is_pow_two(amount):\n        if type(math.log10(amount)) == int:\n            return True\n        else:\n            return False\n\n    def partition(amount, n):\n        remain = amount - n\n        if amount == 0  or amount == 1:\n            return 1\n        elif amount < 0:\n            return 0\n        elif n < 1:\n            return 0\n        else:\n            return partition(amount, n/2) + partition(remain, n)\n\n    return partition(amount, biggest_pow_two(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 333, in partition","    return partition(amount, n/2) + partition(amount - n, n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 333, in partition","    return partition(amount, n/2) + partition(amount - n, n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 333, in partition","    return partition(amount, n/2) + partition(amount - n, n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 333, in partition","    return partition(amount, n/2) + partition(amount - n, n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 333, in partition","    return partition(amount, n/2) + partition(amount - n, n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 332, in partition","    elif not is_pow_two(amount):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 318, in is_pow_two","    if amount == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":224,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                                                                  SideIn\r\n                                                                                                                                             dicato\r\n                                                                                                                                             r     \r\n-----------                                                                                                                                  ------\r\n        return count_change_helper(amount - changeValues[store], store, changeValues) + count_change_helper(amount, store + 1, changeValues) =>    \r\n    print(len(changeValues))                                                                                                                 <=    \r\n        return count_change_helper(amount - changeValues[store], changeValues, store) + count_change_helper(amount, changeValues, store + 1) <=    \r\n\r\n\r\n","before":"def count_change(amount):\n\t\"\"\"Return the number of ways to make change for amount.\n\n\t>>> count_change(7)\n\t6\n\t>>> count_change(10)\n\t14\n\t>>> count_change(20)\n\t60\n\t>>> count_change(100)\n\t9828\n\t\"\"\"\n\taccumulationStore = 2\n\tchangeValues = [1]\n\twhile(accumulationStore <= amount):\n\t\tchangeValues.append(accumulationStore)\n\t\taccumulationStore *= 2\n\t\n\treturn count_change_helper(amount, 0, changeValues)\n\t\ndef count_change_helper(amount, store, changeValues):\n\tprint(len(changeValues))\n\tif amount == 0:\n\t\treturn 1\n\telif amount < 0 or len(changeValues) == store:\n\t\treturn 0\n\telse:\n\t\treturn count_change_helper(amount - changeValues[store], changeValues, store) + count_change_helper(amount, changeValues, store + 1)\ndef print_move(origin, destination):\n\t\"\"\"Print instructions to move a disk.\"\"\"\n\tprint(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n\t\"\"\"Return the number of ways to make change for amount.\n\n\t>>> count_change(7)\n\t6\n\t>>> count_change(10)\n\t14\n\t>>> count_change(20)\n\t60\n\t>>> count_change(100)\n\t9828\n\t\"\"\"\n\taccumulationStore = 2\n\tchangeValues = [1]\n\twhile(accumulationStore <= amount):\n\t\tchangeValues.append(accumulationStore)\n\t\taccumulationStore *= 2\n\t\n\treturn count_change_helper(amount, 0, changeValues)\n\t\ndef count_change_helper(amount, store, changeValues):\n\tif amount == 0:\n\t\treturn 1\n\telif amount < 0 or len(changeValues) == store:\n\t\treturn 0\n\telse:\n\t\treturn count_change_helper(amount - changeValues[store], store, changeValues) + count_change_helper(amount, store + 1, changeValues)\ndef print_move(origin, destination):\n\t\"\"\"Print instructions to move a disk.\"\"\"\n\tprint(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    accumulationStore = 2\r\n    changeValues = [1]\r\n    while (accumulationStore<=amount):\r\n        changeValues.append(accumulationStore)\r\n        accumulationStore *= 2\r\n    return count_change_helper(amount, 0)\r\ndef count_change_helper(amount, store, changeValues):\r\n    print(len(changeValues))\r\n    if amount==0:\r\n        return 1\r\n    elif amount<0 or len(changeValues)==store:\r\n        return 0\r\n    else:\r\n        return count_change_helper(amount-changeValues[store], changeValues, store)+count_change_helper(amount, changeValues, store+1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(LeafWildcard(\"ArgNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChildren(LeafWildcard(\"ArgNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","3","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 271, in count_change","    return count_change_helper(amount, 0, changeValues)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 280, in count_change_helper","    return count_change_helper(amount - changeValues[store], changeValues, store) + count_change_helper(amount, changeValues, store + 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 274, in count_change_helper","    print(len(changeValues))","TypeError: object of type 'int' has no len()","","# Error: expected","#     6","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":225,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        elif a < 0:  =>           \r\n            return 0 =>           \r\n                     =>           \r\n                     <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    power = 0\n    def power_two(x, power):\n        if pow(2,power) <= x:\n            return  power_two(x,power+1)\n        else:\n            return pow(2,power-1)\n            \n    b = power_two(amount, power)\n    def count_partitions(a,b):\n        if a==0:\n            return 1\n        elif b == 0:\n            return 0\n        else:\n            w = count_partitions(a-b, b)\n            wo = count_partitions(a, b//2)\n            return w + wo\n\n    return count_partitions(amount, b) \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    power = 0\n    def power_two(x, power):\n        if pow(2,power) <= x:\n            return  power_two(x,power+1)\n        else:\n            return pow(2,power-1)\n\n    b = power_two(amount, power)\n    def count_partitions(a,b):\n        if a==0:\n            return 1\n        elif a < 0:\n            return 0\n        elif b == 0:\n            return 0\n        else:\n            w = count_partitions(a-b, b)\n            wo = count_partitions(a, b//2)\n            return w + wo\n\n    return count_partitions(amount, b) \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 313, in count_partitions","    w = count_partitions(a-b, b)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 313, in count_partitions","    w = count_partitions(a-b, b)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 313, in count_partitions","    w = count_partitions(a-b, b)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 313, in count_partitions","    w = count_partitions(a-b, b)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 313, in count_partitions","    w = count_partitions(a-b, b)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 313, in count_partitions","    w = count_partitions(a-b, b)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 308, in count_partitions","    if a==0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":226,"studentId":0,"date":null,"diff":"\r\nInputObject                                                            SideIndicator\r\n-----------                                                            -------------\r\n        if amount == 0 or amount == 1 or n == 1:                       =>           \r\n            return use_max(amount-n, n) + use_max(amount, n // 2)      =>           \r\n        if amount == 0 or amount == 1:                                 <=           \r\n            return use_max(amount-n, n // 2) + use_max(amount, n // 2) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def use_max(amount, n):\n        if amount < 0:\n            return 0\n        if amount == 0 or amount == 1:\n            return 1\n        else:\n            return use_max(amount-n, n // 2) + use_max(amount, n // 2)\n    x = 1\n    while x <= amount:\n        x *= 2\n    return use_max(amount, x // 2)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def use_max(amount, n):\n        if amount < 0:\n            return 0\n        if amount == 0 or amount == 1 or n == 1:\n            return 1\n        else:\n            return use_max(amount-n, n) + use_max(amount, n // 2)\n    x = 1\n    while x <= amount:\n        x *= 2\n    return use_max(amount, x // 2)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 328, in use_max","    return use_max(amount-n, n // 2) + use_max(amount, n // 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 328, in use_max","    return use_max(amount-n, n // 2) + use_max(amount, n // 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 328, in use_max","    return use_max(amount-n, n // 2) + use_max(amount, n // 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 328, in use_max","    return use_max(amount-n, n // 2) + use_max(amount, n // 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 328, in use_max","    return use_max(amount-n, n // 2) + use_max(amount, n // 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 328, in use_max","    return use_max(amount-n, n // 2) + use_max(amount, n // 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 323, in use_max","    if amount < 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":227,"studentId":0,"date":null,"diff":"\r\nInputObject                                                           SideIndicator\r\n-----------                                                           -------------\r\n        elif coin == 1:                                               =>           \r\n            return helper(coin, x-coin)                               =>           \r\n        return helper(coin, x-coin) + helper(next_coin(coin), x)      =>           \r\n        elif coin == 1 and x == 1:                                    <=           \r\n            return 1                                                  <=           \r\n        return helper(coin, x-coin) + helper(next_coin(coin), x-coin) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def find_high(x = 1):\n        if x > amount:\n            return x // 2\n        return find_high(x*2)\n    def next_coin(x):\n        if x == 1:\n            return 1\n        return x // 2\n    def helper(coin, x):\n        if x == 0:\n            return 1\n        elif x < 0:\n            return 0\n        elif coin == 1 and x == 1:\n            return 1\n        return helper(coin, x-coin) + helper(next_coin(coin), x-coin)\n    return helper(find_high(),amount)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def find_high(x = 1):\n        if x > amount:\n            return x // 2\n        return find_high(x*2)\n    def next_coin(x):\n        if x == 1:\n            return 1\n        return x // 2\n    def helper(coin, x):\n        if x == 0:\n            return 1\n        elif x < 0:\n            return 0\n        elif coin == 1:\n            return helper(coin, x-coin)\n        return helper(coin, x-coin) + helper(next_coin(coin), x)\n    return helper(find_high(),amount)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","1","","# Error: expected","#     6","# but got","#     1","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":228,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                  SideIndicator\r\n-----------                                                                  -------------\r\n        return common_cents(amount, 2 * n) + common_cents(amount - n, n)     =>           \r\n                                                                             =>           \r\n        return common_cents(amount - 2 * n, n) + common_cents(amount, n - 1) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def common_cents(amount, n):\n        if amount < 0:\n            return 0\n        if amount == 0:\n            return 1\n        if n > amount:\n            return 0\n        return common_cents(amount - 2 * n, n) + common_cents(amount, n - 1)\n    return common_cents(amount, 1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def common_cents(amount, n):\n        if amount < 0:\n            return 0\n        if amount == 0:\n            return 1\n        if n > amount:\n            return 0\n        return common_cents(amount, 2 * n) + common_cents(amount - n, n)\n    return common_cents(amount, 1)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def common_cents(amount, n):\r\n        if amount<0:\r\n            return 0\r\n        if amount==0:\r\n            return 1\r\n        if n>amount:\r\n            return 0\r\n        return common_cents(amount-2*n, n)+common_cents(amount, n-1)\r\n    return common_cents(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 292, in common_cents","    return common_cents(amount - 2 * n, n) + common_cents(amount, n - 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 292, in common_cents","    return common_cents(amount - 2 * n, n) + common_cents(amount, n - 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 292, in common_cents","    return common_cents(amount - 2 * n, n) + common_cents(amount, n - 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 292, in common_cents","    return common_cents(amount - 2 * n, n) + common_cents(amount, n - 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 292, in common_cents","    return common_cents(amount - 2 * n, n) + common_cents(amount, n - 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 292, in common_cents","    return common_cents(amount - 2 * n, n) + common_cents(amount, n - 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 286, in common_cents","    if amount < 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":229,"studentId":0,"date":null,"diff":"\r\nInputObject                            SideIndicator\r\n-----------                            -------------\r\n            powers_of_two.append(2**x) =>           \r\n            powers_of_two.append(x)    <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    powers_of_two = []\n    for x in range(100):\n        if 2**x < amount:\n            powers_of_two.append(x)\n    max_value = max(powers_of_two)\n\n    def part_count(amount, max_value):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif max_value == 1:\n            return 1\n        else:\n            return part_count(amount - max_value, max_value) \\\n            + part_count(amount, max_value//2)\n\n    return part_count(amount, max_value)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    powers_of_two = []\n    for x in range(100):\n        if 2**x < amount:\n            powers_of_two.append(2**x)\n    max_value = max(powers_of_two)\n\n    def part_count(amount, max_value):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif max_value == 1:\n            return 1\n        else:\n            return part_count(amount - max_value, max_value) \\\n            + part_count(amount, max_value//2)\n\n    return part_count(amount, max_value)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","4","","# Error: expected","#     6","# but got","#     4","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":230,"studentId":0,"date":null,"diff":"\r\nInputObject                             SideIndicator\r\n-----------                             -------------\r\n        if y == 1:                      =>           \r\n        elif n < y:                     =>           \r\n            return coin_counter(n,y//2) =>           \r\n        if n == 0:                      <=           \r\n        elif n < 0:                     <=           \r\n            return 0                    <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def coin_counter(n,y):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif y == 0:\n            return 1 + coin_counter(n,y//2)\n        else:\n            return coin_counter(n-y,y) + coin_counter(n,y//2)\n    \n    return coin_counter(amount,power_total(amount))\n\ndef power_total(amount):\n    x = 0\n    while pow(2,x) <= amount:\n        x += 1\n    return pow(2,x-1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def coin_counter(n,y):\n        if y == 1:\n            return 1\n        elif n < y:\n            return coin_counter(n,y//2)\n        elif y == 0:\n            return 1 + coin_counter(n,y//2)\n        else:\n            return coin_counter(n-y,y) + coin_counter(n,y//2)\n    \n    return coin_counter(amount,power_total(amount))\n\ndef power_total(amount):\n    x = 0\n    while pow(2,x) <= amount:\n        x += 1\n    return pow(2,x-1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 302, in coin_counter","    return 1 + coin_counter(n,y//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 302, in coin_counter","    return 1 + coin_counter(n,y//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 302, in coin_counter","    return 1 + coin_counter(n,y//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 302, in coin_counter","    return 1 + coin_counter(n,y//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 302, in coin_counter","    return 1 + coin_counter(n,y//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 302, in coin_counter","    return 1 + coin_counter(n,y//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 297, in coin_counter","    if n == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":231,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n        elif amount < 0: =>           \r\n        elif amount < 1: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10) \n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    s = [2**n for n in range(amount + 1) if 2**n <= amount]\n\n    def count_partitions(amount, m):\n        if amount == 1:\n            return 1\n        elif amount < 1:\n            return 0\n        elif m == 1:\n            return 1\n        else:\n            return count_partitions(amount - m, m) + count_partitions(amount, m/2)\n    return count_partitions(amount, max(s))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10) \n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    s = [2**n for n in range(amount + 1) if 2**n <= amount]\n\n    def count_partitions(amount, m):\n        if amount == 1:\n            return 1\n        elif amount < 0:\n            return 0\n        elif m == 1:\n            return 1\n        else:\n            return count_partitions(amount - m, m) + count_partitions(amount, m/2)\n    return count_partitions(amount, max(s))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10) ","10","","# Error: expected","#     14","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":232,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n            return 1 =>           \r\n            return 0 <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def largest_coin(amount):\n        coin = 1\n        while coin < amount:\n            coin = 2 * coin\n        return coin\n\n    def change_coins(amount,coin):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif coin == 1:\n            return 0\n        else:\n            return change_coins(amount - coin, coin) + change_coins(amount, coin/2)\n    return change_coins(amount, largest_coin(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def largest_coin(amount):\n        coin = 1\n        while coin < amount:\n            coin = 2 * coin\n        return coin\n\n    def change_coins(amount,coin):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif coin == 1:\n            return 1\n        else:\n            return change_coins(amount - coin, coin) + change_coins(amount, coin/2)\n    return change_coins(amount, largest_coin(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":233,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n        elif biggest == 0: =>           \r\n        elif number == 0:  <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_partitions(number, biggest):\n        if number < 0:\n            return 0\n        elif number == 0:\n            return 1\n        else:\n            contains = count_partitions(number - pow(2, biggest), biggest)\n            not_contains = count_partitions(number, biggest - 1)\n            return contains + not_contains\n\n    def find_biggest_coin(number):\n        k = 0\n        while pow(2, k) <= number:\n            k += 1\n        return k - 1\n\n    biggest_coin = find_biggest_coin(amount)\n\n    return count_partitions(amount, biggest_coin)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_partitions(number, biggest):\n        if number < 0:\n            return 0\n        elif biggest == 0:\n            return 1\n        else:\n            contains = count_partitions(number - pow(2, biggest), biggest)\n            not_contains = count_partitions(number, biggest - 1)\n            return contains + not_contains\n\n    def find_biggest_coin(number):\n        k = 0\n        while pow(2, k) <= number:\n            k += 1\n        return k - 1\n\n    biggest_coin = find_biggest_coin(amount)\n\n    return count_partitions(amount, biggest_coin)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_partitions(number, biggest):\r\n        if number<0:\r\n            return 0\r\n        elif number==0:\r\n            return 1\r\n        else:\r\n            contains = count_partitions(number-pow(2, biggest), biggest)\r\n            not_contains = count_partitions(number, biggest-1)\r\n            return contains+k\r\n    def find_biggest_coin(number):\r\n        k = 0\r\n        while pow(2, k)<=number:\r\n            k += 1\r\n        return k-1\r\n    biggest_coin = find_biggest_coin(amount)\r\n    return count_partitions(amount, biggest_coin)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 338, in count_partitions","    not_contains = count_partitions(number, biggest - 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 337, in count_partitions","    contains = count_partitions(number - pow(2, biggest), biggest)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 338, in count_partitions","    not_contains = count_partitions(number, biggest - 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 337, in count_partitions","    contains = count_partitions(number - pow(2, biggest), biggest)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 338, in count_partitions","    not_contains = count_partitions(number, biggest - 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 337, in count_partitions","    contains = count_partitions(number - pow(2, biggest), biggest)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 332, in count_partitions","    if number < 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":234,"studentId":0,"date":null,"diff":"\r\nInputObject       SideIndicator\r\n-----------       -------------\r\n        print (i) <=           \r\n                  <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper(n, max_piece):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif max_piece == 0:\n            return 0\n        else:\n            return helper(n - max_piece, max_piece) + helper(n, max_piece // 2)\n\n    i = 1\n    while i < amount:\n        print (i)\n        i *= 2\n    max_quantity = i\n\n    return helper(amount, max_quantity)\n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper(n, max_piece):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif max_piece == 0:\n            return 0\n        else:\n            return helper(n - max_piece, max_piece) + helper(n, max_piece // 2)\n    i = 1\n    while i < amount:\n        i *= 2\n    max_quantity = i\n\n    return helper(amount, max_quantity)\n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","1","2","4","6","","# Error: expected","#     6","# but got","#     1","#     2","#     4","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":235,"studentId":0,"date":null,"diff":"\r\nInputObject                                   SideIndicator\r\n-----------                                   -------------\r\n    biggest_partition=2                       =>           \r\n    while biggest_partition<amount:           =>           \r\n        biggest_partition=biggest_partition*2 =>           \r\n    biggest_partition=0                       <=           \r\n    while amount%2!=0:                        <=           \r\n        if amount%2==0:                       <=           \r\n            biggest_partition=amount          <=           \r\n            amount-=1                         <=           \r\n        else:                                 <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    biggest_partition=0\n    while amount%2!=0:\n        if amount%2==0:\n            biggest_partition=amount \n        else:\n            amount-=1\n    def count_part(n,m):\n        if n==0:\n            return 1\n        elif n<0:\n            return 0\n        elif m==0:\n            return 0\n        else:\n            return count_part(n-m,m)+count_part(n,m//2)\n    return count_part(amount,biggest_partition)\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    biggest_partition=2\n    while biggest_partition<amount:\n        biggest_partition=biggest_partition*2\n    def count_part(n,m):\n        if n==0:\n            return 1\n        elif n<0:\n            return 0\n        elif m==0:\n            return 0\n        else:\n            return count_part(n-m,m)+count_part(n,m//2)\n    return count_part(amount,biggest_partition)\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":236,"studentId":0,"date":null,"diff":"\r\nInputObject                         SideIndicator\r\n-----------                         -------------\r\n    def fit(i):                     =>           \r\n        if i*2>amount:              =>           \r\n            return count(amount, i) =>           \r\n            return fit(i*2)         =>           \r\n        else:                       =>           \r\n    return fit(1)                   =>           \r\n    return count(7,4)               <=           \r\n                                    <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    def count(num, k):\n        if num<0:\n            return 0\n        elif num==0 or k==1:\n            return 1\n        else:\n            return count(num, k/2) + count(num-k,k)\n    return count(7,4)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def fit(i):\n        if i*2>amount:\n            return count(amount, i)\n        else:\n            return fit(i*2)\n    def count(num, k):\n        if num<0:\n            return 0\n        elif num==0 or k==1:\n            return 1\n        else:\n            return count(num, k/2) + count(num-k,k)\n    return fit(1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","6","","# Error: expected","#     14","# but got","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":237,"studentId":0,"date":null,"diff":"\r\nInputObject                    SideIndicator\r\n-----------                    -------------\r\n            dummy = dummy // 2 =>           \r\n            dummy // 2         <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def pow2(num):\n        dummy = num\n        dummy_pow = 0\n        while dummy > 0:\n            dummy // 2\n            dummy_pow += 1\n        return 2**(dummy_pow - 1)\n    def matcher(maxi, coin):\n        if maxi == 0:\n            return 1\n        elif maxi < 0:\n            return 0\n        elif coin == 0:\n            return 0\n        else:\n            return matcher(maxi - coin, coin) + matcher(maxi, coin // 2)\n    return matcher(amount, pow2(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def pow2(num):\n        dummy = num\n        dummy_pow = 0\n        while dummy > 0:\n            dummy = dummy // 2\n            dummy_pow += 1\n        return 2**(dummy_pow - 1)\n    def matcher(maxi, coin):\n        if maxi == 0:\n            return 1\n        elif maxi < 0:\n            return 0\n        elif coin == 0:\n            return 0\n        else:\n            return matcher(maxi - coin, coin) + matcher(maxi, coin // 2)\n    return matcher(amount, pow2(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     6","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":1,"Id":238,"studentId":0,"date":null,"diff":"\r\nInputObject                                                 SideIndicator\r\n-----------                                                 -------------\r\n    return count_using(1, amount)                           =>           \r\ndef count_using(min_coin, amount):                          =>           \r\n    if amount < 0:                                          =>           \r\n        return 0                                            =>           \r\n    elif amount == 0:                                       =>           \r\n        return 1                                            =>           \r\n    elif min_coin > amount:                                 =>           \r\n        return 0                                            =>           \r\n        with_min = count_using(min_coin, amount - min_coin) =>           \r\n        without_min = count_using(2*min_coin, amount)       =>           \r\n        return with_min + without_min                       =>           \r\n    else:                                                   =>           \r\n                                                            =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return count_using(1, amount)\n\ndef count_using(min_coin, amount):\n    if amount < 0:\n        return 0\n    elif amount == 0:\n        return 1\n    elif min_coin > amount:\n        return 0\n    else:\n        with_min = count_using(min_coin, amount - min_coin)\n        without_min = count_using(2*min_coin, amount)\n        return with_min + without_min\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","","# Error: expected","#     6","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":239,"studentId":0,"date":null,"diff":"\r\nInputObject                        SideIndicator\r\n-----------                        -------------\r\n        elif n == 1:               =>           \r\n            return 1               =>           \r\n        elif m == 1 and not m > n: =>           \r\n            return 1               =>           \r\n        elif m > n :               <=           \r\n            return 0               <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    # inspired by the textbook example counting_partitions\n    def coin_type(n, m, x):\n        while 2**x < n:\n            m = 2**x\n            x+=1\n        return m\n    def count_partitions(n, m):\n        if n==0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        elif m > n :\n            return 0\n        else:\n            with_m = count_partitions(n-m, m)\n            without_m = count_partitions(n, m/2)\n            return with_m + without_m\n    return count_partitions(amount, coin_type(amount, 0, 0))\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    # inspired by the textbook example counting_partitions\n    def coin_type(n, m, x):\n        while 2**x < n:\n            m = 2**x\n            x+=1\n        return m\n    def count_partitions(n, m):\n        if n==0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif m == 1 and not m > n:\n            return 1\n        else:\n            with_m = count_partitions(n-m, m)\n            without_m = count_partitions(n, m/2)\n            return with_m + without_m\n    return count_partitions(amount, coin_type(amount, 0, 0))\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def coin_type(n, m, x):\r\n        while 2**x<n:\r\n            m = 2**x\r\n            x += 1\r\n        return m\r\n    def count_partitions(n, m):\r\n        if n==0:\r\n            return 1\r\n        elif n<0:\r\n            return 0\r\n        elif m==0:\r\n            return 0\r\n        elif m>n:\r\n            return 0\r\n        else:\r\n            with_m = count_partitions(n-m, m)\r\n            without_m = count_partitions(n, m/2)\r\n            return with_m+k\r\n    return count_partitions(amount, coin_type(amount, 0, 0))\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 310, in count_partitions","    without_m = count_partitions(n, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 309, in count_partitions","    with_m = count_partitions(n-m, m)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 310, in count_partitions","    without_m = count_partitions(n, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 309, in count_partitions","    with_m = count_partitions(n-m, m)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 310, in count_partitions","    without_m = count_partitions(n, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 309, in count_partitions","    with_m = count_partitions(n-m, m)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 300, in count_partitions","    if n==0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":240,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n        with_min = counter(mini, amount - mini) =>           \r\n        without_min = counter(2*mini, amount)   =>           \r\n        with_min = count(mini, amount - mini)   <=           \r\n        without_min = count(2*mini, amount)     <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    return counter(1, amount)\n\ndef counter(mini, amount):\n    if amount < 0:\n        return 0\n    elif amount == 0:\n        return 1\n    elif mini > amount:\n        return 0\n    else:\n        with_min = count(mini, amount - mini)\n        without_min = count(2*mini, amount)\n        return with_min + without_min\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    return counter(1, amount)\n\ndef counter(mini, amount):\n    if amount < 0:\n        return 0\n    elif amount == 0:\n        return 1\n    elif mini > amount:\n        return 0\n    else:\n        with_min = counter(mini, amount - mini)\n        without_min = counter(2*mini, amount)\n        return with_min + without_min\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    return counter(1, amount)\r\ndef counter(mini, amount):\r\n    if amount<0:\r\n        return 0\r\n    elif amount==0:\r\n        return 1\r\n    elif mini>amount:\r\n        return 0\r\n    else:\r\n        with_min = count(mini, amount-mini)\r\n        without_min = count(2*mini, amount)\r\n        return with_min+k\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 296, in count_change","    return counter(1, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 306, in counter","    with_min = count(mini, amount - mini)","NameError: name 'count' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":241,"studentId":0,"date":null,"diff":"\r\nInputObject                  SideIndicator\r\n-----------                  -------------\r\n        if amount == 0:      =>           \r\n        elif bitcoin>amount: =>           \r\n        if bitcoin>amount:   <=           \r\n        elif amount == 0:    <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \n\n    def real_count(bitcoin, amount):\n        if bitcoin>amount:\n            return 0\n\n        elif amount == 0:\n            return 1\n\n        \n\n        \n\n\n        elif amount<0:\n            return 0\n\n        else:\n            return real_count(bitcoin,amount-bitcoin)+real_count(2*bitcoin,amount)\n\n    \n\n    return real_count(1,amount)\n  \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \n\n    def real_count(bitcoin, amount):\n        \n\n        if amount == 0:\n            return 1\n\n        \n\n        elif bitcoin>amount:\n            return 0\n\n\n        elif amount<0:\n            return 0\n\n        else:\n            return real_count(bitcoin,amount-bitcoin)+real_count(2*bitcoin,amount)\n\n    \n\n    return real_count(1,amount)\n  \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def real_count(bitcoin, amount):\r\n        if amount>amount:\r\n            return 0\r\n        elif amount==0:\r\n            return 1\r\n        elif amount<0:\r\n            return 0\r\n        else:\r\n            return real_count(bitcoin, amount-bitcoin)+real_count(2*bitcoin, amount)\r\n    return real_count(1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":242,"studentId":0,"date":null,"diff":"\r\nInputObject                                                   SideIndicator\r\n-----------                                                   -------------\r\n                                                              =>           \r\n        if totalSum > amount:                                 =>           \r\n            return 0                                          =>           \r\n        elif totalSum == amount:                              =>           \r\n        elif coinType+totalSum > amount:                      =>           \r\n            return 0                                          =>           \r\n        elif totalSum < amount:                               =>           \r\n            numWays = 0                                       =>           \r\n            while totalSum <= amount:                         =>           \r\n                numWays += changeHelper(totalSum, coinType*2) =>           \r\n                totalSum+= coinType                           =>           \r\n            return numWays                                    =>           \r\n    return changeHelper(0,1)                                  =>           \r\n                                                              =>           \r\n                                                              =>           \r\n                                                              =>           \r\n    numWays = 0                                               <=           \r\n        if totalSum == amount:                                <=           \r\n        else:                                                 <=           \r\n            return changeHelper(totalSum)                     <=           \r\n    return changeHelper                                       <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"   \n    numWays = 0\n    def changeHelper(totalSum, coinType):\n        if totalSum == amount:\n            return 1\n        else:\n            return changeHelper(totalSum)\n\n    return changeHelper\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"   \n    \n\n\n\n    def changeHelper(totalSum, coinType):\n        if totalSum > amount:\n            return 0\n        elif totalSum == amount:\n            return 1\n        elif coinType+totalSum > amount:\n            return 0\n        elif totalSum < amount:\n            numWays = 0\n            while totalSum <= amount:\n                numWays += changeHelper(totalSum, coinType*2)\n                totalSum+= coinType \n            return numWays\n\n    return changeHelper(0,1)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    amount = 0\r\n    def changeHelper(totalSum, coinType):\r\n        if totalSum==amount:\r\n            return 1\r\n        else:\r\n            return changeHelper(totalSum)\r\n    return changeHelper\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","<function count_change.<locals>.changeHelper at 0x000001DF200CB620>","","# Error: expected","#     6","# but got","#     <function count_change.<locals>.changeHelper at 0x000001DF200CB620>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":243,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                             SideIndicator\r\n-----------                                                                             -------------\r\n            return count_partitions(n-m, m) + count_partitions(n, coin_creater(m-1, 0)) =>           \r\n            return count_partitions(n-m, m) + count_partitions(n, coin_creater(m-1))    <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_partitions(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, coin_creater(m-1))\n    def coin_creater(amt, x):\n        if amt == 0:\n            return 0\n        elif 2**x < amt:\n            return coin_creater(amt, x+1)\n        elif 2**x == amt:\n            return amt\n        else:\n            return 2**(x-1)\n    return count_partitions(amount, coin_creater(amount,0))\n\n\n\n    return count_partitions(amount, coin_creater(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_partitions(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, coin_creater(m-1, 0))\n    def coin_creater(amt, x):\n        if amt == 0:\n            return 0\n        elif 2**x < amt:\n            return coin_creater(amt, x+1)\n        elif 2**x == amt:\n            return amt\n        else:\n            return 2**(x-1)\n    return count_partitions(amount, coin_creater(amount,0))\n\n\n\n    return count_partitions(amount, coin_creater(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_partitions(n, m):\r\n        if amount==0:\r\n            return 1\r\n        elif n<0:\r\n            return 0\r\n        elif m==0:\r\n            return 0\r\n        else:\r\n            return count_partitions(n-m, m)+count_partitions(n, coin_creater(m-1))\r\n    def coin_creater(amt, x):\r\n        if amt==0:\r\n            return 0\r\n        elif 2**x<amt:\r\n            return coin_creater(amt, x+1)\r\n        elif 2**x==amt:\r\n            return amt\r\n        else:\r\n            return 2**(x-1)\r\n    return count_partitions(amount, coin_creater(amount, 0))\r\n    return count_partitions(amount, coin_creater(amount))\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 303, in count_change","    return count_partitions(amount, coin_creater(amount,0))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 293, in count_partitions","    return count_partitions(n-m, m) + count_partitions(n, coin_creater(m-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 293, in count_partitions","    return count_partitions(n-m, m) + count_partitions(n, coin_creater(m-1))","TypeError: coin_creater() missing 1 required positional argument: 'x'","","# Error: expected","#     6","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":244,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        if n<0:      =>           \r\n            return 0 =>           \r\n                     =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n   \n    def coin(n,prev):\n        \n        if n==0:\n            return 1\n        else:\n            c=1\n            path=0\n            while c<=prev:\n                path=path+coin(n-c,c )\n                c=2*c\n            return path\n    \n    return coin(amount,amount)\n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n   \n    def coin(n,prev):\n\n        if n<0:\n            return 0\n        \n        if n==0:\n            return 1\n        else:\n            c=1\n            path=0\n            while c<=prev:\n                path=path+coin(n-c,c )\n                c=2*c\n            return path\n    \n    return coin(amount,amount)\n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def coin(n, prev):\r\n        if amount==0:\r\n            return 1\r\n        else:\r\n            c = 1\r\n            path = 0\r\n            while c<=prev:\r\n                path = path+coin(n-c, c)\r\n                c = 2*c\r\n            return path\r\n    return coin(amount, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 330, in coin","    path=path+coin(n-c,c )","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 330, in coin","    path=path+coin(n-c,c )","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 330, in coin","    path=path+coin(n-c,c )","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 330, in coin","    path=path+coin(n-c,c )","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 330, in coin","    path=path+coin(n-c,c )","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 330, in coin","    path=path+coin(n-c,c )","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 324, in coin","    if n==0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":245,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n            return 1 =>           \r\n            return 0 <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    largest_coin = 1\n    while amount / largest_coin >= 1:\n        largest_coin += largest_coin\n    def ways(coin, amount_left):\n        if coin == 1:\n            return 1\n        elif amount_left == 0:\n            return 0\n        elif amount_left < 0:\n            return 0\n        else:\n            return ways(coin, amount_left - coin) + ways(coin / 2, amount_left)\n    return ways(largest_coin, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    largest_coin = 1\n    while amount / largest_coin >= 1:\n        largest_coin += largest_coin\n    def ways(coin, amount_left):\n        if coin == 1:\n            return 1\n        elif amount_left == 0:\n            return 1\n        elif amount_left < 0:\n            return 0\n        else:\n            return ways(coin, amount_left - coin) + ways(coin / 2, amount_left)\n    return ways(largest_coin, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","10","","# Error: expected","#     14","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":246,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                               SideIndicator\r\n-----------                                                                               -------------\r\n            return count_change_helper(n - coin, coin) + count_change_helper(n, coin * 2) =>           \r\n            return count_partitions(n - coin, coin) + count_partitions(n, coin * 2)       <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_change_helper(n, coin):\n\t    if n == 0:\n\t\t    return 1\n\t    elif n < 0:\n\t\t    return 0\n\t    elif coin > n:\n\t\t    return 0\n\t    else:\n\t\t    return count_partitions(n - coin, coin) + count_partitions(n, coin * 2)\n    return count_change_helper(amount, 1)\n    \n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_change_helper(n, coin):\n\t    if n == 0:\n\t\t    return 1\n\t    elif n < 0:\n\t\t    return 0\n\t    elif coin > n:\n\t\t    return 0\n\t    else:\n\t\t    return count_change_helper(n - coin, coin) + count_change_helper(n, coin * 2)\n    return count_change_helper(amount, 1)\n    \n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_change_helper(n, coin):\r\n        if amount==0:\r\n            return 1\r\n        elif n<0:\r\n            return 0\r\n        elif coin>n:\r\n            return 0\r\n        else:\r\n            return count_partitions(n-coin, coin)+count_partitions(n, coin*2)\r\n    return count_change_helper(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 331, in count_change","    return count_change_helper(amount, 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 330, in count_change_helper","    return count_partitions(n - coin, coin) + count_partitions(n, coin * 2)","NameError: name 'count_partitions' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":247,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n        elif amount < 0: =>           \r\n        elif n < 0:      <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def coin_changer(amount, coin):\n        if amount == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif coin > amount:\n            return 0\n        elif coin == 0:\n            return 0\n        else:\n            return coin_changer(amount - coin, coin) + coin_changer(amount, coin*2)\n\n        #two different calls to coin_changer needed\n\n    return coin_changer(amount, 1) \n        \n\n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def coin_changer(amount, coin):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif coin > amount:\n            return 0\n        elif coin == 0:\n            return 0\n        else:\n            return coin_changer(amount - coin, coin) + coin_changer(amount, coin*2)\n\n        #two different calls to coin_changer needed\n\n    return coin_changer(amount, 1) \n        \n\n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def coin_changer(amount, coin):\r\n        if amount==0:\r\n            return 1\r\n        elif n<0:\r\n            return 0\r\n        elif coin>amount:\r\n            return 0\r\n        elif coin==0:\r\n            return 0\r\n        else:\r\n            return coin_changer(amount-coin, coin)+coin_changer(amount, coin*2)\r\n    return coin_changer(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 326, in count_change","    return coin_changer(amount, 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in coin_changer","    elif n < 0:","NameError: name 'n' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":248,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                                  SideIndicator\r\n-----------                                                                                                  -------------\r\n            return helper(amount - greatest_coin, greatest_coin) + helper(amount, greatest_coin // 2)        =>           \r\n            return helper(amount - greatest_coin, greatest_coin) + helper(amount, greatest_coin - 1)         <=           \r\n    \"\"\"def count_partitions(amount, m):                                                                      <=           \r\n        def helper(amount):                                                                                  <=           \r\n            m = 0                                                                                            <=           \r\n            while (amount // (2 ** m)) > 1:                                                                  <=           \r\n                m = m + 1                                                                                    <=           \r\n            return m                                                                                         <=           \r\n        if amount == 0:                                                                                      <=           \r\n            return 1                                                                                         <=           \r\n        elif amount < 0:                                                                                     <=           \r\n            return 0                                                                                         <=           \r\n        else:                                                                                                <=           \r\n            return count_partitions(amount - 2 ** m, 2 ** m) + count_partitions(amount, 2 ** (m - 1))\"\"\"     <=           \r\n                                                                                                             <=           \r\n                                                                                                             <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    greatest_coin = 0\n    p = 0 \n    while 2 ** p < amount: \n        p += 1\n        greatest_coin = 2 ** p\n    def helper(amount, greatest_coin): \n        if amount == 0: \n            return 1\n        elif amount < 0: \n            return 0 \n        elif greatest_coin == 0: \n            return 0\n        else: \n            return helper(amount - greatest_coin, greatest_coin) + helper(amount, greatest_coin - 1)\n    return helper(amount, greatest_coin)\n\n\n    \"\"\"def count_partitions(amount, m):\n        def helper(amount):\n            m = 0\n            while (amount // (2 ** m)) > 1:\n                m = m + 1\n            return m \n        if amount == 0: \n            return 1\n        elif amount < 0: \n            return 0\n        else:\n            return count_partitions(amount - 2 ** m, 2 ** m) + count_partitions(amount, 2 ** (m - 1))\"\"\"    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    greatest_coin = 0\n    p = 0 \n    while 2 ** p < amount: \n        p += 1\n        greatest_coin = 2 ** p\n    def helper(amount, greatest_coin): \n        if amount == 0: \n            return 1\n        elif amount < 0: \n            return 0 \n        elif greatest_coin == 0: \n            return 0\n        else: \n            return helper(amount - greatest_coin, greatest_coin) + helper(amount, greatest_coin // 2)\n    return helper(amount, greatest_coin)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    greatest_coin = 0\r\n    p = 0\r\n    while 2**p<amount:\r\n        p += 1\r\n        greatest_coin = 2**p\r\n    def helper(amount, greatest_coin):\r\n        if amount==0:\r\n            return 1\r\n        elif amount<0:\r\n            return 0\r\n        elif greatest_coin==0:\r\n            return 0\r\n        elif m>n:\r\n            return 0\r\n        else:\r\n            return helper(amount-greatest_coin, greatest_coin)+helper(amount, greatest_coin-1)\r\n    return helper(amount, greatest_coin)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-GreaterThan, Children(LeafConstNode(NameExpressionNode-m), SingleChild(LeafConstNode(NameExpressionNode-n)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(ConstantExpressionNode-0)))))))), 3), Selected(\\x => Match(x, StartsWithTarget(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"BinaryExpressionNode\")))))))))))))))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","15","","# Error: expected","#     6","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":249,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                         SideIndicator\r\n-----------                                                                         -------------\r\n    \"*** YOUR CODE HERE ***\"                                                        =>           \r\n    ...       ['While', 'For', 'Recursion', 'FunctionDef'])                         =>           \r\n    \"*** YOUR CODE HERE ***\"                                                        =>           \r\n    return accumulate(lambda a,b: combiner(a, b) if pred(b) else a, base, n, term)  =>           \r\n    >>> count_change(100)                                                           =>           \r\n    if n < 1:                                                                       =>           \r\n        return 0                                                                    =>           \r\n    if n == 1:                                                                      =>           \r\n        return 1                                                                    =>           \r\n    else:                                                                           =>           \r\n        return move_stack(n, start, end)                                            =>           \r\n                                                                                    <=           \r\n    ...       ['While', 'For', 'Recursion'])                                        <=           \r\n    # lambda n: lambda combiner, base, n, term:                                     <=           \r\n    return accumulate(lambda a,b: combiner(a, b) if pred(b) else a, base, n, term)  <=           \r\n                                                                                    <=           \r\n                                                                                    <=           \r\n    >>> count_c'hange(100)                                                          <=           \r\n                                                                                    <=           \r\n                                                                                    <=           \r\n                                                                                    <=           \r\n                                                                                    <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_c'hange(100)\n    9828\n    \"\"\"\n    def helper(amount, coin):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif amount < coin:\n            return 0\n        else:\n            return helper(amount - coin, coin) + helper(amount, coin*2)\n    return helper(amount, 1)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper(amount, coin):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif amount < coin:\n            return 0\n        else:\n            return helper(amount - coin, coin) + helper(amount, coin*2)\n    return helper(amount, 1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def helper(amount, coin):\r\n        if amount<0:\r\n            return 0\r\n        elif amount==0:\r\n            return 1\r\n        elif amount<coin:\r\n            return 0\r\n        else:\r\n            return helper(amount-coin, coin)+helper(amount, coin*2)\r\n    return helper(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","14",">>> count_change(20)","60",">>> count_c'hange(100)","Traceback (most recent call last):","    count_c'hange(100)","                     ^","SyntaxError: EOL while scanning string literal","","# Error: expected","#     9828","# but got","#     SyntaxError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":250,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        #if amount==1:  =>           \r\n            #return 1   =>           \r\n        if amount==0:   =>           \r\n        if amount==1:   <=           \r\n            return 1    <=           \r\n        elif amount==0: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    def count(amount,coin):\n        if amount==1:\n            return 1\n        elif amount==0:\n            return 1\n        elif coin>amount:\n            return 0\n        elif amount<0:\n            return 0\n        else:\n            #return count(amount-coin,coin)\n            return count(amount-coin,coin)+count(amount,coin*2)\n    return count(amount,1)\n\n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    def count(amount,coin):\n        #if amount==1:\n            #return 1\n        if amount==0:\n            return 1\n        elif coin>amount:\n            return 0\n        elif amount<0:\n            return 0\n        else:\n            #return count(amount-coin,coin)\n            return count(amount-coin,coin)+count(amount,coin*2)\n    return count(amount,1)\n\n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count(amount, coin):\r\n        if amount==1:\r\n            return 1\r\n        elif amount==0:\r\n            return 1\r\n        elif coin>amount:\r\n            return 0\r\n        elif amount<0:\r\n            return 0\r\n        else:\r\n            return count(amount-coin, coin)+count(amount, coin*2)\r\n    return count(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","11","","# Error: expected","#     6","# but got","#     11","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":1,"Id":251,"studentId":0,"date":null,"diff":"\r\nInputObject                                         SideIndicator\r\n-----------                                         -------------\r\n    return possiblecombos (amount, 2 ** powerlimit) =>           \r\n    return possiblecombos (amount, powerlimit)      <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    import math\n\n    powerlimit = int(math.log(amount, 2))\n\n    def possiblecombos (amount, biggestcoin):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif biggestcoin == 1:\n            return 1\n        else:\n            return possiblecombos(amount - biggestcoin, biggestcoin) + possiblecombos(amount, biggestcoin/2)\n    return possiblecombos (amount, powerlimit)\n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    import math\n\n    powerlimit = int(math.log(amount, 2))\n\n    def possiblecombos (amount, biggestcoin):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif biggestcoin == 1:\n            return 1\n        else:\n            return possiblecombos(amount - biggestcoin, biggestcoin) + possiblecombos(amount, biggestcoin/2)\n    return possiblecombos (amount, 2 ** powerlimit)\n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","4","","# Error: expected","#     6","# but got","#     4","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":252,"studentId":0,"date":null,"diff":"\r\nInputObject                                             SideIndicator\r\n-----------                                             -------------\r\n    def navya(k, direction, a):                         =>           \r\n            return navya(k+1, -direction, a+direction)  =>           \r\n            return navya(k+1, direction, a+direction)   =>           \r\n    return navya(1,1,0)                                 =>           \r\n    return neha(1, amount)                              =>           \r\n    def helper(k, direction, a):                        <=           \r\n            return helper(k+1, -direction, a+direction) <=           \r\n            return helper(k+1, direction, a+direction)  <=           \r\n    return helper(1,1,0)                                <=           \r\n    return count_use(1, amount)                         <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    return count_use(1, amount)\ndef neha(min_coin, amount):\n    if amount < 0:\n        return 0\n    elif amount == 0:\n        return 1\n    elif min_coin > amount:\n        return 0\n    else:\n        with_min = neha(min_coin, amount - min_coin)\n        without_min = neha(2*min_coin, amount)\n        return with_min + without_min\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    return neha(1, amount)\ndef neha(min_coin, amount):\n    if amount < 0:\n        return 0\n    elif amount == 0:\n        return 1\n    elif min_coin > amount:\n        return 0\n    else:\n        with_min = neha(min_coin, amount - min_coin)\n        without_min = neha(2*min_coin, amount)\n        return with_min + without_min\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    return count_use(1, amount)\r\ndef neha(min_coin, amount):\r\n    if amount<0:\r\n        return 0\r\n    elif amount==0:\r\n        return 1\r\n    elif min_coin>amount:\r\n        return 0\r\n    else:\r\n        with_min = neha(min_coin, amount-min_coin)\r\n        without_min = neha(2*min_coin, amount)\r\n        return with_min+k\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 290, in count_change","    return count_use(1, amount)","NameError: name 'count_use' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":253,"studentId":0,"date":null,"diff":"\r\nInputObject                          SideIndicator\r\n-----------                          -------------\r\n    return count_using(1,amount)     =>           \r\n        return count_using(1,amount) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_using(min_coin, amount):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif min_coin > amount:\n            return 0\n        else:\n            with_min = count_using(min_coin, amount - min_coin)\n            without_min = count_using(2*min_coin, amount)\n            return with_min + without_min\n\n        return count_using(1,amount)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_using(min_coin, amount):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif min_coin > amount:\n            return 0\n        else:\n            with_min = count_using(min_coin, amount - min_coin)\n            without_min = count_using(2*min_coin, amount)\n            return with_min + without_min\n\n    return count_using(1,amount)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_using(min_coin, amount):\r\n        if amount<0:\r\n            return 0\r\n        elif amount==0:\r\n            return 1\r\n        elif min_coin>amount:\r\n            return 0\r\n        else:\r\n            with_min = count_using(min_coin, amount-min_coin)\r\n            without_min = count_using(2*min_coin, amount)\r\n            return with_min+k\r\n        return count_using(1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","","# Error: expected","#     6","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":254,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                SideIndicator\r\n-----------                                                                                -------------\r\n            if n == 0:                                                                     =>           \r\n            return 1                                                                       =>           \r\n        elif n < 0:                                                                        =>           \r\n            return 0                                                                       =>           \r\n        elif m == 0:                                                                       =>           \r\n            return 0                                                                       =>           \r\n        else:                                                                              =>           \r\n            return count_partitions(2**(n-1), n-1, m) + count_partitions(2**(m-1), n, m-1) =>           \r\n    return count_partitions(2**amount, amount, amount)                                     =>           \r\n    x = 1                                                                                  =>           \r\n    while 2**x <= amount:                                                                  =>           \r\n        x += 1                                                                             =>           \r\n    def count_partitions(n, m):                                                            =>           \r\n        \"\"\"Count the ways to partition n using parts up to m.\"\"\"                           =>           \r\n        if n == 0:                                                                         =>           \r\n            return 1                                                                       =>           \r\n        elif n < 0:                                                                        =>           \r\n            return 0                                                                       =>           \r\n        elif m == 0:                                                                       =>           \r\n            return 0                                                                       =>           \r\n        else:                                                                              =>           \r\n            return count_partitions(n-m, m) + count_partitions(n, m//2)                    =>           \r\n    return count_partitions(amount, 2**x)                                                  =>           \r\n    \"\"\"                                                                                    =>           \r\n    \"\"\"                                                                                    =>           \r\n                                                                                           =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_partitions(a, n, m):\n        if a == 0:\n            return 1\n        elif m == 0:\n            return 0\n        else:\n            return count_partitions(a, n-1, m) + count_partitions(a, n, m-1)\n    return count_partitions(2**amount, amount, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"\"\"\n    def count_partitions(a, n, m):\n        if a == 0:\n            return 1\n        elif m == 0:\n            return 0\n        else:\n            return count_partitions(a, n-1, m) + count_partitions(a, n, m-1)\n    return count_partitions(2**amount, amount, amount)\n\n            if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_partitions(2**(n-1), n-1, m) + count_partitions(2**(m-1), n, m-1)\n    return count_partitions(2**amount, amount, amount)\n    \"\"\"\n    x = 1\n    while 2**x <= amount:\n        x += 1\n    def count_partitions(n, m):\n        \"\"\"Count the ways to partition n using parts up to m.\"\"\"\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, m//2)\n    return count_partitions(amount, 2**x)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_partitions(a, n, m):\r\n        if amount==0:\r\n            return 1\r\n        elif m==0:\r\n            return 0\r\n        else:\r\n            return count_partitions(a, n-1, m)+count_partitions(a, n, m-1)\r\n    return count_partitions(2**amount, amount, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 300, in count_partitions","    return count_partitions(a, n-1, m) + count_partitions(a, n, m-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 300, in count_partitions","    return count_partitions(a, n-1, m) + count_partitions(a, n, m-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 300, in count_partitions","    return count_partitions(a, n-1, m) + count_partitions(a, n, m-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 300, in count_partitions","    return count_partitions(a, n-1, m) + count_partitions(a, n, m-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 300, in count_partitions","    return count_partitions(a, n-1, m) + count_partitions(a, n, m-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 300, in count_partitions","    return count_partitions(a, n-1, m) + count_partitions(a, n, m-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 295, in count_partitions","    if a == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":255,"studentId":0,"date":null,"diff":"\r\nInputObject                      SideIndicator\r\n-----------                      -------------\r\n                                 =>           \r\n    return count(amount, change) =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    for index in range(amount):\n        if 2 ** index > amount:\n            change = 2 ** (index - 1)\n\n    def count(amount, change):\n        if amount == 0 or amount == 1 or change == 1:\n            return 1\n        if amount < 0: \n            return 0\n        else:\n            return count(amount, change/2) + count(amount - change, change)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    for index in range(amount):\n        if 2 ** index > amount:\n            change = 2 ** (index - 1)\n\n    def count(amount, change):\n        if amount == 0 or amount == 1 or change == 1:\n            return 1\n        if amount < 0: \n            return 0\n        else:\n            return count(amount, change/2) + count(amount - change, change)\n    \n    return count(amount, change)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","","# Error: expected","#     6","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":256,"studentId":0,"date":null,"diff":"\r\nInputObject                  SideIndicator\r\n-----------                  -------------\r\n        elif amount == coin: =>           \r\n        elif amount == 0:    <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper(coin, amount):\n        if amount < 0 or coin > amount:\n            return 0\n        elif amount == 0:\n            return 1\n        else:\n            x = helper(coin, amount - coin)\n            y = helper(2 * coin, amount)\n            return x + y\n    return helper(1, amount)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper(coin, amount):\n        if amount < 0 or coin > amount:\n            return 0\n        elif amount == coin:\n            return 1\n        else:\n            x = helper(coin, amount - coin)\n            y = helper(2 * coin, amount)\n            return x + y\n    return helper(1, amount)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def helper(coin, amount):\r\n        if amount<0 or coin>amount:\r\n            return 0\r\n        elif amount==0:\r\n            return 1\r\n        else:\r\n            x = helper(coin, amount-coin)\r\n            y = helper(2*coin, amount)\r\n            return x+k\r\n    return helper(1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":257,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        if amount < 0:  =>           \r\n        if amount <= 0: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    def closest_two(amount):\n        \"takes in an integer AMOUNT and returns the closest power of two below it\"\n        x = 2\n        i = 0\n        if amount == 1:\n            return 1\n        while x < amount / 2:\n            x = 2\n            x = x ** i\n            i += 1\n        return x\n    def partition(amount, k):\n        \"\"\"This function tells how many different sums can add up to a number\n        AMOUNT without using any numbers larger than a number K\"\"\"\n        if amount <= 0:\n            return 0\n        elif k == 1:\n            return 1\n        else:\n            return (partition(amount - k, k) + partition(amount, closest_two(k - 1)))\n    return partition(amount, closest_two(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    def closest_two(amount):\n        \"takes in an integer AMOUNT and returns the closest power of two below it\"\n        x = 2\n        i = 0\n        if amount == 1:\n            return 1\n        while x < amount / 2:\n            x = 2\n            x = x ** i\n            i += 1\n        return x\n    def partition(amount, k):\n        \"\"\"This function tells how many different sums can add up to a number\n        AMOUNT without using any numbers larger than a number K\"\"\"\n        if amount < 0:\n            return 0\n        elif k == 1:\n            return 1\n        else:\n            return (partition(amount - k, k) + partition(amount, closest_two(k - 1)))\n    return partition(amount, closest_two(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def closest_two(amount):\r\n        amount = 2\r\n        i = 0\r\n        if amount==1:\r\n            return 1\r\n        while x<amount/2:\r\n            x = 2\r\n            x = x**i\r\n            i += 1\r\n        return x\r\n    def partition(amount, k):\r\n        if amount<=0:\r\n            return 0\r\n        elif k==1:\r\n            return 1\r\n        else:\r\n            return (partition(amount-k, k)+partition(amount, closest_two(k-1)))\r\n    return partition(amount, closest_two(amount))\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","10","","# Error: expected","#     14","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":258,"studentId":0,"date":null,"diff":"\r\nInputObject                                                             SideIndicator\r\n-----------                                                             -------------\r\n            return helper(amount-den, den) + helper(amount, den*2)      =>           \r\n            return helper(amount-den, den) + helper(amount-den, den*2)  <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def helper(amount, den):\n\n        \"\"\"if den == 1 or amount == 1:\n            return 1\"\"\"\n\n        if den > amount or den < 1:\n            return 0\n        elif amount - den == 0:\n            return 1\n        else:\n            return helper(amount-den, den) + helper(amount-den, den*2) \n\n\n\n        # elif amount % den == 0:\n        #     return 1 + helper(amount, den*2) + helper(amount/den, den/2)\n\n        # elif amount % den != 0:\n        #     return helper(amount-1, den) + helper(amount, )\n\n        # else:\n        #     return helper(amount, den *2) + helper(amount-den, den)\n\n\n        \n\n    return helper(amount, 1)\n\n\n\n\"\"\"def count_partitions(n, m):\n        Count the ways to partition n using parts up to m.\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, m-1)\n\n\n\n\n            if den == 1 or amount == 1:\n            return 1\n        \n        elif den < 1:\n            return 0 \"\"\"\n\n\n\n\n\n\n\n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def helper(amount, den):\n\n        \"\"\"if den == 1 or amount == 1:\n            return 1\"\"\"\n\n        if den > amount or den < 1:\n            return 0\n        elif amount - den == 0:\n            return 1\n        else:\n            return helper(amount-den, den) + helper(amount, den*2) \n\n\n\n        # elif amount % den == 0:\n        #     return 1 + helper(amount, den*2) + helper(amount/den, den/2)\n\n        # elif amount % den != 0:\n        #     return helper(amount-1, den) + helper(amount, )\n\n        # else:\n        #     return helper(amount, den *2) + helper(amount-den, den)\n\n\n        \n\n    return helper(amount, 1)\n\n\n\n\"\"\"def count_partitions(n, m):\n        Count the ways to partition n using parts up to m.\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, m-1)\n\n\n\n\n            if den == 1 or amount == 1:\n            return 1\n        \n        elif den < 1:\n            return 0 \"\"\"\n\n\n\n\n\n\n\n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def helper(amount, den):\r\n        if amount>amount or den<1:\r\n            return 0\r\n        elif amount-den==0:\r\n            return 1\r\n        else:\r\n            return helper(amount-den, den)+helper(amount-den, den*2)\r\n    return helper(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","5","","# Error: expected","#     6","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":259,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n            #print(coins) =>           \r\n            print(coins)  <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def get_coins(amount):\n        lst = []\n        i = 0\n        while 2**i <= amount:\n            lst.append(2**i)\n            i += 1\n        return lst\n    def helper(amount, coins):\n        if len(coins) == 0:\n            return 0\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        else:\n            print(coins)\n            return helper(amount - coins[-1], coins) + helper(amount, coins[0:len(coins)-1])\n    return helper(amount, get_coins(amount))\n    \n    \"\"\"\n    def get_power_of_two(n):\n        i = 0\n        while n >= 2**i:\n            i += 1\n        return 2**(i-1)\n\n    if amount < 1:\n        return 0\n    elif amount == 1:\n        return 1\n    else:\n        return count_change(amount-1) + count_change(amount-get_power_of_two(amount))\n    \"\"\"\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def get_coins(amount):\n        lst = []\n        i = 0\n        while 2**i <= amount:\n            lst.append(2**i)\n            i += 1\n        return lst\n    def helper(amount, coins):\n        if len(coins) == 0:\n            return 0\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        else:\n            #print(coins)\n            return helper(amount - coins[-1], coins) + helper(amount, coins[0:len(coins)-1])\n    return helper(amount, get_coins(amount))\n    \n    \"\"\"\n    def get_power_of_two(n):\n        i = 0\n        while n >= 2**i:\n            i += 1\n        return 2**(i-1)\n\n    if amount < 1:\n        return 0\n    elif amount == 1:\n        return 1\n    else:\n        return count_change(amount-1) + count_change(amount-get_power_of_two(amount))\n    \"\"\"\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","[1, 2, 4]","[1, 2, 4]","[1, 2]","[1, 2]","[1]","[1]","[1]","[1]","[1, 2]","[1, 2]","[1, 2]","[1, 2]","[1]","[1]","[1]","[1]","[1]","[1]","[1]","[1]","[1]","[1]","[1]","[1]","[1]","[1]","[1]","[1]","6","","# Error: expected","#     6","# but got","#     [1, 2, 4]","#     [1, 2, 4]","#     [1, 2]","#     [1, 2]","#     [1]","#     [1]","#     [1]","#     [1]","#     [1, 2]","#     [1, 2]","#     [1, 2]","#     [1, 2]","#     [1]","#     [1]","#     [1]","#     [1]","#     [1]","#     [1]","#     [1]","#     [1]","#     [1]","#     [1]","#     [1]","#     [1]","#     [1]","#     [1]","#     [1]","#     [1]","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":260,"studentId":0,"date":null,"diff":"\r\nInputObject        SideIndicator\r\n-----------        -------------\r\n        if x == 0: =>           \r\n        if x == 1: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    factor = 1\n    while factor*2 <= amount:\n        factor *= 2\n    def find_factor(x, factor):\n        if factor == 0 or x < 0:\n            return 0\n        if x == 1:\n            return 1\n        return find_factor(x - factor, factor) + find_factor(x, factor // 2)\n    return find_factor(amount, factor)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    factor = 1\n    while factor*2 <= amount:\n        factor *= 2\n    def find_factor(x, factor):\n        if factor == 0 or x < 0:\n            return 0\n        if x == 0:\n            return 1\n        return find_factor(x - factor, factor) + find_factor(x, factor // 2)\n    return find_factor(amount, factor)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","10","","# Error: expected","#     14","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":261,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n            return changes(n, k//2) + changes(n-k, k) =>           \r\n            return changes(n, k/2) + changes(n-k, k)  <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** LULU'S CODE HERE ***\"\n    \n    def power_two(m):\n        k = 1\n        while k <= m:\n            k = k*2\n        return k\n\n    def changes(n, k):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif k == 0:\n            return 0\n        else:\n            return changes(n, k/2) + changes(n-k, k)\n\n    return changes(amount, power_two(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** LULU'S CODE HERE ***\"\n    \n    def power_two(m):\n        k = 1\n        while k <= m:\n            k = k*2\n        return k\n\n    def changes(n, k):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif k == 0:\n            return 0\n        else:\n            return changes(n, k//2) + changes(n-k, k)\n\n    return changes(amount, power_two(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 325, in changes","    return changes(n, k/2) + changes(n-k, k)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 325, in changes","    return changes(n, k/2) + changes(n-k, k)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 325, in changes","    return changes(n, k/2) + changes(n-k, k)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 325, in changes","    return changes(n, k/2) + changes(n-k, k)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 325, in changes","    return changes(n, k/2) + changes(n-k, k)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 325, in changes","    return changes(n, k/2) + changes(n-k, k)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 318, in changes","    if n == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":262,"studentId":0,"date":null,"diff":"\r\nInputObject                   SideIndicator\r\n-----------                   -------------\r\n    return c_parts(amount, 0) =>           \r\n    return c_parts(amount, 1) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def m(x):      #Size of parts of partition\n        return 2 ** x\n    def c_parts(k, x):\n        if k == 0:\n            return 1\n        elif k < 0:\n            return 0\n        elif m(x) > k:\n            return 0\n        else:\n            return c_parts(k - m(x), x) + c_parts(k, x + 1)\n    return c_parts(amount, 1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def m(x):      #Size of parts of partition\n        return 2 ** x\n    def c_parts(k, x):\n        if k == 0:\n            return 1\n        elif k < 0:\n            return 0\n        elif m(x) > k:\n            return 0\n        else:\n            return c_parts(k - m(x), x) + c_parts(k, x + 1)\n    return c_parts(amount, 0)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def m(x):\r\n        return 2**amount\r\n    def c_parts(k, x):\r\n        if k==0:\r\n            return 1\r\n        elif k<0:\r\n            return 0\r\n        elif m(x)>k:\r\n            return 0\r\n        else:\r\n            return c_parts(k-m(x), x)+c_parts(k, x+1)\r\n    return c_parts(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":263,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n        maxnumber = x <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    x = 1\n    while x < amount:\n        x = x * 2\n\n    def num_partitions(amount, maxnumber):\n        maxnumber = x\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif maxnumber == 0:\n            return 0\n        else:\n            return num_partitions(amount-maxnumber, maxnumber) + num_partitions(amount, maxnumber//2)\n    return num_partitions(amount, x//2)\n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    x = 1\n    while x < amount:\n        x = x * 2\n\n    def num_partitions(amount, maxnumber):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif maxnumber == 0:\n            return 0\n        else:\n            return num_partitions(amount-maxnumber, maxnumber) + num_partitions(amount, maxnumber//2)\n    return num_partitions(amount, x//2)\n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 335, in num_partitions","    return num_partitions(amount-maxnumber, maxnumber) + num_partitions(amount, maxnumber//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 335, in num_partitions","    return num_partitions(amount-maxnumber, maxnumber) + num_partitions(amount, maxnumber//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 335, in num_partitions","    return num_partitions(amount-maxnumber, maxnumber) + num_partitions(amount, maxnumber//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 335, in num_partitions","    return num_partitions(amount-maxnumber, maxnumber) + num_partitions(amount, maxnumber//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 335, in num_partitions","    return num_partitions(amount-maxnumber, maxnumber) + num_partitions(amount, maxnumber//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 335, in num_partitions","    return num_partitions(amount-maxnumber, maxnumber) + num_partitions(amount, maxnumber//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 328, in num_partitions","    if amount == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":264,"studentId":0,"date":null,"diff":"\r\nInputObject                                         SideIndicator\r\n-----------                                         -------------\r\n            return coins(n-2**k, k) + coins(n, k-1) =>           \r\n            return coins(n-k, 2**k) + coins(n, k-1) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if amount == 0:\n        return 1\n    def get_largest(amt):\n        order = 0\n        while 2**(order+1) < amt:\n            order += 1\n        return order\n    def coins(n, k):    \n        if n == 0 or k == 0:\n            return 1\n        elif n < 0:\n            return 0\n        else:\n            return coins(n-k, 2**k) + coins(n, k-1)\n    return coins(amount, get_largest(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if amount == 0:\n        return 1\n    def get_largest(amt):\n        order = 0\n        while 2**(order+1) < amt:\n            order += 1\n        return order\n    def coins(n, k):    \n        if n == 0 or k == 0:\n            return 1\n        elif n < 0:\n            return 0\n        else:\n            return coins(n-2**k, k) + coins(n, k-1)\n    return coins(amount, get_largest(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    if amount==0:\r\n        return 1\r\n    def get_largest(amt):\r\n        order = 0\r\n        while 2**(order+1)<amt:\r\n            order += 1\r\n        return order\r\n    def coins(n, k):\r\n        if n==0 or k==0:\r\n            return 1\r\n        elif n<0:\r\n            return 0\r\n        else:\r\n            return coins(n-k, 2**k)+coins(n, k-1)\r\n    return coins(amount, get_largest(amount))\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","65","","# Error: expected","#     6","# but got","#     65","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":265,"studentId":0,"date":null,"diff":"\r\nInputObject                                SideIndicator\r\n-----------                                -------------\r\n                                           =>           \r\n    return count(amount, coin(amount))     =>           \r\n                                           <=           \r\n        return count(amount, coin(amount)) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def coin(x):\n        i = 1\n        while i <= x:\n            i = 2*i\n        return i\n        \n    def count(amount, coin):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif coin == 0:\n            return 0\n        else:\n            with_m = count(amount - coin, coin)\n            without_m = count(amount, coin // 2)\n            return with_m + without_m\n        return count(amount, coin(amount))\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def coin(x):\n        i = 1\n        while i <= x:\n            i = 2*i\n        return i\n\n    def count(amount, coin):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif coin == 0:\n            return 0\n        else:\n            with_m = count(amount - coin, coin)\n            without_m = count(amount, coin // 2)\n            return with_m + without_m\n    return count(amount, coin(amount))\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","","# Error: expected","#     6","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":266,"studentId":0,"date":null,"diff":"\r\nInputObject SideIndicator\r\n----------- -------------\r\n            <=           \r\n            <=           \r\n            <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def calculate_ways(smll_coin, amount):\n        if amount < 0:\n            return 0\n        \n        elif smll_coin > amount:\n            return 0\n        elif amount == 0:\n            return 1\n\n\n        else:\n            return calculate_ways(smll_coin, amount-smll_coin) + calculate_ways(2*smll_coin, amount)\n    return calculate_ways(1, amount)    \n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def calculate_ways(smll_coin, amount):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif smll_coin > amount:\n            return 0\n        else:\n            return calculate_ways(smll_coin, amount-smll_coin) + calculate_ways(2*smll_coin, amount)\n    return calculate_ways(1, amount)    \n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def calculate_ways(smll_coin, amount):\r\n        if amount<0:\r\n            return 0\r\n        elif smll_coin>amount:\r\n            return 0\r\n        elif amount==0:\r\n            return 1\r\n        else:\r\n            return calculate_ways(smll_coin, amount-smll_coin)+calculate_ways(2*smll_coin, amount)\r\n    return calculate_ways(1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":267,"studentId":0,"date":null,"diff":"\r\nInputObject                                                     SideIndicator\r\n-----------                                                     -------------\r\n        elif smallest > amount:                                 =>           \r\n            lower_bound = counter (smallest, amount - smallest) =>           \r\n                                                                =>           \r\n                                                                =>           \r\n                                                                =>           \r\n                                                                =>           \r\n        elif smallest > 0:                                      <=           \r\n            lower_bound = counter (smallest, smallest - amount) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def counter(smallest,amount):\n\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif smallest > 0:\n            return 0\n        else:\n            lower_bound = counter (smallest, smallest - amount)\n            upper_bound = counter(2*smallest, amount)\n            return lower_bound + upper_bound\n    return counter(1, amount)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def counter(smallest,amount):\n\n        if amount < 0:\n            return 0\n\n        elif amount == 0:\n            return 1\n\n        elif smallest > amount:\n            return 0\n\n        else:\n            lower_bound = counter (smallest, amount - smallest)\n            upper_bound = counter(2*smallest, amount)\n            return lower_bound + upper_bound\n    \n    return counter(1, amount)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def counter(smallest, amount):\r\n        if amount<0:\r\n            return 0\r\n        elif amount==0:\r\n            return 1\r\n        elif smallest>0:\r\n            return 0\r\n        else:\r\n            lower_bound = counter(smallest, smallest-amount)\r\n            upper_bound = counter(2*smallest, amount)\r\n            return lower_bound+k\r\n    return counter(1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":268,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n                return 1 =>           \r\n                return 3 <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    if amount < 0:\n        return 0\n    elif amount == 0:\n        return 1\n    else:\n        def count_coins(amount, n):\n            if n > amount:\n                return 3\n            else:\n                return count_coins(amount - n, n) + count_coins(amount, n * 2)\n    return count_coins(amount, 2)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    if amount < 0:\n        return 0\n    elif amount == 0:\n        return 1\n    else:\n        def count_coins(amount, n):\n            if n > amount:\n                return 1\n            else:\n                return count_coins(amount - n, n) + count_coins(amount, n * 2)\n    return count_coins(amount, 2)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    if amount<0:\r\n        return 0\r\n    elif amount==0:\r\n        return 1\r\n    else:\r\n        def count_coins(amount, n):\r\n            if n>amount:\r\n                return 3\r\n            else:\r\n                return count_coins(amount-n, n)+count_coins(amount, n*2)\r\n    return count_coins(amount, 2)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","18","","# Error: expected","#     6","# but got","#     18","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":269,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n    return count + 1 =>           \r\n    return count     <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    if amount <= 1:\n        return 1\n\n    count = 0\n    end = False\n\n    power = 0\n    while 2**(power+1) < amount:\n        power += 1\n\n    change_list = [amount] + power * [0]\n\n    first_element = amount\n    input_element = 0\n    while first_element > 1:\n        input_element += 1\n        first_element -= 2\n        count += count_change(input_element)\n\n    return count\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    if amount <= 1:\n        return 1\n\n    count = 0\n    end = False\n\n    power = 0\n    while 2**(power+1) < amount:\n        power += 1\n\n    change_list = [amount] + power * [0]\n\n    first_element = amount\n    input_element = 0\n    while first_element > 1:\n        input_element += 1\n        first_element -= 2\n        count += count_change(input_element)\n\n    return count + 1\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    if amount<=1:\r\n        return 1\r\n    count = 0\r\n    end = False\r\n    power = 0\r\n    while 2**(power+1)<amount:\r\n        power += 1\r\n    change_list = [amount]+power*[0]\r\n    first_element = amount\r\n    input_element = 0\r\n    while first_element>1:\r\n        input_element += 1\r\n        first_element -= 2\r\n        count += count_change(input_element)\r\n    return count\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","3","","# Error: expected","#     6","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":270,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        elif n == 1: =>           \r\n            return 1 =>           \r\n                     =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def largest(amount):\n        x = 1\n        while amount > x:\n            x *= 2\n        return x / 2\n\n    def count(amount, n):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif n == 0:\n            return 0\n        else:\n            return count(amount-n, n) + count(amount, n/2)\n    return count(amount, largest(amount))\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def largest(amount):\n        x = 1\n        while amount > x:\n            x *= 2\n        return x / 2\n\n    def count(amount, n):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return count(amount-n, n) + count(amount, n/2)\n    return count(amount, largest(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 358, in count","    return count(amount-n, n) + count(amount, n/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 358, in count","    return count(amount-n, n) + count(amount, n/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 358, in count","    return count(amount-n, n) + count(amount, n/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 358, in count","    return count(amount-n, n) + count(amount, n/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 358, in count","    return count(amount-n, n) + count(amount, n/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 358, in count","    return count(amount-n, n) + count(amount, n/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 351, in count","    if amount == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":271,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        elif m<1:    =>           \r\n        elif m == 0: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def biggest_coin(amount):\n        biggest_coin_piece=1\n        while biggest_coin_piece<amount:\n            biggest_coin_piece= biggest_coin_piece*2\n        return biggest_coin_piece/2\n    def change_partition(n, m):\n        if n==0:\n            return 1\n        elif n< 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return change_partition(n-m, m)+change_partition(n, m/2)\n    return change_partition(amount, biggest_coin(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def biggest_coin(amount):\n        biggest_coin_piece=1\n        while biggest_coin_piece<amount:\n            biggest_coin_piece= biggest_coin_piece*2\n        return biggest_coin_piece/2\n    def change_partition(n, m):\n        if n==0:\n            return 1\n        elif n< 0:\n            return 0\n        elif m<1:\n            return 0\n        else:\n            return change_partition(n-m, m)+change_partition(n, m/2)\n    return change_partition(amount, biggest_coin(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 332, in change_partition","    return change_partition(n-m, m)+change_partition(n, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 332, in change_partition","    return change_partition(n-m, m)+change_partition(n, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 332, in change_partition","    return change_partition(n-m, m)+change_partition(n, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 332, in change_partition","    return change_partition(n-m, m)+change_partition(n, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 332, in change_partition","    return change_partition(n-m, m)+change_partition(n, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 332, in change_partition","    return change_partition(n-m, m)+change_partition(n, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 325, in change_partition","    if n==0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":272,"studentId":0,"date":null,"diff":"\r\nInputObject      SideIndicator\r\n-----------      -------------\r\n    flag = True  =>           \r\n    flag == True <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count = 1\n    flag == True\n    while flag == True:\n        if count > amount:\n            count = count/2\n            flag = False\n        elif count == amount:\n            flag = False\n        else:\n            count = count*2\n    def partition(amount, n):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif n == 0:\n            return 0\n        else:\n            return partition(amount-n, n) + partition(amount, n//2)\n    return partition(amount, count)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count = 1\n    flag = True\n    while flag == True:\n        if count > amount:\n            count = count/2\n            flag = False\n        elif count == amount:\n            flag = False\n        else:\n            count = count*2\n    def partition(amount, n):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif n == 0:\n            return 0\n        else:\n            return partition(amount-n, n) + partition(amount, n//2)\n    return partition(amount, count)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 336, in count_change","    flag == True","UnboundLocalError: local variable 'flag' referenced before assignment","","# Error: expected","#     6","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":273,"studentId":0,"date":null,"diff":"\r\nInputObject                                         SideIndicator\r\n-----------                                         -------------\r\n    exp = int(log(amount, 2)) if amount != 0 else 0 =>           \r\n    #print (exp)                                    =>           \r\n    #print(amount, 2**(exp))                        =>           \r\n    exp = int(log(amount, 2)) if amount == 0 else 0 <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    from math import log\n    def count_helper(ch_amount, big_coin):\n        #print(ch_amount, big_coin)\n        if ch_amount == 0:\n            return 1\n        elif ch_amount < 0:\n            return 0\n        elif big_coin < 1:\n            return 0\n        else:\n            return count_helper(ch_amount - big_coin, big_coin) + count_helper(ch_amount, big_coin // 2)\n    exp = int(log(amount, 2)) if amount == 0 else 0\n    return count_helper(amount, 2**(exp))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    from math import log\n    def count_helper(ch_amount, big_coin):\n        #print(ch_amount, big_coin)\n        if ch_amount == 0:\n            return 1\n        elif ch_amount < 0:\n            return 0\n        elif big_coin < 1:\n            return 0\n        else:\n            return count_helper(ch_amount - big_coin, big_coin) + count_helper(ch_amount, big_coin // 2)\n    exp = int(log(amount, 2)) if amount != 0 else 0\n    #print (exp)\n    #print(amount, 2**(exp))\n    return count_helper(amount, 2**(exp))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","1","","# Error: expected","#     6","# but got","#     1","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":274,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        if x < coin: =>           \r\n            return 0 =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    coins = [1]\n    count = 1\n    while 2**count <= amount:\n        coins.append(2**count)\n        count += 1\n\n    def options(x, coin):\n        \"\"\"\n        if x < 0:\n            return 0\n        elif x < coin:\n            return 0\n        total = 0\n        if x % coin == 0:\n            total += 1\n        while x > 0:\n            total += options(x, coin*2)\n            x -= coin\n        return total\n        \"\"\"\n        if x == 0:\n            return 1\n        total = 0\n        if coin <= x:\n            total += options(x - coin, coin)\n        total += options(x, coin * 2)\n        return total\n\n    return options(amount, 1)\n\n    #recursive doesn't take care of 2+4 and 4+2\n\n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    coins = [1]\n    count = 1\n    while 2**count <= amount:\n        coins.append(2**count)\n        count += 1\n\n    def options(x, coin):\n        \"\"\"\n        if x < 0:\n            return 0\n        elif x < coin:\n            return 0\n        total = 0\n        if x % coin == 0:\n            total += 1\n        while x > 0:\n            total += options(x, coin*2)\n            x -= coin\n        return total\n        \"\"\"\n        if x == 0:\n            return 1\n        if x < coin:\n            return 0\n        total = 0\n        if coin <= x:\n            total += options(x - coin, coin)\n        total += options(x, coin * 2)\n        return total\n\n    return options(amount, 1)\n\n    #recursive doesn't take care of 2+4 and 4+2\n\n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    amount = [1]\r\n    count = 1\r\n    while 2**count<=amount:\r\n        coins.append(2**count)\r\n        count += 1\r\n    def options(x, coin):\r\n        if x==0:\r\n            return 1\r\n        total = 0\r\n        if coin<=x:\r\n            total += options(x-coin, coin)\r\n        total += options(x, coin*2)\r\n        return total\r\n    return options(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 350, in options","    total += options(x, coin * 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 350, in options","    total += options(x, coin * 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 350, in options","    total += options(x, coin * 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 350, in options","    total += options(x, coin * 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 350, in options","    total += options(x, coin * 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 350, in options","    total += options(x, coin * 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 345, in options","    if x == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":275,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n        if x < 0:     =>           \r\n        if final < 0: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    final = 1\n    while (final*2) <= amount:\n        final = final * 2\n    \n    def helper(x, final):\n        if x == 0:\n            return 0\n        if final == 0:\n            return 1\n        if final < 0:\n            return 0\n        return helper(x-final, final)+helper(x, final//2)\n    return helper(amount, final)\n    \n    \ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    \n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    final = 1\n    while (final*2) <= amount:\n        final = final * 2\n    \n    def helper(x, final):\n        if final == 0:\n            return 0\n        if x == 0:\n            return 1\n        if x < 0:\n            return 0\n        return helper(x-final, final)+helper(x, final//2)\n    return helper(amount, final)\n    \n    \ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    \n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 319, in helper","    return helper(x-final, final)+helper(x, final//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 319, in helper","    return helper(x-final, final)+helper(x, final//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 319, in helper","    return helper(x-final, final)+helper(x, final//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 319, in helper","    return helper(x-final, final)+helper(x, final//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 319, in helper","    return helper(x-final, final)+helper(x, final//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 319, in helper","    return helper(x-final, final)+helper(x, final//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 313, in helper","    if x == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":276,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n    coins = [1, 2, 4, 8, 16, 32, 64, 128, 256] =>           \r\n    coins = []                                 <=           \r\n    coins.append(x**2 for x in range(0,10))    <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    coins = []\n    coins.append(x**2 for x in range(0,10))\n    counts = [0] * (amount + 1)\n    counts[0] = 1\n    for i in coins:\n    \tfor j in list(range(i, amount + 1)):\n    \t    counts[j] += counts[j - i]\n    return counts[amount]\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    coins = [1, 2, 4, 8, 16, 32, 64, 128, 256]\n    counts = [0] * (amount + 1)\n    counts[0] = 1\n    for i in coins:\n    \tfor j in list(range(i, amount + 1)):\n    \t    counts[j] += counts[j - i]\n    return counts[amount]\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 308, in count_change","    for j in list(range(i, amount + 1)):","TypeError: 'generator' object cannot be interpreted as an integer","","# Error: expected","#     6","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":277,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n        if d==0:      =>           \r\n        if d==1:      <=           \r\n        if amount==2: <=           \r\n            return 2  <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def highestpower(amount):\n        p = 1\n        while p>0:\n            if amount%2**p==amount:\n                return p-1\n            p += 1\n\n\n    def count(amount,d):\n        if 2**d>amount:\n            d = highestpower(amount)\n        if d==1:\n            return 1\n        if amount==2:\n            return 2\n        if amount==1:\n            return 1\n        else:\n            return count(amount-2**d,d)+count(amount,d-1)\n\n    return count(amount,highestpower(amount))\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def highestpower(amount):\n        p = 1\n        while p>0:\n            if amount%2**p==amount:\n                return p-1\n            p += 1\n\n\n    def count(amount,d):\n        if 2**d>amount:\n            d = highestpower(amount)\n        if d==0:\n            return 1\n        if amount==1:\n            return 1\n        else:\n            return count(amount-2**d,d)+count(amount,d-1)\n\n    return count(amount,highestpower(amount))\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","2","","# Error: expected","#     6","# but got","#     2","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":278,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n        return i - 1     =>           \r\n            return i - 1 <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def num_partition(n,k):\n        if k==0:\n            return 1\n        elif n<0:\n            return 0\n        elif n==0:\n            return 1\n        else:\n            contains = num_partition(n - pow(2, k), k)\n            not_contains = num_partition(n, k-1)\n            return contains + not_contains\n    def get_k(n):\n        i = 0\n        while pow(2, i) <= n:\n            i += 1\n            return i - 1\n\n    k = get_k(amount)\n    return num_partition(amount, k)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def num_partition(n,k):\n        if k==0:\n            return 1\n        elif n<0:\n            return 0\n        elif n==0:\n            return 1\n        else:\n            contains = num_partition(n - pow(2, k), k)\n            not_contains = num_partition(n, k-1)\n            return contains + not_contains\n    def get_k(n):\n        i = 0\n        while pow(2, i) <= n:\n            i += 1\n        return i - 1\n\n    k = get_k(amount)\n    return num_partition(amount, k)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def num_partition(n, k):\r\n        if k==0:\r\n            return 1\r\n        elif n<0:\r\n            return 0\r\n        elif n==0:\r\n            return 1\r\n        else:\r\n            contains = num_partition(n-pow(2, k), k)\r\n            not_contains = num_partition(n, k-1)\r\n            return contains+k\r\n    def get_k(n):\r\n        i = 0\r\n        while pow(2, i)<=n:\r\n            i += 1\r\n            return i-1\r\n    k = get_k(amount)\r\n    return num_partition(amount, k)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","1","","# Error: expected","#     6","# but got","#     1","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":279,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n    return partition_change(amount, max_denomination) =>           \r\n    partition_change(amount, max_denomination)        <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    max_denomination = 1\n    for i in range(amount//2, 0, -1):\n        if 2**i <= amount:\n            max_denomination = 2**i\n            #print('if' + str(max_denomination))\n            break\n        else:\n            #print('else' + str(max_denomination))\n            pass       \n    #print(max_denomination)\n    def partition_change(amount, max_denomination):\n        if amount == 0:\n            return 1\n        elif max_denomination == 0:\n            return 0\n        elif amount < 0:\n            return 0\n        else:\n            return partition_change(amount - max_denomination, max_denomination) + \\\n            partition_change(amount, max_denomination // 2)\n    partition_change(amount, max_denomination)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    max_denomination = 1\n    for i in range(amount//2, 0, -1):\n        if 2**i <= amount:\n            max_denomination = 2**i\n            #print('if' + str(max_denomination))\n            break\n        else:\n            #print('else' + str(max_denomination))\n            pass       \n    #print(max_denomination)\n    def partition_change(amount, max_denomination):\n        if amount == 0:\n            return 1\n        elif max_denomination == 0:\n            return 0\n        elif amount < 0:\n            return 0\n        else:\n            return partition_change(amount - max_denomination, max_denomination) + \\\n            partition_change(amount, max_denomination // 2)\n    return partition_change(amount, max_denomination)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","","# Error: expected","#     6","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":280,"studentId":0,"date":null,"diff":"\r\nInputObject                                                              SideIndicator\r\n-----------                                                              -------------\r\n    def helper(n, k):                                                    =>           \r\n        if n == k:                                                       =>           \r\n            return 1                                                     =>           \r\n        if k > n:                                                        =>           \r\n            return 0                                                     =>           \r\n        else:                                                            =>           \r\n            return helper(n-k, k) + helper(n, 2*k)                       =>           \r\n    return helper(amount, 1)                                             =>           \r\n    import math                                                          <=           \r\n    if amount == 0:                                                      <=           \r\n        return 1                                                         <=           \r\n    else:                                                                <=           \r\n        coins = [pow(2, i) for i in range(int(math.log(amount, 2) + 1))] <=           \r\n        return sum([count_change(amount-coin) for coin in coins])        <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    import math\n    if amount == 0:\n        return 1\n    else: \n        coins = [pow(2, i) for i in range(int(math.log(amount, 2) + 1))]\n        return sum([count_change(amount-coin) for coin in coins])\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(n, k):\n        if n == k:\n            return 1\n        if k > n:\n            return 0\n        else: \n            return helper(n-k, k) + helper(n, 2*k)\n    return helper(amount, 1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","31","","# Error: expected","#     6","# but got","#     31","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":281,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n        elif n < 0:   =>           \r\n             return 0 =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def up_to_two(amount):\n        start = 1\n        while amount > start:\n            start *= 2\n            if amount < start:\n                return start//2\n        return start\n\n    def count_partitions(n, m):\n        if n == 0:\n            return 1\n        elif m <= 0:\n            return 0\n        return count_partitions(n-m, m) + count_partitions(n, m//2)\n    return count_partitions(amount, up_to_two(amount))\n\n\n    \n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def up_to_two(amount):\n        start = 1\n        while amount > start:\n            start *= 2\n            if amount < start:\n                return start//2\n        return start\n\n    def count_partitions(n, m):\n        if n == 0:\n            return 1\n        elif m <= 0:\n            return 0\n        elif n < 0:\n             return 0\n        return count_partitions(n-m, m) + count_partitions(n, m//2)\n    return count_partitions(amount, up_to_two(amount))\n\n\n    \n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 324, in count_partitions","    return count_partitions(n-m, m) + count_partitions(n, m//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 324, in count_partitions","    return count_partitions(n-m, m) + count_partitions(n, m//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 324, in count_partitions","    return count_partitions(n-m, m) + count_partitions(n, m//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 324, in count_partitions","    return count_partitions(n-m, m) + count_partitions(n, m//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 324, in count_partitions","    return count_partitions(n-m, m) + count_partitions(n, m//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 324, in count_partitions","    return count_partitions(n-m, m) + count_partitions(n, m//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 320, in count_partitions","    if n == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":282,"studentId":0,"date":null,"diff":"\r\nInputObject                                                    SideIndicator\r\n-----------                                                    -------------\r\n            return using_minimum_coin + using_not_minimum_coin =>           \r\n            return minimum_coin + not_minimum_coin             <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_helper(minimum_coin, amount):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif minimum_coin > amount:\n            return 0\n        else:\n            using_minimum_coin = count_helper(minimum_coin, amount - minimum_coin)\n            using_not_minimum_coin = count_helper(2*minimum_coin, amount)\n            return minimum_coin + not_minimum_coin\n    return count_helper(1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_helper(minimum_coin, amount):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif minimum_coin > amount:\n            return 0\n        else:\n            using_minimum_coin = count_helper(minimum_coin, amount - minimum_coin)\n            using_not_minimum_coin = count_helper(2*minimum_coin, amount)\n            return using_minimum_coin + using_not_minimum_coin\n    return count_helper(1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_helper(minimum_coin, amount):\r\n        if amount<0:\r\n            return 0\r\n        elif amount==0:\r\n            return 1\r\n        elif minimum_coin>amount:\r\n            return 0\r\n        else:\r\n            using_minimum_coin = count_helper(minimum_coin, amount-minimum_coin)\r\n            using_not_minimum_coin = count_helper(2*minimum_coin, amount)\r\n            return minimum_coin+k\r\n    return count_helper(1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 313, in count_change","    return count_helper(1, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 310, in count_helper","    using_minimum_coin = count_helper(minimum_coin, amount - minimum_coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 310, in count_helper","    using_minimum_coin = count_helper(minimum_coin, amount - minimum_coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 310, in count_helper","    using_minimum_coin = count_helper(minimum_coin, amount - minimum_coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 310, in count_helper","    using_minimum_coin = count_helper(minimum_coin, amount - minimum_coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 310, in count_helper","    using_minimum_coin = count_helper(minimum_coin, amount - minimum_coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 310, in count_helper","    using_minimum_coin = count_helper(minimum_coin, amount - minimum_coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 312, in count_helper","    return minimum_coin + not_minimum_coin","NameError: name 'not_minimum_coin' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":283,"studentId":0,"date":null,"diff":"\r\nInputObject                                                SideIndicator\r\n-----------                                                -------------\r\n            with_upper = coin_limit(amount-limit, limit)   =>           \r\n            without_upper = coin_limit(amount, limit//2)   =>           \r\n            with_upper = count_change(amount-limit, limit) <=           \r\n            without_upper = count_change(amount, limit//2) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def partition(limits):\n        coin = 1\n        increase = coin *2 \n        while increase <= limits:\n            coin *= 2\n            increase = coin*2\n        return coin\n    next_coin = partition(amount)\n\n    def coin_limit(amount, limit):\n        if amount == 0: \n            return 1\n        elif amount < 0:\n            return 0\n        elif limit == 0:\n            return 0\n        else: \n            with_upper = count_change(amount-limit, limit)\n            without_upper = count_change(amount, limit//2)\n            total = with_upper + without_upper\n            return total \n\n    return coin_limit(amount,next_coin)\n\n\n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def partition(limits):\n        coin = 1\n        increase = coin *2 \n        while increase <= limits:\n            coin *= 2\n            increase = coin*2\n        return coin\n    next_coin = partition(amount)\n\n    def coin_limit(amount, limit):\n        if amount == 0: \n            return 1\n        elif amount < 0:\n            return 0\n        elif limit == 0:\n            return 0\n        else: \n            with_upper = coin_limit(amount-limit, limit)\n            without_upper = coin_limit(amount, limit//2)\n            total = with_upper + without_upper\n            return total \n\n    return coin_limit(amount,next_coin)\n\n\n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 333, in count_change","    return coin_limit(amount,next_coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 328, in coin_limit","    with_upper = count_change(amount-limit, limit)","TypeError: count_change() takes 1 positional argument but 2 were given","","# Error: expected","#     6","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":284,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n    return count(get_max(1, amount), amount) =>           \r\n    return count(amount, get_max(1, amount)) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def get_max(max, amount):\n        if max*2 > amount:\n            return max\n        else:\n            return get_max(max*2, amount)\n    def count(max_coin, amount):\n        if amount<0:\n            return 0\n        if amount==0 or amount==1:\n            return 1\n        elif max_coin == 1:\n            return 1\n        else:\n            return count(max_coin//2, amount) + count(max_coin, amount-max_coin)\n    return count(amount, get_max(1, amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def get_max(max, amount):\n        if max*2 > amount:\n            return max\n        else:\n            return get_max(max*2, amount)\n    def count(max_coin, amount):\n        if amount<0:\n            return 0\n        if amount==0 or amount==1:\n            return 1\n        elif max_coin == 1:\n            return 1\n        else:\n            return count(max_coin//2, amount) + count(max_coin, amount-max_coin)\n    return count(get_max(1, amount), amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","2","","# Error: expected","#     6","# but got","#     2","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":285,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                             SideIndicator\r\n-----------                                                                             -------------\r\n            return partition(x-m, m) + partition(x, m//2)                               =>           \r\n            return partition(x-m, highest_power(x)) + partition(x, highest_power(x)//2) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(3)\n    2\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if amount == 1:\n        return 1\n\n    def highest_power(x):\n        num_left, i = x, 0\n        if x == 0:\n            return 0\n        while num_left > 0:\n            num_left = num_left // 2\n            i += 1\n        return pow(2, i - 1)\n\n    def partition(x, m):\n        if x == 1 or x == 0 or m == 1:\n            return 1\n        elif m <= 0:\n            return 0\n        # elif m == 2:\n        #     return partition(x-m, 2) + partition(x, 1)\n        elif x < m:\n            return partition(x, m//2)\n        elif x == m:\n            return 1 + partition(x, m//2)\n        else:\n            return partition(x-m, highest_power(x)) + partition(x, highest_power(x)//2)\n    \n    return partition(amount, highest_power(amount))\n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(3)\n    2\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if amount == 1:\n        return 1\n\n    def highest_power(x):\n        num_left, i = x, 0\n        if x == 0:\n            return 0\n        while num_left > 0:\n            num_left = num_left // 2\n            i += 1\n        return pow(2, i - 1)\n\n    def partition(x, m):\n        if x == 1 or x == 0 or m == 1:\n            return 1\n        elif m <= 0:\n            return 0\n        # elif m == 2:\n        #     return partition(x-m, 2) + partition(x, 1)\n        elif x < m:\n            return partition(x, m//2)\n        elif x == m:\n            return 1 + partition(x, m//2)\n        else:\n            return partition(x-m, m) + partition(x, m//2)\n    \n    return partition(amount, highest_power(amount))\n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(3)","2",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 334, in partition","    return partition(x-m, highest_power(x)) + partition(x, highest_power(x)//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 334, in partition","    return partition(x-m, highest_power(x)) + partition(x, highest_power(x)//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 334, in partition","    return partition(x-m, highest_power(x)) + partition(x, highest_power(x)//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 334, in partition","    return partition(x-m, highest_power(x)) + partition(x, highest_power(x)//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 330, in partition","    return partition(x, m//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 334, in partition","    return partition(x-m, highest_power(x)) + partition(x, highest_power(x)//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in highest_power","    if x == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":286,"studentId":0,"date":null,"diff":"\r\nInputObject                   SideIndicator\r\n-----------                   -------------\r\n        if total > amount:    =>           \r\n        elif total == amount: =>           \r\n        if coin > amount:     <=           \r\n        elif coin == amount:  <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def adder(coin=1, total=0):\n        counter = 0\n        if coin > amount:\n            return 0\n        elif coin == amount:\n            return 1\n        else:\n            if coin > amount:\n                return 0\n            else:\n                n = coin\n                while n < amount:\n                    counter += adder(n, total + n)\n                    n *= 2\n                return counter\n    return adder()\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def adder(coin=1, total=0):\n        counter = 0\n        if total > amount:\n            return 0\n        elif total == amount:\n            return 1\n        else:\n            if coin > amount:\n                return 0\n            else:\n                n = coin\n                while n < amount:\n                    counter += adder(n, total + n)\n                    n *= 2\n                return counter\n    return adder()\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def adder(coin = 1, total = 0):\r\n        amount = 0\r\n        if coin>amount:\r\n            return 0\r\n        elif coin==amount:\r\n            return 1\r\n        else:\r\n            if coin>amount:\r\n                return 0\r\n            else:\r\n                n = coin\r\n                while n<amount:\r\n                    counter += adder(n, total+n)\r\n                    n *= 2\r\n                return counter\r\n    return adder()\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 329, in adder","    counter += adder(n, total + n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 329, in adder","    counter += adder(n, total + n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 329, in adder","    counter += adder(n, total + n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 329, in adder","    counter += adder(n, total + n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 329, in adder","    counter += adder(n, total + n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 329, in adder","    counter += adder(n, total + n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 319, in adder","    if coin > amount:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":287,"studentId":0,"date":null,"diff":"\r\nInputObject                      SideIndicator\r\n-----------                      -------------\r\n        return 1+find_power(x+1) =>           \r\n        return find_power(x+1)   <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"\"\"if amount == 1:    This was my first attempt \n        return 1\n    if amount == 2:\n        return 2\n    if amount % 2 != 0:\n        return count_change(amount-1)    I got to here\n    else:\n        return count_change(amount -1)  + count_change(amount//2)   This is where I got stuck and found out online that C(2n)=c(2n-1)+c(n)\n    \"\"\"\n    def find_power(x):\n        if 2**x > amount:\n            return 0\n        return find_power(x+1)\n    \n    def helper(n,m):\n        if n==0:\n            return 1\n        if n<0:\n            return 0\n        if m==0:\n           return 0\n        return helper(n-m,m)+helper(n,m//2)\n    power=find_power(0)\n    return helper(amount, 2**power)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"\"\"if amount == 1:    This was my first attempt \n        return 1\n    if amount == 2:\n        return 2\n    if amount % 2 != 0:\n        return count_change(amount-1)    I got to here\n    else:\n        return count_change(amount -1)  + count_change(amount//2)   This is where I got stuck and found out online that C(2n)=c(2n-1)+c(n)\n    \"\"\"\n    def find_power(x):\n        if 2**x > amount:\n            return 0\n        return 1+find_power(x+1)\n    \n    def helper(n,m):\n        if n==0:\n            return 1\n        if n<0:\n            return 0\n        if m==0:\n           return 0\n        return helper(n-m,m)+helper(n,m//2)\n    power=find_power(0)\n    return helper(amount, 2**power)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","1","","# Error: expected","#     6","# but got","#     1","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":288,"studentId":0,"date":null,"diff":"\r\nInputObject                                                             SideIndicator\r\n-----------                                                             -------------\r\n    def count(amount, coin):                                            =>           \r\n        if amount == 0:                                                 =>           \r\n            return 0                                                    =>           \r\n        elif amount == coin:                                            =>           \r\n            return 1                                                    =>           \r\n        elif coin >= amount:                                            =>           \r\n            return 0                                                    =>           \r\n        else:                                                           =>           \r\n            return count(amount - coin, coin) + count(amount, 2 * coin) =>           \r\ndef count(amount, coin):                                                <=           \r\n    if amount == 0:                                                     <=           \r\n        return 0                                                        <=           \r\n    elif amount == 1:                                                   <=           \r\n        return 1                                                        <=           \r\n    elif coin >= amount:                                                <=           \r\n        return 0                                                        <=           \r\n    else:                                                               <=           \r\n        return count(amount - coin, coin) + count(amount, 2 * coin)     <=           \r\n                                                                        <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    return count(amount, 1)\n\ndef count(amount, coin):\n    if amount == 0:\n        return 0\n    elif amount == 1:\n        return 1\n    elif coin >= amount:\n        return 0\n    else:\n        return count(amount - coin, coin) + count(amount, 2 * coin)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count(amount, coin):\n        if amount == 0:\n            return 0\n        elif amount == coin:\n            return 1\n        elif coin >= amount:\n            return 0\n        else:\n            return count(amount - coin, coin) + count(amount, 2 * coin)\n    return count(amount, 1)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    return amount(amount, 1)\r\ndef count(amount, coin):\r\n    if amount==0:\r\n        return 0\r\n    elif amount==1:\r\n        return 1\r\n    elif coin>=amount:\r\n        return 0\r\n    else:\r\n        return count(amount-coin, coin)+count(amount, 2*coin)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","10","","# Error: expected","#     14","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":289,"studentId":0,"date":null,"diff":"\r\nInputObject                                                            SideIndicator\r\n-----------                                                            -------------\r\n    def helper(amount,coin):                                           =>           \r\n        if amount<coin:                                                =>           \r\n        elif amount==coin:                                             =>           \r\n            return helper(amount-coin,coin) +helper(amount, 2*coin)    =>           \r\n    return helper(amount,1)                                            =>           \r\n    # i=0                                                              =>           \r\n    # coins=[]                                                         =>           \r\n    # while 2**i<=amount:                                              =>           \r\n    #     coins.append(2**i)                                           =>           \r\n    #     i+=1                                                         =>           \r\n    # largest_coin= i                                                  =>           \r\n    # urg= len(coins)-1                                                =>           \r\n    # def count_partitions(n,m):                                       =>           \r\n    #     \"\"\"Count the ways to partition n using parts up to m.\"\"\"     =>           \r\n    #     if n == 0:                                                   =>           \r\n    #         return 1                                                 =>           \r\n    #     elif n < 0:                                                  =>           \r\n    #         return 0                                                 =>           \r\n    #     elif m == 0:                                                 =>           \r\n    #         return 0                                                 =>           \r\n    #     else:                                                        =>           \r\n    #         return count_partitions(n-m, m) + count_partitions(n, m) =>           \r\n    # return count_partitions(amount, coins[urg])                      =>           \r\n                                                                       =>           \r\n    i=0                                                                <=           \r\n    coins=[]                                                           <=           \r\n    while 2**i<=amount:                                                <=           \r\n        coins.append(2**i)                                             <=           \r\n        i+=1                                                           <=           \r\n    largest_coin= i                                                    <=           \r\n    urg= len(coins)-1                                                  <=           \r\n    def count_partitions(n,m):                                         <=           \r\n        \"\"\"Count the ways to partition n using parts up to m.\"\"\"       <=           \r\n        if n == 0:                                                     <=           \r\n        elif n < 0:                                                    <=           \r\n        elif m == 0:                                                   <=           \r\n            return 0                                                   <=           \r\n            return count_partitions(n-m, m) + count_partitions(n, m-1) <=           \r\n    return count_partitions(amount, coins[urg])                        <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    i=0\n    coins=[]\n    while 2**i<=amount:\n        coins.append(2**i)\n        i+=1\n    largest_coin= i \n    urg= len(coins)-1\n\n    def count_partitions(n,m):\n        \"\"\"Count the ways to partition n using parts up to m.\"\"\"\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, m-1)\n    return count_partitions(amount, coins[urg])\n\n    \n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper(amount,coin):\n        if amount<coin:\n            return 0\n        elif amount==coin:\n            return 1\n        else:\n            return helper(amount-coin,coin) +helper(amount, 2*coin)\n    return helper(amount,1)\n\n    # i=0\n    # coins=[]\n    # while 2**i<=amount:\n    #     coins.append(2**i)\n    #     i+=1\n    # largest_coin= i \n    # urg= len(coins)-1\n\n    # def count_partitions(n,m):\n    #     \"\"\"Count the ways to partition n using parts up to m.\"\"\"\n    #     if n == 0:\n    #         return 1\n    #     elif n < 0:\n    #         return 0\n    #     elif m == 0:\n    #         return 0\n    #     else:\n    #         return count_partitions(n-m, m) + count_partitions(n, m)\n    # return count_partitions(amount, coins[urg])\n\n    \n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    i = 0\r\n    coins = []\r\n    while 2**i<=amount:\r\n        coins.append(2**i)\r\n        i += 1\r\n    largest_coin = i\r\n    urg = len(coins)-1\r\n    def count_partitions(n, m):\r\n        if n==0:\r\n            return 1\r\n        elif n<0:\r\n            return 0\r\n        elif m==0:\r\n            return 0\r\n        elif m>n:\r\n            return 0\r\n        else:\r\n            return count_partitions(n-m, m)+count_partitions(n, m-1)\r\n    return count_partitions(amount, coins[urg])\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-GreaterThan, Children(LeafConstNode(NameExpressionNode-m), SingleChild(LeafConstNode(NameExpressionNode-n)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(ConstantExpressionNode-0)))))))), 3), Selected(\\x => Match(x, StartsWithTarget(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"BinaryExpressionNode\")))))))))))))))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","11","","# Error: expected","#     6","# but got","#     11","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":290,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                          SideIndicator\r\n-----------                                                                          -------------\r\n            return change_partitions(n - pow(2, m), m) + change_partitions(n, m - 1) =>           \r\n            return change_partitions(n - pow(2, m), m) + change_partitions(x, coins) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def biggest_pow_2(n):\n        x = 0\n        while pow(2, x) <= n:\n            x += 1\n        return x - 1\n\n    m = biggest_pow_2(amount)\n\n    def change_partitions(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 1\n        else:\n            return change_partitions(n - pow(2, m), m) + change_partitions(x, coins)\n    return change_partitions(amount, m)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def biggest_pow_2(n):\n        x = 0\n        while pow(2, x) <= n:\n            x += 1\n        return x - 1\n\n    m = biggest_pow_2(amount)\n\n    def change_partitions(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 1\n        else:\n            return change_partitions(n - pow(2, m), m) + change_partitions(n, m - 1)\n    return change_partitions(amount, m)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def biggest_pow_2(n):\r\n        amount = 0\r\n        while pow(2, x)<=n:\r\n            x += 1\r\n        return x-1\r\n    m = biggest_pow_2(amount)\r\n    def change_partitions(n, m):\r\n        if n==0:\r\n            return 1\r\n        elif n<0:\r\n            return 0\r\n        elif m==0:\r\n            return 1\r\n        else:\r\n            return change_partitions(n-pow(2, m), m)+change_partitions(x, coins)\r\n    return change_partitions(amount, m)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 319, in count_change","    return change_partitions(amount, m)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 318, in change_partitions","    return change_partitions(n - pow(2, m), m) + change_partitions(x, coins)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 318, in change_partitions","    return change_partitions(n - pow(2, m), m) + change_partitions(x, coins)","NameError: name 'x' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":291,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        if m < 1:    =>           \r\n            return 0 =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def largest_two_factor(x):\n        largest = 0\n        while 2**largest <= x:\n            largest += 1\n        return largest - 1\n\n    def count_partitions(amount, m):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        else:\n            return count_partitions(amount-m, m) + count_partitions(amount, m / 2)\n    return count_partitions(amount, 2**largest_two_factor(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def largest_two_factor(x):\n        largest = 0\n        while 2**largest <= x:\n            largest += 1\n        return largest - 1\n\n    def count_partitions(amount, m):\n        if m < 1:\n            return 0\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        else:\n            return count_partitions(amount-m, m) + count_partitions(amount, m / 2)\n    return count_partitions(amount, 2**largest_two_factor(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 322, in count_partitions","    return count_partitions(amount-m, m) + count_partitions(amount, m / 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 322, in count_partitions","    return count_partitions(amount-m, m) + count_partitions(amount, m / 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 322, in count_partitions","    return count_partitions(amount-m, m) + count_partitions(amount, m / 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 322, in count_partitions","    return count_partitions(amount-m, m) + count_partitions(amount, m / 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 322, in count_partitions","    return count_partitions(amount-m, m) + count_partitions(amount, m / 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 322, in count_partitions","    return count_partitions(amount-m, m) + count_partitions(amount, m / 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 317, in count_partitions","    if amount == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":292,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                                SideIndicator\r\n-----------                                                                                                -------------\r\n    return accumulate(lambda combiner: lambda term: combiner(x, y) if pred(term) else base, base, n, term) =>           \r\n    return helper(amount, 2 ** amount) #Definitely a better way to select a power of 2                     =>           \r\n    start                                                                                                  =>           \r\n    return accumulate(lambda combiner: combiner(x, y) if pred(term) else base, base, n, term)              <=           \r\n    return helper(amount, amount - 1)                                                                      <=           \r\n    \"*** YOUR CODE HERE ***\"                                                                               <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper(amount, max_cent_value):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif max_cent_value == 0:\n            return 0\n        else:\n            with_max_cent_value = helper(amount - max_cent_value, max_cent_value)\n            without_max_cent_value = helper(amount, max_cent_value // 2)\n            return with_max_cent_value + without_max_cent_value\n    return helper(amount, amount - 1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper(amount, max_cent_value):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif max_cent_value == 0:\n            return 0\n        else:\n            with_max_cent_value = helper(amount - max_cent_value, max_cent_value)\n            without_max_cent_value = helper(amount, max_cent_value // 2)\n            return with_max_cent_value + without_max_cent_value\n    return helper(amount, 2 ** amount) #Definitely a better way to select a power of 2\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","4","","# Error: expected","#     6","# but got","#     4","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":293,"studentId":0,"date":null,"diff":"\r\nInputObject                  SideIndicator\r\n-----------                  -------------\r\n        if n == 0 or n == 1: =>           \r\n        if n == 1:           <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def power_check(n):\n        while n % 2 == 0:\n            n /= 2\n        if n == 1:\n            return True\n        else:\n            return False\n    def coin_find(n):\n        if power_check(n) == True:\n            return n\n        else:\n            return coin_find(n - 1)\n\n    def change_help(n, m):\n        if n == 1:\n            return 1\n        if n <= 0:\n            return 0\n        if m == 1:\n            return 1\n        else:\n            with_m = change_help(n - m, m)\n            without_m = change_help(n, m / 2)\n        return with_m + without_m\n    return change_help(amount, coin_find(amount))\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def power_check(n):\n        while n % 2 == 0:\n            n /= 2\n        if n == 1:\n            return True\n        else:\n            return False\n    def coin_find(n):\n        if power_check(n) == True:\n            return n\n        else:\n            return coin_find(n - 1)\n\n    def change_help(n, m):\n        if n == 0 or n == 1:\n            return 1\n        if n <= 0:\n            return 0\n        if m == 1:\n            return 1\n        else:\n            with_m = change_help(n - m, m)\n            without_m = change_help(n, m / 2)\n        return with_m + without_m\n    return change_help(amount, coin_find(amount))\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","10","","# Error: expected","#     14","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":294,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n        if num == 0:  =>           \r\n        elif num < 0: =>           \r\n        if num == 1:  <=           \r\n        elif num < 1: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    k = 0\n    while (2**k) <= amount:\n        k += 1\n    max_ex = k - 1\n\n    def count_partitions(num, max_ex):\n\n        if num == 1:\n            return 1\n        elif num < 1:\n            return 0\n        elif max_ex == 0:\n            return 1\n        else:\n            return count_partitions(num - 2**max_ex, max_ex) + count_partitions(num, (max_ex - 1))\n\n    return count_partitions(amount, max_ex)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    k = 0\n    while (2**k) <= amount:\n        k += 1\n    max_ex = k - 1\n\n    def count_partitions(num, max_ex):\n\n        if num == 0:\n            return 1\n        elif num < 0:\n            return 0\n        elif max_ex == 0:\n            return 1\n        else:\n            return count_partitions(num - 2**max_ex, max_ex) + count_partitions(num, (max_ex - 1))\n\n    return count_partitions(amount, max_ex)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    amount = 0\r\n    while (2**k)<=amount:\r\n        k += 1\r\n    max_ex = k-1\r\n    def count_partitions(num, max_ex):\r\n        if num==1:\r\n            return 1\r\n        elif num<1:\r\n            return 0\r\n        elif max_ex==0:\r\n            return 1\r\n        else:\r\n            return count_partitions(num-2**max_ex, max_ex)+count_partitions(num, (max_ex-1))\r\n    return count_partitions(amount, max_ex)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","10","","# Error: expected","#     14","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":295,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                SideIndicator\r\n-----------                                                                                -------------\r\n    type_coins = [1]                                                                       =>           \r\n    count = 1                                                                              =>           \r\n    stop = 1                                                                               =>           \r\n    while type_coins[-1] <= amount:                                                        =>           \r\n        type_coins = type_coins + [type_coins[count-1]*2]                                  =>           \r\n        count = count + 1                                                                  =>           \r\n    if type_coins[-1] > amount:                                                            =>           \r\n        type_coins = type_coins[0:len(type_coins)-1]                                       =>           \r\n        type_coins = type_coins[::-1]                                                      =>           \r\n                                                                                           =>           \r\n    def coin_counter(amount,m):                                                            =>           \r\n            return 0                                                                       =>           \r\n        elif m == 0:                                                                       =>           \r\n        elif m == 1:                                                                       =>           \r\n            return coin_counter(amount-m,m) + coin_counter(amount,m/2)                     =>           \r\n                                                                                           =>           \r\n    return coin_counter(amount,type_coins[0])                                              =>           \r\n    def coin_counter(amount):                                                              <=           \r\n        type_coins = [1]                                                                   <=           \r\n        count = 1                                                                          <=           \r\n        stop = 1                                                                           <=           \r\n        while type_coins[-1] <= amount:                                                    <=           \r\n            type_coins = type_coins + [type_coins[count-1]*2]                              <=           \r\n            count = count + 1                                                              <=           \r\n        if type_coins[-1] > amount:                                                        <=           \r\n            type_coins = type_coins[0:len(type_coins)-1]                                   <=           \r\n            type_coins = type_coins[::-1]                                                  <=           \r\n        else:                                                                              <=           \r\n            type_coins = type_coins[::-1]                                                  <=           \r\n                                                                                           <=           \r\n        elif amount == 1:                                                                  <=           \r\n            return coin_counter(amount-type_coins[0]) + coin_counter(amount-type_coins[1]) <=           \r\n                                                                                           <=           \r\n    return coin_counter(amount)                                                            <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def coin_counter(amount):\n        type_coins = [1]\n        count = 1\n        stop = 1\n        while type_coins[-1] <= amount:\n            type_coins = type_coins + [type_coins[count-1]*2]\n            count = count + 1\n               \n        if type_coins[-1] > amount:\n            type_coins = type_coins[0:len(type_coins)-1]\n            type_coins = type_coins[::-1]\n        else:\n            type_coins = type_coins[::-1]\n\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif amount == 1:\n            return 1\n        else:\n            return coin_counter(amount-type_coins[0]) + coin_counter(amount-type_coins[1])\n\n    return coin_counter(amount) \n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    type_coins = [1]\n    count = 1\n    stop = 1\n    while type_coins[-1] <= amount:\n        type_coins = type_coins + [type_coins[count-1]*2]\n        count = count + 1\n               \n    if type_coins[-1] > amount:\n        type_coins = type_coins[0:len(type_coins)-1]\n        type_coins = type_coins[::-1]\n            \n    def coin_counter(amount,m):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif m == 0:\n            return 0\n        elif m == 1:\n            return 1\n        else:\n            return coin_counter(amount-m,m) + coin_counter(amount,m/2)\n    \n    return coin_counter(amount,type_coins[0])\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","7","","# Error: expected","#     6","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":296,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                     SideIndicator\r\n-----------                                                                     -------------\r\n        if maxCoin > amount:                                                    =>           \r\n            maxCoin = maxCoin // 2                                              =>           \r\n        if maxCoin == amount:                                                   =>           \r\n            break                                                               =>           \r\n        if maxCoin == 0:                                                        =>           \r\n            with_max = count_change_mod(amount - maxCoin, maxCoin)              =>           \r\n   # def count_change_coins(amount, exp, base=2):                               =>           \r\n    #    if amount == 0:                                                        =>           \r\n     #       return 1                                                           =>           \r\n      #  if amount < 0:                                                         =>           \r\n       #     return 0                                                           =>           \r\n        #if exp <= 0:                                                           =>           \r\n       #     return 0                                                           =>           \r\n       # else:                                                                  =>           \r\n        #    with_max = count_change_coins((amount - base**exp), base**(exp-1)) =>           \r\n         #   without_max = count_change_coins(amount, base**(exp-1))            =>           \r\n          #  return with_max + without_max                                      =>           \r\n        if maxCoin >= amount:                                                   <=           \r\n            maxCoin = maxCoin / 2                                               <=           \r\n        return maxCoin                                                          <=           \r\n        if maxCoin <= 0:                                                        <=           \r\n            with_max = count_change_mod(amount - maxCoin, maxCoin // 2)         <=           \r\n    def count_change_coins(amount, exp, base=2):                                <=           \r\n        if amount == 0:                                                         <=           \r\n        if amount < 0:                                                          <=           \r\n            return 0                                                            <=           \r\n        if exp <= 0:                                                            <=           \r\n            return 0                                                            <=           \r\n        else:                                                                   <=           \r\n            with_max = count_change_coins((amount - base**exp), base**(exp-1))  <=           \r\n            without_max = count_change_coins(amount, base**(exp-1))             <=           \r\n            return with_max + without_max                                       <=           \r\n            return 1                                                            <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    maxCoin = 1\n    while True:\n        if maxCoin >= amount:\n            maxCoin = maxCoin / 2\n            break\n        else: \n            maxCoin=maxCoin * 2\n    def count_change_mod(amount, maxCoin):\n        return maxCoin\n        if amount == 0:\n            return 1\n        if amount < 0:\n            return 0\n        if maxCoin <= 0:\n            return 0\n        else: \n            with_max = count_change_mod(amount - maxCoin, maxCoin // 2)\n            without_max = count_change_mod(amount, maxCoin // 2)\n            return with_max + without_max\n\n\n    def count_change_coins(amount, exp, base=2):\n        if amount == 0:\n            return 1\n        if amount < 0:\n            return 0\n        if exp <= 0:\n            return 0\n        else:\n            with_max = count_change_coins((amount - base**exp), base**(exp-1))\n            without_max = count_change_coins(amount, base**(exp-1))\n            return with_max + without_max\n\n\n    return count_change_mod(amount, maxCoin)\n\n\n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    maxCoin = 1\n    while True:\n        if maxCoin > amount:\n            maxCoin = maxCoin // 2\n            break\n        if maxCoin == amount:\n            break\n        else: \n            maxCoin=maxCoin * 2\n    def count_change_mod(amount, maxCoin):\n        if amount == 0:\n            return 1\n        if amount < 0:\n            return 0\n        if maxCoin == 0:\n            return 0\n        else: \n            with_max = count_change_mod(amount - maxCoin, maxCoin)\n            without_max = count_change_mod(amount, maxCoin // 2)\n            return with_max + without_max\n\n\n   # def count_change_coins(amount, exp, base=2):\n    #    if amount == 0:\n     #       return 1\n      #  if amount < 0:\n       #     return 0\n        #if exp <= 0:\n       #     return 0\n       # else:\n        #    with_max = count_change_coins((amount - base**exp), base**(exp-1))\n         #   without_max = count_change_coins(amount, base**(exp-1))\n          #  return with_max + without_max\n\n\n    return count_change_mod(amount, maxCoin)\n\n\n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","4.0","","# Error: expected","#     6","# but got","#     4.0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":297,"studentId":0,"date":null,"diff":"\r\nInputObject                          SideIndicator\r\n-----------                          -------------\r\n        if amount == 0:              =>           \r\n        elif k==0 or amount < 0:     =>           \r\n        if amount == 1 or amount==0: <=           \r\n        elif k==0:                   <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def largest_power_two(k,x,equal=True):\n        \"\"\"Returns largest power of two smaller than or equal to x\"\"\"\n        if x==1:\n            return 0\n        if equal:\n            if 2*k <= x:\n                return largest_power_two(2*k,x)\n            else:\n                return k\n        else:\n            if 2*k < x:\n                return largest_power_two(2*k,x,False)\n            else:\n                return k \n    largest_change = largest_power_two(1,amount)\n\n    def cc_recurse(amount,k):\n        if amount == 1 or amount==0:\n            return 1\n        elif k==0:\n            return 0\n        else:\n            return cc_recurse(amount-k,k) + cc_recurse(amount,largest_power_two(1,k,False))\n\n    return cc_recurse(amount,largest_change)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def largest_power_two(k,x,equal=True):\n        \"\"\"Returns largest power of two smaller than or equal to x\"\"\"\n        if x==1:\n            return 0\n        if equal:\n            if 2*k <= x:\n                return largest_power_two(2*k,x)\n            else:\n                return k\n        else:\n            if 2*k < x:\n                return largest_power_two(2*k,x,False)\n            else:\n                return k \n    largest_change = largest_power_two(1,amount)\n\n    def cc_recurse(amount,k):\n        if amount == 0:\n            return 1\n        elif k==0 or amount < 0:\n            return 0\n        else:\n            return cc_recurse(amount-k,k) + cc_recurse(amount,largest_power_two(1,k,False))\n\n    return cc_recurse(amount,largest_change)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def largest_power_two(k, x, equal = amount):\r\n        if x==1:\r\n            return 0\r\n        if equal:\r\n            if 2*k<=x:\r\n                return largest_power_two(2*k, x)\r\n            else:\r\n                return k\r\n        else:\r\n            if 2*k<x:\r\n                return largest_power_two(2*k, x, False)\r\n            else:\r\n                return k\r\n    largest_change = largest_power_two(1, amount)\r\n    def cc_recurse(amount, k):\r\n        if amount==1 or amount==0:\r\n            return 1\r\n        elif k==0:\r\n            return 0\r\n        else:\r\n            return cc_recurse(amount-k, k)+cc_recurse(amount, largest_power_two(1, k, False))\r\n    return cc_recurse(amount, largest_change)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in cc_recurse","    return cc_recurse(amount-k,k) + cc_recurse(amount,largest_power_two(1,k,False))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in cc_recurse","    return cc_recurse(amount-k,k) + cc_recurse(amount,largest_power_two(1,k,False))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in cc_recurse","    return cc_recurse(amount-k,k) + cc_recurse(amount,largest_power_two(1,k,False))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in cc_recurse","    return cc_recurse(amount-k,k) + cc_recurse(amount,largest_power_two(1,k,False))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in cc_recurse","    return cc_recurse(amount-k,k) + cc_recurse(amount,largest_power_two(1,k,False))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in cc_recurse","    return cc_recurse(amount-k,k) + cc_recurse(amount,largest_power_two(1,k,False))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 310, in cc_recurse","    if amount == 1 or amount==0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":298,"studentId":0,"date":null,"diff":"\r\nInputObject                                                               SideIndicator\r\n-----------                                                               -------------\r\ndef count_change(amount):                                                 =>           \r\n    \"\"\"Return the number of ways to make change for amount.               =>           \r\n    >>> count_change(7)                                                   =>           \r\n    >>> count_change(10)                                                  =>           \r\n    14                                                                    =>           \r\n    >>> count_change(20)                                                  =>           \r\n    60                                                                    =>           \r\n    >>> count_change(100)                                                 =>           \r\n    9828                                                                  =>           \r\n    def highest_power_of_two(x):                                          =>           \r\n        for i in range (0,x):                                             =>           \r\n            if pow(2,i) > x:                                              =>           \r\n                return pow(2, i- 1)                                       =>           \r\n        if m == 0:                                                        =>           \r\n            return 0                                                      =>           \r\n            return count_partitions(n-m, m) + count_partitions(n, m // 2) =>           \r\n    return count_partitions(amount, highest_power_of_two(amount))         =>           \r\n    6                                                                     =>           \r\n                                                                          =>           \r\n    \"\"\"                                                                   =>           \r\n                                                                          =>           \r\n            return count_partitions(n-m, m) + count_partitions(n, m / 2)  <=           \r\n        return count_partitions(amount, amount)                           <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_partitions(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, m / 2)\n        return count_partitions(amount, amount)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\ndef count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def highest_power_of_two(x):\n        for i in range (0,x):\n            if pow(2,i) > x:\n                return pow(2, i- 1)\n    def count_partitions(n, m):\n        if m == 0:\n            return 0\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, m // 2)\n    return count_partitions(amount, highest_power_of_two(amount))\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","","# Error: expected","#     6","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":299,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n        conCoin= numTimes(amount-coin, coin) =>           \r\n        conCoin= numTimes(amount-1, coin)    <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    # def findBig(k):\n    #     if k==1:\n    #         return 0\n    #     n=1\n    #     while n<k:\n    #         n=n*2\n    #     return n/2\n    #\n    # def numTimes(n, big):\n    #     if n ==0:\n    #         return 0\n    #     elif big==0:\n    #         return 0\n    #     elif big ==1:\n    #         return 1\n    #     elif n ==1:\n    #         return 1\n    #     else:\n    #         x= numTimes(n - big, big)\n    #         y= numTimes(n, big//2)\n    #         return x+y\n    # return numTimes(amount, findBig(amount))\n\n    def numTimes(amount, coin):\n        # coin=1\n        if amount <coin:\n            return 0\n        elif amount==coin:\n            return 1\n        conCoin= numTimes(amount-1, coin)\n        sinCoin=numTimes(amount, coin*2)\n        return sinCoin+conCoin\n    return numTimes(amount, 1)\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    # def findBig(k):\n    #     if k==1:\n    #         return 0\n    #     n=1\n    #     while n<k:\n    #         n=n*2\n    #     return n/2\n    #\n    # def numTimes(n, big):\n    #     if n ==0:\n    #         return 0\n    #     elif big==0:\n    #         return 0\n    #     elif big ==1:\n    #         return 1\n    #     elif n ==1:\n    #         return 1\n    #     else:\n    #         x= numTimes(n - big, big)\n    #         y= numTimes(n, big//2)\n    #         return x+y\n    # return numTimes(amount, findBig(amount))\n\n    def numTimes(amount, coin):\n        # coin=1\n        if amount <coin:\n            return 0\n        elif amount==coin:\n            return 1\n        conCoin= numTimes(amount-coin, coin)\n        sinCoin=numTimes(amount, coin*2)\n        return sinCoin+conCoin\n    return numTimes(amount, 1)\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def numTimes(amount, coin):\r\n        if amount<coin:\r\n            return 0\r\n        elif amount==coin:\r\n            return 1\r\n        conCoin = numTimes(amount-1, coin)\r\n        sinCoin = numTimes(amount, coin*2)\r\n        return sinCoin+conCoin\r\n    return numTimes(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","17","","# Error: expected","#     6","# but got","#     17","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":300,"studentId":0,"date":null,"diff":"\r\nInputObject                                                               SideIndicator\r\n-----------                                                               -------------\r\n    def largest_coin(amount):                                             =>           \r\n        c = 1                                                             =>           \r\n        while c < amount:                                                 =>           \r\n            c = 2 * c                                                     =>           \r\n        return c                                                          =>           \r\n        if amount == 0:                                                   =>           \r\n        if amount < 0:                                                    =>           \r\n        if coin == 1:                                                     =>           \r\n            return change(amount - coin, coin) + change(amount, coin / 2) =>           \r\n    return change(amount, largest_coin(amount))                           =>           \r\n        if amount == 1:                                                   <=           \r\n        if amount < 1:                                                    <=           \r\n        if coin >= amount:                                                <=           \r\n            return change(amount // 2, coin) + change(amount, coin * 2)   <=           \r\n    return change(amount, 1)                                              <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \n    def change(amount, coin):\n        if amount == 1:\n            return 1\n        if amount < 1:\n            return 0\n        if coin >= amount:\n            return 1 \n        else:\n            return change(amount // 2, coin) + change(amount, coin * 2)\n\n    return change(amount, 1)\n\n    \ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def largest_coin(amount):\n        c = 1\n        while c < amount:\n            c = 2 * c\n        return c\n    \n    def change(amount, coin):\n        if amount == 0:\n            return 1\n        if amount < 0:\n            return 0\n        if coin == 1:\n            return 1 \n        else:\n            return change(amount - coin, coin) + change(amount, coin / 2)\n\n    return change(amount, largest_coin(amount))\n\n    \ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","7","","# Error: expected","#     6","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":301,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                SideIndicator\r\n-----------                                                                                -------------\r\n    power= poweroftwo(amount, 1)                                                           =>           \r\n        if amount < 0:                                                                     =>           \r\n            return 0                                                                       =>           \r\n        if amount == 0 or power == 0:                                                      =>           \r\n        else:                                                                              =>           \r\n            return helper(amount, power - 1) + helper(amount - 2**power, power)            =>           \r\n    power = poweroftwo(amount, 1)                                                          <=           \r\n        if power == 0:                                                                     <=           \r\n            return 1                                                                       <=           \r\n        if amount == 0 or amount == 1:                                                     <=           \r\n        if amount - 2 ** power > 0:                                                        <=           \r\n            return helper(amount - 2** power, power) + helper(amount - 2**power, power -1) <=           \r\n        if amount - 2 ** power < 0:                                                        <=           \r\n            return helper(amount, power - 1)                                               <=           \r\n        return helper(amount - 2 ** power, power - 1) + helper(amount, power - 1)          <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def poweroftwo(amount, total):\n        if amount / 2 >= 2:\n            return poweroftwo(amount/2, total+1)\n        return total\n    power = poweroftwo(amount, 1)\n    def helper(amount, power):\n        if power == 0:\n            return 1\n        if amount == 0 or amount == 1:\n            return 1\n        if amount - 2 ** power > 0:\n            return helper(amount - 2** power, power) + helper(amount - 2**power, power -1)\n        if amount - 2 ** power < 0:\n            return helper(amount, power - 1)\n        return helper(amount - 2 ** power, power - 1) + helper(amount, power - 1)\n    return helper(amount,power)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def poweroftwo(amount, total):\n        if amount / 2 >= 2:\n            return poweroftwo(amount/2, total+1)\n        return total\n    power= poweroftwo(amount, 1)\n    def helper(amount, power):\n        if amount < 0:\n            return 0\n        if amount == 0 or power == 0:\n            return 1\n        else:\n            return helper(amount, power - 1) + helper(amount - 2**power, power)\n    return helper(amount,power)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","4","","# Error: expected","#     6","# but got","#     4","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":302,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                        SideIndicator\r\n-----------                                                                                        -------------\r\n    def helper (remaining,current_coin):                                                           =>           \r\n        if remaining ==0:                                                                          =>           \r\n        if current_coin ==1:                                                                       =>           \r\n            return helper (remaining-current_coin,1)                                               =>           \r\n        if remaining <0:                                                                           =>           \r\n        if remaining >0:                                                                           =>           \r\n            return helper(remaining,current_coin//2) + helper(remaining-current_coin,current_coin) =>           \r\n    x=0                                                                                            =>           \r\n    if amount ==0:                                                                                 =>           \r\n        return 0                                                                                   =>           \r\n    while 2**x < amount:                                                                           =>           \r\n        x+=1                                                                                       =>           \r\n    return helper(amount, 2**(x-1))                                                                =>           \r\n                                                                                                   =>           \r\n                                                                                                   =>           \r\n                                                                                                   =>           \r\n    def helper (amount,current):                                                                   <=           \r\n        i=0                                                                                        <=           \r\n        while amount >1:                                                                           <=           \r\n            amount //= 2                                                                           <=           \r\n            i+=1                                                                                   <=           \r\n        current = i                                                                                <=           \r\n        if amount <1:                                                                              <=           \r\n        elif amount ==1:                                                                           <=           \r\n        else:                                                                                      <=           \r\n            return helper(amount-2**current, current-1) + helper(amount, current-1)                <=           \r\n    return helper(amount,0)                                                                        <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper (amount,current):\n        i=0\n        while amount >1:\n            amount //= 2\n            i+=1\n        current = i\n        if amount <1:\n            return 0\n        elif amount ==1:\n            return 1\n        else:\n            return helper(amount-2**current, current-1) + helper(amount, current-1)\n    return helper(amount,0)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper (remaining,current_coin):\n        if remaining ==0:\n            return 1\n        if current_coin ==1:\n            return helper (remaining-current_coin,1)\n        if remaining <0:\n            return 0\n        if remaining >0:\n            return helper(remaining,current_coin//2) + helper(remaining-current_coin,current_coin)\n\n    x=0\n    if amount ==0:\n        return 0\n\n    while 2**x < amount:\n        x+=1\n\n    return helper(amount, 2**(x-1))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","1","","# Error: expected","#     6","# but got","#     1","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":303,"studentId":0,"date":null,"diff":"\r\nInputObject                                             SideIndicator\r\n-----------                                             -------------\r\n    def helper(coin, amount):                           =>           \r\n        if amount<0:                                    =>           \r\n            return 0                                    =>           \r\n        elif amount==0:                                 =>           \r\n        elif coin>amount:                               =>           \r\n            return 0                                    =>           \r\n            w_coin=helper(coin, amount-coin)            =>           \r\n            no_coin=helper(2*coin,amount)               =>           \r\n            return w_coin+no_coin                       =>           \r\n    return helper(1, amount)                            =>           \r\n    def helper(count, coin, amount):                    <=           \r\n        if amount==1:                                   <=           \r\n            return 1 + helper(count+1, coin**2, amount) <=           \r\n    return helper(0, 1, amount)                         <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(count, coin, amount):\n        if amount==1:\n            return 1\n        else:\n            return 1 + helper(count+1, coin**2, amount)\n    return helper(0, 1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(coin, amount):\n        if amount<0:\n            return 0\n        elif amount==0:\n            return 1\n        elif coin>amount:\n            return 0\n        else:\n            w_coin=helper(coin, amount-coin)\n            no_coin=helper(2*coin,amount)\n            return w_coin+no_coin\n    return helper(1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def helper(count, coin, amount):\r\n        if amount==1:\r\n            return 1\r\n        else:\r\n            return 1+helper(count+1, coin**2, amount)\r\n    return helper(0, 1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 304, in helper","    return 1 + helper(count+1, coin**2, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 304, in helper","    return 1 + helper(count+1, coin**2, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 304, in helper","    return 1 + helper(count+1, coin**2, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 304, in helper","    return 1 + helper(count+1, coin**2, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 304, in helper","    return 1 + helper(count+1, coin**2, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 304, in helper","    return 1 + helper(count+1, coin**2, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 301, in helper","    if amount==1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":304,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n            if 2 ** x <= r:                  =>           \r\n    return helper(0,create_list(amount)[-1]) =>           \r\n            if 2 ** x < r ** 2:              <=           \r\n    return helper(0,amount)                  <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def create_list(r):\n    \tlst = []\n    \tfor x in range(r + 1):\n    \t\tif 2 ** x < r ** 2:\n    \t\t\tlst.append(2**x)  \n    \treturn lst\n    def helper(n,d):\n    \tsum = 0\n    \tif n == amount:\n    \t\treturn 1\n    \tif n >= amount:\n    \t\treturn 0\n    \telse:\n    \t\tfor x in create_list(d):\n    \t\t\tsum += helper(n+x,x)\n    \treturn sum\n    return helper(0,amount)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def create_list(r):\n    \tlst = []\n    \tfor x in range(r + 1):\n    \t\tif 2 ** x <= r:\n    \t\t\tlst.append(2**x)  \n    \treturn lst\n    def helper(n,d):\n    \tsum = 0\n    \tif n == amount:\n    \t\treturn 1\n    \tif n >= amount:\n    \t\treturn 0\n    \telse:\n    \t\tfor x in create_list(d):\n    \t\t\tsum += helper(n+x,x)\n    \treturn sum\n    return helper(0,create_list(amount)[-1])\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def create_list(r):\r\n        amount = []\r\n        for x in range(r+1):\r\n            if 2**x<r**2:\r\n                lst.append(2**x)\r\n        return lst\r\n    def helper(n, d):\r\n        sum = 0\r\n        if n==amount:\r\n            return 1\r\n        if n>=amount:\r\n            return 0\r\n        else:\r\n            for x in create_list(d):\r\n                sum += helper(n+x, x)\r\n        return sum\r\n    return helper(0, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","2","","# Error: expected","#     6","# but got","#     2","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":305,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n        if amount1 < 0:   =>           \r\n        if coin < 1:      =>           \r\n        elif amount1 < 0: <=           \r\n        elif coin == 0:   <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \"\"\"Answer inspired by Denero's vid on Partitions\"\"\"\n    def counter(amount1,coin):\n        if amount1 == 0:\n            return 1\n        elif amount1 < 0:\n            return 0\n        elif coin == 0:\n            return 0\n        else:\n            return counter(amount1-coin, coin) + counter(amount1, coin/2)\n    def largestcoin(amount):\n        x = 1\n        while x < amount:\n            x = 2 * x\n        return x\n    return counter(amount, largestcoin(amount)) \n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \"\"\"Answer inspired by Denero's vid on Partitions\"\"\"\n    def counter(amount1,coin):\n        if amount1 == 0:\n            return 1\n        if amount1 < 0:\n            return 0\n        if coin < 1:\n            return 0\n        else:\n            return counter(amount1-coin, coin) + counter(amount1, coin/2)\n    def largestcoin(amount):\n        x = 1\n        while x < amount:\n            x = 2 * x\n        return x\n    return counter(amount, largestcoin(amount)) \n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 322, in counter","    return counter(amount1-coin, coin) + counter(amount1, coin/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 322, in counter","    return counter(amount1-coin, coin) + counter(amount1, coin/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 322, in counter","    return counter(amount1-coin, coin) + counter(amount1, coin/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 322, in counter","    return counter(amount1-coin, coin) + counter(amount1, coin/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 322, in counter","    return counter(amount1-coin, coin) + counter(amount1, coin/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 322, in counter","    return counter(amount1-coin, coin) + counter(amount1, coin/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in counter","    if amount1 == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":306,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n            return 1 =>           \r\n            return 0 <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def find_biggest_coin(amount):\n            coin = 1\n            while coin < amount:\n                coin *= 2\n            return coin \n\n    def count_partitions(n, m):\n        \"\"\"Count the ways to partition n using parts up to m.\"\"\"\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 1: #change to 1?\n            return 0\n        else:\n            return count_partitions(n - m, m) + count_partitions(n, m / 2)\n\n    return count_partitions(amount, find_biggest_coin(amount))\n\n\n\n    \ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def find_biggest_coin(amount):\n            coin = 1\n            while coin < amount:\n                coin *= 2\n            return coin \n\n    def count_partitions(n, m):\n        \"\"\"Count the ways to partition n using parts up to m.\"\"\"\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 1: #change to 1?\n            return 1\n        else:\n            return count_partitions(n - m, m) + count_partitions(n, m / 2)\n\n    return count_partitions(amount, find_biggest_coin(amount))\n\n\n\n    \ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":307,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                               SideIndicator\r\n-----------                                                                                               -------------\r\n    def count_use(smallestCoin, amount):                                                                  =>           \r\n        if amount == 0:                                                                                   =>           \r\n            return 1                                                                                      =>           \r\n        elif amount < 0:                                                                                  =>           \r\n            return 0                                                                                      =>           \r\n        elif smallestCoin > amount:                                                                       =>           \r\n            return 0                                                                                      =>           \r\n        else:                                                                                             =>           \r\n            return count_use(smallestCoin, amount - smallestCoin) + count_use(smallestCoin*2, amount)     =>           \r\n    return count_use(1, amount)                                                                           =>           \r\n    return count_using(1, amount)                                                                         <=           \r\n                                                                                                          <=           \r\n    def count_using(smallestCoin, amount):                                                                <=           \r\n        if amount < 0:                                                                                    <=           \r\n            return 0                                                                                      <=           \r\n        elif amount == 0:                                                                                 <=           \r\n            return 1                                                                                      <=           \r\n        elif smallestCoin > amount:                                                                       <=           \r\n            return 0                                                                                      <=           \r\n        else:                                                                                             <=           \r\n            return count_using(smallestCoin, amount - smallestCoin) + count_using(smallestCoin*2, amount) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    return count_using(1, amount)\n    \n    def count_using(smallestCoin, amount):\n\t    if amount < 0:\n\t        return 0\n\t    elif amount == 0:\n\t        return 1\n\t    elif smallestCoin > amount:\n\t        return 0\n\t    else:\n\t        return count_using(smallestCoin, amount - smallestCoin) + count_using(smallestCoin*2, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_use(smallestCoin, amount):\n    \tif amount == 0:\n    \t\treturn 1\n    \telif amount < 0:\n    \t\treturn 0\n    \telif smallestCoin > amount:\n    \t\treturn 0\n    \telse: \n    \t\treturn count_use(smallestCoin, amount - smallestCoin) + count_use(smallestCoin*2, amount)\n\n    return count_use(1, amount)\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    return amount(1, amount)\r\n    def count_using(smallestCoin, amount):\r\n        if amount<0:\r\n            return 0\r\n        elif amount==0:\r\n            return 1\r\n        elif smallestCoin>amount:\r\n            return 0\r\n        else:\r\n            return count_using(smallestCoin, amount-smallestCoin)+count_using(smallestCoin*2, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 304, in count_change","    return count_using(1, amount)","UnboundLocalError: local variable 'count_using' referenced before assignment","","# Error: expected","#     6","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":308,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                                      SideIndicator\r\n-----------                                                                                                      -------------\r\n            return count_subset(smaller_amount-2**max_coin,max_coin) + count_subset(smaller_amount,max_coin-1)   =>           \r\n            return count_subset(smaller_amount-2**max_coin,max_coin-1) + count_subset(smaller_amount,max_coin-1) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i=0\n    while amount>2**i:\n            i+=1\n    max_coin=i-1\n    def count_subset(smaller_amount,max_coin):\n        if smaller_amount<0:\n            return 0\n        elif smaller_amount==0:\n            return 1\n        elif max_coin==0:\n            return 1\n        else:\n            return count_subset(smaller_amount-2**max_coin,max_coin-1) + count_subset(smaller_amount,max_coin-1)\n    return count_subset(amount,max_coin)\n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i=0\n    while amount>2**i:\n            i+=1\n    max_coin=i-1\n    def count_subset(smaller_amount,max_coin):\n        if smaller_amount<0:\n            return 0\n        elif smaller_amount==0:\n            return 1\n        elif max_coin==0:\n            return 1\n        else:\n            return count_subset(smaller_amount-2**max_coin,max_coin) + count_subset(smaller_amount,max_coin-1)\n    return count_subset(amount,max_coin)\n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    amount = 0\r\n    while amount>2**i:\r\n        i += 1\r\n    max_coin = i-1\r\n    def count_subset(smaller_amount, max_coin):\r\n        if smaller_amount<0:\r\n            return 0\r\n        elif smaller_amount==0:\r\n            return 1\r\n        elif max_coin==0:\r\n            return 1\r\n        else:\r\n            return count_subset(smaller_amount-2**max_coin, max_coin-1)+count_subset(smaller_amount, max_coin-1)\r\n    return count_subset(amount, max_coin)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","4","","# Error: expected","#     6","# but got","#     4","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":309,"studentId":0,"date":null,"diff":"\r\nInputObject                         SideIndicator\r\n-----------                         -------------\r\n    maxs = findmax(amount)          =>           \r\n    return addmon(amount, maxs)     =>           \r\n        maxs = findmax(amount)      <=           \r\n        return addmon(amount, maxs) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def addmon(num, maxs):\n        if num < 0:\n            return 0\n        elif num == 0:\n            return 1\n        elif maxs == 0:\n            return 1\n        else:\n            a = addmon(num - pow(2, maxs), maxs)\n            b = addmon(num, maxs - 1)\n            return a + b\n\n    def findmax(num):\n        x = 0 \n        while pow(2, x) <= num:\n            x += 1 \n        return x - 1 \n\n        maxs = findmax(amount)\n\n        return addmon(amount, maxs)\n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def addmon(num, maxs):\n        if num < 0:\n            return 0\n        elif num == 0:\n            return 1\n        elif maxs == 0:\n            return 1\n        else:\n            a = addmon(num - pow(2, maxs), maxs)\n            b = addmon(num, maxs - 1)\n            return a + b\n\n    def findmax(num):\n        x = 0 \n        while pow(2, x) <= num:\n            x += 1 \n        return x - 1 \n\n    maxs = findmax(amount)\n\n    return addmon(amount, maxs)\n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def addmon(num, maxs):\r\n        if num<0:\r\n            return 0\r\n        elif num==0:\r\n            return 1\r\n        elif maxs==0:\r\n            return 1\r\n        else:\r\n            a = addmon(num-pow(2, maxs), maxs)\r\n            b = addmon(num, maxs-1)\r\n            return a+k\r\n    def findmax(num):\r\n        x = 0\r\n        while pow(2, x)<=num:\r\n            x += 1\r\n        return x-1\r\n        maxs = findmax(amount)\r\n        return addmon(amount, maxs)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","","# Error: expected","#     6","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":310,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                       SideIndicator\r\n-----------                                                                       -------------\r\n    for n in range(0,amount):                                                     =>           \r\n        if biggest_n == 0:                                                        =>           \r\n            return exponent(biggest_n)                                            =>           \r\n        elif amount == 0:                                                         =>           \r\n            return 1                                                              =>           \r\n        elif amount < 0:                                                          =>           \r\n            return 0                                                              =>           \r\n        use_big_term = treefxn(amount - exponent(biggest_n), (biggest_n))         =>           \r\n        next_big_term = treefxn(amount, (biggest_n - 1))                          =>           \r\n    return treefxn(amount, biggest_n)                                             =>           \r\n    if n == 1:                                                                    =>           \r\n        return print_move(start,end)                                              =>           \r\n    return move_stack(n-1,end,start)                                              =>           \r\n                                                                                  =>           \r\n    \"\"\"\"bigboylist = []                                                           <=           \r\n    blank_list = []                                                               <=           \r\n    for value in list_of_powers:\"\"\"                                               <=           \r\n    for n in range(1,amount):                                                     <=           \r\n    if biggest_n == 0:                                                            <=           \r\n        return 1                                                                  <=           \r\n    elif biggest_n == 1:                                                          <=           \r\n        return 2                                                                  <=           \r\n                                                                                  <=           \r\n        use_big_term = treefxn(amount - exponent(biggest_n), exponent(biggest_n)) <=           \r\n        next_big_term = treefxn(amount, exponent(biggest_n - 1))                  <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \"\"\"\"bigboylist = []\n\n    blank_list = []\n\n    for value in list_of_powers:\"\"\"\n\n    list_of_powers = []\n\n    def exponent(x):\n        return 2**x\n\n    for n in range(1,amount):\n        if amount - (exponent(n)) > 0:\n            list_of_powers.append(n)\n    biggest_n = (max(list_of_powers))\n\n    if biggest_n == 0:\n        return 1\n    elif biggest_n == 1:\n        return 2\n        \n    def treefxn(amount, biggest_n):\n        use_big_term = treefxn(amount - exponent(biggest_n), exponent(biggest_n))\n        next_big_term = treefxn(amount, exponent(biggest_n - 1))\n        return use_big_term + next_big_term\n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n\n    list_of_powers = []\n\n    def exponent(x):\n        return 2**x\n\n    for n in range(0,amount):\n        if amount - (exponent(n)) > 0:\n            list_of_powers.append(n)\n    biggest_n = (max(list_of_powers))\n\n    def treefxn(amount, biggest_n):\n        if biggest_n == 0:\n            return exponent(biggest_n)\n        elif amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        use_big_term = treefxn(amount - exponent(biggest_n), (biggest_n))\n        next_big_term = treefxn(amount, (biggest_n - 1))\n        return use_big_term + next_big_term\n\n    return treefxn(amount, biggest_n)\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    list_of_powers = []\r\n    def exponent(x):\r\n        return 2**x\r\n    for n in range(1, amount):\r\n        if amount-(exponent(n))>0:\r\n            list_of_powers.append(n)\r\n    biggest_n = (max(list_of_powers))\r\n    if biggest_n==0:\r\n        return 1\r\n    elif biggest_n==1:\r\n        return 2\r\n    def treefxn(amount, biggest_n):\r\n        use_big_term = treefxn(amount-exponent(biggest_n), exponent(biggest_n))\r\n        next_big_term = treefxn(amount, exponent(biggest_n-1))\r\n        return use_big_term+k\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","","# Error: expected","#     6","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":311,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                   SideIndicator\r\n-----------                                                                                   -------------\r\n        if new_coin > amount:                                                                 =>           \r\n            return 0                                                                          =>           \r\n        elif sum() > amount:                                                                  =>           \r\n            return 0                                                                          =>           \r\n        elif sum() == amount:                                                                 =>           \r\n            return 1                                                                          =>           \r\n        else:                                                                                 =>           \r\n            return count(exponent+1, 0, sum()) + count(exponent, coin_value + 1, current)     =>           \r\n    return count(0,0,0)                                                                       =>           \r\n            if new_coin > amount:                                                             <=           \r\n                return 0                                                                      <=           \r\n            elif sum() > amount:                                                              <=           \r\n                return 0                                                                      <=           \r\n            elif sum() == amount:                                                             <=           \r\n                return 1                                                                      <=           \r\n            else:                                                                             <=           \r\n                return count(exponent+1, 0, sum()) + count(exponent, coin_value + 1, current) <=           \r\n        return count(0,0,0)                                                                   <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count(exponent, coin_value, current):\n        new_coin = pow(2, exponent)\n        def sum():\n            return mul(new_coin, coin_value) + current\n\n            if new_coin > amount:\n                return 0 \n            elif sum() > amount:\n                return 0 \n            elif sum() == amount: \n                return 1\n            else: \n                return count(exponent+1, 0, sum()) + count(exponent, coin_value + 1, current)\n        return count(0,0,0)\n\n\ndef print_move(origin, destination):\n    print('Move the top disk from rod', origin, 'to rod', destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count(exponent, coin_value, current):\n        new_coin = pow(2, exponent)\n        def sum():\n            return mul(new_coin, coin_value) + current\n\n        if new_coin > amount:\n            return 0 \n        elif sum() > amount:\n            return 0 \n        elif sum() == amount: \n            return 1\n        else: \n            return count(exponent+1, 0, sum()) + count(exponent, coin_value + 1, current)\n    return count(0,0,0)\n\n\ndef print_move(origin, destination):\n    print('Move the top disk from rod', origin, 'to rod', destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count(exponent, coin_value, current):\r\n        amount = pow(2, exponent)\r\n        def sum():\r\n            return mul(new_coin, coin_value)+current\r\n            if new_coin>amount:\r\n                return 0\r\n            elif sum()>amount:\r\n                return 0\r\n            elif sum()==amount:\r\n                return 1\r\n            else:\r\n                return count(exponent+1, 0, sum())+count(exponent, coin_value+1, current)\r\n        return count(0, 0, 0)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","","# Error: expected","#     6","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":312,"studentId":0,"date":null,"diff":"\r\nInputObject                                               SideIndicator\r\n-----------                                               -------------\r\n    def m(amount):                                        =>           \r\n        \"\"\" using 2^x value change used to partition n\"\"\" =>           \r\n        x=0                                               =>           \r\n        while pow(2,x)< amount:                           =>           \r\n            x+=1                                          =>           \r\n        return x                                          =>           \r\n    m=m(amount)                                           =>           \r\n    def count_partitions(n, m):                           =>           \r\n        if m==0:                                          =>           \r\n            return 1                                      =>           \r\n        elif n<0:                                         =>           \r\n            return 0                                      =>           \r\n        elif n==0:                                        =>           \r\n            return 1                                      =>           \r\n        else:                                             =>           \r\n            with_m= count_partitions(n- pow(2, m), m)     =>           \r\n            without_m= count_partitions(n, m-1)           =>           \r\n        return with_m+ without_m                          =>           \r\n    return count_partitions(amount, m)                    =>           \r\n                                                          =>           \r\n                                                          =>           \r\n                                                          =>           \r\n                                                          =>           \r\n                                                          =>           \r\n    n= amount                                             <=           \r\n    if n==0:                                              <=           \r\n        return 1                                          <=           \r\n    if n==1:                                              <=           \r\n        return 1                                          <=           \r\n    if n%2==0:                                            <=           \r\n        return n                                          <=           \r\n    while n%2!=0:                                         <=           \r\n        n-=1                                              <=           \r\n        return n                                          <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    n= amount\n\n    if n==0:\n        return 1\n    if n==1:\n        return 1\n    if n%2==0:\n        return n\n    while n%2!=0:\n        n-=1\n        return n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def m(amount):\n        \"\"\" using 2^x value change used to partition n\"\"\"\n        x=0\n        while pow(2,x)< amount:\n            x+=1\n        return x\n\n    m=m(amount)\n\n    def count_partitions(n, m):\n        if m==0:\n            return 1\n        elif n<0:\n            return 0\n        elif n==0:\n            return 1\n        else:\n            with_m= count_partitions(n- pow(2, m), m)\n            without_m= count_partitions(n, m-1)\n        return with_m+ without_m\n\n    return count_partitions(amount, m)\n\n         \n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","10","","# Error: expected","#     14","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":313,"studentId":0,"date":null,"diff":"\r\nInputObject       SideIndicator\r\n-----------       -------------\r\n    variable = 1  =>           \r\n    variable == 1 <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    return recursive(amount, haaaaaaalp(amount))\n\ndef recursive(amount, variable):\n    if amount == 0:\n        return 1\n    elif amount < 0:\n        return 0\n    elif variable == 0:\n        return 0\n    else:\n        return recursive(amount - variable, variable) + recursive(amount, variable // 2)\n\ndef haaaaaaalp(amount):\n    variable == 1\n    while variable < amount:\n        variable *= 2\n    if variable > amount:\n        variable = variable // 2\n        return variable\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    return recursive(amount, haaaaaaalp(amount))\n\ndef recursive(amount, variable):\n    if amount == 0:\n        return 1\n    elif amount < 0:\n        return 0\n    elif variable == 0:\n        return 0\n    else:\n        return recursive(amount - variable, variable) + recursive(amount, variable // 2)\n\ndef haaaaaaalp(amount):\n    variable = 1\n    while variable < amount:\n        variable *= 2\n    if variable > amount:\n        variable = variable // 2\n        return variable\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 294, in count_change","    return recursive(amount, haaaaaaalp(amount))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 307, in haaaaaaalp","    variable == 1","UnboundLocalError: local variable 'variable' referenced before assignment","","# Error: expected","#     6","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":314,"studentId":0,"date":null,"diff":"\r\nInputObject                                               SideIndicator\r\n-----------                                               -------------\r\n            without_m = count_partitions(amount, coin//2) =>           \r\n            without_m = count_partitions(amount, coin/2)  <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    coin = 1\n    while coin <= amount:\n        coin = coin * 2\n\n    def count_partitions(amount, coin):\n        if amount == 0:\n            return 1\n        if amount == 1:\n            return 1\n        elif amount < 0:\n            return 0\n        elif coin <= 0:\n            return 0\n        else:\n            with_m = count_partitions(amount-coin, coin)\n            without_m = count_partitions(amount, coin/2)\n            return with_m + without_m\n    return count_partitions(amount, coin)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    coin = 1\n    while coin <= amount:\n        coin = coin * 2\n\n    def count_partitions(amount, coin):\n        if amount == 0:\n            return 1\n        if amount == 1:\n            return 1\n        elif amount < 0:\n            return 0\n        elif coin <= 0:\n            return 0\n        else:\n            with_m = count_partitions(amount-coin, coin)\n            without_m = count_partitions(amount, coin//2)\n            return with_m + without_m\n    return count_partitions(amount, coin)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    coin = 1\r\n    while coin<=amount:\r\n        coin = coin*2\r\n    def count_partitions(amount, coin):\r\n        if amount==0:\r\n            return 1\r\n        if amount==1:\r\n            return 1\r\n        elif amount<0:\r\n            return 0\r\n        elif coin<=0:\r\n            return 0\r\n        else:\r\n            with_m = count_partitions(amount-coin, coin)\r\n            without_m = count_partitions(amount, coin/2)\r\n            return with_m+k\r\n    return count_partitions(amount, coin)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 323, in count_partitions","    with_m = count_partitions(amount-coin, coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 323, in count_partitions","    with_m = count_partitions(amount-coin, coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 323, in count_partitions","    with_m = count_partitions(amount-coin, coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 323, in count_partitions","    with_m = count_partitions(amount-coin, coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 323, in count_partitions","    with_m = count_partitions(amount-coin, coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 323, in count_partitions","    with_m = count_partitions(amount-coin, coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 314, in count_partitions","    if amount == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":315,"studentId":0,"date":null,"diff":"\r\nInputObject                                               SideIndicator\r\n-----------                                               -------------\r\ndef count_helper(minimum,amount):                         =>           \r\n    if amount == 0:                                       =>           \r\n        return 1                                          =>           \r\n    elif minimum>amount:                                  =>           \r\n        return 0                                          =>           \r\n    else:                                                 =>           \r\n        minimum1=count_helper(minimum,amount-minimum)     =>           \r\n        minimum0=count_helper(2*minimum, amount)          =>           \r\n        return minimum1+minimum0                          =>           \r\n                                                          =>           \r\n    def count_helper(minimum,amount):                     <=           \r\n        if amount == 0:                                   <=           \r\n            return 1                                      <=           \r\n        elif minimum>amount:                              <=           \r\n            return 0                                      <=           \r\n        else:                                             <=           \r\n            minimum1=count_helper(minimum,amount-minimum) <=           \r\n            minimum0=count_helper(2*minimum, amount)      <=           \r\n            return minimum1+minimum0                      <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    return count_helper(1,amount)\n    def count_helper(minimum,amount):\n        if amount == 0:\n            return 1\n        elif minimum>amount:\n            return 0\n        else:\n            minimum1=count_helper(minimum,amount-minimum)\n            minimum0=count_helper(2*minimum, amount)\n            return minimum1+minimum0\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    return count_helper(1,amount)\n\ndef count_helper(minimum,amount):\n    if amount == 0:\n        return 1\n    elif minimum>amount:\n        return 0\n    else:\n        minimum1=count_helper(minimum,amount-minimum)\n        minimum0=count_helper(2*minimum, amount)\n        return minimum1+minimum0\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    return count_helper(1, amount)\r\n    def count_helper(minimum, amount):\r\n        if amount==0:\r\n            return 1\r\n        elif minimum>amount:\r\n            return 0\r\n        else:\r\n            minimum1 = count_helper(minimum, amount-minimum)\r\n            minimum0 = count_helper(2*minimum, amount)\r\n            return minimum1+k\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 300, in count_change","    return count_helper(1,amount)","UnboundLocalError: local variable 'count_helper' referenced before assignment","","# Error: expected","#     6","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":316,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n        elif amount < 0: =>           \r\n        elif amount < 1: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def find_num_combos_for(amount, max_coin):\n        if max_coin == 1:\n            return 1\n        elif amount < 1:\n            return 0\n        else:\n            return find_num_combos_for(amount, max_coin // 2) + \\\n                find_num_combos_for(amount - max_coin, max_coin)\n    max_coin_num = 1\n    while max_coin_num < amount:\n        max_coin_num *= 2\n    return find_num_combos_for(amount, max_coin_num)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def find_num_combos_for(amount, max_coin):\n        if max_coin == 1:\n            return 1\n        elif amount < 0:\n            return 0\n        else:\n            return find_num_combos_for(amount, max_coin // 2) + \\\n                find_num_combos_for(amount - max_coin, max_coin)\n    max_coin_num = 1\n    while max_coin_num < amount:\n        max_coin_num *= 2\n    return find_num_combos_for(amount, max_coin_num)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","10","","# Error: expected","#     14","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":317,"studentId":0,"date":null,"diff":"\r\nInputObject                    SideIndicator\r\n-----------                    -------------\r\n        elif amount < minimum: =>           \r\n            return 0           =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper(amount, minimum):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        else:\n            a = helper(amount - minimum, minimum)\n            b = helper(amount, minimum * 2)\n            return a + b\n    return helper(amount, 1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper(amount, minimum):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif amount < minimum:\n            return 0\n        else:\n            a = helper(amount - minimum, minimum)\n            b = helper(amount, minimum * 2)\n            return a + b\n    return helper(amount, 1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def helper(amount, minimum):\r\n        if amount==0:\r\n            return 1\r\n        elif amount<0:\r\n            return 0\r\n        else:\r\n            a = helper(amount-minimum, minimum)\r\n            b = helper(amount, minimum*2)\r\n            return a+k\r\n    return helper(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 303, in helper","    b = helper(amount, minimum * 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 303, in helper","    b = helper(amount, minimum * 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 303, in helper","    b = helper(amount, minimum * 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 303, in helper","    b = helper(amount, minimum * 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 303, in helper","    b = helper(amount, minimum * 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 302, in helper","    a = helper(amount - minimum, minimum)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 297, in helper","    if amount == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":318,"studentId":0,"date":null,"diff":"\r\nInputObject     SideIndicator\r\n-----------     -------------\r\n    import math =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def power2(x):\n        #returns the largest power of 2 less than or equal to X\n        if x>0:\n            return 2**int(math.log(x, 2))\n        return 0\n    \n    def count_partitions(n,m):\n        #counts the number of ways to partition N in pieces up to size M.\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        return count_partitions(n-m,m) + count_partitions(n,power2(m-1))\n    \n    return count_partitions(amount,power2(amount))\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    import math\n    def power2(x):\n        #returns the largest power of 2 less than or equal to X\n        if x>0:\n            return 2**int(math.log(x, 2))\n        return 0\n    \n    def count_partitions(n,m):\n        #counts the number of ways to partition N in pieces up to size M.\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        return count_partitions(n-m,m) + count_partitions(n,power2(m-1))\n    \n    return count_partitions(amount,power2(amount))\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def power2(x):\r\n        if amount>0:\r\n            return 2**int(math.log(x, 2))\r\n        return 0\r\n    def count_partitions(n, m):\r\n        if n==0:\r\n            return 1\r\n        elif n<0:\r\n            return 0\r\n        elif m==0:\r\n            return 0\r\n        return count_partitions(n-m, m)+count_partitions(n, power2(m-1))\r\n    return count_partitions(amount, power2(amount))\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 320, in count_change","    return count_partitions(amount,power2(amount))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 307, in power2","    return 2**int(math.log(x, 2))","NameError: name 'math' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":319,"studentId":0,"date":null,"diff":"\r\nInputObject                                               SideIndicator\r\n-----------                                               -------------\r\n            with_min = use(least, amount - least)         =>           \r\n            without_min = use(2*least, amount)            =>           \r\n            with_min = count_using(least, amount - least) <=           \r\n            without_min = count_using(2*least, amount)    <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"\"\"maxcoin = int(sqrt(amount))\n    usablecoins = []\n    for i in range(1,maxcoin):\n        usablecoins.apend(2**i)\n    \"\"\"\n    def use(least, amount):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif least > amount:\n            return 0\n        else:\n            with_min = count_using(least, amount - least)\n            without_min = count_using(2*least, amount)\n            return with_min + without_min\n    return use(1, amount)\n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"\"\"maxcoin = int(sqrt(amount))\n    usablecoins = []\n    for i in range(1,maxcoin):\n        usablecoins.apend(2**i)\n    \"\"\"\n    def use(least, amount):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif least > amount:\n            return 0\n        else:\n            with_min = use(least, amount - least)\n            without_min = use(2*least, amount)\n            return with_min + without_min\n    return use(1, amount)\n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def use(least, amount):\r\n        if amount<0:\r\n            return 0\r\n        elif amount==0:\r\n            return 1\r\n        elif least>amount:\r\n            return 0\r\n        else:\r\n            with_min = count_using(least, amount-least)\r\n            without_min = count_using(2*least, amount)\r\n            return with_min+k\r\n    return use(1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 363, in count_change","    return use(1, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 360, in use","    with_min = count_using(least, amount - least)","NameError: name 'count_using' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":320,"studentId":0,"date":null,"diff":"\r\nInputObject                             SideIndicator\r\n-----------                             -------------\r\n            without_m=ff(n,m//2)        =>           \r\n    if n==1:                            =>           \r\n        origin=start                    =>           \r\n        destination=end                 =>           \r\n        print_move(origin, destination) =>           \r\n    else:                               =>           \r\n        move_stack(n-1,start,offset)    =>           \r\n        origin=start                    =>           \r\n        destination=end                 =>           \r\n        print_move(origin, destination) =>           \r\n        move_stack(n-1,offset,end)      =>           \r\n                                        =>           \r\n                                        =>           \r\n                                        =>           \r\n            without_m=ff(n-m,m//2)      <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i=1\n    while 2**i<amount:\n        i=i+1\n    k=i-1\n    def ff(n,m):\n        if n==0:\n            return 1\n        elif n<0:\n            return 0\n        elif m==0:\n            return 0\n        else:\n            with_m=ff(n-m,m)\n            without_m=ff(n-m,m//2)\n            return with_m+without_m\n    return ff(amount,2**k)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i=1\n    while 2**i<amount:\n        i=i+1\n    k=i-1\n    def ff(n,m):\n        if n==0:\n            return 1\n        elif n<0:\n            return 0\n        elif m==0:\n            return 0\n        else:\n            with_m=ff(n-m,m)\n            without_m=ff(n,m//2)\n            return with_m+without_m\n    return ff(amount,2**k)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","2","","# Error: expected","#     6","# but got","#     2","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":321,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                            SideIndicator\r\n-----------                                                                                            -------------\r\n    elif min_amount > value:                                                                           =>           \r\n        return coin_partitions(min_amount, value - min_amount) + coin_partitions(2*min_amount, value)  =>           \r\n    elif min_amount > amount:                                                                          <=           \r\n        return coin_partitions(min_amount, value - min_amount) + coin_partitions(2*min_amount, amount) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    return coin_partitions(1, amount)\n\ndef coin_partitions(min_amount, value):\n    if value == 0:\n        return 1\n    elif value < 0:\n        return 0\n    elif min_amount > amount:\n        return 0\n    else:\n        return coin_partitions(min_amount, value - min_amount) + coin_partitions(2*min_amount, amount)\n\n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    return coin_partitions(1, amount)\n\ndef coin_partitions(min_amount, value):\n    if value == 0:\n        return 1\n    elif value < 0:\n        return 0\n    elif min_amount > value:\n        return 0\n    else:\n        return coin_partitions(min_amount, value - min_amount) + coin_partitions(2*min_amount, value)\n\n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    return amount(1, amount)\r\ndef coin_partitions(min_amount, value):\r\n    if value==0:\r\n        return 1\r\n    elif value<0:\r\n        return 0\r\n    elif min_amount>amount:\r\n        return 0\r\n    else:\r\n        return coin_partitions(min_amount, value-min_amount)+coin_partitions(2*min_amount, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 309, in count_change","    return coin_partitions(1, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 316, in coin_partitions","    elif min_amount > amount:","NameError: name 'amount' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":322,"studentId":0,"date":null,"diff":"\r\nInputObject                                          SideIndicator\r\n-----------                                          -------------\r\n        without_min = count_help(least * 2, amount)  =>           \r\n        without_min = count_help(least ** 2, amount) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n# Denero 61A Fall 2015 Lecture 7 \n\n    return count_help(1, amount)\n\ndef count_help(least, amount):\n    if amount == 0:\n        return 1\n    elif least > amount:\n        return 0\n    elif least  == 0:\n        return 0\n    else:\n        with_min = count_help(least, amount - least)\n        without_min = count_help(least ** 2, amount)\n        return with_min + without_min\n\n    \n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n# Denero 61A Fall 2015 Lecture 7 \n\n    return count_help(1, amount)\n\ndef count_help(least, amount):\n    if amount == 0:\n        return 1\n    elif least > amount:\n        return 0\n    elif least  == 0:\n        return 0\n    else:\n        with_min = count_help(least, amount - least)\n        without_min = count_help(least * 2, amount)\n        return with_min + without_min\n\n    \n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    return count_help(1, amount)\r\ndef count_help(least, amount):\r\n    if amount==0:\r\n        return 1\r\n    elif least>amount:\r\n        return 0\r\n    elif least==0:\r\n        return 0\r\n    else:\r\n        with_min = count_help(least, amount-least)\r\n        without_min = count_help(least**2, amount)\r\n        return with_min+k\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 304, in count_help","    without_min = count_help(least ** 2, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 304, in count_help","    without_min = count_help(least ** 2, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 304, in count_help","    without_min = count_help(least ** 2, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 304, in count_help","    without_min = count_help(least ** 2, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 304, in count_help","    without_min = count_help(least ** 2, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 303, in count_help","    with_min = count_help(least, amount - least)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 296, in count_help","    if amount == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":323,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n        if amount==1 or amount==0 or max_a==1: =>           \r\n        if amount==1 or amount==0:             <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    max_a=amount\n    def helper(amount,max_a):\n        a=1\n        while a<=amount:\n            a*=2\n        a=a//2\n        while a>max_a:\n            a=a//2\n        if amount==1 or amount==0:\n            return 1\n        count=0\n        \n        count=helper(amount-a,a)+helper(amount,a//2)\n\n        return count\n    return helper(amount,max_a)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    max_a=amount\n    def helper(amount,max_a):\n        a=1\n        while a<=amount:\n            a*=2\n        a=a//2\n        while a>max_a:\n            a=a//2\n        if amount==1 or amount==0 or max_a==1:\n            return 1\n        count=0\n        \n        count=helper(amount-a,a)+helper(amount,a//2)\n\n        return count\n    return helper(amount,max_a)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 335, in helper","    count=helper(amount-a,a)+helper(amount,a//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 335, in helper","    count=helper(amount-a,a)+helper(amount,a//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 335, in helper","    count=helper(amount-a,a)+helper(amount,a//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 335, in helper","    count=helper(amount-a,a)+helper(amount,a//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 335, in helper","    count=helper(amount-a,a)+helper(amount,a//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 335, in helper","    count=helper(amount-a,a)+helper(amount,a//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 326, in helper","    while a<=amount:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":324,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n            return 1 =>           \r\n            return 0 <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper(amount, coin):\n        if amount == 0:\n            return 0\n        if coin == 1:\n            return 1\n        if coin > amount:\n            return helper(amount, coin//2)\n        return helper(amount - coin, coin) + helper(amount, coin//2)\n    x = 1\n    while x <= amount:\n        x = x * 2\n    return helper(amount, x//2)\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper(amount, coin):\n        if amount == 0:\n            return 1\n        if coin == 1:\n            return 1\n        if coin > amount:\n            return helper(amount, coin//2)\n        return helper(amount - coin, coin) + helper(amount, coin//2)\n    x = 1\n    while x <= amount:\n        x = x * 2\n    return helper(amount, x//2)\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","10","","# Error: expected","#     14","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":325,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                              SideIndicator\r\n-----------                                                                                              -------------\r\n        elif x == m:                                                                                     =>           \r\n            return count_partitions(x - m, m) + count_partitions(x, m - nearest_power_of_two(m - 1)) + 1 =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    total = 0\n   \n    def nearest_power_of_two(x):\n        k = 0\n        while x // 2 > 0:\n            k += 1\n            x = x // 2\n        return 2**k\n   \n    k1 = nearest_power_of_two(amount)\n    coin_lst = [k1]\n    helper_lst = []\n    while k1 > 2:\n        k1 -= 1\n        k1 = nearest_power_of_two(k1)\n        helper_lst = [k1]\n        coin_lst = coin_lst + helper_lst\n    coin_lst = coin_lst + [1]\n\n    def count_partitions(x, m = nearest_power_of_two(amount)):\n        \"\"\"Count the ways to partition n using parts up to m.\"\"\"\n        if 1 <= x <= 2:\n            return x\n        elif x <= 0:\n            return 0\n        elif m == 1:\n            return 1\n        else:\n            return count_partitions(x - m, m) + count_partitions(x, m - nearest_power_of_two(m - 1))\n    return count_partitions(amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    total = 0\n   \n    def nearest_power_of_two(x):\n        k = 0\n        while x // 2 > 0:\n            k += 1\n            x = x // 2\n        return 2**k\n   \n    k1 = nearest_power_of_two(amount)\n    coin_lst = [k1]\n    helper_lst = []\n    while k1 > 2:\n        k1 -= 1\n        k1 = nearest_power_of_two(k1)\n        helper_lst = [k1]\n        coin_lst = coin_lst + helper_lst\n    coin_lst = coin_lst + [1]\n\n    def count_partitions(x, m = nearest_power_of_two(amount)):\n        \"\"\"Count the ways to partition n using parts up to m.\"\"\"\n        if 1 <= x <= 2:\n            return x\n        elif x <= 0:\n            return 0\n        elif m == 1:\n            return 1\n        elif x == m:\n            return count_partitions(x - m, m) + count_partitions(x, m - nearest_power_of_two(m - 1)) + 1\n        else:\n            return count_partitions(x - m, m) + count_partitions(x, m - nearest_power_of_two(m - 1))\n    return count_partitions(amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","14",">>> count_change(20)","56","","# Error: expected","#     60","# but got","#     56","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":326,"studentId":0,"date":null,"diff":"\r\nInputObject                           SideIndicator\r\n-----------                           -------------\r\n        return 2                      =>           \r\n    return count_change(amount-1)     =>           \r\n        return 1                      <=           \r\n    else:                             <=           \r\n        return count_change(amount-1) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if amount==2:\n        return 1\n    if amount%2==0:\n        return count_change(amount-1)+count_change(amount//2)\n    else:\n        return count_change(amount-1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if amount==2:\n        return 2\n    if amount%2==0:\n        return count_change(amount-1)+count_change(amount//2)\n    return count_change(amount-1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","3","","# Error: expected","#     6","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":327,"studentId":0,"date":null,"diff":"\r\nInputObject                                       SideIndicator\r\n-----------                                       -------------\r\n            count1 = helper(cent, amount - cent)  =>           \r\n            count2 = helper(2*cent, amount)       =>           \r\n            return count1 + count2                =>           \r\n            count = helper(2*cent, amount - cent) <=           \r\n            return count                          <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper (cent, amount):\n        if amount == 0:\n            return 1\n        elif cent > amount:\n            return 0\n        else:\n            count = helper(2*cent, amount - cent)\n            return count\n            \n    return helper(1, amount)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper (cent, amount):\n        if amount == 0:\n            return 1\n        elif cent > amount:\n            return 0\n        else:\n            count1 = helper(cent, amount - cent)\n            count2 = helper(2*cent, amount)\n            return count1 + count2\n            \n    return helper(1, amount)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def helper(cent, amount):\r\n        if amount==0:\r\n            return 1\r\n        elif cent>amount:\r\n            return 0\r\n        else:\r\n            count = helper(2*cent, amount-cent)\r\n            return count\r\n    return helper(1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","1","","# Error: expected","#     6","# but got","#     1","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":328,"studentId":0,"date":null,"diff":"\r\nInputObject                                         SideIndicator\r\n-----------                                         -------------\r\ndef count_change(amount, kinds=(1,2,4,8,16,32,64)): =>           \r\ndef count_change(amount):                           <=           \r\n    kinds = (1,2,4,8,16,32,64)                      <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    kinds = (1,2,4,8,16,32,64)\n\n    if amount == 0:\n        return 1\n    if amount < 0 or len(kinds) == 0:\n        return 0\n    d = kinds[0]\n    return count_change(amount, kinds[1:]) + count_change(amount - d, kinds)\n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount, kinds=(1,2,4,8,16,32,64)):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    if amount == 0:\n        return 1\n    if amount < 0 or len(kinds) == 0:\n        return 0\n    d = kinds[0]\n    return count_change(amount, kinds[1:]) + count_change(amount - d, kinds)\n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 334, in count_change","    return count_change(amount, kinds[1:]) + count_change(amount - d, kinds)","TypeError: count_change() takes 1 positional argument but 2 were given","","# Error: expected","#     6","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":329,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n    if amount < 0:                           =>           \r\n    elif smallest_coin > amount:             =>           \r\n        return 0                             =>           \r\n    if smallest_coin > amount or amount < 0: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    return count(1, amount)\n\ndef count(smallest_coin, amount):\n    if smallest_coin > amount or amount < 0:\n        return 0\n    elif amount == 0:\n        return 1\n    else:\n        count_combinations = count(smallest_coin, amount - smallest_coin)\n        increase_coin = count(smallest_coin * 2, amount)\n        return count_combinations + increase_coin\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    return count(1, amount)\n\ndef count(smallest_coin, amount):\n    if amount < 0:\n        return 0\n    elif amount == 0:\n        return 1\n    elif smallest_coin > amount:\n        return 0\n    else:\n        count_combinations = count(smallest_coin, amount - smallest_coin)\n        increase_coin = count(smallest_coin * 2, amount)\n        return count_combinations + increase_coin\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    return count(1, amount)\r\ndef count(smallest_coin, amount):\r\n    if smallest_coin>amount or amount<0:\r\n        return 0\r\n    elif amount==0:\r\n        return 1\r\n    else:\r\n        count_combinations = count(smallest_coin, amount-smallest_coin)\r\n        increase_coin = count(smallest_coin*2, amount)\r\n        return count_combinations+k\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":330,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n            return 1 =>           \r\n            return 0 <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def maxExpFind(num):\n        a = 0\n        while 2 ** a <= num:\n            a += 1\n        return a - 1\n    def count_partitions(num, maxExp):\n        if num == 0:\n            return 1\n        elif num < 0:\n            return 0\n        elif maxExp == 0:\n            return 0\n        else:\n            return count_partitions(num - (2 ** maxExp), maxExp) + count_partitions(num, maxExp-1)\n    return count_partitions(amount, maxExpFind(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def maxExpFind(num):\n        a = 0\n        while 2 ** a <= num:\n            a += 1\n        return a - 1\n    def count_partitions(num, maxExp):\n        if num == 0:\n            return 1\n        elif num < 0:\n            return 0\n        elif maxExp == 0:\n            return 1\n        else:\n            return count_partitions(num - (2 ** maxExp), maxExp) + count_partitions(num, maxExp-1)\n    return count_partitions(amount, maxExpFind(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def maxExpFind(num):\r\n        amount = 0\r\n        while 2**a<=num:\r\n            a += 1\r\n        return a-1\r\n    def count_partitions(num, maxExp):\r\n        if num==0:\r\n            return 1\r\n        elif num<0:\r\n            return 0\r\n        elif maxExp==0:\r\n            return 0\r\n        else:\r\n            return count_partitions(num-(2**maxExp), maxExp)+count_partitions(num, maxExp-1)\r\n    return count_partitions(amount, maxExpFind(amount))\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":331,"studentId":0,"date":null,"diff":"\r\nInputObject                                         SideIndicator\r\n-----------                                         -------------\r\n        for i in range(0, amount // min_denom + 1): =>           \r\n        for i in range(0, amount // min_denom):     <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_ways(min_denom, amount):\n    \tif min_denom > amount:\n    \t\treturn 0\n    \tif amount == 0:\n    \t\treturn 1\n    \ttotal = 0\n    \tfor i in range(0, amount // min_denom):\n    \t\ttotal += count_ways(min_denom * 2, amount - min_denom * i)\n    \treturn total\n    return count_ways(1 ,amount)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_ways(min_denom, amount):\n    \tif amount == 0:\n    \t\treturn 1\n    \tif min_denom > amount:\n    \t\treturn 0\n    \ttotal = 0\n    \tfor i in range(0, amount // min_denom + 1):\n    \t\ttotal += count_ways(min_denom * 2, amount - min_denom * i)\n    \treturn total\n    return count_ways(1 ,amount)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":332,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                  SideIndicator\r\n-----------                                                                                  -------------\r\n    return count_help(amount, 1)                                                             =>           \r\ndef count_help(amount, coinValue):                                                           =>           \r\n    if amount < 0:                                                                           =>           \r\n        return 0                                                                             =>           \r\n    elif amount == 0:                                                                        =>           \r\n    elif coinValue > amount:                                                                 =>           \r\n        return 0                                                                             =>           \r\n    else:                                                                                    =>           \r\n        return count_help(amount - coinValue, coinValue) + count_help(amount, 2 * coinValue) =>           \r\n    # It does not matter what pole numbers are                                               =>           \r\n    other = other(start, end)                                                                =>           \r\n    move_stack(n-1, start, other)                                                            =>           \r\n    print_move(start, end)                                                                   =>           \r\n    move_stack(n-1, other, end)                                                              =>           \r\ndef other(start, end):                                                                       =>           \r\n    if (start + end) == 3:                                                                   =>           \r\n        other = 3                                                                            =>           \r\n    elif (start + end) == 4:                                                                 =>           \r\n        other = 2                                                                            =>           \r\n    else:                                                                                    =>           \r\n        other = 1                                                                            =>           \r\n    return other                                                                             =>           \r\n                                                                                             =>           \r\n                                                                                             =>           \r\n                                                                                             =>           \r\n                                                                                             =>           \r\n    if amount == 1:                                                                          <=           \r\n    elif amount % 2 == 1:                                                                    <=           \r\n        return count_change(amount - 1)                                                      <=           \r\n    else: # For even numbers                                                                 <=           \r\n        return 1 + count_change(amount // 2)                                                 <=           \r\n                                                                                             <=           \r\n\"\"\"                                                                                          <=           \r\ndef maxExp(amount):                                                                          <=           \r\n    base, i = 2, 0                                                                           <=           \r\n    while base ** (i + 1) <= amount:                                                         <=           \r\n        i += 1                                                                               <=           \r\n    return (base ** i)                                                                       <=           \r\n\"\"\"                                                                                          <=           \r\n                                                                                             <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    # Coin values: 1,2,4, 8, 16, ..., 2 ** x for x in [0 to infinity]\n    if amount == 1:\n        return 1\n    elif amount % 2 == 1:\n        return count_change(amount - 1)\n    else: # For even numbers \n        return 1 + count_change(amount // 2)\n    \n        \n\"\"\"\ndef maxExp(amount):\n    base, i = 2, 0\n    while base ** (i + 1) <= amount:\n        i += 1\n    return (base ** i)\n\"\"\"\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    # Coin values: 1,2,4, 8, 16, ..., 2 ** x for x in [0 to infinity]\n    return count_help(amount, 1)\n\ndef count_help(amount, coinValue):\n    if amount < 0:\n        return 0\n    elif amount == 0:\n        return 1\n    elif coinValue > amount:\n        return 0\n    else:\n        return count_help(amount - coinValue, coinValue) + count_help(amount, 2 * coinValue)\n\n        \n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","3","","# Error: expected","#     6","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":333,"studentId":0,"date":null,"diff":"\r\nInputObject                                SideIndicator\r\n-----------                                -------------\r\n            return cp(n, a*2) + cp(n-a, a) =>           \r\n            return cp(n, a*2) + cp(n-2, a) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def cp(n, a):\n        if n<a:\n            return 0\n        elif n==a:\n            return 1\n        else:\n            return cp(n, a*2) + cp(n-2, a)\n        \n    return cp(amount, 1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def cp(n, a):\n        if n<a:\n            return 0\n        elif n==a:\n            return 1\n        else:\n            return cp(n, a*2) + cp(n-a, a)\n        \n    return cp(amount, 1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def cp(n, a):\r\n        if amount<a:\r\n            return 0\r\n        elif n==a:\r\n            return 1\r\n        else:\r\n            return cp(n, a*2)+cp(n-2, a)\r\n    return cp(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","1","","# Error: expected","#     6","# but got","#     1","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":334,"studentId":0,"date":null,"diff":"\r\nInputObject                                                        SideIndicator\r\n-----------                                                        -------------\r\n            return idk(amount, coin*2) + idk(amount-coin, coin)    =>           \r\n            return idk(amount-coin, coin//2) + idk(amount, coin*2) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def idk(amount, coin):\n        if amount < 0:\n            return 0\n        if amount == 0:\n            return 1\n        if coin > amount:\n            return 0\n        else:\n            return idk(amount-coin, coin//2) + idk(amount, coin*2)\n    return idk(amount, 1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def idk(amount, coin):\n        if amount < 0:\n            return 0\n        if amount == 0:\n            return 1\n        if coin > amount:\n            return 0\n        else:\n            return idk(amount, coin*2) + idk(amount-coin, coin)\n    return idk(amount, 1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 316, in idk","    return idk(amount-coin, coin//2) + idk(amount, coin*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 316, in idk","    return idk(amount-coin, coin//2) + idk(amount, coin*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 316, in idk","    return idk(amount-coin, coin//2) + idk(amount, coin*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 316, in idk","    return idk(amount-coin, coin//2) + idk(amount, coin*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 316, in idk","    return idk(amount-coin, coin//2) + idk(amount, coin*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 316, in idk","    return idk(amount-coin, coin//2) + idk(amount, coin*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 309, in idk","    if amount < 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":335,"studentId":0,"date":null,"diff":"\r\nInputObject                                   SideIndicator\r\n-----------                                   -------------\r\n            '''withe = ways(a-2**e,e)         <=           \r\n            withoute = ways(a - 2**e, e-1)''' <=           \r\n            print(\"a\"+str(a))                 <=           \r\n            print(e)                          <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def ways(a,e):\n        if a <0 or e < 0:\n            return 0\n        elif a == 1 or a == 0:\n            return 1\n        else:\n            '''withe = ways(a-2**e,e)\n            withoute = ways(a - 2**e, e-1)'''\n            print(\"a\"+str(a))\n            print(e)\n            return ways(a-2**e,e) + ways(a,e-1)\n    e = 0\n    c = 1\n    while c > 0:\n        c = amount - 2**e\n        e+=1\n    e-=2\n    return ways(amount,e)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def ways(a,e):\n        if a <0 or e < 0:\n            return 0\n        elif a == 1 or a == 0:\n            return 1\n        else:\n            return ways(a-2**e,e) + ways(a,e-1)\n    e = 0\n    c = 1\n    while c > 0:\n        c = amount - 2**e\n        e+=1\n    e-=2\n    return ways(amount,e)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def ways(a, e):\r\n        if amount<0 or e<0:\r\n            return 0\r\n        elif a==1 or a==0:\r\n            return 1\r\n        else:\r\n            print(\"a\"+str(a))\r\n            print(e)\r\n            return ways(a-2**e, e)+ways(a, e-1)\r\n    e = 0\r\n    c = 1\r\n    while c>0:\r\n        c = amount-2**e\r\n        e += 1\r\n    e -= 2\r\n    return ways(amount, e)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","a7","2","a3","2","a3","1","a3","0","a2","0","a7","1","a5","1","a3","1","a3","0","a2","0","a5","0","a4","0","a3","0","a2","0","a7","0","a6","0","a5","0","a4","0","a3","0","a2","0","6","","# Error: expected","#     6","# but got","#     a7","#     2","#     a3","#     2","#     a3","#     1","#     a3","#     0","#     a2","#     0","#     a7","#     1","#     a5","#     1","#     a3","#     1","#     a3","#     0","#     a2","#     0","#     a5","#     0","#     a4","#     0","#     a3","#     0","#     a2","#     0","#     a7","#     0","#     a6","#     0","#     a5","#     0","#     a4","#     0","#     a3","#     0","#     a2","#     0","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":336,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                SideIndicator\r\n-----------                                                                -------------\r\n            return count_partitions(n - m, m) + count_partitions(n, m//2)  =>           \r\n            return count_partitions(n - m, m) + count_partitions(n, m - 1) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def find_largest(change):\n        check = 1\n        while check <= change:\n            check *= 2\n        return check//2\n    largest = find_largest(amount)\n    def count_partitions(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_partitions(n - m, m) + count_partitions(n, m - 1)\n    return count_partitions(amount, largest)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def find_largest(change):\n        check = 1\n        while check <= change:\n            check *= 2\n        return check//2\n    largest = find_largest(amount)\n    def count_partitions(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_partitions(n - m, m) + count_partitions(n, m//2)\n    return count_partitions(amount, largest)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","11","","# Error: expected","#     6","# but got","#     11","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":337,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                SideIndicator\r\n-----------                                                                                -------------\r\n            a = helper(amount-(minimum),minimum)                                           =>           \r\n            b =  helper(amount,minimum*2)                                                  =>           \r\n            return a + b                                                                   =>           \r\n    return helper(amount,1)                                                                =>           \r\n            return 1 + helper(amount-(minimum*2),minimum*2) + helper(amount,minimum*2 - 2) <=           \r\n    return helper(amount,2)                                                                <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    def helper(amount, minimum):\n        if amount == 0:\n            return 1\n        elif amount< 0:\n            return 0\n        elif minimum > amount:\n            return 0 \n        elif minimum == 0:\n            return 0\n        else:\n            return 1 + helper(amount-(minimum*2),minimum*2) + helper(amount,minimum*2 - 2)\n    return helper(amount,2)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    def helper(amount, minimum):\n        if amount == 0:\n            return 1\n        elif amount< 0:\n            return 0\n        elif minimum > amount:\n            return 0 \n        elif minimum == 0:\n            return 0\n        else:\n            a = helper(amount-(minimum),minimum) \n            b =  helper(amount,minimum*2)\n            return a + b\n    return helper(amount,1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def helper(amount, minimum):\r\n        if amount==0:\r\n            return 1\r\n        elif amount<0:\r\n            return 0\r\n        elif minimum>amount:\r\n            return 0\r\n        elif minimum==0:\r\n            return 0\r\n        else:\r\n            return 1+helper(amount-(minimum*2), minimum*2)+helper(amount, minimum*2-2)\r\n    return helper(amount, 2)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 333, in helper","    return 1 + helper(amount-(minimum*2),minimum*2) + helper(amount,minimum*2 - 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 333, in helper","    return 1 + helper(amount-(minimum*2),minimum*2) + helper(amount,minimum*2 - 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 333, in helper","    return 1 + helper(amount-(minimum*2),minimum*2) + helper(amount,minimum*2 - 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 333, in helper","    return 1 + helper(amount-(minimum*2),minimum*2) + helper(amount,minimum*2 - 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 333, in helper","    return 1 + helper(amount-(minimum*2),minimum*2) + helper(amount,minimum*2 - 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 333, in helper","    return 1 + helper(amount-(minimum*2),minimum*2) + helper(amount,minimum*2 - 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 324, in helper","    if amount == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":338,"studentId":0,"date":null,"diff":"\r\nInputObject                                                         SideIndicator\r\n-----------                                                         -------------\r\n    return accumulate(combiner, base, n, term) if pred(n) else base =>           \r\n    count = 0                                                       =>           \r\n    other_rod = 6 - start - end                                     =>           \r\n    def answer(rod1, rod2):                                         =>           \r\n        print (\"Move the top disk from rod\", rod1, \"to rod\", rod2)  =>           \r\n    if n == 1:                                                      =>           \r\n        return answer(start, end)                                   =>           \r\n    else:                                                           =>           \r\n        move_stack(n-1, start, other_rod)                           =>           \r\n        answer(start,end)                                           =>           \r\n        move_stack(n-1, other_rod, end)                             =>           \r\n                                                                    =>           \r\n                                                                    =>           \r\n    return                                                          <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    max_coin = 2\n    while max_coin <= amount:\n        max_coin = max_coin*2\n    def number_of_coins(leftover, max_coin):\n        if leftover < 0 or max_coin == 0:\n            return 0\n        if leftover == 0:\n            return 1\n        return number_of_coins(leftover - max_coin, max_coin) + number_of_coins(leftover, max_coin // 2)\n    while 2**count <= amount:\n        count += 1\n    return number_of_coins(amount, 2**(count-1))\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    max_coin = 2\n    count = 0\n    while max_coin <= amount:\n        max_coin = max_coin*2\n    def number_of_coins(leftover, max_coin):\n        if leftover < 0 or max_coin == 0:\n            return 0\n        if leftover == 0:\n            return 1\n        return number_of_coins(leftover - max_coin, max_coin) + number_of_coins(leftover, max_coin // 2)\n    while 2**count <= amount:\n        count += 1\n    return number_of_coins(amount, 2**(count-1))\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 323, in count_change","    while 2**count <= amount:","UnboundLocalError: local variable 'count' referenced before assignment","","# Error: expected","#     6","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":339,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n    return count_change_coin(1, amount)         =>           \r\n    return count_change_combinations(1, amount) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_change_coin(starter_coin, amount):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif starter_coin > amount:\n            return 0\n        else:\n            with_starter_coin = count_change_coin(starter_coin, amount - starter_coin)\n            without_starter_coin = count_change_coin(2*starter_coin, amount)\n            return with_starter_coin + without_starter_coin\n    return count_change_combinations(1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_change_coin(starter_coin, amount):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif starter_coin > amount:\n            return 0\n        else:\n            with_starter_coin = count_change_coin(starter_coin, amount - starter_coin)\n            without_starter_coin = count_change_coin(2*starter_coin, amount)\n            return with_starter_coin + without_starter_coin\n    return count_change_coin(1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_change_coin(starter_coin, amount):\r\n        if amount<0:\r\n            return 0\r\n        elif amount==0:\r\n            return 1\r\n        elif starter_coin>amount:\r\n            return 0\r\n        else:\r\n            with_starter_coin = count_change_coin(starter_coin, amount-starter_coin)\r\n            without_starter_coin = count_change_coin(2*starter_coin, amount)\r\n            return with_starter_coin+k\r\n    return count_change_combinations(1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 310, in count_change","    return count_change_combinations(1, amount)","NameError: name 'count_change_combinations' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":340,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                SideIndicator\r\n-----------                                                                -------------\r\n    from math import log                                                   =>           \r\n    amount = 2*(amount//2)                                                 =>           \r\n    if amount == 0:                                                        =>           \r\n    largest = 2**int(log(amount, 2))                                       =>           \r\n    coin_counts = []                                                       =>           \r\n    for i in range(0, int(log(largest, 2))+1):                             =>           \r\n        coin_counts.append(0)                                              =>           \r\n    coin_counts[0], i, j = amount, 1, 1                                    =>           \r\n    while (coin_counts.count(0)+coin_counts.count(1)) != len(coin_counts): =>           \r\n        while (coin_counts[0] != 0) and (coin_counts[0] != 1):             =>           \r\n            coin_counts[1] += 1                                            =>           \r\n            coin_counts[0] -= 2                                            =>           \r\n            i += 1                                                         =>           \r\n        split = 0                                                          =>           \r\n        for index in range(len(coin_counts)-1, 0, -1):                     =>           \r\n            if (coin_counts[index] != 0) and (coin_counts[index] != 1):    =>           \r\n                split = index                                              =>           \r\n        if split == 0:                                                     =>           \r\n            return i                                                       =>           \r\n        else:                                                              =>           \r\n            coin_counts[split+1] += 1                                      =>           \r\n            coin_counts[split] -= 2                                        =>           \r\n            for index in range(1, split+1):                                =>           \r\n                coin_counts[0] += (2**index)*(coin_counts[index])          =>           \r\n                coin_counts[index] = 0                                     =>           \r\n        i += 1                                                             =>           \r\n    return i                                                               =>           \r\n    if amount == 1:                                                        <=           \r\n                                                                           <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if amount == 1:\n        return 1\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    from math import log\n    amount = 2*(amount//2)\n    if amount == 0:\n        return 1\n    largest = 2**int(log(amount, 2))\n    coin_counts = []\n    for i in range(0, int(log(largest, 2))+1):\n        coin_counts.append(0)\n    coin_counts[0], i, j = amount, 1, 1\n    while (coin_counts.count(0)+coin_counts.count(1)) != len(coin_counts):\n        while (coin_counts[0] != 0) and (coin_counts[0] != 1):\n            coin_counts[1] += 1\n            coin_counts[0] -= 2\n            i += 1\n        split = 0\n        for index in range(len(coin_counts)-1, 0, -1):\n            if (coin_counts[index] != 0) and (coin_counts[index] != 1):\n                split = index\n        if split == 0:\n            return i\n        else:\n            coin_counts[split+1] += 1\n            coin_counts[split] -= 2\n            for index in range(1, split+1):\n                coin_counts[0] += (2**index)*(coin_counts[index])\n                coin_counts[index] = 0\n        i += 1\n    return i\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    if amount==1:\r\n        return 1\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","","# Error: expected","#     6","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":341,"studentId":0,"date":null,"diff":"","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def coin_partition(amount, coinsize):\n        if amount < 0:\n            return 0\n        elif coinsize > amount:\n            return 0\n        elif amount == 0:\n            return 1\n        else:\n            return coin_partition(amount - coinsize, coinsize) + coin_partition(amount, coinsize*2)\n    return coin_partition(amount, 1)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def coin_partition(amount, coinsize):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif coinsize > amount:\n            return 0\n        else:\n            return coin_partition(amount - coinsize, coinsize) + coin_partition(amount, coinsize*2)\n    return coin_partition(amount, 1)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def coin_partition(amount, coinsize):\r\n        if amount<0:\r\n            return 0\r\n        elif coinsize>amount:\r\n            return 0\r\n        elif amount==0:\r\n            return 1\r\n        else:\r\n            return coin_partition(amount-coinsize, coinsize)+coin_partition(amount, coinsize*2)\r\n    return coin_partition(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":342,"studentId":0,"date":null,"diff":"\r\nInputObject                                            SideIndicator\r\n-----------                                            -------------\r\n            return 1                                   =>           \r\n        elif y <1:                                     =>           \r\n    return count(amount, 2**last_power(amount))        =>           \r\n                                                       =>           \r\n    def move(n, start, end, turn):                     =>           \r\n        if n ==1 and turn == 1:                        =>           \r\n            print_move(start, end)                     =>           \r\n            return                                     =>           \r\n        if n%2==0:                                     =>           \r\n            if turn%2==0:                              =>           \r\n                print_move(start-1, end)               =>           \r\n                return move(n-1, start+1, end, turn+1) =>           \r\n            if turn%2!=0:                              =>           \r\n                print_move(start, end-1)               =>           \r\n                return move(n-1, start+1, end, turn+1) =>           \r\n        if n%2!=0:                                     =>           \r\n            if turn%2==0:                              =>           \r\n                print_move(start, end-1)               =>           \r\n                return move(n-1, start-1, end, turn+1) =>           \r\n            if turn%2!=0:                              =>           \r\n                print_move(start, end)                 =>           \r\n                return move(n-1, start-1, end, turn+1) =>           \r\n    return move(n, start, end, 1)                      =>           \r\n                                                       =>           \r\n    def is_power(x):                                   <=           \r\n        for i in range(int(x)):                        <=           \r\n            if 2**i == x:                              <=           \r\n                return True                            <=           \r\n        return False                                   <=           \r\n            return 2                                   <=           \r\n        elif y == 0:                                   <=           \r\n    return count(amount, last_power(amount))           <=           \r\n    '''def sum(num, power):                            <=           \r\n        if num == 1 or num == 2:                       <=           \r\n            return 0                                   <=           \r\n        return 5**power + sum(num/2, power +1)         <=           \r\n    def value(x, y):                                   <=           \r\n        if x == 1:                                     <=           \r\n            return int((y+1)/2)                        <=           \r\n            return y                                   <=           \r\n        if is_power(x):                                <=           \r\n            if x == 2:                                 <=           \r\n                return (y+1)                           <=           \r\n            return value(x/4, y+sum(x, 0))             <=           \r\n        if x%2!=0:                                     <=           \r\n            return value(x-1, y+1)                     <=           \r\n        if x%2== 0:                                    <=           \r\n            return value(x-1, y+2)                     <=           \r\n    return value(amount, 1)'''                         <=           \r\n    \"*** YOUR CODE HERE ***\"                           <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def is_power(x):\n        for i in range(int(x)):\n            if 2**i == x:\n                return True\n        return False\n    def count(x, y):\n        if x == 0:\n            return 2\n        elif x<0:\n            return 0\n        elif y == 0:\n            return 0\n        return count(x-y, y) + count(x, y/2)\n    def last_power(x):\n        for i in range(x):\n            if 2**i > x:\n                return i-1\n    return count(amount, last_power(amount))\n    '''def sum(num, power):\n        if num == 1 or num == 2:\n            return 0\n        return 5**power + sum(num/2, power +1)\n    def value(x, y):\n        if x == 1:\n            return int((y+1)/2)\n            return y\n        if is_power(x):\n            if x == 2:\n                return (y+1)\n            return value(x/4, y+sum(x, 0))\n        if x%2!=0:\n            return value(x-1, y+1)\n        if x%2== 0:\n            return value(x-1, y+2)\n    return value(amount, 1)'''\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count(x, y):\n        if x == 0:\n            return 1\n        elif x<0:\n            return 0\n        elif y <1:\n            return 0\n        return count(x-y, y) + count(x, y/2)\n    def last_power(x):\n        for i in range(x):\n            if 2**i > x:\n                return i-1\n    return count(amount, 2**last_power(amount))\n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 319, in count","    return count(x-y, y) + count(x, y/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 319, in count","    return count(x-y, y) + count(x, y/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 319, in count","    return count(x-y, y) + count(x, y/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 319, in count","    return count(x-y, y) + count(x, y/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 319, in count","    return count(x-y, y) + count(x, y/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 319, in count","    return count(x-y, y) + count(x, y/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 313, in count","    if x == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":343,"studentId":0,"date":null,"diff":"\r\nInputObject                                                 SideIndicator\r\n-----------                                                 -------------\r\n        if amount < 0:                                      =>           \r\n        elif amount == 0:                                   =>           \r\n        else:                                               =>           \r\ndef count_using(min_coin, amount):                          =>           \r\n    if amount < 0:                                          =>           \r\n        return 0                                            =>           \r\n    elif amount == 0:                                       =>           \r\n        return 1                                            =>           \r\n    elif min_coin > amount:                                 =>           \r\n        return 0                                            =>           \r\n    else:                                                   =>           \r\n        with_min = count_using(min_coin, amount - min_coin) =>           \r\n        without_min = count_using(2*min_coin, amount)       =>           \r\n        return with_min + without_min                       =>           \r\n                                                            =>           \r\n                                                            =>           \r\n                                                            =>           \r\n                                                            =>           \r\n                                                            =>           \r\n                                                            =>           \r\n        if amount < minimum:                                <=           \r\n        elif amount == 1:                                   <=           \r\n        elif minimum < amount:                              <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper(minimum, amount):\n        if amount < minimum:\n            return 0\n        elif amount == 1:\n            return 1\n        elif minimum > amount:\n            return 0\n        elif minimum < amount:\n            count = helper(minimum, amount - minimum)\n            count2 = helper(2*minimum, amount)\n            return count + count2\n    return helper(1, amount)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper(minimum, amount):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif minimum > amount:\n            return 0\n        else:\n            count = helper(minimum, amount - minimum)\n            count2 = helper(2*minimum, amount)\n            return count + count2\n    return helper(1, amount)\n\n\n\n\ndef count_using(min_coin, amount):\n    if amount < 0:\n        return 0\n    elif amount == 0:\n        return 1\n    elif min_coin > amount:\n        return 0\n    else:\n        with_min = count_using(min_coin, amount - min_coin)\n        without_min = count_using(2*min_coin, amount)\n        return with_min + without_min\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def helper(minimum, amount):\r\n        if amount<minimum:\r\n            return 0\r\n        elif amount==0:\r\n            return 1\r\n        elif minimum>amount:\r\n            return 0\r\n        elif minimum<amount:\r\n            count = helper(minimum, amount-minimum)\r\n            count2 = helper(2*minimum, amount)\r\n            return count+k\r\n    return helper(1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 297, in count_change","    return helper(1, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 294, in helper","    count = helper(minimum, amount - minimum)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 294, in helper","    count = helper(minimum, amount - minimum)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 294, in helper","    count = helper(minimum, amount - minimum)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 294, in helper","    count = helper(minimum, amount - minimum)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 294, in helper","    count = helper(minimum, amount - minimum)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 296, in helper","    return count + count2","TypeError: unsupported operand type(s) for +: 'int' and 'NoneType'","","# Error: expected","#     6","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":344,"studentId":0,"date":null,"diff":"\r\nInputObject                 SideIndicator\r\n-----------                 -------------\r\n    elif min_coin > amount: =>           \r\n        return 0            =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    return count_using(1, amount)\n\ndef count_using(min_coin, amount):\n    if amount < 0:\n        return 0\n    elif amount == 0:\n        return 1\n    else:\n        with_min = count_using(min_coin, amount - min_coin)\n        without_min = count_using(2*min_coin, amount)\n        return with_min + without_min\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    return count_using(1, amount)\n\ndef count_using(min_coin, amount):\n    if amount < 0:\n        return 0\n    elif amount == 0:\n        return 1\n    elif min_coin > amount:\n        return 0\n    else:\n        with_min = count_using(min_coin, amount - min_coin)\n        without_min = count_using(2*min_coin, amount)\n        return with_min + without_min\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    return count_using(1, amount)\r\ndef count_using(min_coin, amount):\r\n    if amount<0:\r\n        return 0\r\n    elif amount==0:\r\n        return 1\r\n    else:\r\n        with_min = count_using(min_coin, amount-min_coin)\r\n        without_min = count_using(2*min_coin, amount)\r\n        return with_min+k\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 306, in count_using","    without_min = count_using(2*min_coin, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 306, in count_using","    without_min = count_using(2*min_coin, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 306, in count_using","    without_min = count_using(2*min_coin, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 306, in count_using","    without_min = count_using(2*min_coin, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 306, in count_using","    without_min = count_using(2*min_coin, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 305, in count_using","    with_min = count_using(min_coin, amount - min_coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 300, in count_using","    if amount < 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":345,"studentId":0,"date":null,"diff":"\r\nInputObject                         SideIndicator\r\n-----------                         -------------\r\n        elif amount_remaining == 0: =>           \r\n        elif amount_remaining < 0:  =>           \r\n            return 0                =>           \r\n        elif amount_remaining == 1: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    max_coin_size = 1\n    while amount/max_coin_size >=1:\n        max_coin_size += max_coin_size\n    def counting_change(max_coin, amount_remaining):\n        if max_coin == 1: \n            return 1\n        elif amount_remaining == 1:\n            return 1\n        else: \n            return counting_change(max_coin, amount_remaining - max_coin) + counting_change(max_coin/2, amount_remaining)\n    return counting_change(max_coin_size, amount)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    max_coin_size = 1\n    while amount/max_coin_size >=1:\n        max_coin_size += max_coin_size\n    def counting_change(max_coin, amount_remaining):\n        if max_coin == 1: \n            return 1\n        elif amount_remaining == 0:\n            return 1\n        elif amount_remaining < 0:\n            return 0\n        else: \n            return counting_change(max_coin, amount_remaining - max_coin) + counting_change(max_coin/2, amount_remaining)\n    return counting_change(max_coin_size, amount)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 325, in counting_change","    return counting_change(max_coin, amount_remaining - max_coin) + counting_change(max_coin/2, amount_remaining)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 325, in counting_change","    return counting_change(max_coin, amount_remaining - max_coin) + counting_change(max_coin/2, amount_remaining)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 325, in counting_change","    return counting_change(max_coin, amount_remaining - max_coin) + counting_change(max_coin/2, amount_remaining)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 325, in counting_change","    return counting_change(max_coin, amount_remaining - max_coin) + counting_change(max_coin/2, amount_remaining)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 325, in counting_change","    return counting_change(max_coin, amount_remaining - max_coin) + counting_change(max_coin/2, amount_remaining)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 325, in counting_change","    return counting_change(max_coin, amount_remaining - max_coin) + counting_change(max_coin/2, amount_remaining)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 320, in counting_change","    if max_coin == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":346,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n        if am < 0:    =>           \r\n        if cent > am: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    largest_cent = 1\n    while amount > largest_cent:\n        largest_cent *= 2\n    largest_cent //= 2\n        \n    def reduction(am, cent):\n        if cent > am:\n            return 0\n        elif cent == 1:\n            return 1\n        else:    \n            return reduction(am-cent, cent) + reduction(am, cent//2)\n    return reduction(amount, largest_cent)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    largest_cent = 1\n    while amount > largest_cent:\n        largest_cent *= 2\n    largest_cent //= 2\n        \n    def reduction(am, cent):\n        if am < 0:\n            return 0\n        elif cent == 1:\n            return 1\n        else:    \n            return reduction(am-cent, cent) + reduction(am, cent//2)\n    return reduction(amount, largest_cent)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","3","","# Error: expected","#     6","# but got","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":347,"studentId":0,"date":null,"diff":"\r\nInputObject                                                              SideIndicator\r\n-----------                                                              -------------\r\n    m = 2**amount_binary                                                 =>           \r\n    def helper(amount, coin):                                            =>           \r\n        if amount == 0:                                                  =>           \r\n            return 1                                                     =>           \r\n        elif amount < 0:                                                 =>           \r\n            return 0                                                     =>           \r\n        elif coin == 0:                                                  =>           \r\n            return 0                                                     =>           \r\n        else:                                                            =>           \r\n            return helper(amount - coin, coin) + helper(amount, coin//2) =>           \r\n    return helper(amount, m)                                             =>           \r\n    if 2**amount_binary < amount:                                        <=           \r\n        m = 2**amount_binary                                             <=           \r\n    else:                                                                <=           \r\n        m = 2**(amount_binary-1)                                         <=           \r\n    if amount == 1:                                                      <=           \r\n        return 1                                                         <=           \r\n    elif amount == 2:                                                    <=           \r\n        return 2                                                         <=           \r\n    return count_change(amount-m) + count_change(m)                      <=           \r\n                                                                         <=           \r\n                                                                         <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n\n    Look at count stairs from discussioncd\n    \"\"\"\n    amount_binary = (len(bin(amount))-2)\n    if 2**amount_binary < amount:\n        m = 2**amount_binary\n    else:\n        m = 2**(amount_binary-1)\n    lst = [2**x for x in range(amount_binary)]\n    if amount == 1:\n        return 1\n    elif amount == 2:\n        return 2\n    return count_change(amount-m) + count_change(m)\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n\n    Look at count stairs from discussioncd\n    \"\"\"\n    amount_binary = (len(bin(amount))-2)\n    m = 2**amount_binary\n    lst = [2**x for x in range(amount_binary)]\n    def helper(amount, coin):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif coin == 0:\n            return 0\n        else:\n            return helper(amount - coin, coin) + helper(amount, coin//2)\n    return helper(amount, m)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in count_change","    return count_change(amount-m) + count_change(m)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in count_change","    return count_change(amount-m) + count_change(m)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in count_change","    return count_change(amount-m) + count_change(m)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in count_change","    return count_change(amount-m) + count_change(m)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in count_change","    return count_change(amount-m) + count_change(m)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in count_change","    return count_change(amount-m) + count_change(m)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 310, in count_change","    lst = [2**x for x in range(amount_binary)]","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":348,"studentId":0,"date":null,"diff":"\r\nInputObject                                                        SideIndicator\r\n-----------                                                        -------------\r\n        elif denom>num:                                            =>           \r\n            return 0                                               =>           \r\n            return counter(num-denom, denom)+counter(num,denom*2)  =>           \r\n    return counter(amount, 1)                                      =>           \r\n            return counter(num-denom, denom)+counter(num,denom//2) <=           \r\n    return counter(amount, 16)                                     <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def counter(num, denom):\n        if num==0:\n            return 1\n        elif num<0:\n            return 0\n        elif denom==0:\n            return 0\n        else:\n            return counter(num-denom, denom)+counter(num,denom//2)\n    return counter(amount, 16)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def counter(num, denom):\n        if num==0:\n            return 1\n        elif num<0:\n            return 0\n        elif denom==0:\n            return 0\n        elif denom>num:\n            return 0\n        else:\n            return counter(num-denom, denom)+counter(num,denom*2)\n    return counter(amount, 1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","14",">>> count_change(20)","60",">>> count_change(100)","7280","","# Error: expected","#     9828","# but got","#     7280","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":349,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                                                               SideIndic\r\n                                                                                                                                          ator     \r\n-----------                                                                                                                               ---------\r\n            return num_partitions(amount-(coin**increment_factor), 2, increment_factor) + num_partitions(amount, 2, increment_factor+1)   =>       \r\n            return num_partitions(amount-(coin**increment_factor), 2, increment_factor+1) + num_partitions(amount, 2, increment_factor+1) <=       \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    # def num_partitions(amount,power,total):\n    #     if amount<0:\n    #         return 0\n    #     elif (2**power)>amount:\n    #         return total\n    #     elif 2**power==1:\n    #         total=total+1\n    #         return total\n    #     else:\n    #         num_partitions(amount,power+1, total) + num_partitions((amount-(2**power)),power))\n\n    # return num_partitions(amount,1,0)\n    def num_partitions(amount, coin, increment_factor):\n        if amount==0:\n            return 1\n        elif amount<0:\n            return 0\n        elif coin**increment_factor>amount:\n            return 0\n        else:\n            return num_partitions(amount-(coin**increment_factor), 2, increment_factor+1) + num_partitions(amount, 2, increment_factor+1)\n    \n    return num_partitions(amount, 2, 0)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    # def num_partitions(amount,power,total):\n    #     if amount<0:\n    #         return 0\n    #     elif (2**power)>amount:\n    #         return total\n    #     elif 2**power==1:\n    #         total=total+1\n    #         return total\n    #     else:\n    #         num_partitions(amount,power+1, total) + num_partitions((amount-(2**power)),power))\n\n    # return num_partitions(amount,1,0)\n    def num_partitions(amount, coin, increment_factor):\n        if amount==0:\n            return 1\n        elif amount<0:\n            return 0\n        elif coin**increment_factor>amount:\n            return 0\n        else:\n            return num_partitions(amount-(coin**increment_factor), 2, increment_factor) + num_partitions(amount, 2, increment_factor+1)\n    \n    return num_partitions(amount, 2, 0)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def num_partitions(amount, coin, increment_factor):\r\n        if amount==0:\r\n            return 1\r\n        elif amount<0:\r\n            return 0\r\n        elif coin**increment_factor>amount:\r\n            return 0\r\n        else:\r\n            return num_partitions(amount-(coin**increment_factor), 2, increment_factor+1)+num_partitions(amount, 2, increment_factor+1)\r\n    return num_partitions(amount, 2, 0)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","1","","# Error: expected","#     6","# but got","#     1","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":350,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n        if amount == 0:   =>           \r\n        elif amount < 0:  =>           \r\n        if amount < 0:    <=           \r\n        elif amount == 0: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_change_helper(coin, amount):\n        if amount < 0:\n            return 0\n        elif coin > amount:\n            return 0\n        elif amount == 0:\n            return 1\n        else:\n            return count_change_helper(coin, amount - coin) + count_change_helper(\n            coin*2, amount)\n    return count_change_helper(1, amount)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_change_helper(coin, amount):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif coin > amount:\n            return 0\n        else:\n            return count_change_helper(coin, amount - coin) + count_change_helper(\n            coin*2, amount)\n    return count_change_helper(1, amount)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_change_helper(coin, amount):\r\n        if amount<0:\r\n            return 0\r\n        elif coin>amount:\r\n            return 0\r\n        elif amount==0:\r\n            return 1\r\n        else:\r\n            return count_change_helper(coin, amount-coin)+count_change_helper(coin*2, amount)\r\n    return count_change_helper(1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":351,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                SideIndicator\r\n-----------                                                                -------------\r\n        return count_num_ways(n, amount - n) + count_num_ways(2*n, amount) =>           \r\n        return count_num_ways(n, amount - 1) + count_num_ways(2*n, amount) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_num_ways(n, amount):\n        if amount == 0:\n            return 1        \n        elif n > amount:\n            return 0\n        return count_num_ways(n, amount - 1) + count_num_ways(2*n, amount)\n    return count_num_ways(1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_num_ways(n, amount):\n        if amount == 0:\n            return 1        \n        elif n > amount:\n            return 0\n        return count_num_ways(n, amount - n) + count_num_ways(2*n, amount)\n    return count_num_ways(1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_num_ways(n, amount):\r\n        if amount==0:\r\n            return 1\r\n        elif n>amount:\r\n            return 0\r\n        return count_num_ways(n, amount-1)+count_num_ways(2*n, amount)\r\n    return count_num_ways(1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","1","","# Error: expected","#     6","# but got","#     1","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":352,"studentId":0,"date":null,"diff":"\r\nInputObject                  SideIndicator\r\n-----------                  -------------\r\n        elif amount < start: =>           \r\n            return 0         =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \n    def helper(amount, start):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0 \n        else:\n            return helper(amount-start,start) + helper(amount, start*2)\n    return helper(amount,1)\n\n\n   \n\n\n\n\n\n\n\n    # if n == 0:\n    #     return 1\n    # elif n < 0:\n    #     return 0\n    # elif ammount == 0:\n    #     return 0\n    # else: return n-count_change(ammount),ammount + n,count_change(ammount)-1\n    # (n-ammount, ammount)\n    # (n, amount -1)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \n    def helper(amount, start):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0 \n        elif amount < start:\n            return 0\n        else:\n            return helper(amount-start,start) + helper(amount, start*2)\n    return helper(amount,1)\n\n\n   \n\n\n\n\n\n\n\n    # if n == 0:\n    #     return 1\n    # elif n < 0:\n    #     return 0\n    # elif ammount == 0:\n    #     return 0\n    # else: return n-count_change(ammount),ammount + n,count_change(ammount)-1\n    # (n-ammount, ammount)\n    # (n, amount -1)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def helper(amount, start):\r\n        if amount==0:\r\n            return 1\r\n        elif amount<0:\r\n            return 0\r\n        else:\r\n            return helper(amount-start, start)+helper(amount, start*2)\r\n    return helper(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in helper","    return helper(amount-start,start) + helper(amount, start*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in helper","    return helper(amount-start,start) + helper(amount, start*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in helper","    return helper(amount-start,start) + helper(amount, start*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in helper","    return helper(amount-start,start) + helper(amount, start*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in helper","    return helper(amount-start,start) + helper(amount, start*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in helper","    return helper(amount-start,start) + helper(amount, start*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 310, in helper","    if amount == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":353,"studentId":0,"date":null,"diff":"\r\nInputObject  SideIndicator\r\n-----------  -------------\r\n             =>           \r\n    print(k) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    \"helper function, start at largest power of 2 that is less than amount.\"\n    \"*** YOUR CODE HERE ***\"\n    i = 0\n    while amount>(2**i):\n        k = 2**i\n        i+=1\n    print(k)\n    def count(n,k):\n\n        if n<0:\n            return 0\n        elif k==1 or n==0:\n            return 1\n        else:\n\n            return count(n,k//2)+count(n-k,k)\n    return count(amount,k)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    \"helper function, start at largest power of 2 that is less than amount.\"\n    \"*** YOUR CODE HERE ***\"\n    i = 0\n    while amount>(2**i):\n        k = 2**i\n        i+=1\n    \n    def count(n,k):\n\n        if n<0:\n            return 0\n        elif k==1 or n==0:\n            return 1\n        else:\n\n            return count(n,k//2)+count(n-k,k)\n    return count(amount,k)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","4","6","","# Error: expected","#     6","# but got","#     4","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":354,"studentId":0,"date":null,"diff":"\r\nInputObject                      SideIndicator\r\n-----------                      -------------\r\n    print(amount, list_of_coins) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def change_using_list(n, coins):\n        if n < 0 or len(coins) == 0:\n            return 0\n        elif n == 0:\n            return 1\n        else:\n            return change_using_list(n - coins[-1], coins) + change_using_list(n, coins[:-1])\n    counter = 1\n    list_of_coins = []\n    while counter <= amount:\n        list_of_coins += [counter]\n        counter = 2 * counter\n    print(amount, list_of_coins)\n    return change_using_list(amount, list_of_coins)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def change_using_list(n, coins):\n        if n < 0 or len(coins) == 0:\n            return 0\n        elif n == 0:\n            return 1\n        else:\n            return change_using_list(n - coins[-1], coins) + change_using_list(n, coins[:-1])\n    counter = 1\n    list_of_coins = []\n    while counter <= amount:\n        list_of_coins += [counter]\n        counter = 2 * counter\n    return change_using_list(amount, list_of_coins)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","7 [1, 2, 4]","6","","# Error: expected","#     6","# but got","#     7 [1, 2, 4]","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":355,"studentId":0,"date":null,"diff":"\r\nInputObject                                           SideIndicator\r\n-----------                                           -------------\r\n    return select_coin(amount, 2**int(log(amount,2))) =>           \r\n    return select_coin(amount, 2**int(log(9,2)))      <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    from math import log\n    \n    def select_coin(amount, k):\n        if amount < 0 or k < 1:\n            return 0\n        elif amount == 0:\n            return 1\n        else: \n            return select_coin(amount, k/2) + select_coin(amount - k, k)\n    return select_coin(amount, 2**int(log(9,2)))\n\n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    from math import log\n    \n    def select_coin(amount, k):\n        if amount < 0 or k < 1:\n            return 0\n        elif amount == 0:\n            return 1\n        else: \n            return select_coin(amount, k/2) + select_coin(amount - k, k)\n    return select_coin(amount, 2**int(log(amount,2)))\n\n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","14",">>> count_change(20)","56","","# Error: expected","#     60","# but got","#     56","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":356,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n            return 0 =>           \r\n            return 1 <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper_1(amount,coin_size):\n        if amount==0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif coin_size ==0:\n            return 1\n        else:\n            return helper_1(amount-coin_size,coin_size) + helper_1(amount,coin_size//2)\n    def coin_size(amount):\n        i =2\n        while i<amount:\n            i = i*2\n        return i\n    return helper_1(amount,coin_size(amount))\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper_1(amount,coin_size):\n        if amount==0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif coin_size ==0:\n            return 0\n        else:\n            return helper_1(amount-coin_size,coin_size) + helper_1(amount,coin_size//2)\n    def coin_size(amount):\n        i =2\n        while i<amount:\n            i = i*2\n        return i\n    return helper_1(amount,coin_size(amount))\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","26","","# Error: expected","#     6","# but got","#     26","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":357,"studentId":0,"date":null,"diff":"\r\nInputObject                                       SideIndicator\r\n-----------                                       -------------\r\n            case2 = coin_helper(2 * coin, amount) =>           \r\n            case2 = coin_helper(coin, 2*coin)     <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def coin_helper(coin, amount):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif  coin > amount:\n            return 0 \n        else:\n            case1 = coin_helper(coin, amount - coin)\n            case2 = coin_helper(coin, 2*coin)\n            return case1 + case2\n            \n    return coin_helper(1, amount)\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def coin_helper(coin, amount):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif  coin > amount:\n            return 0 \n        else:\n            case1 = coin_helper(coin, amount - coin)\n            case2 = coin_helper(2 * coin, amount)\n            return case1 + case2\n            \n    return coin_helper(1, amount)\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def coin_helper(coin, amount):\r\n        if amount==0:\r\n            return 1\r\n        elif amount<0:\r\n            return 0\r\n        elif coin>amount:\r\n            return 0\r\n        else:\r\n            case1 = coin_helper(coin, amount-coin)\r\n            case2 = coin_helper(coin, 2*coin)\r\n            return case1+k\r\n    return coin_helper(1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in coin_helper","    case2 = coin_helper(coin, 2*coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 314, in coin_helper","    case1 = coin_helper(coin, amount - coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in coin_helper","    case2 = coin_helper(coin, 2*coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 314, in coin_helper","    case1 = coin_helper(coin, amount - coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in coin_helper","    case2 = coin_helper(coin, 2*coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 314, in coin_helper","    case1 = coin_helper(coin, amount - coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 307, in coin_helper","    if amount == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":358,"studentId":0,"date":null,"diff":"\r\nInputObject                       SideIndicator\r\n-----------                       -------------\r\n    return countUse(1, amount)    =>           \r\n    return count_using(1, amount) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return count_using(1, amount)\n\ndef countUse(min, amount):\n    if amount < 0:\n        return 0\n    elif amount == 0:\n        return 1\n    elif min > amount:\n        return 0\n    else:\n        withMin = countUse(min, amount - min)\n        withoutMin = countUse(2*min, amount)\n        return withMin + withoutMin\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return countUse(1, amount)\n\ndef countUse(min, amount):\n    if amount < 0:\n        return 0\n    elif amount == 0:\n        return 1\n    elif min > amount:\n        return 0\n    else:\n        withMin = countUse(min, amount - min)\n        withoutMin = countUse(2*min, amount)\n        return withMin + withoutMin\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    return count_using(1, amount)\r\ndef countUse(min, amount):\r\n    if amount<0:\r\n        return 0\r\n    elif amount==0:\r\n        return 1\r\n    elif min>amount:\r\n        return 0\r\n    else:\r\n        withMin = countUse(min, amount-min)\r\n        withoutMin = countUse(2*min, amount)\r\n        return withMin+k\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 318, in count_change","    return count_using(1, amount)","NameError: name 'count_using' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":359,"studentId":0,"date":null,"diff":"\r\nInputObject                                   SideIndicator\r\n-----------                                   -------------\r\n    while amount - highestcoin > highestcoin: =>           \r\n        elif amount < 0 or highestcoin <= 0:  =>           \r\n    while amount - highestcoin > 0:           <=           \r\n        elif amount < 0 or highestcoin < 0:   <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    highestcoin = 1\n    while amount - highestcoin > 0:\n        highestcoin *= 2\n    def count_change_partition(amount, highestcoin):\n        if amount == 0:\n            return 1\n        elif amount < 0 or highestcoin < 0:\n            return 0\n        else:\n            return count_change_partition(amount - highestcoin, highestcoin) + count_change_partition(amount, highestcoin // 2)\n    return count_change_partition(amount, highestcoin)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    highestcoin = 1\n    while amount - highestcoin > highestcoin:\n        highestcoin *= 2\n    def count_change_partition(amount, highestcoin):\n        if amount == 0:\n            return 1\n        elif amount < 0 or highestcoin <= 0:\n            return 0\n        else:\n            return count_change_partition(amount - highestcoin, highestcoin) + count_change_partition(amount, highestcoin // 2)\n    return count_change_partition(amount, highestcoin)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 295, in count_change_partition","    return count_change_partition(amount - highestcoin, highestcoin) + count_change_partition(amount, highestcoin // 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 295, in count_change_partition","    return count_change_partition(amount - highestcoin, highestcoin) + count_change_partition(amount, highestcoin // 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 295, in count_change_partition","    return count_change_partition(amount - highestcoin, highestcoin) + count_change_partition(amount, highestcoin // 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 295, in count_change_partition","    return count_change_partition(amount - highestcoin, highestcoin) + count_change_partition(amount, highestcoin // 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 295, in count_change_partition","    return count_change_partition(amount - highestcoin, highestcoin) + count_change_partition(amount, highestcoin // 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 295, in count_change_partition","    return count_change_partition(amount - highestcoin, highestcoin) + count_change_partition(amount, highestcoin // 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 290, in count_change_partition","    if amount == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":360,"studentId":0,"date":null,"diff":"\r\nInputObject                                            SideIndicator\r\n-----------                                            -------------\r\n            return change(n-m, m) + change(n, m / 2)   =>           \r\n            return change(n-m, m) + change(n, sqrt(m)) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def largest_change(n):\n        m = 1\n        while m <= n // 2:\n            m = m * 2\n        return m\n\n    def change(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        elif m > 1:\n            return change(n-m, m) + change(n, sqrt(m))\n        else:\n            return change(n-m, m) + change(n, 0)\n    return change(amount, largest_change(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def largest_change(n):\n        m = 1\n        while m <= n // 2:\n            m = m * 2\n        return m\n\n    def change(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        elif m > 1:\n            return change(n-m, m) + change(n, m / 2)\n        else:\n            return change(n-m, m) + change(n, 0)\n    return change(amount, largest_change(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","# Error: evaluation exceeded 10 seconds.","","# Error: expected","#     6","# but got","#     Timeout","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":361,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        elif m == 1: =>           \r\n            return 1 =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    def find_largest(amount):\n        largest = 1\n        while largest <= amount:\n            largest = largest*2\n        return int(largest/2)\n\n    def ways(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return ways(n-m, m) + ways(n, m/2)\n\n    return ways(amount, find_largest(amount))\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    def find_largest(amount):\n        largest = 1\n        while largest <= amount:\n            largest = largest*2\n        return int(largest/2)\n\n    def ways(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        elif m == 1:\n            return 1\n        else:\n            return ways(n-m, m) + ways(n, m/2)\n\n    return ways(amount, find_largest(amount))\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 333, in ways","    return ways(n-m, m) + ways(n, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 333, in ways","    return ways(n-m, m) + ways(n, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 333, in ways","    return ways(n-m, m) + ways(n, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 333, in ways","    return ways(n-m, m) + ways(n, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 333, in ways","    return ways(n-m, m) + ways(n, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 333, in ways","    return ways(n-m, m) + ways(n, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 326, in ways","    if n == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":362,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n        highest += i**x   =>           \r\n        highest += [i**x] <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"\"\"coins = []\n    i, x = 2, 0\n    while i**x < amount:\n        coins += [i**x]\n        x += 1\"\"\"\n    highest = 1\n    i, x = 2, 0\n    while i**x < amount:\n        highest += [i**x]\n        x += 1\n    def helper(amount, m):\n        if amount == 0:\n            return 1\n        elif amount < 0: \n            return 0\n        elif m == 0:\n            return 0\n        else: \n            \"\"\"new_m = 0\n            for x in coins:\n                if x < amount - m:\n                    new_m = x\"\"\"\n            return helper(amount-m, m) + helper(amount, m//2)\n    \"\"\"for x in coins:\n        return helper(amount, x)\"\"\"\n    return helper(amount, highest)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"\"\"coins = []\n    i, x = 2, 0\n    while i**x < amount:\n        coins += [i**x]\n        x += 1\"\"\"\n    highest = 1\n    i, x = 2, 0\n    while i**x < amount:\n        highest += i**x\n        x += 1\n    def helper(amount, m):\n        if amount == 0:\n            return 1\n        elif amount < 0: \n            return 0\n        elif m == 0:\n            return 0\n        else: \n            \"\"\"new_m = 0\n            for x in coins:\n                if x < amount - m:\n                    new_m = x\"\"\"\n            return helper(amount-m, m) + helper(amount, m//2)\n    \"\"\"for x in coins:\n        return helper(amount, x)\"\"\"\n    return helper(amount, highest)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 299, in count_change","    highest += [i**x]","TypeError: unsupported operand type(s) for +=: 'int' and 'list'","","# Error: expected","#     6","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":363,"studentId":0,"date":null,"diff":"\r\nInputObject                     SideIndicator\r\n-----------                     -------------\r\n        change=1                =>           \r\n            change = change*2   =>           \r\n        return change//2        =>           \r\n                                =>           \r\n        change==1               <=           \r\n            change = change**2  <=           \r\n        return change//2        <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def partition(n,m):\n        if n==0:\n            return 1\n        elif n<0:\n            return 0\n        elif m==0:\n            return 0\n        # elif math.log(m,2)*10%10!=0:\n        #     return 0\n        else:\n            return partition(n-m,m) + partition(n,m//2)\n    \n    def max_coin(amount):\n        change==1\n        while change<amount:\n            change = change**2\n        return change//2       \n    return partition(amount,max_coin(amount))\n\n\n\n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def partition(n,m):\n        if n==0:\n            return 1\n        elif n<0:\n            return 0\n        elif m==0:\n            return 0\n        # elif math.log(m,2)*10%10!=0:\n        #     return 0\n        else:\n            return partition(n-m,m) + partition(n,m//2)\n    \n    def max_coin(amount):\n        change=1\n        while change<amount:\n            change = change*2\n        return change//2 \n\n    return partition(amount,max_coin(amount))\n\n\n\n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 311, in count_change","    return partition(amount,max_coin(amount))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 307, in max_coin","    change==1","UnboundLocalError: local variable 'change' referenced before assignment","","# Error: expected","#     6","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":364,"studentId":0,"date":null,"diff":"\r\nInputObject                 SideIndicator\r\n-----------                 -------------\r\n        elif ways > amount: =>           \r\n            return 0        =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper(amount, ways):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif ways == 0:\n            return 0\n        else:\n            return helper(amount-ways, ways) + helper(amount, ways*2)\n    return helper(amount, 1)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper(amount, ways):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif ways == 0:\n            return 0\n        elif ways > amount:\n            return 0\n        else:\n            return helper(amount-ways, ways) + helper(amount, ways*2)\n    return helper(amount, 1)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def helper(amount, ways):\r\n        if amount==0:\r\n            return 1\r\n        elif amount<0:\r\n            return 0\r\n        elif ways==0:\r\n            return 0\r\n        elif m>n:\r\n            return 0\r\n        else:\r\n            return helper(amount-ways, ways)+helper(amount, ways*2)\r\n    return helper(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-GreaterThan, Children(LeafConstNode(NameExpressionNode-m), SingleChild(LeafConstNode(NameExpressionNode-n)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(ConstantExpressionNode-0)))))))), 3), Selected(\\x => Match(x, StartsWithTarget(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"BinaryExpressionNode\")))))))))))))))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 306, in helper","    return helper(amount-ways, ways) + helper(amount, ways*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 306, in helper","    return helper(amount-ways, ways) + helper(amount, ways*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 306, in helper","    return helper(amount-ways, ways) + helper(amount, ways*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 306, in helper","    return helper(amount-ways, ways) + helper(amount, ways*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 306, in helper","    return helper(amount-ways, ways) + helper(amount, ways*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 306, in helper","    return helper(amount-ways, ways) + helper(amount, ways*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 299, in helper","    if amount == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":365,"studentId":0,"date":null,"diff":"\r\nInputObject                            SideIndicator\r\n-----------                            -------------\r\n        if x == 0 or x == 1 or y == 1: =>           \r\n        elif x <= 0 or y == 0:         =>           \r\n        if x <=1:                      <=           \r\n        elif y == 1:                   <=           \r\n            return 1                   <=           \r\n        elif y == 0:                   <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def find_largest_coin(x): \n        j = 1\n        num = 0\n        while num <= x:\n            num = pow(2, j)\n            j += 1\n        return pow(2, j-2)\n\n    def count_partitions(x,y):\n        if x <=1:\n            return 1 \n        elif y == 1:\n            return 1\n        elif y == 0:\n            return 0\n        else:\n            return count_partitions(x-y, y) + count_partitions(x, y/2) \n\n\n    return count_partitions(amount, find_largest_coin(amount))\n\n        \n\n\n\n\n\n\n\n   \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def find_largest_coin(x): \n        j = 1\n        num = 0\n        while num <= x:\n            num = pow(2, j)\n            j += 1\n        return pow(2, j-2)\n\n    def count_partitions(x,y):\n        if x == 0 or x == 1 or y == 1:\n            return 1 \n        elif x <= 0 or y == 0:\n            return 0\n        else:\n            return count_partitions(x-y, y) + count_partitions(x, y/2) \n\n\n    return count_partitions(amount, find_largest_coin(amount))\n\n        \n\n\n\n\n\n\n\n   \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","7","","# Error: expected","#     6","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":366,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                           SideIndicator\r\n-----------                                                                                           -------------\r\n    def coin_change(amount, coin):                                                                    =>           \r\n        if amount == 0:                                                                               =>           \r\n            return 1                                                                                  =>           \r\n        if amount < 0:                                                                                =>           \r\n            return 0                                                                                  =>           \r\n        if amount < coin:                                                                             =>           \r\n            return 0                                                                                  =>           \r\n        return coin_change(amount-coin, coin) + coin_change(amount, coin * 2)                         =>           \r\n    return coin_change(amount, 1)                                                                     =>           \r\n                                                                                                      =>           \r\n                                                                                                      =>           \r\n    ######################################                                                            =>           \r\n    #if amount == 0:                                                                                  =>           \r\n    #    return 1                                                                                     =>           \r\n    #if amount < 0:                                                                                   =>           \r\n    #    return 0                                                                                     =>           \r\n    #def largest_coin(amount):                                                                        =>           \r\n    #    coin = 1                                                                                     =>           \r\n    #    while coin <= amount:                                                                        =>           \r\n    #        coin *= 2                                                                                =>           \r\n    #    if coin == amount:                                                                           =>           \r\n    #        return coin                                                                              =>           \r\n    #    else:                                                                                        =>           \r\n    #        return coin/2                                                                            =>           \r\n    #largest_coin = largest_coin(amount)                                                              =>           \r\n    #if  largest_coin < 1:                                                                            =>           \r\n    #    return 1                                                                                     =>           \r\n    #return count_change(amount - largest_coin, largest_coin) + count_change(amount, largest_coin//2) =>           \r\n    if amount == 0:                                                                                   <=           \r\n        return 1                                                                                      <=           \r\n    if amount < 0:                                                                                    <=           \r\n        return 0                                                                                      <=           \r\n    def largest_coin(amount):                                                                         <=           \r\n        coin = 1                                                                                      <=           \r\n        while coin <= amount:                                                                         <=           \r\n            coin *= 2                                                                                 <=           \r\n        if coin == amount:                                                                            <=           \r\n            return coin                                                                               <=           \r\n        else:                                                                                         <=           \r\n            return coin/2                                                                             <=           \r\n    largest_coin = largest_coin(amount)                                                               <=           \r\n    if  largest_coin < 1:                                                                             <=           \r\n        return 1                                                                                      <=           \r\n    return count_change(amount - largest_coin, largest_coin) + count_change(amount, largest_coin//2)  <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    if amount == 0:\n        return 1\n    if amount < 0:\n        return 0 \n    \n    def largest_coin(amount):\n        coin = 1\n        while coin <= amount:\n            coin *= 2\n        if coin == amount:\n            return coin \n        else:\n            return coin/2\n    largest_coin = largest_coin(amount)\n    if  largest_coin < 1:\n        return 1\n    return count_change(amount - largest_coin, largest_coin) + count_change(amount, largest_coin//2)\n        \n        \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def coin_change(amount, coin):\n        if amount == 0:\n            return 1\n        if amount < 0:\n            return 0 \n        if amount < coin:\n            return 0\n        return coin_change(amount-coin, coin) + coin_change(amount, coin * 2)\n    return coin_change(amount, 1)\n    \n    \n    \n    ######################################\n    #if amount == 0:\n    #    return 1\n    #if amount < 0:\n    #    return 0 \n    #def largest_coin(amount):\n    #    coin = 1\n    #    while coin <= amount:\n    #        coin *= 2\n    #    if coin == amount:\n    #        return coin \n    #    else:\n    #        return coin/2\n    #largest_coin = largest_coin(amount)\n    #if  largest_coin < 1:\n    #    return 1\n    #return count_change(amount - largest_coin, largest_coin) + count_change(amount, largest_coin//2)\n        \n        \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 316, in count_change","    return count_change(amount - largest_coin, largest_coin) + count_change(amount, largest_coin//2)","TypeError: count_change() takes 1 positional argument but 2 were given","","# Error: expected","#     6","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":367,"studentId":0,"date":null,"diff":"\r\nInputObject                    SideIndicator\r\n-----------                    -------------\r\n        elif total < num_coin: =>           \r\n            return 0           =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def counter(num_coin, total):\n        if total < 0:\n            return 0\n        elif total == 0:\n            return 1\n        else: \n            return counter(num_coin, total-num_coin) + counter(2*num_coin, total)\n    return counter(1, amount) \n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def counter(num_coin, total):\n        if total < 0:\n            return 0\n        elif total == 0:\n            return 1\n        elif total < num_coin:\n            return 0\n        else: \n            return counter(num_coin, total-num_coin) + counter(2*num_coin, total)\n    return counter(1, amount) \n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def counter(num_coin, total):\r\n        if amount<0:\r\n            return 0\r\n        elif total==0:\r\n            return 1\r\n        else:\r\n            return counter(num_coin, total-num_coin)+counter(2*num_coin, total)\r\n    return counter(1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 324, in counter","    return counter(num_coin, total-num_coin) + counter(2*num_coin, total)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 324, in counter","    return counter(num_coin, total-num_coin) + counter(2*num_coin, total)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 324, in counter","    return counter(num_coin, total-num_coin) + counter(2*num_coin, total)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 324, in counter","    return counter(num_coin, total-num_coin) + counter(2*num_coin, total)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 324, in counter","    return counter(num_coin, total-num_coin) + counter(2*num_coin, total)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 324, in counter","    return counter(num_coin, total-num_coin) + counter(2*num_coin, total)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 319, in counter","    if total < 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":368,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                            SideIndicator\r\n-----------                                                                            -------------\r\n            return count_partitions(n-m, m) + count_partitions(n, m//2)                =>           \r\n    return count_partitions(amount, 2**pwr2_less_than(amount))                         =>           \r\n            return count_partitions(n-m, m) + count_partitions(n, pwr2_less_than(n-1)) <=           \r\n    return count_partitions(amount, pwr2_less_than(amount))                            <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    if amount < 1:\n        return 1\n    def pwr2_less_than(n):\n        x = 0\n        while 2**x < n:\n            x+=1\n        if not(x==0):\n            x-=1\n        return x\n    def count_partitions(n, m):\n        \"\"\"Count the ways to partition n using parts up to m.\"\"\"\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m < 1:\n            return 0\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, pwr2_less_than(n-1))\n    return count_partitions(amount, pwr2_less_than(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    if amount < 1:\n        return 1\n    def pwr2_less_than(n):\n        x = 0\n        while 2**x < n:\n            x+=1\n        if not(x==0):\n            x-=1\n        return x\n    def count_partitions(n, m):\n        \"\"\"Count the ways to partition n using parts up to m.\"\"\"\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m < 1:\n            return 0\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, m//2)\n    return count_partitions(amount, 2**pwr2_less_than(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    if amount<1:\r\n        return 1\r\n    def pwr2_less_than(n):\r\n        x = 0\r\n        while 2**x<n:\r\n            x += 1\r\n        if not (x==0):\r\n            x -= 1\r\n        return x\r\n    def count_partitions(n, m):\r\n        if n==0:\r\n            return 1\r\n        elif n<0:\r\n            return 0\r\n        elif m<1:\r\n            return 0\r\n        else:\r\n            return count_partitions(n-m, m)+count_partitions(n, pwr2_less_than(n-1))\r\n    return count_partitions(amount, pwr2_less_than(amount))\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 307, in count_partitions","    return count_partitions(n-m, m) + count_partitions(n, pwr2_less_than(n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 307, in count_partitions","    return count_partitions(n-m, m) + count_partitions(n, pwr2_less_than(n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 307, in count_partitions","    return count_partitions(n-m, m) + count_partitions(n, pwr2_less_than(n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 307, in count_partitions","    return count_partitions(n-m, m) + count_partitions(n, pwr2_less_than(n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 307, in count_partitions","    return count_partitions(n-m, m) + count_partitions(n, pwr2_less_than(n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 307, in count_partitions","    return count_partitions(n-m, m) + count_partitions(n, pwr2_less_than(n-1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 300, in count_partitions","    if n == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":369,"studentId":0,"date":null,"diff":"\r\nInputObject                          SideIndicator\r\n-----------                          -------------\r\n    coins = [64, 32, 16, 8, 4, 2, 1] =>           \r\n    coins = [32, 16, 8, 4, 2, 1]     <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    coins = [32, 16, 8, 4, 2, 1]\n    def change_counter(amount, coins):\n        if amount < 0 or len(coins) == 0:\n            return 0\n        if amount == 0:\n            return 1\n        else:\n            return change_counter((amount - coins[0]), coins) + change_counter(amount, coins[1:])\n    return change_counter(amount, coins)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    coins = [64, 32, 16, 8, 4, 2, 1]\n    def change_counter(amount, coins):\n        if amount < 0 or len(coins) == 0:\n            return 0\n        if amount == 0:\n            return 1\n        else:\n            return change_counter((amount - coins[0]), coins) + change_counter(amount, coins[1:])\n    return change_counter(amount, coins)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","14",">>> count_change(20)","60",">>> count_change(100)","9544","","# Error: expected","#     9828","# but got","#     9544","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":370,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                               SideIndicator\r\n-----------                                                                                               -------------\r\n    def max2(a):                                                                                          =>           \r\n        count = 0                                                                                         =>           \r\n        while (2**count) < a:                                                                             =>           \r\n            count += 1                                                                                    =>           \r\n        return count                                                                                      =>           \r\n    def count_help(b, N):                                                                                 =>           \r\n        \"\"\"number of ways to make change for b money using only 2**N coin value or less\"\"\"                =>           \r\n        if b == 0:                                                                                        =>           \r\n        if 2**N > b:                                                                                      =>           \r\n            return count_help(b, N - 1)                                                                   =>           \r\n            return count_help(b - 2**N, N) + count_help(b, N - 1)                                         =>           \r\n                                                                                                          =>           \r\n                                                                                                          =>           \r\n        \"\"\"Returns the number of powers of 2 <= n\"\"\"                                                      <=           \r\n    def count_help(amount, n):                                                                            <=           \r\n        \"\"\"Returns number of ways to make change for b money using only 2**N coin value or less\"\"\"        <=           \r\n        if amount == 0:                                                                                   <=           \r\n        if 2**n > amount: #if coin value larger than amount, same as function with decremented coin value <=           \r\n            return count_help(amount, N - 1)                                                              <=           \r\n            return count_help(amount - 2**n, n) + count_help(amount, n - 1)                               <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    def num_powers(n):\n        \"\"\"Returns the number of powers of 2 <= n\"\"\"\n        p = 0 # number of powers of 2\n        k = 0 # which power\n        for i in range(1, n + 1):\n            if i == 2**k:\n                k += 1\n                p += 1\n        return p\n\n    def count_help(amount, n):\n        \"\"\"Returns number of ways to make change for b money using only 2**N coin value or less\"\"\"\n        if amount == 0:\n            return 1\n        if n == 0:\n            return 1\n        if 2**n > amount: #if coin value larger than amount, same as function with decremented coin value\n            return count_help(amount, N - 1)\n        else: \n            return count_help(amount - 2**n, n) + count_help(amount, n - 1)\n    return count_help(amount, num_powers(amount))\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    def num_powers(n):\n        p = 0 # number of powers of 2\n        k = 0 # which power\n        for i in range(1, n + 1):\n            if i == 2**k:\n                k += 1\n                p += 1\n        return p\n\n    def max2(a):\n        count = 0\n        while (2**count) < a:\n            count += 1\n        return count\n\n    def count_help(b, N):\n        \"\"\"number of ways to make change for b money using only 2**N coin value or less\"\"\"\n        if b == 0:\n            return 1\n        if N == 0:\n            return 1\n        if 2**N > b:\n            return count_help(b, N - 1)\n        else: \n            return count_help(b - 2**N, N) + count_help(b, N - 1)\n\n    return count_help(amount, num_powers(amount))\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def num_powers(n):\r\n        amount = 0\r\n        k = 0\r\n        for i in range(1, n+1):\r\n            if i==2**k:\r\n                k += 1\r\n                p += 1\r\n        return p\r\n    def count_help(amount, n):\r\n        if amount==0:\r\n            return 1\r\n        if n==0:\r\n            return 1\r\n        if 2**n>amount:\r\n            return count_help(amount, N-1)\r\n        else:\r\n            return count_help(amount-2**n, n)+count_help(amount, n-1)\r\n    return count_help(amount, num_powers(amount))\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 339, in count_change","    return count_help(amount, num_powers(amount))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 336, in count_help","    return count_help(amount, N - 1)","NameError: name 'N' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":371,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n        elif m == 1: =>           \r\n            return 1 =>           \r\n        elif m == 0: <=           \r\n            return 0 <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"    \n    \"\"\"totalways = 1\n    for i in range(amount):\n        if amount % 2 ** i == 0:\n            totalways += 1\n    for i in range(amount//2):\n        new_amount -= i * 2\"\"\"\n    def get_m(amount):\n        m = 1\n        while m <= amount:\n            m = 2 * m\n        m /= 2\n        return m\n    m = get_m(amount)\n    def count_by_two(amount, m):\n        if amount == 0 or amount == 1:\n            return 1\n        elif amount < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_by_two(amount - m, m) + count_by_two(amount, m/2)\n    return count_by_two(amount, m)\n\n    \"\"\"i = 0\n    def count_by_two(amount, i):\n        coin = 2 ** i\n        \n        elif coin >= amount:\n            return 0\n        else:\n            return count_by_two(amount - coin, i) + count_by_two(amount, i + 1)\n    return count_by_two(amount, i)\"\"\"\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"    \n    \"\"\"totalways = 1\n    for i in range(amount):\n        if amount % 2 ** i == 0:\n            totalways += 1\n    for i in range(amount//2):\n        new_amount -= i * 2\"\"\"\n    def get_m(amount):\n        m = 1\n        while m <= amount:\n            m = 2 * m\n        m /= 2\n        return m\n    m = get_m(amount)\n    def count_by_two(amount, m):\n        if amount == 0 or amount == 1:\n            return 1\n        elif amount < 0:\n            return 0\n        elif m == 1:\n            return 1\n        else:\n            return count_by_two(amount - m, m) + count_by_two(amount, m/2)\n    return count_by_two(amount, m)\n\n    \"\"\"i = 0\n    def count_by_two(amount, i):\n        coin = 2 ** i\n        \n        elif coin >= amount:\n            return 0\n        else:\n            return count_by_two(amount - coin, i) + count_by_two(amount, i + 1)\n    return count_by_two(amount, i)\"\"\"\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 392, in count_by_two","    return count_by_two(amount - m, m) + count_by_two(amount, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 392, in count_by_two","    return count_by_two(amount - m, m) + count_by_two(amount, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 392, in count_by_two","    return count_by_two(amount - m, m) + count_by_two(amount, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 392, in count_by_two","    return count_by_two(amount - m, m) + count_by_two(amount, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 392, in count_by_two","    return count_by_two(amount - m, m) + count_by_two(amount, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 392, in count_by_two","    return count_by_two(amount - m, m) + count_by_two(amount, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 385, in count_by_two","    if amount == 0 or amount == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":372,"studentId":0,"date":null,"diff":"\r\nInputObject                                                        SideIndicator\r\n-----------                                                        -------------\r\n        if total <= 0 or n > total:                                =>           \r\n        if n == total:                                             =>           \r\n            return num_part(total, 2*n) + num_part(total - n, n)   =>           \r\n    return num_part(amount, 1)                                     =>           \r\n                                                                   =>           \r\n        if amount < 0:                                             <=           \r\n        if total == 0:                                             <=           \r\n        if n > total:                                              <=           \r\n            return 0                                               <=           \r\n            return num_part(total, 2) + num_part(total - 2*n, 2*n) <=           \r\n    num_part(amount, 1)                                            <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    #2 helper functions one for partitions and one for count change\n    def num_part(total, n):\n        if amount < 0:\n            return 0\n        if total == 0:\n            return 1\n        if n > total:\n            return 0\n        else:\n            return num_part(total, 2) + num_part(total - 2*n, 2*n)\n    num_part(amount, 1)\n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    #2 helper functions one for partitions and one for count change\n    def num_part(total, n):\n\n        if total <= 0 or n > total:\n            return 0\n        if n == total:\n            return 1\n        else:\n            return num_part(total, 2*n) + num_part(total - n, n)\n    return num_part(amount, 1)\n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def num_part(total, n):\r\n        if amount<0:\r\n            return 0\r\n        if total==0:\r\n            return 1\r\n        if n>total:\r\n            return 0\r\n        else:\r\n            return num_part(total, 2)+num_part(total-2*n, 2*n)\r\n    num_part(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 305, in num_part","    return num_part(total, 2) + num_part(total - 2*n, 2*n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 305, in num_part","    return num_part(total, 2) + num_part(total - 2*n, 2*n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 305, in num_part","    return num_part(total, 2) + num_part(total - 2*n, 2*n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 305, in num_part","    return num_part(total, 2) + num_part(total - 2*n, 2*n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 305, in num_part","    return num_part(total, 2) + num_part(total - 2*n, 2*n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 305, in num_part","    return num_part(total, 2) + num_part(total - 2*n, 2*n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 298, in num_part","    if amount < 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":373,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                                                                        \r\n-----------                                                                                                                                        \r\n        elif x == amount1:                                                                                                                         \r\n            return 1                                                                                                                            ...\r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def change(x, amount1):\n        if x > amount1:\n            return 0\n        elif amount1 == 0:\n            return 1\n        else:\n            return change(x*2, amount1) + change(x, amount1-x)\n    return change(1, amount)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def change(x, amount1):\n        if x > amount1:\n            return 0\n        elif x == amount1:\n            return 1\n        elif amount1 == 0:\n            returnn        else:\n            return change(x*2, amount1) + change(x, amount1-x)\n    return change(1, amount)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def change(x, amount1):\r\n        if amount>amount1:\r\n            return 0\r\n        elif amount1==0:\r\n            return 1\r\n        else:\r\n            return change(x*2, amount1)+change(x, amount1-x)\r\n    return change(1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":374,"studentId":0,"date":null,"diff":"\r\nInputObject                                    SideIndicator\r\n-----------                                    -------------\r\n        if m*2>n: return 1                     =>           \r\n        return helper(n-m*2, m)+helper(n, m*2) =>           \r\n        if m>n: return 1                       <=           \r\n        return helper(n-m, m)+helper(n, m*2)   <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper(n, m=1):\n    \tif m>n: return 1\n    \tif n<=0: return 0\n    \treturn helper(n-m, m)+helper(n, m*2)\n    return helper(amount)\n    \t\n    \t\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper(n, m=1):\n    \tif m*2>n: return 1\n    \tif n<=0: return 0\n    \treturn helper(n-m*2, m)+helper(n, m*2)\n    return helper(amount)\n    \t\n    \t\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def helper(n, m = 1):\r\n        if amount>n:\r\n            return 1\r\n        if n<=0:\r\n            return 0\r\n        return helper(n-m, m)+helper(n, m*2)\r\n    return helper(amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","26","","# Error: expected","#     6","# but got","#     26","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":375,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n            print(\"num\")  <=           \r\n            print(num)    <=           \r\n        print(\"amount =\") <=           \r\n        print (amount)    <=           \r\n        print (\"power =\") <=           \r\n        print (power)     <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n  \n    def power_of_two(num):\n        if num == 0:\n            return 1\n        else:\n            num = 2**num\n            print(\"num\")\n            print(num)\n            return num\n    def count(amount,power):\n        print(\"amount =\")\n        print (amount)\n        print (\"power =\")\n        print (power)\n        if amount == 0: \n            return 0\n        elif amount == 1:\n            return 1\n        elif amount < 0:\n            return 0\n        elif power > amount/2:\n            return 0\n        else:\n            return count(amount-power_of_two(power),power+1)+count(amount-power_of_two(power),power)\n\n   \n    return count(amount,0)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n  \n    def power_of_two(num):\n        if num == 0:\n            return 1\n        else:\n            num = 2**num\n            return num\n    def count(amount,power):\n        if amount == 0: \n            return 0\n        elif amount == 1:\n            return 1\n        elif amount < 0:\n            return 0\n        elif power > amount/2:\n            return 0\n        else:\n            return count(amount-power_of_two(power),power+1)+count(amount-power_of_two(power),power)\n\n   \n    return count(amount,0)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","amount =","7","power =","0","amount =","6","power =","1","num","2","amount =","4","power =","2","num","4","amount =","0","power =","3","num","4","amount =","0","power =","2","num","2","amount =","4","power =","1","num","2","amount =","2","power =","2","num","2","amount =","2","power =","1","num","2","amount =","0","power =","2","num","2","amount =","0","power =","1","amount =","6","power =","0","amount =","5","power =","1","num","2","amount =","3","power =","2","num","2","amount =","3","power =","1","num","2","amount =","1","power =","2","num","2","amount =","1","power =","1","amount =","5","power =","0","amount =","4","power =","1","num","2","amount =","2","power =","2","num","2","amount =","2","power =","1","num","2","amount =","0","power =","2","num","2","amount =","0","power =","1","amount =","4","power =","0","amount =","3","power =","1","num","2","amount =","1","power =","2","num","2","amount =","1","power =","1","amount =","3","power =","0","amount =","2","power =","1","num","2","amount =","0","power =","2","num","2","amount =","0","power =","1","amount =","2","power =","0","amount =","1","power =","1","amount =","1","power =","0","6","","# Error: expected","#     6","# but got","#     amount =","#     7","#     power =","#     0","#     amount =","#     6","#     power =","#     1","#     num","#     2","#     amount =","#     4","#     power =","#     2","#     num","#     4","#     amount =","#     0","#     power =","#     3","#     num","#     4","#     amount =","#     0","#     power =","#     2","#     num","#     2","#     amount =","#     4","#     power =","#     1","#     num","#     2","#     amount =","#     2","#     power =","#     2","#     num","#     2","#     amount =","#     2","#     power =","#     1","#     num","#     2","#     amount =","#     0","#     power =","#     2","#     num","#     2","#     amount =","#     0","#     power =","#     1","#     amount =","#     6","#     power =","#     0","#     amount =","#     5","#     power =","#     1","#     num","#     2","#     amount =","#     3","#     power =","#     2","#     num","#     2","#     amount =","#     3","#     power =","#     1","#     num","#     2","#     amount =","#     1","#     power =","#     2","#     num","#     2","#     amount =","#     1","#     power =","#     1","#     amount =","#     5","#     power =","#     0","#     amount =","#     4","#     power =","#     1","#     num","#     2","#     amount =","#     2","#     power =","#     2","#     num","#     2","#     amount =","#     2","#     power =","#     1","#     num","#     2","#     amount =","#     0","#     power =","#     2","#     num","#     2","#     amount =","#     0","#     power =","#     1","#     amount =","#     4","#     power =","#     0","#     amount =","#     3","#     power =","#     1","#     num","#     2","#     amount =","#     1","#     power =","#     2","#     num","#     2","#     amount =","#     1","#     power =","#     1","#     amount =","#     3","#     power =","#     0","#     amount =","#     2","#     power =","#     1","#     num","#     2","#     amount =","#     0","#     power =","#     2","#     num","#     2","#     amount =","#     0","#     power =","#     1","#     amount =","#     2","#     power =","#     0","#     amount =","#     1","#     power =","#     1","#     amount =","#     1","#     power =","#     0","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":376,"studentId":0,"date":null,"diff":"\r\nInputObject                        SideIndicator\r\n-----------                        -------------\r\n    return count_using(amount, k)  =>           \r\n    return change_using(amount, k) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    k=1 \n    while k <= amount:\n        k *=2\n    return change_using(amount, k)\n  \ndef count_using(n, k):\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0 \n    if k==0:\n        return 0\n    else:\n        return count_using(n-k, k)+ count_using(n, k//2)\n\n\n\n    \n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    k=1 \n    while k <= amount:\n        k *=2\n    return count_using(amount, k)\n  \ndef count_using(n, k):\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0 \n    if k==0:\n        return 0\n    else:\n        return count_using(n-k, k)+ count_using(n, k//2)\n\n\n\n    \n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 312, in count_change","    return change_using(amount, k)","NameError: name 'change_using' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":377,"studentId":0,"date":null,"diff":"\r\nInputObject                   SideIndicator\r\n-----------                   -------------\r\n    return counter(amount, x) =>           \r\n    counter(amount, x)        <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    x = 1\n    while 2*x < amount:\n        if 2*x <= amount:\n            x = 2*x\n    def counter(number, largest_coin):\n        if number == 0:\n            return 1\n        elif number < 0 or largest_coin < 1:\n            return 0\n        else:\n            return counter(number - largest_coin, largest_coin) + counter(number, largest_coin // 2)\n    counter(amount, x)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    x = 1\n    while 2*x < amount:\n        if 2*x <= amount:\n            x = 2*x\n    def counter(number, largest_coin):\n        if number == 0:\n            return 1\n        elif number < 0 or largest_coin < 1:\n            return 0\n        else:\n            return counter(number - largest_coin, largest_coin) + counter(number, largest_coin // 2)\n    return counter(amount, x)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","","# Error: expected","#     6","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":378,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                   SideIndicator\r\n-----------                                                                                   -------------\r\n    def helper(coin_number, value):                                                           =>           \r\n        if value == 0:                                                                        =>           \r\n        if value < 0:                                                                         =>           \r\n        if coin_number > amount:                                                              =>           \r\n            return helper(coin_number , value - coin_number) + helper(coin_number * 2, value) =>           \r\n    return helper(1, amount)                                                                  =>           \r\n    def helper(coin, ways):                                                                   <=           \r\n        if coin == 0:                                                                         <=           \r\n        if coin < 0:                                                                          <=           \r\n        if ways == 0:                                                                         <=           \r\n            return helper(coin - ways, ways) + helper(coin, ways / 2)                         <=           \r\n    return helper(3, 8)                                                                       <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(coin, ways):\n        if coin == 0:\n            return 1\n        if coin < 0:\n            return 0\n        if ways == 0:\n            return 0\n        else:\n            return helper(coin - ways, ways) + helper(coin, ways / 2)\n    return helper(3, 8)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(coin_number, value):\n        if value == 0:\n            return 1\n        if value < 0:\n            return 0\n        if coin_number > amount:\n            return 0\n        else:\n            return helper(coin_number , value - coin_number) + helper(coin_number * 2, value)\n    return helper(1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in helper","    return helper(coin - ways, ways) + helper(coin, ways / 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in helper","    return helper(coin - ways, ways) + helper(coin, ways / 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in helper","    return helper(coin - ways, ways) + helper(coin, ways / 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in helper","    return helper(coin - ways, ways) + helper(coin, ways / 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in helper","    return helper(coin - ways, ways) + helper(coin, ways / 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in helper","    return helper(coin - ways, ways) + helper(coin, ways / 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 308, in helper","    if coin == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":379,"studentId":0,"date":null,"diff":"\r\nInputObject                               SideIndicator\r\n-----------                               -------------\r\n    return helper_count_change(amount, x) =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \n    x=1\n    while x < amount:\n        x=2*x\n    x=x//2 \n\n    def helper_count_change(n, k):\n        if n==0: \n            return 1\n        elif n < 0:\n            return 0\n        elif k==1:\n            return 1\n        else:\n            return helper_count_change(n-k, k)+helper_count_change(n, k//2)\n\n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \n    x=1\n    while x < amount:\n        x=2*x\n    x=x//2 \n\n    def helper_count_change(n, k):\n        if n==0: \n            return 1\n        elif n < 0:\n            return 0\n        elif k==1:\n            return 1\n        else:\n            return helper_count_change(n-k, k)+helper_count_change(n, k//2)\n    return helper_count_change(amount, x)\n\n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","","# Error: expected","#     6","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":380,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        if amount<0:    =>           \r\n        elif amount==0: =>           \r\n        if amount<=0:   <=           \r\n        elif amount==1: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    def i_finder(amount, i, n):\n        if amount<=0:\n            return 0\n        elif amount==1:\n            return 1\n        elif amount ==2:\n            return 2\n        elif amount ==3:\n            return 2\n        else:\n            while i<=amount:\n                i = 2**n\n                n += 1\n            return i\n    max_i = i_finder(amount, 2, 2)\n\n    def count_change_helper(amount, i):\n        if amount<=0:\n            return 0\n        elif amount==1:\n            return 1\n        elif i==0:\n            return 0\n        else:\n            return count_change_helper(amount, i//2) + count_change_helper(amount - i, i)\n    \n    return count_change_helper(amount, max_i)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    def i_finder(amount, i, n):\n        if amount<=0:\n            return 0\n        elif amount==1:\n            return 1\n        elif amount ==2:\n            return 2\n        elif amount ==3:\n            return 2\n        else:\n            while i<=amount:\n                i = 2**n\n                n += 1\n            return i\n    max_i = i_finder(amount, 2, 2)\n\n    def count_change_helper(amount, i):\n        if amount<0:\n            return 0\n        elif amount==0:\n            return 1\n        elif i==0:\n            return 0\n        else:\n            return count_change_helper(amount, i//2) + count_change_helper(amount - i, i)\n    \n    return count_change_helper(amount, max_i)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","10","","# Error: expected","#     14","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":381,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                           SideIndicator\r\n-----------                                                                           -------------\r\n            using_min_amount = possible_combinations(min_amount, amount - min_amount) =>           \r\n            no_min_amount = possible_combinations(2*min_amount, amount)               =>           \r\n    return possible_combinations(1, amount)                                           =>           \r\n            using_min_amount = count_using(min_amount, amount - min_amount)           <=           \r\n            no_min_amount = count_using(2*min_amount, amount)                         <=           \r\n    return count_using(1, amount)                                                     <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def possible_combinations(min_amount, amount):\n        if amount < 0: # 0 ways to represent a negative amount\n            return 0\n        elif amount == 0: # only 1 way to represent an amount of 0\n            return 1\n        elif min_amount > amount:\n            return 0\n        else:\n            using_min_amount = count_using(min_amount, amount - min_amount)\n            no_min_amount = count_using(2*min_amount, amount)\n        return using_min_amount + no_min_amount\n\n    return count_using(1, amount)\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def possible_combinations(min_amount, amount):\n        if amount < 0: # 0 ways to represent a negative amount\n            return 0\n        elif amount == 0: # only 1 way to represent an amount of 0\n            return 1\n        elif min_amount > amount:\n            return 0\n        else:\n            using_min_amount = possible_combinations(min_amount, amount - min_amount)\n            no_min_amount = possible_combinations(2*min_amount, amount)\n        return using_min_amount + no_min_amount\n\n    return possible_combinations(1, amount)\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def possible_combinations(min_amount, amount):\r\n        if amount<0:\r\n            return 0\r\n        elif amount==0:\r\n            return 1\r\n        elif min_amount>amount:\r\n            return 0\r\n        else:\r\n            using_min_amount = count_using(min_amount, amount-min_amount)\r\n            no_min_amount = count_using(2*min_amount, amount)\r\n        return using_min_amount+k\r\n    return count_using(1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 312, in count_change","    return count_using(1, amount)","NameError: name 'count_using' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":382,"studentId":0,"date":null,"diff":"\r\nInputObject                                                            SideIndicator\r\n-----------                                                            -------------\r\n    i = 2                                                              =>           \r\n    while i < amount:                                                  =>           \r\n        i = i * 2                                                      =>           \r\n    def change_helper(x,z):                                            =>           \r\n        if x == 0:                                                     =>           \r\n        elif x < 0:                                                    =>           \r\n            return change_helper(x-z,z)+change_helper(x,z/2)           =>           \r\n    return change_helper(amount,i)                                     =>           \r\n                                                                       =>           \r\n                                                                       <=           \r\n    def change_helper(x=amount,z=4):                                   <=           \r\n        if amount == 0:                                                <=           \r\n        elif amount < 0:                                               <=           \r\n            return change_helper(amount-z,z)+change_helper(amount,z/2) <=           \r\n    return change_helper()                                             <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \n    \n      \n\n\n    \n\n    def change_helper(x=amount,z=4):\n        \n        if amount == 0:\n            return 1\n        \n        elif amount < 0:\n            return 0\n\n        \n\n        elif z < 1:\n            return 0 \n\n        \n\n        else:\n            return change_helper(amount-z,z)+change_helper(amount,z/2)\n        \n\n    return change_helper()\n\n \n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \n    \n    i = 2\n\n    while i < amount:\n        i = i * 2\n\n\n    \n\n    def change_helper(x,z):\n        \n        if x == 0:\n            return 1\n        \n        elif x < 0:\n            return 0\n\n        \n\n        elif z < 1:\n            return 0 \n\n        \n\n        else:\n            return change_helper(x-z,z)+change_helper(x,z/2)\n        \n\n    return change_helper(amount,i)\n\n \n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 367, in change_helper","    return change_helper(amount-z,z)+change_helper(amount,z/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 367, in change_helper","    return change_helper(amount-z,z)+change_helper(amount,z/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 367, in change_helper","    return change_helper(amount-z,z)+change_helper(amount,z/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 367, in change_helper","    return change_helper(amount-z,z)+change_helper(amount,z/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 367, in change_helper","    return change_helper(amount-z,z)+change_helper(amount,z/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 367, in change_helper","    return change_helper(amount-z,z)+change_helper(amount,z/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 353, in change_helper","    if amount == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":383,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        if amount == 0: =>           \r\n        if amount == 1: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def coin(x, amount):\n        if amount == 1:\n            return 1\n        if x > amount:\n            return 0\n        else:\n            return coin(2*x, amount)+coin(x, amount-x)\n    return coin(1, amount)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def coin(x, amount):\n        if amount == 0:\n            return 1\n        if x > amount:\n            return 0\n        else:\n            return coin(2*x, amount)+coin(x, amount-x)\n    return coin(1, amount)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def coin(x, amount):\r\n        if amount==1:\r\n            return 1\r\n        if x>amount:\r\n            return 0\r\n        else:\r\n            return coin(2*x, amount)+coin(x, amount-x)\r\n    return coin(1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","10","","# Error: expected","#     14","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":384,"studentId":0,"date":null,"diff":"\r\nInputObject                     SideIndicator\r\n-----------                     -------------\r\n    return c(amount,max_change) =>           \r\n                                =>           \r\n                                =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    for i in range(amount):\n        if 2**i>amount:\n            max_change=2**(i-1)\n\n    def c (amount, max_change):\n        if  amount<0:\n            return 0\n        if amount==0 or amount==1 or max_change==1:\n            return 1\n        else:\n            return c(amount,max_change/2)+c(amount-max_change,max_change)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    for i in range(amount):\n        if 2**i>amount:\n            max_change=2**(i-1)\n\n    def c (amount, max_change):\n        if  amount<0:\n            return 0\n        if amount==0 or amount==1 or max_change==1:\n            return 1\n        else:\n            return c(amount,max_change/2)+c(amount-max_change,max_change)\n\n    return c(amount,max_change)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","","# Error: expected","#     6","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":385,"studentId":0,"date":null,"diff":"\r\nInputObject         SideIndicator\r\n-----------         -------------\r\n    total, n = 0, 1 =>           \r\n    total, n = 1    <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    total, n = 1\n    while total < amount:\n        total = pow(2, n)\n        n+=1\n\n    def inside(amount, k):\n        if amount <0:\n            return 0\n        elif amount==0:\n            return 1\n        elif k == 0:\n            return 0\n        else:\n            return inside(amount - k, k) + inside(amount, k//2)\n    return inside(amount, total)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    total, n = 0, 1\n    while total < amount:\n        total = pow(2, n)\n        n+=1\n\n    def inside(amount, k):\n        if amount <0:\n            return 0\n        elif amount==0:\n            return 1\n        elif k == 0:\n            return 0\n        else:\n            return inside(amount - k, k) + inside(amount, k//2)\n    return inside(amount, total)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 296, in count_change","    total, n = 1","TypeError: 'int' object is not iterable","","# Error: expected","#     6","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":386,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                            SideIndicator\r\n-----------                                                                            -------------\r\n    return cc_helper(1,amount)                                                         =>           \r\ndef cc_helper(change, amount):                                                         =>           \r\n    if amount == 0:                                                                    =>           \r\n        return 1                                                                       =>           \r\n    elif amount < 0:                                                                   =>           \r\n        return 0                                                                       =>           \r\n    elif amount < change:                                                              =>           \r\n        return 0                                                                       =>           \r\n    part1 = (cc_helper(change, amount - change))                                       =>           \r\n    part2 = (cc_helper(2*change, amount))                                              =>           \r\n    combined = part1 + part2                                                           =>           \r\n    return combined                                                                    =>           \r\n    def helper(amount, max_size):                                                      <=           \r\n        if max_size == 1:                                                              <=           \r\n            return 1                                                                   <=           \r\n        if amount < max_size:                                                          <=           \r\n            return helper(amount, max_size // 2)                                       <=           \r\n        elif amount == max_size:                                                       <=           \r\n            return 1 + helper(amount, max_size // 2)                                   <=           \r\n        else:                                                                          <=           \r\n            return helper(amount, max_size // 2) + helper(amount - max_size, max_size) <=           \r\n                                                                                       <=           \r\n    return helper(amount, get_max_cent(amount))                                        <=           \r\n# def count_change(amount):                                                            <=           \r\n#     \"\"\"Return the number of ways to make change for amount.                          <=           \r\n#     >>> count_change(7)                                                              <=           \r\n#     6                                                                                <=           \r\n#     >>> count_change(10)                                                             <=           \r\n#     14                                                                               <=           \r\n#     >>> count_change(20)                                                             <=           \r\n#     60                                                                               <=           \r\n#     >>> count_change(100)                                                            <=           \r\n#     9828                                                                             <=           \r\n#     \"\"\"                                                                              <=           \r\n#     \"*** YOUR CODE HERE ***\"                                                         <=           \r\n#     return cc_helper(1,amount)                                                       <=           \r\n# def cc_helper(change, amount):                                                       <=           \r\n#     if amount == 0:                                                                  <=           \r\n#         return 1                                                                     <=           \r\n#     elif amount < 0:                                                                 <=           \r\n#         return 0                                                                     <=           \r\n#     elif amount < change:                                                            <=           \r\n#         return 0                                                                     <=           \r\n#     part1 = (cc_helper(change, amount - change))                                     <=           \r\n#     part2 = (cc_helper(2*change, amount))                                            <=           \r\n#     combined = part1 + part2                                                         <=           \r\n#     return combined                                                                  <=           \r\n                                                                                       <=           \r\n                                                                                       <=           \r\n                                                                                       <=           \r\n                                                                                       <=           \r\n                                                                                       <=           \r\n                                                                                       <=           \r\n                                                                                       <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(amount, max_size):\n        if max_size == 1:\n            return 1\n        if amount < max_size:\n            return helper(amount, max_size // 2)\n        elif amount == max_size:\n            return 1 + helper(amount, max_size // 2)\n        else:\n            return helper(amount, max_size // 2) + helper(amount - max_size, max_size)\n        \n    return helper(amount, get_max_cent(amount))\n\n\n\n\n\n\n\n\n# def count_change(amount):\n#     \"\"\"Return the number of ways to make change for amount.\n\n#     >>> count_change(7)\n#     6\n#     >>> count_change(10)\n#     14\n#     >>> count_change(20)\n#     60\n#     >>> count_change(100)\n#     9828\n#     \"\"\"\n#     \"*** YOUR CODE HERE ***\"\n#     return cc_helper(1,amount)\n\n\n# def cc_helper(change, amount):\n#     if amount == 0:\n#         return 1\n#     elif amount < 0:\n#         return 0\n#     elif amount < change:\n#         return 0 \n#     part1 = (cc_helper(change, amount - change))\n#     part2 = (cc_helper(2*change, amount))\n#     combined = part1 + part2       \n#     return combined\n\n\n\n#========================QUESTION 8========================\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return cc_helper(1,amount)\n\n\ndef cc_helper(change, amount):\n    if amount == 0:\n        return 1\n    elif amount < 0:\n        return 0\n    elif amount < change:\n        return 0 \n    part1 = (cc_helper(change, amount - change))\n    part2 = (cc_helper(2*change, amount))\n    combined = part1 + part2       \n    return combined\n\n\n\n#========================QUESTION 8========================\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 350, in count_change","    return helper(amount, get_max_cent(amount))","NameError: name 'get_max_cent' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":387,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n                     =>           \r\n        print(coins) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x = 0\n    coins = []\n\n    while 2**x < amount:\n        coins.append(2**x)\n        x += 1\n    coins = coins[::-1]\n\n\n    def helper(amount, coins):\n        print(coins)\n        if amount == 0:\n            return 1\n        if amount < 0:\n            return 0\n        if coins == []:\n            return 0\n        return helper(amount - coins[0], coins) + helper(amount, coins[1:])\n    return helper(amount, coins)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x = 0\n    coins = []\n\n    while 2**x < amount:\n        coins.append(2**x)\n        x += 1\n    coins = coins[::-1]\n\n\n    def helper(amount, coins):\n\n        if amount == 0:\n            return 1\n        if amount < 0:\n            return 0\n        if coins == []:\n            return 0\n        return helper(amount - coins[0], coins) + helper(amount, coins[1:])\n    return helper(amount, coins)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","[4, 2, 1]","[4, 2, 1]","[4, 2, 1]","[2, 1]","[2, 1]","[2, 1]","[1]","[1]","[]","[1]","[1]","[1]","[1]","[]","[]","[]","[2, 1]","[2, 1]","[2, 1]","[2, 1]","[2, 1]","[1]","[1]","[]","[1]","[1]","[1]","[1]","[]","[]","[]","[1]","[1]","[1]","[1]","[1]","[1]","[]","[]","[]","[]","[]","[1]","[1]","[1]","[1]","[1]","[1]","[1]","[1]","[]","[]","[]","[]","[]","[]","[]","6","","# Error: expected","#     6","# but gotest summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":388,"studentId":0,"date":null,"diff":"\r\nInputObject                                               SideIndicator\r\n-----------                                               -------------\r\n        with_min = count_using(m_coin, amount - m_coin)   =>           \r\n        with_min = count_using(m_coin, amount - min_coin) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    return count_using(1, amount)\n\ndef count_using(m_coin, amount):\n    if amount < 0:\n        return 0\n    elif amount == 0:\n        return 1\n    elif m_coin > amount:\n        return 0\n    else:\n        with_min = count_using(m_coin, amount - min_coin)\n        without_min = count_using(2*m_coin, amount)\n        return with_min + without_min\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    return count_using(1, amount)\n\ndef count_using(m_coin, amount):\n    if amount < 0:\n        return 0\n    elif amount == 0:\n        return 1\n    elif m_coin > amount:\n        return 0\n    else:\n        with_min = count_using(m_coin, amount - m_coin)\n        without_min = count_using(2*m_coin, amount)\n        return with_min + without_min\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    return count_using(1, amount)\r\ndef count_using(m_coin, amount):\r\n    if amount<0:\r\n        return 0\r\n    elif amount==0:\r\n        return 1\r\n    elif m_coin>amount:\r\n        return 0\r\n    else:\r\n        with_min = count_using(m_coin, amount-min_coin)\r\n        without_min = count_using(2*m_coin, amount)\r\n        return with_min+k\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 294, in count_change","    return count_using(1, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 304, in count_using","    with_min = count_using(m_coin, amount - min_coin)","NameError: name 'min_coin' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":389,"studentId":0,"date":null,"diff":"\r\nInputObject                                            SideIndicator\r\n-----------                                            -------------\r\n    while x < amount:                                  =>           \r\n            return helper(n-m, m) + helper(n, m//2)    =>           \r\n    while x < n:                                       <=           \r\n            return helper(n-m, m//2) + helper(n, m//2) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    x = 1\n    while x < n:\n        x = 2*x\n    x = x // 2\n    def helper(n, m):\n\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 1:\n            return 1\n        else:\n            return helper(n-m, m//2) + helper(n, m//2)\n\n        \n    return helper(amount, x)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    x = 1\n    while x < amount:\n        x = 2*x\n    x = x // 2\n    def helper(n, m):\n\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 1:\n            return 1\n        else:\n            return helper(n-m, m) + helper(n, m//2)\n\n        \n    return helper(amount, x)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 324, in count_change","    while x < n:","NameError: name 'n' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":390,"studentId":0,"date":null,"diff":"\r\nInputObject                  SideIndicator\r\n-----------                  -------------\r\n        return scale - 1     =>           \r\n            return scale - 1 <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def largest_scale(value):\n        scale = 0\n        while 2 ** scale < value:\n            scale += 1\n            return scale - 1\n    def partition(num, coin_scale):\n        if num < 0:\n            return 0\n        if num == 0:\n            return 1\n        if coin_scale == 0:\n            return 1\n        return partition(num, coin_scale - 1) + partition(num - 2 ** coin_scale, coin_scale)\n    return partition(amount, largest_scale(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def largest_scale(value):\n        scale = 0\n        while 2 ** scale < value:\n            scale += 1\n        return scale - 1\n    def partition(num, coin_scale):\n        if num < 0:\n            return 0\n        if num == 0:\n            return 1\n        if coin_scale == 0:\n            return 1\n        return partition(num, coin_scale - 1) + partition(num - 2 ** coin_scale, coin_scale)\n    return partition(amount, largest_scale(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def largest_scale(value):\r\n        amount = 0\r\n        while 2**scale<value:\r\n            scale += 1\r\n            return scale-1\r\n    def partition(num, coin_scale):\r\n        if num<0:\r\n            return 0\r\n        if num==0:\r\n            return 1\r\n        if coin_scale==0:\r\n            return 1\r\n        return partition(num, coin_scale-1)+partition(num-2**coin_scale, coin_scale)\r\n    return partition(amount, largest_scale(amount))\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","1","","# Error: expected","#     6","# but got","#     1","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":391,"studentId":0,"date":null,"diff":"\r\nInputObject                           SideIndicator\r\n-----------                           -------------\r\n        elif highest_coin > amount:   =>           \r\n        elif highest_coin*2 > amount: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    def partition_change(amount, highest_coin):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif highest_coin*2 > amount:\n            return 0     \n        else:\n            return partition_change(amount-highest_coin, highest_coin) + partition_change(amount, highest_coin*2)\n    return partition_change(amount, 1)\n           \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    def partition_change(amount, highest_coin):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif highest_coin > amount:\n            return 0     \n        else:\n            return partition_change(amount-highest_coin, highest_coin) + partition_change(amount, highest_coin*2)\n    return partition_change(amount, 1)\n           \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def partition_change(amount, highest_coin):\r\n        if amount==0:\r\n            return 1\r\n        elif amount<0:\r\n            return 0\r\n        elif highest_coin*2>amount:\r\n            return 0\r\n        else:\r\n            return partition_change(amount-highest_coin, highest_coin)+partition_change(amount, highest_coin*2)\r\n    return partition_change(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":392,"studentId":0,"date":null,"diff":"\r\nInputObject                 SideIndicator\r\n-----------                 -------------\r\n        if change > amount: =>           \r\n        if change > money:  <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    def count_helper(change, amount):\n        if amount < 0:\n            return 0\n        if amount == 0:\n            return 1\n        if change > money:\n            return 0\n        else:\n            money_present = count_helper(change, amount - change)\n            money_absent = count_helper(2* change, amount)\n        return money_present + money_absent \n\n    return count_helper(1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    def count_helper(change, amount):\n        if amount < 0:\n            return 0\n        if amount == 0:\n            return 1\n        if change > amount:\n            return 0\n        else:\n            money_present = count_helper(change, amount - change)\n            money_absent = count_helper(2* change, amount)\n        return money_present + money_absent \n\n    return count_helper(1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_helper(change, amount):\r\n        if amount<0:\r\n            return 0\r\n        if amount==0:\r\n            return 1\r\n        if change>money:\r\n            return 0\r\n        else:\r\n            money_present = count_helper(change, amount-change)\r\n            money_absent = count_helper(2*change, amount)\r\n        return money_present+k\r\n    return count_helper(1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 330, in count_change","    return count_helper(1, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 323, in count_helper","    if change > money:","NameError: name 'money' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":393,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                                                                        \r\n-----------                                                                                                                                        \r\n    factor = 1                                                                                                                                     \r\n    while factor * 2<= amount:                                                                                                                     \r\n        factor = factor * 2                                                                                                                        \r\n    def c (n, factor):                                                                                                                             \r\n        if factor == 0:                                                                                                                            \r\n            return 0                                                                                                                               \r\n        if n == 0:                                                                                                                                 \r\n            return 1                                                                                                                               \r\n        if n < 0:                                                                                                                                  \r\n            return 0                                                                                                                               \r\n        else:                                                                                                                                      \r\n            return c(n, factor//2) + c(n-factor,factor)                                                                                            \r\n    return c(amount, factor)                                                                                                                       \r\n                                                                                                                                                   \r\n                                                                                                                                                   \r\n    if amount == 0:                                                                                                                                \r\n        return 1                                                                                                                                   \r\n    if amount < 0:                                                                                                                                 \r\n        return 0                                                                                                                                   \r\n    return count_change(amount - 1) + count_change(amount-2) + count_change (amount-4) + count_change(amount-6) + count_change(amount-8)+count_c...\r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    if amount == 0:\n        return 1\n    if amount < 0:\n        return 0\n    return count_change(amount - 1) + count_change(amount-2) + count_change (amount-4) + count_change(amount-6) + count_change(amount-8)+count_change(amount-16) + count_change(amount-32) + count_change(amount-64)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    factor = 1\n    while factor * 2<= amount:\n        factor = factor * 2 \n    def c (n, factor):\n        if factor == 0:\n            return 0\n        if n == 0:\n            return 1\n        if n < 0:\n            return 0\n        else:\n            return c(n, factor//2) + c(n-factor,factor)\n\n    return c(amount, factor)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    if amount==0:\r\n        return 1\r\n    if amount<0:\r\n        return 0\r\n    return count_change(amount-1)+count_change(amount-2)+count_change(amount-4)+count_change(amount-6)+count_change(amount-8)+count_change(amount-16)+count_change(amount-32)+count_change(amount-64)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","33","","# Error: expected","#     6","# but got","#     33","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":394,"studentId":0,"date":null,"diff":"\r\nInputObject                             SideIndicator\r\n-----------                             -------------\r\n    coins, i = [], 0                    =>           \r\n        if amount < 0 or coins == []:   =>           \r\n    coins, i = [], 1                    <=           \r\n        if (amount < 0 or coins == []): <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    coins, i = [], 1\n    while 2**i < amount:\n        coins.append(2**i)\n        i += 1\n    def cc(amount, coins):\n        if (amount < 0 or coins == []):\n            return 0\n        if amount == 0:\n            return 1\n        else:\n            return cc(amount, coins[1:]) + cc(amount - coins[0], coins)\n    return cc(amount, coins)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    coins, i = [], 0\n    while 2**i < amount:\n        coins.append(2**i)\n        i += 1\n    def cc(amount, coins):\n        if amount < 0 or coins == []:\n            return 0\n        if amount == 0:\n            return 1\n        else:\n            return cc(amount, coins[1:]) + cc(amount - coins[0], coins)\n    return cc(amount, coins)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":395,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                              SideIndicator\r\n-----------                                                                              -------------\r\n    def mid_change(x, k):                                                                =>           \r\n        if k == 0:                                                                       =>           \r\n            return 1                                                                     =>           \r\n        elif x >= pow(2, k):                                                             =>           \r\n            return mid_change(x - pow(2, k), k) + mid_change(x, k - 1)                   =>           \r\n        else:                                                                            =>           \r\n            return mid_change(x, k - 1)                                                  =>           \r\n    return mid_change(amount, amount.bit_length() - 1)                                   =>           \r\n                                                                                         =>           \r\n    if amount < 0:                                                                       <=           \r\n        return 0                                                                         <=           \r\n    if amount == 0:                                                                      <=           \r\n        return 1                                                                         <=           \r\n    if amount == 1:                                                                      <=           \r\n        return 1                                                                         <=           \r\n    else:                                                                                <=           \r\n        power = largest_power_of_two_less_than_or_equal(amount)                          <=           \r\n        if amount == pow(2, power):                                                      <=           \r\n            return 1 + count_change(pow(2, power - 1)) + count_change(pow(2, power - 2)) <=           \r\n        return count_change(pow(2, power)) + count_change(amount - pow(2, power))        <=           \r\n                                                                                         <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if amount < 0:\n        return 0\n    if amount == 0:\n        return 1\n    if amount == 1:\n        return 1\n    else:\n        power = largest_power_of_two_less_than_or_equal(amount)\n        if amount == pow(2, power):\n            return 1 + count_change(pow(2, power - 1)) + count_change(pow(2, power - 2))\n        return count_change(pow(2, power)) + count_change(amount - pow(2, power))\n\ndef largest_power_of_two_less_than_or_equal(amount):\n    n = 0\n    while pow(2, n) <= amount:\n        n += 1\n    return n - 1\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def mid_change(x, k):\n        if k == 0:\n            return 1\n        elif x >= pow(2, k):\n            return mid_change(x - pow(2, k), k) + mid_change(x, k - 1)\n        else:\n            return mid_change(x, k - 1)\n    return mid_change(amount, amount.bit_length() - 1)\n    \ndef largest_power_of_two_less_than_or_equal(amount):\n    n = 0\n    while pow(2, n) <= amount:\n        n += 1\n    return n - 1\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    if amount<0:\r\n        return 0\r\n    if amount==0:\r\n        return 1\r\n    if amount==1:\r\n        return 1\r\n    else:\r\n        power = largest_power_of_two_less_than_or_equal(amount)\r\n        if amount==pow(2, power):\r\n            return 1+count_change(pow(2, power-1))+count_change(pow(2, power-2))\r\n        return count_change(pow(2, power))+count_change(amount-pow(2, power))\r\ndef largest_power_of_two_less_than_or_equal(amount):\r\n    n = 0\r\n    while pow(2, n)<=amount:\r\n        n += 1\r\n    return n-1\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 326, in count_change","    return 1 + count_change(pow(2, power - 1)) + count_change(pow(2, power - 2))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 327, in count_change","    return count_change(pow(2, power)) + count_change(amount - pow(2, power))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 326, in count_change","    return 1 + count_change(pow(2, power - 1)) + count_change(pow(2, power - 2))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 327, in count_change","    return count_change(pow(2, power)) + count_change(amount - pow(2, power))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 326, in count_change","    return 1 + count_change(pow(2, power - 1)) + count_change(pow(2, power - 2))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 324, in count_change","    power = largest_power_of_two_less_than_or_equal(amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 331, in largest_power_of_two_less_than_or_equal","    while pow(2, n) <= amount:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":396,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n                                                =>           \r\n    return helper(amount, get_max_cent(amount)) =>           \r\n                                                <=           \r\n                                                <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(amount, max_size):\n        if max_size == 1:               #Only one way to represent zero\n            return 1\n        if amount < max_size:\n            return helper(amount, max_size // 2)\n        elif amount == max_size:\n            return 1 + helper(amount, max_size // 2)\n        else:\n            return helper(amount, max_size // 2) + helper(amount - max_size, max_size)\n\n\n    def get_max_cent(amount):\n        x = 0\n        while (pow(2, x) <= amount):\n            x += 1\n        return pow(2, x-1)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(amount, max_size):\n        if max_size == 1:               #Only one way to represent zero\n            return 1\n        if amount < max_size:\n            return helper(amount, max_size // 2)\n        elif amount == max_size:\n            return 1 + helper(amount, max_size // 2)\n        else:\n            return helper(amount, max_size // 2) + helper(amount - max_size, max_size)\n\n    def get_max_cent(amount):\n        x = 0\n        while (pow(2, x) <= amount):\n            x += 1\n        return pow(2, x-1)\n        \n    return helper(amount, get_max_cent(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","","# Error: expected","#     6","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":397,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        #if amount==1:  =>           \r\n            #return 1   =>           \r\n        if amount==0:   =>           \r\n        if amount==1:   <=           \r\n            return 1    <=           \r\n        elif amount==0: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count(amount,coin):\n        if amount==1:\n            return 1\n        elif amount==0:\n            return 1\n        elif coin>amount:\n            return 0\n        elif amount<0:\n            return 0\n        else:\n            return count(amount-coin,coin)+count(amount,coin*2)\n    return count(amount,1)\n\n            \n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count(amount,coin):\n        #if amount==1:\n            #return 1\n        if amount==0:\n            return 1\n        elif amount<0:\n            return 0\n        elif coin>amount:\n            return 0\n        else:\n            return count(amount-coin,coin)+count(amount,coin*2)\n    return count(amount,1)\n\n            \n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count(amount, coin):\r\n        if amount==1:\r\n            return 1\r\n        elif amount==0:\r\n            return 1\r\n        elif coin>amount:\r\n            return 0\r\n        elif amount<0:\r\n            return 0\r\n        else:\r\n            return count(amount-coin, coin)+count(amount, coin*2)\r\n    return count(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","11","","# Error: expected","#     6","# but got","#     11","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":398,"studentId":0,"date":null,"diff":"\r\nInputObject                                                       SideIndicator\r\n-----------                                                       -------------\r\n    def next_lowest_multiple(amount):                             =>           \r\n        \"\"\"Returns the next lowest number that is a multiple of 2 =>           \r\n        i = 2                                                     =>           \r\n        if amount < 2:                                            =>           \r\n            return amount                                         =>           \r\n        while i < amount:                                         =>           \r\n            i = i * 2                                             =>           \r\n        return i                                                  =>           \r\n            num_coins(amount, size // 2)                          =>           \r\n    return num_coins(amount, next_lowest_multiple(amount))        =>           \r\n                                                                  =>           \r\n                                                                  =>           \r\n    def next_lowest_multiple():                                   <=           \r\n        \"\"\"Returns the next lowest number that is divisible by 2  <=           \r\n        i = amount - 1                                            <=           \r\n        while i >=1:                                              <=           \r\n            if i % 2 == 0:                                        <=           \r\n                return i                                          <=           \r\n            i -= 1                                                <=           \r\n        return 1                                                  <=           \r\n            num_coins(amount, next_lowest_multiple())             <=           \r\n    if amount % 2 == 0:                                           <=           \r\n        return num_coins(amount, amount)                          <=           \r\n    else:                                                         <=           \r\n        return 1 + num_coins(amount-1, amount)                    <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def next_lowest_multiple():\n        \"\"\"Returns the next lowest number that is divisible by 2\n        \"\"\"\n        i = amount - 1\n        while i >=1:\n            if i % 2 == 0:\n                return i\n            i -= 1\n        return 1\n\n    def num_coins(amount, size):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif size == 0:\n            return 0\n        else:\n            return num_coins(amount - size, size) +\\\n            num_coins(amount, next_lowest_multiple())\n    if amount % 2 == 0:\n        return num_coins(amount, amount)\n    else:\n        return 1 + num_coins(amount-1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def next_lowest_multiple(amount):\n        \"\"\"Returns the next lowest number that is a multiple of 2\n        \"\"\"\n        i = 2\n        if amount < 2:\n            return amount\n        while i < amount:\n            i = i * 2\n        return i\n\n\n    def num_coins(amount, size):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif size == 0:\n            return 0\n        else:\n            return num_coins(amount - size, size) +\\\n            num_coins(amount, size // 2)\n\n    return num_coins(amount, next_lowest_multiple(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 333, in num_coins","    num_coins(amount, next_lowest_multiple())","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 333, in num_coins","    num_coins(amount, next_lowest_multiple())","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 333, in num_coins","    num_coins(amount, next_lowest_multiple())","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 333, in num_coins","    num_coins(amount, next_lowest_multiple())","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 333, in num_coins","    num_coins(amount, next_lowest_multiple())","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 332, in num_coins","    return num_coins(amount - size, size) +\\","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 325, in num_coins","    if amount == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":399,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n        if amt == 0:     =>           \r\n        elif amt < 0:    =>           \r\n        if amount == 0:  <=           \r\n        elif amount < 0: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    min = 1\n    def times(amt, num):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        if num > amt:\n            return 0\n        return  times(amt - num, num) + times(amt, num * 2)\n    return times(amount, min)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    min = 1\n    def times(amt, num):\n        if amt == 0:\n            return 1\n        elif amt < 0:\n            return 0\n        if num > amt:\n            return 0\n        return  times(amt - num, num) + times(amt, num * 2)\n    return times(amount, min)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    amount = 1\r\n    def times(amt, num):\r\n        if amount==0:\r\n            return 1\r\n        elif amount<0:\r\n            return 0\r\n        if num>amt:\r\n            return 0\r\n        return times(amt-num, num)+times(amt, num*2)\r\n    return times(amount, min)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":400,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n    if len(coins) == 0: =>           \r\n        return 0        =>           \r\n\r\n\r\n","before":"def count_change(amount, coins=(64, 32, 16, 8, 4, 2, 1)):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    if amount == 0:\n        return 1\n    if amount < 0:\n        return 0\n    return count_change(amount, coins[1:]) + count_change(amount - coins[0], coins)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount, coins=(64, 32, 16, 8, 4, 2, 1)):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    if amount == 0:\n        return 1\n    if amount < 0:\n        return 0\n    if len(coins) == 0:\n        return 0\n    return count_change(amount, coins[1:]) + count_change(amount - coins[0], coins)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 357, in count_change","    return count_change(amount, coins[1:]) + count_change(amount - coins[0], coins)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 357, in count_change","    return count_change(amount, coins[1:]) + count_change(amount - coins[0], coins)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 357, in count_change","    return count_change(amount, coins[1:]) + count_change(amount - coins[0], coins)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 357, in count_change","    return count_change(amount, coins[1:]) + count_change(amount - coins[0], coins)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 357, in count_change","    return count_change(amount, coins[1:]) + count_change(amount - coins[0], coins)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 357, in count_change","    return count_change(amount, coins[1:]) + count_change(amount - coins[0], coins)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 353, in count_change","    if amount == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":401,"studentId":0,"date":null,"diff":"\r\nInputObject                           SideIndicator\r\n-----------                           -------------\r\n                                      =>           \r\n    print(10, rec_count_change(10))   <=           \r\n    print(20, rec_count_change(20))   <=           \r\n    print(100, rec_count_change(100)) <=           \r\ndef rec_count_change(amount):         <=           \r\n                                      <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    print(10, rec_count_change(10))\n    print(20, rec_count_change(20))\n    print(100, rec_count_change(100))\n\ndef rec_count_change(amount):\n    if amount == 1:\n        return 1\n    if amount <= 0:\n        return 0\n    if amount % 2 == 1:\n        return count_change(amount - 1)\n    else:\n        return count_change(amount//2) + count_change(amount -1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    if amount == 1:\n        return 1\n    if amount <= 0:\n        return 0\n    if amount % 2 == 1:\n        return count_change(amount - 1)\n    else:\n        return count_change(amount//2) + count_change(amount -1)\n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 316, in rec_count_change","    return count_change(amount//2) + count_change(amount -1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 304, in count_change","    print(10, rec_count_change(10))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 316, in rec_count_change","    return count_change(amount//2) + count_change(amount -1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 304, in count_change","    print(10, rec_count_change(10))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 316, in rec_count_change","    return count_change(amount//2) + count_change(amount -1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 304, in count_change","    print(10, rec_count_change(10))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 309, in rec_count_change","    if amount == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":402,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                 SideIndicator\r\n-----------                                                                 -------------\r\n        return (2 ** power) // 2                                            =>           \r\n    def count_partitions(n, m):                                             =>           \r\n        if n == 0:                                                          =>           \r\n            return 1                                                        =>           \r\n        elif n < 0:                                                         =>           \r\n            return 0                                                        =>           \r\n        elif m == 0:                                                        =>           \r\n            return 0                                                        =>           \r\n        else:                                                               =>           \r\n            return count_partitions(n-m, m) + count_partitions(n, m // 2)   =>           \r\n    return count_partitions(amount, highest)                                =>           \r\n            if n ** power == amount:                                        <=           \r\n                return (n ** power) // 2                                    <=           \r\n    return highest                                                          <=           \r\n    # def count_partitions(n, m):                                           <=           \r\n    #     if n == 0:                                                        <=           \r\n    #     elif n < 0:                                                       <=           \r\n    #         return 0                                                      <=           \r\n    #     elif m == 0:                                                      <=           \r\n    #         return 0                                                      <=           \r\n    #         return count_partitions(n-m, m) + count_partitions(n, m // 2) <=           \r\n    # return count_partitions(amount, highest)                              <=           \r\n    #         return 1                                                      <=           \r\n    #     else:                                                             <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def highest_power(n):\n        power = 0\n        while n ** power <= amount:\n            if n ** power == amount:\n                return (n ** power) // 2\n            power += 1\n    highest = highest_power(2)\n    return highest\n    # def count_partitions(n, m):\n    #     if n == 0:\n    #         return 1\n    #     elif n < 0:\n    #         return 0\n    #     elif m == 0:\n    #         return 0\n    #     else:\n    #         return count_partitions(n-m, m) + count_partitions(n, m // 2)\n    # return count_partitions(amount, highest)\n\n\n    # max_coin_value = 2\n    # while max_coin_value <= amount:\n    #     max_coin_value = max_coin_value * 2\n    # max_coin_value = max_coin_value / 2\n    # def helper(amount, up_to, power):\n    #     # count ways to partition amount using parts up to max_coin_value\n    #     if amount == 0:\n    #         return 1\n    #     else:\n    #         return\n    # return helper(amount, max_coin_value, 0)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def highest_power(n):\n        power = 0\n        while n ** power <= amount:\n            power += 1\n        return (2 ** power) // 2\n    highest = highest_power(2)\n    def count_partitions(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, m // 2)\n    return count_partitions(amount, highest)\n\n\n    # max_coin_value = 2\n    # while max_coin_value <= amount:\n    #     max_coin_value = max_coin_value * 2\n    # max_coin_value = max_coin_value / 2\n    # def helper(amount, up_to, power):\n    #     # count ways to partition amount using parts up to max_coin_value\n    #     if amount == 0:\n    #         return 1\n    #     else:\n    #         return\n    # return helper(amount, max_coin_value, 0)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","","# Error: expected","#     6","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":403,"studentId":0,"date":null,"diff":"\r\nInputObject                                        SideIndicator\r\n-----------                                        -------------\r\n        return has_largest + does_not_have_largest =>           \r\n        return largest + does_not_have_largest     <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    def largest_coin(n):\n        n = 0\n        while 2**n <= amount:\n            n = n + 1\n        return n - 1\n\n    def counter(num, largest):\n        if num < 0:\n            return 0\n        elif num == 0:\n            return 1\n        elif largest == 0:\n            return 1\n        has_largest = counter(num - (2**largest), largest)\n        does_not_have_largest = counter(num, largest - 1)\n        return largest + does_not_have_largest\n\n    largest = largest_coin(amount)\n    return counter(amount, largest)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    def largest_coin(n):\n        n = 0\n        while 2**n <= amount:\n            n = n + 1\n        return n - 1\n\n    def counter(num, largest):\n        if num < 0:\n            return 0\n        elif num == 0:\n            return 1\n        elif largest == 0:\n            return 1\n        has_largest = counter(num - (2**largest), largest)\n        does_not_have_largest = counter(num, largest - 1)\n        return has_largest + does_not_have_largest\n\n    largest = largest_coin(amount)\n    return counter(amount, largest)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def largest_coin(n):\r\n        n = 0\r\n        while 2**n<=amount:\r\n            n = n+1\r\n        return n-1\r\n    def counter(num, largest):\r\n        if num<0:\r\n            return 0\r\n        elif num==0:\r\n            return 1\r\n        elif largest==0:\r\n            return 1\r\n        has_largest = counter(num-(2**largest), largest)\r\n        does_not_have_largest = counter(num, largest-1)\r\n        return largest+k\r\n    largest = largest_coin(amount)\r\n    return counter(amount, largest)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","4","","# Error: expected","#     6","# but got","#     4","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":404,"studentId":0,"date":null,"diff":"\r\nInputObject                               SideIndicator\r\n-----------                               -------------\r\n    return helper_function(x, amount)     =>           \r\n        return helper_function(x, amount) <=           \r\n                                          <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x = 1\n    while x < amount:\n        x = x*2\n\n    def helper_function(x, y):\n        if x == 0 or x == 1:\n            return 1\n        elif y < 0 or x < 1:\n            return 0\n        else:\n            return helper_function(x, y-x) + helper_function(x//2, y)\n        return helper_function(x, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x = 1\n    while x < amount:\n        x = x*2\n    def helper_function(x, y):\n        if x == 0 or x == 1:\n            return 1\n        elif y < 0 or x < 1:\n            return 0\n        else:\n            return helper_function(x, y-x) + helper_function(x//2, y)\n    return helper_function(x, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","","# Error: expected","#     6","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":405,"studentId":0,"date":null,"diff":"\r\nInputObject                  SideIndicator\r\n-----------                  -------------\r\n    coins = []               =>           \r\n    n = 0                    =>           \r\n    while 2**n <= amount:    =>           \r\n        coins.append((2**n)) =>           \r\n        n += 1               =>           \r\n                             =>           \r\n                             =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def count_partitions(amount, lst):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif len(lst) == 0:\n            return 0\n\n        else:\n            withit= count_partitions(amount-lst[len(lst)-1], lst)\n            without = count_partitions(amount, lst[:len(lst)-1])\n            return withit + without\n\n    return count_partitions(amount, coins)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    coins = []\n    n = 0\n    while 2**n <= amount:\n        coins.append((2**n))\n        n += 1\n\n\n    def count_partitions(amount, lst):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif len(lst) == 0:\n            return 0\n\n        else:\n            withit= count_partitions(amount-lst[len(lst)-1], lst)\n            without = count_partitions(amount, lst[:len(lst)-1])\n            return withit + without\n\n    return count_partitions(amount, coins)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 334, in count_change","    return count_partitions(amount, coins)","NameError: name 'coins' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":406,"studentId":0,"date":null,"diff":"\r\nInputObject                                             SideIndicator\r\n-----------                                             -------------\r\n    def count_rules(amount,lcoin=1):                    =>           \r\n        elif amount == lcoin :                          =>           \r\n        mincoin = count_rules(amount - lcoin,lcoin)     =>           \r\n        nomincoin = count_rules(amount,2*lcoin)         =>           \r\n        return mincoin + nomincoin                      =>           \r\n                                                        =>           \r\n    return count_rules(amount)                          =>           \r\n                                                        =>           \r\n    return count_rules(1,amount)                        <=           \r\n    def count_rules(lcoin,amount):                      <=           \r\n        elif amount == 0:                               <=           \r\n        else:                                           <=           \r\n            mincoin = count_rules(lcoin,amount - lcoin) <=           \r\n            nomincoin = count_rules(2*lcoin,amount)     <=           \r\n            return mincoin + nomincoin                  <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return count_rules(1,amount)\n    def count_rules(lcoin,amount):\n        if amount < 0:\n            return 0\n        elif lcoin > amount:\n            return 0\n        elif amount == 0:\n            return 1\n        else:\n            mincoin = count_rules(lcoin,amount - lcoin)\n            nomincoin = count_rules(2*lcoin,amount)\n            return mincoin + nomincoin\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_rules(amount,lcoin=1):\n        if amount < 0:\n            return 0\n        elif lcoin > amount:\n            return 0\n        elif amount == lcoin :\n            return 1\n        mincoin = count_rules(amount - lcoin,lcoin)\n        nomincoin = count_rules(amount,2*lcoin)\n        return mincoin + nomincoin\n    \n    return count_rules(amount)\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    return count_rules(1, amount)\r\n    def count_rules(lcoin, amount):\r\n        if amount<0:\r\n            return 0\r\n        elif lcoin>amount:\r\n            return 0\r\n        elif amount==0:\r\n            return 1\r\n        else:\r\n            mincoin = count_rules(lcoin, amount-lcoin)\r\n            nomincoin = count_rules(2*lcoin, amount)\r\n            return mincoin+k\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 316, in count_change","    return count_rules(1,amount)","UnboundLocalError: local variable 'count_rules' referenced before assignment","","# Error: expected","#     6","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":407,"studentId":0,"date":null,"diff":"\r\nInputObject                                                     SideIndicator\r\n-----------                                                     -------------\r\n    def count_change_helper(coin, amount):                      =>           \r\n        if amount < 0:                                          =>           \r\n        elif amount == 0:                                       =>           \r\n        elif coin > amount:                                     =>           \r\n            with_min = count_change_helper(coin, amount - coin) =>           \r\n            without_min = count_change_helper(2 * coin, amount) =>           \r\n    return count_change_helper(1, amount)                       =>           \r\n    def count_change_helper(coin, price):                       <=           \r\n        if price < 0:                                           <=           \r\n        elif price == 0:                                        <=           \r\n        elif coin > price:                                      <=           \r\n            with_min = count_change_helper(coin, price - coin)  <=           \r\n            without_min = count_change_helper(2 * coin, price)  <=           \r\n    return count_change_helper(1, price)                        <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def count_change_helper(coin, price):\n        if price < 0:\n            return 0\n        elif price == 0:\n            return 1\n        elif coin > price:\n            return 0\n        else:\n            with_min = count_change_helper(coin, price - coin)\n            without_min = count_change_helper(2 * coin, price)\n            return with_min + without_min\n    return count_change_helper(1, price)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def count_change_helper(coin, amount):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif coin > amount:\n            return 0\n        else:\n            with_min = count_change_helper(coin, amount - coin)\n            without_min = count_change_helper(2 * coin, amount)\n            return with_min + without_min\n    return count_change_helper(1, amount)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_change_helper(coin, price):\r\n        if price<0:\r\n            return 0\r\n        elif price==0:\r\n            return 1\r\n        elif coin>price:\r\n            return 0\r\n        else:\r\n            with_min = count_change_helper(coin, price-coin)\r\n            without_min = count_change_helper(2*coin, price)\r\n            return with_min+k\r\n    return count_change_helper(1, price)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 331, in count_change","    return count_change_helper(1, price)","NameError: name 'price' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":408,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                  SideIndicator\r\n-----------                                                                  -------------\r\n                combinations += ceiling(amount_two - (2**number), 0, number) =>           \r\n                combinations += ceiling(amount_two - number, 0, number)      <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def ceiling(amount_two, coin_size, cap):\n        while amount_two / (2**(coin_size+1)) >= 1 and coin_size < cap:\n            coin_size += 1\n        combinations = 0\n        if amount_two == 0:\n            return 1\n        else:\n            for number in range(0, coin_size + 1):\n                combinations += ceiling(amount_two - number, 0, number)\n            return combinations\n    return ceiling(amount, 0, 1000)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def ceiling(amount_two, coin_size, cap):\n        while amount_two / (2**(coin_size+1)) >= 1 and coin_size < cap:\n            coin_size += 1\n        combinations = 0\n        if amount_two == 0:\n            return 1\n        else:\n            for number in range(0, coin_size + 1):\n                combinations += ceiling(amount_two - (2**number), 0, number)\n            return combinations\n    return ceiling(amount, 0, 1000)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 301, in ceiling","    combinations += ceiling(amount_two - number, 0, number)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 301, in ceiling","    combinations += ceiling(amount_two - number, 0, number)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 301, in ceiling","    combinations += ceiling(amount_two - number, 0, number)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 301, in ceiling","    combinations += ceiling(amount_two - number, 0, number)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 301, in ceiling","    combinations += ceiling(amount_two - number, 0, number)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 301, in ceiling","    combinations += ceiling(amount_two - number, 0, number)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 300, in ceiling","    for number in range(0, coin_size + 1):","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":409,"studentId":0,"date":null,"diff":"\r\nInputObject                           SideIndicator\r\n-----------                           -------------\r\n        if num <= 0 or amount < 0:    =>           \r\n        elif amount == 0 or num == 1: =>           \r\n        if num <= 0 or amount <= 0:   <=           \r\n        elif amount == 1 or num == 1: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    from operator import pow\n    def find_exponent(amount):\n        n = 0\n        starting_amount = amount\n        if amount % 2 != 0:\n            return find_exponent(starting_amount - 1)\n        else:\n            while amount > 1:\n                amount = amount / 2\n                n += 1\n            if amount == 1:\n                return pow(2, n), n\n            else:\n                find_exponent(starting_amount - 1)\n            return pow(2, n - 1), n-1\n\n    num, exp = find_exponent(amount)\n\n    def count_part(amount, num):\n        if num <= 0 or amount <= 0:\n            return 0\n        elif amount == 1 or num == 1:\n            return 1\n        else:\n            return count_part(amount - num, num) + count_part(amount, num / 2)\n    return count_part(amount, num)\n\n    '''def count_part(amount, num):\n        if amount == 0:\n            return 1\n        elif num == 1 or amount == 1:\n            return 1\n        elif num <= 0 or amount < 1:\n            return 0\n        else:\n            new_amount = amount - pow(2, exp)\n            x = pow(2, exp)\n            y = pow(2, exp - 1)\n            with_num = count_part(int(new_amount), int(x))\n            without_num = count_part(amount, int(y))\n            return with_num + without_num\n    return count_part(amount, num)'''\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    from operator import pow\n    def find_exponent(amount):\n        n = 0\n        starting_amount = amount\n        if amount % 2 != 0:\n            return find_exponent(starting_amount - 1)\n        else:\n            while amount > 1:\n                amount = amount / 2\n                n += 1\n            if amount == 1:\n                return pow(2, n), n\n            else:\n                find_exponent(starting_amount - 1)\n            return pow(2, n - 1), n-1\n\n    num, exp = find_exponent(amount)\n\n    def count_part(amount, num):\n        if num <= 0 or amount < 0:\n            return 0\n        elif amount == 0 or num == 1:\n            return 1\n        else:\n            return count_part(amount - num, num) + count_part(amount, num / 2)\n    return count_part(amount, num)\n\n    '''def count_part(amount, num):\n        if amount == 0:\n            return 1\n        elif num == 1 or amount == 1:\n            return 1\n        elif num <= 0 or amount < 1:\n            return 0\n        else:\n            new_amount = amount - pow(2, exp)\n            x = pow(2, exp)\n            y = pow(2, exp - 1)\n            with_num = count_part(int(new_amount), int(x))\n            without_num = count_part(amount, int(y))\n            return with_num + without_num\n    return count_part(amount, num)'''\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","10","","# Error: expected","#     14","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":410,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                               SideIndicator\r\n-----------                                                                               -------------\r\n    def helper(min_cent, remaining):                                                      =>           \r\n        if remaining == 0:                                                                =>           \r\n        elif remaining < 0 or min_cent > remaining:                                       =>           \r\n            return helper(min_cent, remaining - min_cent) + helper(min_cent*2, remaining) =>           \r\n    return helper(1, amount)                                                              =>           \r\n                                                                                          =>           \r\n                                                                                          =>           \r\n                                                                                          =>           \r\n    def helper(a):                                                                        <=           \r\n        if a < 2:                                                                         <=           \r\n            return 0                                                                      <=           \r\n            return 1 + helper(a/2)                                                        <=           \r\n        if amount == 0:                                                                   <=           \r\n        elif amount == 1:                                                                 <=           \r\n        else:                                                                             <=           \r\n            max_cent = 2**helper(amount)                                                  <=           \r\n        if max_cent == amount:                                                            <=           \r\n            return 1 + count_change(amount-1)                                             <=           \r\n        else:                                                                             <=           \r\n            return 1 + count_change(max_cent) + count_change(amount-max_cent)             <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper(a):\n        if a < 2:\n            return 0\n        else:\n            return 1 + helper(a/2)\n        if amount == 0:\n            return 0\n        elif amount == 1:\n            return 1\n        else:\n            max_cent = 2**helper(amount)\n        if max_cent == amount:\n            return 1 + count_change(amount-1)\n        else:\n            return 1 + count_change(max_cent) + count_change(amount-max_cent)\n    \n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \n\n    def helper(min_cent, remaining):\n        if remaining == 0:\n            return 1\n        elif remaining < 0 or min_cent > remaining:\n            return 0\n        else:\n            return helper(min_cent, remaining - min_cent) + helper(min_cent*2, remaining)\n\n    return helper(1, amount)\n    \n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","","# Error: expected","#     6","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":411,"studentId":0,"date":null,"diff":"\r\nInputObject                                              SideIndicator\r\n-----------                                              -------------\r\n    def counter(minimum, amount):                        =>           \r\n        if amount < 0:                                   =>           \r\n            min_ans = counter(minimum, amount - minimum) =>           \r\n            ans = counter(2*minimum, amount)             =>           \r\n    def counter(minimum, amt):                           <=           \r\n        if amt < 0:                                      <=           \r\n            min_ans = counter(minimum, amt - minimum)    <=           \r\n            ans = counter(2*minimum, amt)                <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def counter(minimum, amt):\n        if amt < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif minimum > amount:\n            return 0\n        else:\n            min_ans = counter(minimum, amt - minimum)\n            ans = counter(2*minimum, amt)\n            return min_ans + ans\n    return counter(1, amount)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def counter(minimum, amount):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif minimum > amount:\n            return 0\n        else:\n            min_ans = counter(minimum, amount - minimum)\n            ans = counter(2*minimum, amount)\n            return min_ans + ans\n    return counter(1, amount)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def counter(minimum, amt):\r\n        if amt<0:\r\n            return 0\r\n        elif amount==0:\r\n            return 1\r\n        elif minimum>amount:\r\n            return 0\r\n        else:\r\n            min_ans = counter(minimum, amt-minimum)\r\n            ans = counter(2*minimum, amt)\r\n            return min_ans+k\r\n    return counter(1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":412,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n        print(amount, largest_denomination) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def power_of_two(amount):\n        power = 0\n        nth_power = 0\n        while 2 * nth_power < amount:\n            nth_power = 2 ** power\n            power += 1\n        return nth_power\n    max_currency = power_of_two(amount)\n    def count_change_recurse(amount, largest_denomination):\n        print(amount, largest_denomination)\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif largest_denomination < 1:\n            return 0\n        else:\n            return count_change_recurse(amount - largest_denomination, largest_denomination) + count_change_recurse(amount, largest_denomination / 2)\n    return count_change_recurse(amount, max_currency)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def power_of_two(amount):\n        power = 0\n        nth_power = 0\n        while 2 * nth_power < amount:\n            nth_power = 2 ** power\n            power += 1\n        return nth_power\n    max_currency = power_of_two(amount)\n    def count_change_recurse(amount, largest_denomination):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif largest_denomination < 1:\n            return 0\n        else:\n            return count_change_recurse(amount - largest_denomination, largest_denomination) + count_change_recurse(amount, largest_denomination / 2)\n    return count_change_recurse(amount, max_currency)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","7 4","3 4","-1 4","3 2.0","1.0 2.0","-1.0 2.0","1.0 1.0","0.0 1.0","1.0 0.5","3 1.0","2.0 1.0","1.0 1.0","0.0 1.0","1.0 0.5","2.0 0.5","3 0.5","7 2.0","5.0 2.0","3.0 2.0","1.0 2.0","-1.0 2.0","1.0 1.0","0.0 1.0","1.0 0.5","3.0 1.0","2.0 1.0","1.0 1.0","0.0 1.0","1.0 0.5","2.0 0.5","3.0 0.5","5.0 1.0","4.0 1.0","3.0 1.0","2.0 1.0","1.0 1.0","0.0 1.0","1.0 0.5","2.0 0.5","3.0 0.5","4.0 0.5","5.0 0.5","7 1.0","6.0 1.0","5.0 1.0","4.0 1.0","3.0 1.0","2.0 1.0","1.0 1.0","0.0 1.0","1.0 0.5","2.0 0.5","3.0 0.5","4.0 0.5","5.0 0.5","6.0 0.5","7 0.5","6","","# Error: expected","#     6","# but got","#     7 4","#     3 4","#     -1 4","#     3 2.0","#     1.0 2.0","#     -1.0 2.0","#     1.0 1.0","#     0.0 1.0","#     1.0 0.5","#     3 1.0","#     2.0 1.0","#     1.0 1.0","#     0.0 1.0","#     1.0 0.5","#     2.0 0.5","#     3 0.5","#     7 2.0","#     5.0 2.0","#     3.0 2.0","#     1.0 2.0","#     -1.0 2.0","#     1.0 1.0","#     0.0 1.0","#     1.0 0.5","#     3.0 1.0","#     2.0 1.0","#     1.0 1.0","#     0.0 1.0","#     1.0 0.5","#     2.0 0.5","#     3.0 0.5","#     5.0 1.0","#     4.0 1.0","#     3.0 1.0","#     2.0 1.0","#     1.0 1.0","#     0.0 1.0","#     1.0 0.5","#     2.0 0.5","#     3.0 0.5","#     4.0 0.5","#     5.0 0.5","#     7 1.0","#     6.0 1.0","#     5.0 1.0","#     4.0 1.0","#     3.0 1.0","#     2.0 1.0","#     1.0 1.0","#     0.0 1.0","#     1.0 0.5","#     2.0 0.5","#     3.0 0.5","#     4.0 0.5","#     5.0 0.5","#     6.0 0.5","#     7 0.5","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":413,"studentId":0,"date":null,"diff":"\r\nInputObject                                                            SideIndicator\r\n-----------                                                            -------------\r\n            return 1                                                   =>           \r\n            num1 = count_partitions(n-pow(2,m),m)                      =>           \r\n            num2 = count_partitions(n,m-1)                             =>           \r\n            return num1+num2                                           =>           \r\n    def at_most(num):                                                  =>           \r\n        i=0                                                            =>           \r\n        while pow(2,i) <=num:                                          =>           \r\n            i+=1                                                       =>           \r\n        return i-1                                                     =>           \r\n    mos=at_most(amount)                                                =>           \r\n    return count_partitions(amount,mos)                                =>           \r\n                                                                       =>           \r\n                                                                       =>           \r\n                                                                       =>           \r\n            return 0                                                   <=           \r\n            return count_partitions(n-m, m) + count_partitions(n, m-1) <=           \r\n    return count_partitions(amount,amount)                             <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    from math import log\n    def count_partitions(n,m):\n        \"\"\"Count the ways to partition n using parts up to m.\"\"\"\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, m-1)\n    return count_partitions(amount,amount)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    from math import log\n    def count_partitions(n,m):\n        \"\"\"Count the ways to partition n using parts up to m.\"\"\"\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 1\n        else:\n            num1 = count_partitions(n-pow(2,m),m)\n            num2 = count_partitions(n,m-1)\n            return num1+num2\n\n    def at_most(num):\n        i=0\n        while pow(2,i) <=num:\n            i+=1\n        return i-1\n\n    mos=at_most(amount)\n\n    return count_partitions(amount,mos)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_partitions(n, m):\r\n        if n==0:\r\n            return 1\r\n        elif n<0:\r\n            return 0\r\n        elif m==0:\r\n            return 0\r\n        elif m>n:\r\n            return 0\r\n        else:\r\n            return count_partitions(n-m, m)+count_partitions(n, m-1)\r\n    return count_partitions(amount, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-GreaterThan, Children(LeafConstNode(NameExpressionNode-m), SingleChild(LeafConstNode(NameExpressionNode-n)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(ConstantExpressionNode-0)))))))), 3), Selected(\\x => Match(x, StartsWithTarget(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"BinaryExpressionNode\")))))))))))))))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","15","","# Error: expected","#     6","# but got","#     15","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":414,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n            return 1 =>           \r\n            return 0 <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_partitions(amount, m):\n        \"\"\"count the ways to partition n using parts up to m\"\"\"\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif m == 1:\n            return 0\n        else:\n            return count_partitions(amount-m, m) + count_partitions(amount, m/2)\n    i = 0\n    while pow(2, i) < amount:\n        i += 1\n    m = pow(2, i-1)\n    return count_partitions(amount, m)\n\n    # i = 0\n    # while pow(2, i) < amount:\n    #     i += 1\n    # biggestcoin = pow(2, i-1)\n    # secondbiggest = pow(2, i-2)\n    # if amount == 1:\n    #     return 0\n    # if amount == 2:\n    #     return 2\n    # else:\n    #     return count_change(amount - biggestcoin) + count_change(amount/biggestcoin)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_partitions(amount, m):\n        \"\"\"count the ways to partition n using parts up to m\"\"\"\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif m == 1:\n            return 1\n        else:\n            return count_partitions(amount-m, m) + count_partitions(amount, m/2)\n    i = 0\n    while pow(2, i) < amount:\n        i += 1\n    m = pow(2, i-1)\n    return count_partitions(amount, m)\n\n    # i = 0\n    # while pow(2, i) < amount:\n    #     i += 1\n    # biggestcoin = pow(2, i-1)\n    # secondbiggest = pow(2, i-2)\n    # if amount == 1:\n    #     return 0\n    # if amount == 2:\n    #     return 2\n    # else:\n    #     return count_change(amount - biggestcoin) + count_change(amount/biggestcoin)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":415,"studentId":0,"date":null,"diff":"\r\nInputObject                               SideIndicator\r\n-----------                               -------------\r\n    return count_change_helper(amount, a) =>           \r\n    return count_change_helper(amount, b) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    # cashOptions = [1, 2, 4, 8, 16, 32, 64]\n    # totalCount = []\n    # for option in cashOptions:\n    #     for i in range(option, amount + 1):\n    #         totalCount[i] += totalCount[i - option]\n    # return(totalCount[amount])\n    a = 1\n    while (a * 2) < amount:\n        a *= 2\n\n\n    def count_change_helper(a, b):\n    #count the ways to partition a using parts up to b\n    #a = largest coin to a power of 2\n        if a == 0:\n            return 1\n        elif a < 0:\n            return 0\n        elif b == 0:\n            return 0\n        else:\n            return count_change_helper(a - b, b) + count_change_helper(a, b // 2)\n    return count_change_helper(amount, b)\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    # cashOptions = [1, 2, 4, 8, 16, 32, 64]\n    # totalCount = []\n    # for option in cashOptions:\n    #     for i in range(option, amount + 1):\n    #         totalCount[i] += totalCount[i - option]\n    # return(totalCount[amount])\n    a = 1\n    while (a * 2) < amount:\n        a *= 2\n\n\n    def count_change_helper(a, b):\n    #count the ways to partition a using parts up to b\n    #a = largest coin to a power of 2\n        if a == 0:\n            return 1\n        elif a < 0:\n            return 0\n        elif b == 0:\n            return 0\n        else:\n            return count_change_helper(a - b, b) + count_change_helper(a, b // 2)\n    return count_change_helper(amount, a)\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 440, in count_change","    return count_change_helper(amount, b)","NameError: name 'b' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":416,"studentId":0,"date":null,"diff":"\r\nInputObject        SideIndicator\r\n-----------        -------------\r\n        elif m>n:  =>           \r\n        elif m>=n: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count(n,m):\n        if n==0:\n            return 1\n        elif n <0:\n            return 0\n        elif m>=n:\n            return 0\n        else:\n            with_m=count(n-m,m)\n            without_m=count(n,m*2)\n            return with_m+without_m\n    return count(amount,1)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count(n,m):\n        if n==0:\n            return 1\n        elif n <0:\n            return 0\n        elif m>n:\n            return 0\n        else:\n            with_m=count(n-m,m)\n            without_m=count(n,m*2)\n            return with_m+without_m\n    return count(amount,1)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count(n, m):\r\n        if n==0:\r\n            return 1\r\n        elif n<0:\r\n            return 0\r\n        elif m>=n:\r\n            return 0\r\n        else:\r\n            with_m = count(n-m, m)\r\n            without_m = count(n, m*2)\r\n            return with_m+k\r\n    return count(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":417,"studentId":0,"date":null,"diff":"\r\nInputObject                                     SideIndicator\r\n-----------                                     -------------\r\n        return count_partitions(amount, 4)      =>           \r\n        return count_partitions(amount, 8)      =>           \r\n        return count_partitions(amount, 16)     =>           \r\n        return count_partitions(amount, 32)     =>           \r\n        return count_partitions(amount, 64)     =>           \r\n        return count_partitions(amount, 4, 4)   <=           \r\n        return count_partitions(amount, 8, 8)   <=           \r\n        return count_partitions(amount, 16, 16) <=           \r\n        return count_partitions(amount, 32,32)  <=           \r\n        return count_partitions(amount, 64, 64) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_partitions(amount, largest):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif largest == 0:\n            return 0\n        else:\n            with_largest = count_partitions(amount - largest, largest)\n            without_largest = count_partitions(amount, largest // 2)\n            return with_largest + without_largest\n    if amount < 8:\n        return count_partitions(amount, 4, 4)\n    elif amount < 16:\n        return count_partitions(amount, 8, 8)\n    elif amount < 32:\n        return count_partitions(amount, 16, 16)\n    elif amount < 64:\n        return count_partitions(amount, 32,32)\n    elif amount < 128:\n        return count_partitions(amount, 64, 64)\n\n\n\"\"\"\n    def count_partitions(amount, largest, staticMultiple, staticMultiple2, staticMultiple3):\n        if amount == 0:\n            return 1\n        elif largest < 0:\n            return 0\n        elif largest == 0:\n            return 0\n        elif staticMultiple <= 0:\n            return 0\n        elif staticMultiple2 <= 0:\n            return 0\n        else:\n            with_largest = count_partitions(amount // staticMultiple3, largest, staticMultiple, staticMultiple2, staticMultiple3)\n            without_largest = count_partitions(amount, largest // 2, staticMultiple, staticMultiple2, staticMultiple3)\n            if amount < 8:\n                without_2 = 0\n                without_3 = 0\n            elif amount < 16:\n                without_2 = without_2 = count_partitions(amount, largest, staticMultiple//(staticMultiple3*2), staticMultiple2, staticMultiple3)\n                without_3 = 0\n            elif amount > 16:\n                without_2 = count_partitions(amount, largest, staticMultiple//2, staticMultiple2, staticMultiple3)\n                without_3 = count_partitions(amount, largest, staticMultiple, staticMultiple2//2, staticMultiple3)    \n            return with_largest + without_largest + without_2 + without_3\n\n    if amount < 8:\n        return count_partitions(amount, 4, 4, 4, 4)\n    elif amount < 16:\n        return count_partitions(amount, 8, 8,8, 8)\n    elif amount > 16:\n        return count_partitions(amount, 16, 16)\n   \"\"\" \n\"\"\"\n    coins = [1,2,4,8,16,32,64,128]\n    count = [1]+[0]*amount\n    for coin in coins:\n        for i in range(coin,amount+1):\n            count[i]+=count[i-coin]\n    return count[amount]\n\"\"\"\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_partitions(amount, largest):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif largest == 0:\n            return 0\n        else:\n            with_largest = count_partitions(amount - largest, largest)\n            without_largest = count_partitions(amount, largest // 2)\n            return with_largest + without_largest\n    if amount < 8:\n        return count_partitions(amount, 4)\n    elif amount < 16:\n        return count_partitions(amount, 8)\n    elif amount < 32:\n        return count_partitions(amount, 16)\n    elif amount < 64:\n        return count_partitions(amount, 32)\n    elif amount < 128:\n        return count_partitions(amount, 64)\n\n\n\"\"\"\n    def count_partitions(amount, largest, staticMultiple, staticMultiple2, staticMultiple3):\n        if amount == 0:\n            return 1\n        elif largest < 0:\n            return 0\n        elif largest == 0:\n            return 0\n        elif staticMultiple <= 0:\n            return 0\n        elif staticMultiple2 <= 0:\n            return 0\n        else:\n            with_largest = count_partitions(amount // staticMultiple3, largest, staticMultiple, staticMultiple2, staticMultiple3)\n            without_largest = count_partitions(amount, largest // 2, staticMultiple, staticMultiple2, staticMultiple3)\n            if amount < 8:\n                without_2 = 0\n                without_3 = 0\n            elif amount < 16:\n                without_2 = without_2 = count_partitions(amount, largest, staticMultiple//(staticMultiple3*2), staticMultiple2, staticMultiple3)\n                without_3 = 0\n            elif amount > 16:\n                without_2 = count_partitions(amount, largest, staticMultiple//2, staticMultiple2, staticMultiple3)\n                without_3 = count_partitions(amount, largest, staticMultiple, staticMultiple2//2, staticMultiple3)    \n            return with_largest + without_largest + without_2 + without_3\n\n    if amount < 8:\n        return count_partitions(amount, 4, 4, 4, 4)\n    elif amount < 16:\n        return count_partitions(amount, 8, 8,8, 8)\n    elif amount > 16:\n        return count_partitions(amount, 16, 16)\n   \"\"\" \n\"\"\"\n    coins = [1,2,4,8,16,32,64,128]\n    count = [1]+[0]*amount\n    for coin in coins:\n        for i in range(coin,amount+1):\n            count[i]+=count[i-coin]\n    return count[amount]\n\"\"\"\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 331, in count_change","    return count_partitions(amount, 4, 4)","TypeError: count_partitions() takes 2 positional arguments but 3 were given","","# Error: expected","#     6","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":418,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n        if (amount == 0): return 1          =>           \r\n        if (amount == 0): a_sum = a_sum + 1 <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def func(amount, coin):\n        a_sum = 0\n        if (amount == 0): a_sum = a_sum + 1\n        if coin > amount or amount < 0: return 0\n        a_sum = a_sum + func(amount-coin, coin)\n        a_sum = a_sum + func(amount, coin*2)\n        return a_sum\n    return func(amount, 1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def func(amount, coin):\n        a_sum = 0\n        if (amount == 0): return 1\n        if coin > amount or amount < 0: return 0\n        a_sum = a_sum + func(amount-coin, coin)\n        a_sum = a_sum + func(amount, coin*2)\n        return a_sum\n    return func(amount, 1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def func(amount, coin):\r\n        amount = 0\r\n        if (amount==0):\r\n            a_sum = a_sum+1\r\n        if coin>amount or amount<0:\r\n            return 0\r\n        a_sum = a_sum+func(amount-coin, coin)\r\n        a_sum = a_sum+func(amount, coin*2)\r\n        return a_sum\r\n    return func(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":1,"Id":419,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n    def c(amount, diff):                    =>           \r\n        if amount == 1 or amount == 0:      =>           \r\n            return 1                        =>           \r\n        total = 1                           =>           \r\n        big = 1                             =>           \r\n        while big * 2 <= min(amount, diff): =>           \r\n            big *= 2                        =>           \r\n            total += c(amount - big, big)   =>           \r\n        return total                        =>           \r\n    return c(amount, amount)                =>           \r\n                                            =>           \r\n                                            =>           \r\n                                            =>           \r\n    \"*** YOUR CODE HERE ***\"                <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def c(amount, diff):\n        if amount == 1 or amount == 0:\n            return 1\n\n        total = 1\n        big = 1\n        while big * 2 <= min(amount, diff):\n            big *= 2\n            total += c(amount - big, big)\n        return total\n    return c(amount, amount)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","","# Error: expected","#     6","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":420,"studentId":0,"date":null,"diff":"\r\nInputObject                                        SideIndicator\r\n-----------                                        -------------\r\n                   counting(cents*2, combination)  =>           \r\n            counting(cents*(2*cents), combination) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def counting(cents, combination):\n        if combination == 0 or cents == amount:\n            return 1\n        elif amount < 0:\n            return 0\n        elif cents > combination:\n            return 0\n        else:\n            return counting(cents, combination - cents) + \\\n            counting(cents*(2*cents), combination)\n    return counting(1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def counting(cents, combination):\n        if combination == 0 or cents == amount:\n            return 1\n        elif amount < 0:\n            return 0\n        elif cents > combination:\n            return 0\n        else:\n            return counting(cents, combination - cents) + \\\n                   counting(cents*2, combination)\n    return counting(1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def counting(cents, combination):\r\n        if amount==0 or cents==amount:\r\n            return 1\r\n        elif amount<0:\r\n            return 0\r\n        elif cents>combination:\r\n            return 0\r\n        else:\r\n            return counting(cents, combination-cents)+counting(cents*(2*cents), combination)\r\n    return counting(1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","4","","# Error: expected","#     6","# but got","#     4","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":421,"studentId":0,"date":null,"diff":"\r\nInputObject                       SideIndicator\r\n-----------                       -------------\r\n    k = 1                         =>           \r\n    while k <= amount:            =>           \r\n        k = 2 * k                 =>           \r\n    return count_coin (amount, k) =>           \r\n                                  <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_coin(amount, coin):\n        if amount == 0:\n            return 1\n        if coin == 1:\n            return 1\n        if coin > amount:\n            return count_coin(amount, coin//2)\n        else:\n            return count_coin(amount-coin, coin) + count_coin(amount, coin // 2)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_coin(amount, coin):\n        if amount == 0:\n            return 1\n        if coin == 1:\n            return 1\n        if coin > amount:\n            return count_coin(amount, coin//2)\n        else:\n            return count_coin(amount-coin, coin) + count_coin(amount, coin // 2)\n    k = 1\n    while k <= amount:\n        k = 2 * k\n    return count_coin (amount, k)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","","# Error: expected","#     6","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":422,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        if amount == 0: =>           \r\n        if amount == 1: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    coins = []\n    divisible = True\n    i = 0\n    while divisible:\n        coins.append(2**i)\n        i += 1\n        if amount/2**(i) < 1:\n            divisible = False\n\n    def helper(amount, possiblecoins):\n        if amount < 0 or len(possiblecoins) == 0:\n            return 0\n        if amount == 1:\n            return 1\n        else:\n            return helper(amount-possiblecoins[0], possiblecoins) + helper(amount, possiblecoins[1:])\n    return helper(amount, coins)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    coins = []\n    divisible = True\n    i = 0\n    while divisible:\n        coins.append(2**i)\n        i += 1\n        if amount/2**(i) < 1:\n            divisible = False\n\n    def helper(amount, possiblecoins):\n        if amount < 0 or len(possiblecoins) == 0:\n            return 0\n        if amount == 0:\n            return 1\n        else:\n            return helper(amount-possiblecoins[0], possiblecoins) + helper(amount, possiblecoins[1:])\n    return helper(amount, coins)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","10","","# Error: expected","#     14","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":423,"studentId":0,"date":null,"diff":"\r\nInputObject                    SideIndicator\r\n-----------                    -------------\r\n        elif coin_value>total: =>           \r\n            return 0           =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count(total,coin_value):\n        if total== 0:\n            return 1\n        elif total < 0:\n            return 0\n        else:\n            return count(total-coin_value,coin_value)+count(total,coin_value*2)\n    return count(amount,1)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count(total,coin_value):\n        if total== 0:\n            return 1\n        elif total < 0:\n            return 0\n        elif coin_value>total:\n            return 0\n        else:\n            return count(total-coin_value,coin_value)+count(total,coin_value*2)\n    return count(amount,1)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count(total, coin_value):\r\n        if amount==0:\r\n            return 1\r\n        elif total<0:\r\n            return 0\r\n        else:\r\n            return count(total-coin_value, coin_value)+count(total, coin_value*2)\r\n    return count(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 303, in count","    return count(total-coin_value,coin_value)+count(total,coin_value*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 303, in count","    return count(total-coin_value,coin_value)+count(total,coin_value*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 303, in count","    return count(total-coin_value,coin_value)+count(total,coin_value*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 303, in count","    return count(total-coin_value,coin_value)+count(total,coin_value*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 303, in count","    return count(total-coin_value,coin_value)+count(total,coin_value*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 303, in count","    return count(total-coin_value,coin_value)+count(total,coin_value*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 298, in count","    if total== 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":424,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n        print(amount) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def largest_coin(C):\n        if 2**C > amount:\n            return C-1\n        if 2**C == amount:\n            return C\n        return largest_coin(C+1)\n    C = largest_coin(0)\n    def mysteryhelper(C, amount):\n        print(amount)\n        if amount == 0:\n            return 1\n        if amount < 0:\n            return 0\n        if C < 0:\n            return 0\n        return mysteryhelper(C, amount-(2**C)) + mysteryhelper(C-1, amount)\n    return mysteryhelper(C, amount)\n\n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def largest_coin(C):\n        if 2**C > amount:\n            return C-1\n        if 2**C == amount:\n            return C\n        return largest_coin(C+1)\n    C = largest_coin(0)\n    def mysteryhelper(C, amount):\n        if amount == 0:\n            return 1\n        if amount < 0:\n            return 0\n        if C < 0:\n            return 0\n        return mysteryhelper(C, amount-(2**C)) + mysteryhelper(C-1, amount)\n    return mysteryhelper(C, amount)\n\n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def largest_coin(C):\r\n        if 2**amount>amount:\r\n            return C-1\r\n        if 2**C==amount:\r\n            return C\r\n        return largest_coin(C+1)\r\n    C = largest_coin(0)\r\n    def mysteryhelper(C, amount):\r\n        print(amount)\r\n        if amount==0:\r\n            return 1\r\n        if amount<0:\r\n            return 0\r\n        if C<0:\r\n            return 0\r\n        return mysteryhelper(C, amount-(2**C))+mysteryhelper(C-1, amount)\r\n    return mysteryhelper(C, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","7","3","-1","3","1","-1","1","0","1","3","2","1","0","1","2","3","7","5","3","1","-1","1","0","1","3","2","1","0","1","2","3","5","4","3","2","1","0","1","2","3","4","5","7","6","5","4","3","2","1","0","1","2","3","4","5","6","7","6","","# Error: expected","#     6","# but gotest summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":425,"studentId":0,"date":null,"diff":"\r\nInputObject                               SideIndicator\r\n-----------                               -------------\r\n            without_m = helper(n, m // 2) =>           \r\n            without_m = helper(n, m-1)    <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    highest_power = 1\n    while 2**highest_power <= amount:\n        highest_power = highest_power + 1\n    highest_power = highest_power - 1\n\n    def helper(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 1:\n            return 1\n        else:\n            with_m = helper(n-m, m)\n            without_m = helper(n, m-1)\n        return with_m + without_m\n    return helper(amount, 2**highest_power)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    highest_power = 1\n    while 2**highest_power <= amount:\n        highest_power = highest_power + 1\n    highest_power = highest_power - 1\n\n    def helper(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 1:\n            return 1\n        else:\n            with_m = helper(n-m, m)\n            without_m = helper(n, m // 2)\n        return with_m + without_m\n    return helper(amount, 2**highest_power)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    highest_power = 1\r\n    while 2**highest_power<=amount:\r\n        highest_power = highest_power+1\r\n    highest_power = highest_power-1\r\n    def helper(n, m):\r\n        if n==0:\r\n            return 1\r\n        elif n<0:\r\n            return 0\r\n        elif m==1:\r\n            return 1\r\n        else:\r\n            with_m = helper(n-m, m)\r\n            without_m = helper(n, m-1)\r\n        return with_m+k\r\n    return helper(amount, 2**highest_power)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","11","","# Error: expected","#     6","# but got","#     11","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":426,"studentId":0,"date":null,"diff":"\r\nInputObject                                         SideIndicator\r\n-----------                                         -------------\r\n            without_m = count_partitions(n, m // 2) =>           \r\n            without_m = count_partitions(n, m - 1)  <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_partitions(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            with_m = count_partitions(n - m, m)\n            without_m = count_partitions(n, m - 1)\n            return with_m + without_m\n    def power_of_2(x):\n        i = 1\n        while (2 ** i) <= x:\n            number = (2 ** i)\n            i += 1\n        return number\n            \n    return count_partitions(amount, power_of_2(amount))\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_partitions(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            with_m = count_partitions(n - m, m)\n            without_m = count_partitions(n, m // 2)\n            return with_m + without_m\n    def power_of_2(x):\n        i = 1\n        while (2 ** i) <= x:\n            number = (2 ** i)\n            i += 1\n        return number\n            \n    return count_partitions(amount, power_of_2(amount))\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_partitions(n, m):\r\n        if n==0:\r\n            return 1\r\n        elif n<0:\r\n            return 0\r\n        elif m==0:\r\n            return 0\r\n        else:\r\n            with_m = count_partitions(n-m, m)\r\n            without_m = count_partitions(n, m-1)\r\n            return with_m+k\r\n    def power_of_2(x):\r\n        i = 1\r\n        while (2**i)<=x:\r\n            number = (2**i)\r\n            i += 1\r\n        return number\r\n    return count_partitions(amount, power_of_2(amount))\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","11","","# Error: expected","#     6","# but got","#     11","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":427,"studentId":0,"date":null,"diff":"\r\nInputObject                    SideIndicator\r\n-----------                    -------------\r\n    discs = []                 =>           \r\n    x = 1                      =>           \r\n    while n > x:               =>           \r\n        discs.append(x)        =>           \r\n        x += 1                 =>           \r\n    if max(discs) == discs[0]: =>           \r\n        print_move(1, 3)       =>           \r\n        elif m > n:            <=           \r\n            return 1           <=           \r\n    \"*** YOUR CODE HERE ***\"   <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def find_2power(amount):\n        x = 2\n        if amount == x:\n            return x\n        while amount > (2 * x):\n            x *= 2\n        return x\n    def count_partitions(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 1:\n            return 1\n        elif m > n:\n            return 1\n        else:\n            with_m = count_partitions(n - m, m)\n            without_m = count_partitions(n, m // 2)\n            return with_m + without_m\n    return count_partitions(amount, find_2power(amount))\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def find_2power(amount):\n        x = 2\n        if amount == x:\n            return x\n        while amount > (2 * x):\n            x *= 2\n        return x\n    def count_partitions(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 1:\n            return 1\n        else:\n            with_m = count_partitions(n - m, m)\n            without_m = count_partitions(n, m // 2)\n            return with_m + without_m\n    return count_partitions(amount, find_2power(amount))\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","5","","# Error: expected","#     6","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":428,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                    SideIndicator\r\n-----------                                                                    -------------\r\ndef count_change(amount):                                                      =>           \r\n    def inside_change(amount, lis = (1, 2, 4, 8, 16, 32, 64)):                 =>           \r\n        if amount == 0:                                                        =>           \r\n            return 1                                                           =>           \r\n        if amount < 0 or len(lis) == 0:                                        =>           \r\n            return 0                                                           =>           \r\n        x = lis[0]                                                             =>           \r\n        return inside_change(amount, lis[1:]) + inside_change(amount - x, lis) =>           \r\n    return inside_change(amount)                                               =>           \r\ndef count_change(amount, lis = (1, 2, 4, 16, 32, 64)):                         <=           \r\n    if amount == 0:                                                            <=           \r\n        return 1                                                               <=           \r\n    if amount < 0 or len(lis) == 0:                                            <=           \r\n        return 0                                                               <=           \r\n    x = lis[0]                                                                 <=           \r\n    return count_change(amount, lis[1:]) + count_change(amount - x, lis)       <=           \r\n                                                                               <=           \r\n\r\n\r\n","before":"def count_change(amount, lis = (1, 2, 4, 16, 32, 64)):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    if amount == 0:\n        return 1\n    if amount < 0 or len(lis) == 0:\n        return 0\n    x = lis[0]\n    return count_change(amount, lis[1:]) + count_change(amount - x, lis)\n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def inside_change(amount, lis = (1, 2, 4, 8, 16, 32, 64)):\n        if amount == 0:\n            return 1\n        if amount < 0 or len(lis) == 0:\n            return 0\n        x = lis[0]\n        return inside_change(amount, lis[1:]) + inside_change(amount - x, lis)\n\n    return inside_change(amount)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","12","","# Error: expected","#     14","# but got","#     12","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":429,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                                                                        \r\n-----------                                                                                                                                        \r\n    def count_change2(amount, coin):                                                                                                               \r\n        if amount == 0:                                                                                                                            \r\n            return 1                                                                                                                               \r\n        elif amount < coin:                                                                                                                        \r\n            return 0                                                                                                                               \r\n        elif amount < 0:                                                                                                                           \r\n            return 0                                                                                                                               \r\n        return count_change2(amount - coin, coin) + count_change2(amount, coin*2)                                                                  \r\n    return count_change2(amount, 1)                                                                                                                \r\n                                                                                                                                                   \r\n    def count_change2(amount, highest):                                                                                                            \r\n            if amount < 0:                                                                                                                         \r\n                return 0                                                                                                                           \r\n            elif amount == 0 or amount == 1:                                                                                                       \r\n                return 1                                                                                                                           \r\n            elif highest <= 0:                                                                                                                     \r\n                return 0                                                                                                                           \r\n            else:                                                                                                                                  \r\n                print (amount)                                                                                                                     \r\n                return count_change2(amount - find_highest_coin(amount), find_highest_coin(amount)) + count_change2(amount, find_highest_coin(am...\r\n    return count_change2(amount, find_highest_coin(amount))                                                                                        \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_change2(amount, highest):\n            if amount < 0:\n                return 0\n            elif amount == 0 or amount == 1:\n                return 1\n            elif highest <= 0:\n                return 0\n            else:\n                print (amount)\n                return count_change2(amount - find_highest_coin(amount), find_highest_coin(amount)) + count_change2(amount, find_highest_coin(amount- 1))\n    return count_change2(amount, find_highest_coin(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_change2(amount, coin):\n        if amount == 0:\n            return 1\n        elif amount < coin:\n            return 0\n        elif amount < 0:\n            return 0\n        return count_change2(amount - coin, coin) + count_change2(amount, coin*2)             \n\n    return count_change2(amount, 1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_change2(amount, highest):\r\n        if amount<0:\r\n            return 0\r\n        elif amount==0 or amount==1:\r\n            return 1\r\n        elif highest<=0:\r\n            return 0\r\n        else:\r\n            print(amount)\r\n            return count_change2(amount-find_highest_coin(amount), find_highest_coin(amount))+count_change2(amount, find_highest_coin(amount-1))\r\n    return count_change2(amount, find_highest_coin(amount))\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","7","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 322, in count_change2","    return count_change2(amount - find_highest_coin(amount), find_highest_coin(amount)) + count_change2(amount, find_highest_coin(amount- 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 322, in count_change2","    return count_change2(amount - find_highest_coin(amount), find_highest_coin(amount)) + count_change2(amount, find_highest_coin(amount- 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 322, in count_change2","    return count_change2(amount - find_highest_coin(amount), find_highest_coin(amount)) + count_change2(amount, find_highest_coin(amount- 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 322, in count_change2","    return count_change2(amount - find_highest_coin(amount), find_highest_coin(amount)) + count_change2(amount, find_highest_coin(amount- 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 322, in count_change2","    return count_change2(amount - find_highest_coin(amount), find_highest_coin(amount)) + count_change2(amount, find_highest_coin(amount- 1))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 321, in count_change2","    print (amount)","  File \"ok\\client\\utils\\output.py\", line 57, in write","    self._current_stream.write(msg)","RecursionError: maximum recursion depth exceeded","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":430,"studentId":0,"date":null,"diff":"\r\nInputObject                                                          SideIndicator\r\n-----------                                                          -------------\r\n        # if amount < 0:                                             =>           \r\n        #     return 0                                               =>           \r\n        if min_coin > amount:                                        =>           \r\n        else:                                                        =>           \r\n            with_min_coin = number_ways(min_coin, amount - min_coin) =>           \r\n            without_min_coin = number_ways(2*min_coin, amount)       =>           \r\n            return with_min_coin + without_min_coin                  =>           \r\n    return number_ways(1, amount)                                    =>           \r\n        if amount < 0 or min_coin > amount:                          <=           \r\n    return number_ways(amount)                                       <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def number_ways(min_coin, amount):\n        if amount < 0 or min_coin > amount:\n            return 0\n        if amount == 0:\n            return 1\n    return number_ways(amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def number_ways(min_coin, amount):\n        # if amount < 0:\n        #     return 0\n        if amount == 0:\n            return 1\n        if min_coin > amount:\n            return 0\n        else:\n            with_min_coin = number_ways(min_coin, amount - min_coin)\n            without_min_coin = number_ways(2*min_coin, amount)\n            return with_min_coin + without_min_coin\n    return number_ways(1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def number_ways(min_coin, amount):\r\n        if amount<0 or min_coin>amount:\r\n            return 0\r\n        if amount==0:\r\n            return 1\r\n    return number_ways(amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 305, in count_change","    return number_ways(amount)","TypeError: number_ways() missing 1 required positional argument: 'amount'","","# Error: expected","#     6","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":431,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                          SideIndicator\r\n-----------                                                                          -------------\r\n    coins = [0]                                                                      =>           \r\n            return count_partitions(n-coins[m], m) + count_partitions(n, m-1)        =>           \r\n    coins = []                                                                       <=           \r\n            return count_partitions(n-coins[m], m) + count_partitions(n, coins[m-1]) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    coins = []\n    temp = 0\n    while temp < 10:\n        coins.append(2**temp)\n        temp+=1\n    def count_partitions(n, m):\n        \"\"\"Count the ways to partition n using parts up to m.\"\"\"\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif coins[m] == 0:\n            return 0\n        else:\n            return count_partitions(n-coins[m], m) + count_partitions(n, coins[m-1])\n    return count_partitions(amount, 10)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    coins = [0]\n    temp = 0\n    while temp < 10:\n        coins.append(2**temp)\n        temp+=1\n    def count_partitions(n, m):\n        \"\"\"Count the ways to partition n using parts up to m.\"\"\"\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif coins[m] == 0:\n            return 0\n        else:\n            return count_partitions(n-coins[m], m) + count_partitions(n, m-1)\n    return count_partitions(amount, 10)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    amount = []\r\n    temp = 0\r\n    while temp<10:\r\n        coins.append(2**temp)\r\n        temp += 1\r\n    def count_partitions(n, m):\r\n        if n==0:\r\n            return 1\r\n        elif n<0:\r\n            return 0\r\n        elif coins[m]==0:\r\n            return 0\r\n        else:\r\n            return count_partitions(n-coins[m], m)+count_partitions(n, coins[m-1])\r\n    return count_partitions(amount, 10)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 314, in count_change","    return count_partitions(amount, 10)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 310, in count_partitions","    elif coins[m] == 0:","IndexError: list index out of range","","# Error: expected","#     6","# but got","#     IndexError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":432,"studentId":0,"date":null,"diff":"\r\nInputObject                                                             SideIndicator\r\n-----------                                                             -------------\r\n            return count_partitions(n-m, m) + count_partitions(n, m//2) =>           \r\n            return count_partitions(n-m, m) + count_partitions(n, m-1)  <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def largest_2_pow(amount):\n        large_2 = 1\n        while large_2 <= amount:\n            large_2 *= 2\n        return large_2 / 2\n    def count_partitions(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, m-1)\n    return count_partitions(amount, largest_2_pow(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def largest_2_pow(amount):\n        large_2 = 1\n        while large_2 <= amount:\n            large_2 *= 2\n        return large_2 / 2\n    def count_partitions(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, m//2)\n    return count_partitions(amount, largest_2_pow(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def largest_2_pow(amount):\r\n        large_2 = 1\r\n        while large_2<=amount:\r\n            large_2 *= 2\r\n        return large_2/2\r\n    def count_partitions(n, m):\r\n        if n==0:\r\n            return 1\r\n        elif n<0:\r\n            return 0\r\n        elif m==0:\r\n            return 0\r\n        elif m>n:\r\n            return 0\r\n        else:\r\n            return count_partitions(n-m, m)+count_partitions(n, m-1)\r\n    return count_partitions(amount, largest_2_pow(amount))\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-GreaterThan, Children(LeafConstNode(NameExpressionNode-m), SingleChild(LeafConstNode(NameExpressionNode-n)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(ConstantExpressionNode-0)))))))), 3), Selected(\\x => Match(x, StartsWithTarget(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"BinaryExpressionNode\")))))))))))))))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","11","","# Error: expected","#     6","# but got","#     11","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":433,"studentId":0,"date":null,"diff":"\r\nInputObject                         SideIndicator\r\n-----------                         -------------\r\n        return x -1                 =>           \r\n    most = find_most(amount)        =>           \r\n    return countmoney(amount, most) =>           \r\n        return x -1                 <=           \r\n    most = find_most(lump)          <=           \r\n    return countmoney(lump, most)   <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def countmoney(num, most):\n        if num < 0:\n            return 0\n        elif num == 0:\n            return 1\n        elif most == 0:\n            return 1\n        else:\n            with_it = countmoney(num - pow(2, most), most)\n            without_it = countmoney(num, most - 1)\n            return with_it + without_it\n\n    def find_most(num):\n        x = 0\n        while pow(2,x) <= num:\n            x += 1\n        return x -1 \n\n    most = find_most(lump)\n\n    return countmoney(lump, most)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def countmoney(num, most):\n        if num < 0:\n            return 0\n        elif num == 0:\n            return 1\n        elif most == 0:\n            return 1\n        else:\n            with_it = countmoney(num - pow(2, most), most)\n            without_it = countmoney(num, most - 1)\n            return with_it + without_it\n\n    def find_most(num):\n        x = 0\n        while pow(2,x) <= num:\n            x += 1\n        return x -1\n\n    most = find_most(amount)\n\n    return countmoney(amount, most)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def countmoney(num, most):\r\n        if num<0:\r\n            return 0\r\n        elif num==0:\r\n            return 1\r\n        elif most==0:\r\n            return 1\r\n        else:\r\n            with_it = countmoney(num-pow(2, most), most)\r\n            without_it = countmoney(num, most-1)\r\n            return with_it+k\r\n    def find_most(num):\r\n        x = 0\r\n        while pow(2, x)<=num:\r\n            x += 1\r\n        return x-1\r\n    most = find_most(lump)\r\n    return countmoney(lump, most)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 319, in count_change","    most = find_most(lump)","NameError: name 'lump' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":1,"Id":434,"studentId":0,"date":null,"diff":"\r\nInputObject                            SideIndicator\r\n-----------                            -------------\r\n        else:                          =>           \r\n            return exponent_two(n,k-1) =>           \r\n                                       <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    import math\n    def largest_power_two(n):\n        return int(math.log(n, 2))\n    def exponent_two(n, k):\n        if n == 0:\n            return 1\n        elif k==0:\n            return 1\n        elif k <0:\n            return 0\n        elif n >= 2**k:\n            return exponent_two(n-2**k, k)+exponent_two(n, k-1)\n\n    return exponent_two(amount, largest_power_two(amount))\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    import math\n    def largest_power_two(n):\n        return int(math.log(n, 2))\n    def exponent_two(n, k):\n        if n == 0:\n            return 1\n        elif k==0:\n            return 1\n        elif k <0:\n            return 0\n        elif n >= 2**k:\n            return exponent_two(n-2**k, k)+exponent_two(n, k-1)\n        else:\n            return exponent_two(n,k-1)\n    return exponent_two(amount, largest_power_two(amount))\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 319, in count_change","    return exponent_two(amount, largest_power_two(amount))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 317, in exponent_two","    return exponent_two(n-2**k, k)+exponent_two(n, k-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 317, in exponent_two","    return exponent_two(n-2**k, k)+exponent_two(n, k-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 317, in exponent_two","    return exponent_two(n-2**k, k)+exponent_two(n, k-1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 317, in exponent_two","    return exponent_two(n-2**k, k)+exponent_two(n, k-1)","TypeError: unsupported operand type(s) for +: 'NoneType' and 'int'","","# Error: expected","#     6","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":435,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n            return 0 =>           \r\n            return 1 <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def power2(amount, cent):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif cent > amount:\n            return 1\n        elif cent == 0 or amount == 1:\n            return 1\n\n        else:\n            return power2(amount - cent, cent) + power2( amount , cent*2)\n    \n\n    return power2(amount, 1)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def power2(amount, cent):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif cent > amount:\n            return 0\n        elif cent == 0 or amount == 1:\n            return 1\n\n        else:\n            return power2(amount - cent, cent) + power2( amount , cent*2)\n    \n\n    return power2(amount, 1)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def power2(amount, cent):\r\n        if amount==0:\r\n            return 1\r\n        elif amount<0:\r\n            return 0\r\n        elif cent>amount:\r\n            return 1\r\n        elif cent==0 or amount==1:\r\n            return 1\r\n        else:\r\n            return power2(amount-cent, cent)+power2(amount, cent*2)\r\n    return power2(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","25","","# Error: expected","#     6","# but got","#     25","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":436,"studentId":0,"date":null,"diff":"\r\nInputObject                                                     SideIndicator\r\n-----------                                                     -------------\r\n        return count_change(amount//2) + count_change(amount-1) =>           \r\n        return count_change(amount-4) + count_change(amount-1)  <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    # 1cent(01) = 1\n    # 2cent(01) = 11, 2\n    # 3cent(02) = 111, 21\n    # 4cent(04) = 1111, 211, 22, 4\n    # 5cent(04) = 11111, 2111, 221, 41 \n    # 6cent(06) = 111111, 21111, 2211, 411, 222, 42\n    # 7cent(06) = 1111111, 211111, 22111, 2221, 1114, 124\n    # 8cent(10) = 11111111, 2111111, 221111, 22211, 2222, 11114, 1124, 224, 44, 8\n    # 9cent(10) =\n\n\n\n    if amount == 1:\n        return 1\n    if amount == 2:\n        return 2\n    if amount == 3:\n        return 2\n    if amount == 4:\n        return 4\n    if amount % 2 == 1 :\n        return count_change(amount-1)\n    else :\n        return count_change(amount-4) + count_change(amount-1)\n        \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    # 1cent(01) = 1\n    # 2cent(01) = 11, 2\n    # 3cent(02) = 111, 21\n    # 4cent(04) = 1111, 211, 22, 4\n    # 5cent(04) = 11111, 2111, 221, 41 \n    # 6cent(06) = 111111, 21111, 2211, 411, 222, 42\n    # 7cent(06) = 1111111, 211111, 22111, 2221, 1114, 124\n    # 8cent(10) = 11111111, 2111111, 221111, 22211, 2222, 11114, 1124, 224, 44, 8\n    # 9cent(10) =\n\n\n\n    if amount == 1:\n        return 1\n    if amount == 2:\n        return 2\n    if amount == 3:\n        return 2\n    if amount == 4:\n        return 4\n    if amount % 2 == 1 :\n        return count_change(amount-1)\n    else :\n        return count_change(amount//2) + count_change(amount-1)\n        \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","16","","# Error: expected","#     14","# but got","#     16","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":437,"studentId":0,"date":null,"diff":"\r\nInputObject                                            SideIndicator\r\n-----------                                            -------------\r\n        elif m<1:                                      =>           \r\n    return count_partitions(amount, 2**find_m(amount)) =>           \r\n        elif m==0:                                     <=           \r\n    return count_partitions(amount, 2**find_m(n))      <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def find_m(n):\n        count = 1\n        while 2**count-n<0:\n            count += 1\n        return count-1\n    def count_partitions(n, m):\n        if n==0:\n            return 1\n        elif n<0:\n            return 0\n        elif m==0:\n            return 0\n        else:\n            return count_partitions(n-m,m) + count_partitions(n, m/2)\n    return count_partitions(amount, 2**find_m(n))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def find_m(n):\n        count = 1\n        while 2**count-n<0:\n            count += 1\n        return count-1\n    def count_partitions(n, m):\n        if n==0:\n            return 1\n        elif n<0:\n            return 0\n        elif m<1:\n            return 0\n        else:\n            return count_partitions(n-m,m) + count_partitions(n, m/2)\n    return count_partitions(amount, 2**find_m(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 325, in count_change","    return count_partitions(amount, 2**find_m(n))","NameError: name 'n' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":438,"studentId":0,"date":null,"diff":"\r\nInputObject        SideIndicator\r\n-----------        -------------\r\n        elif x<y:  =>           \r\n        elif y==0: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def coin_counter(x,y):\n        if x==0:\n            return 1\n        elif x<0:\n            return 0\n        elif y==0:\n            return 0\n        else:\n            return coin_counter(x-y,y)+coin_counter(x,y*2)\n    return coin_counter(amount,1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def coin_counter(x,y):\n        if x==0:\n            return 1\n        elif x<0:\n            return 0\n        elif x<y:\n            return 0\n        else:\n            return coin_counter(x-y,y)+coin_counter(x,y*2)\n    return coin_counter(amount,1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def coin_counter(x, y):\r\n        if x==0:\r\n            return 1\r\n        elif x<0:\r\n            return 0\r\n        elif y==0:\r\n            return 0\r\n        elif m>n:\r\n            return 0\r\n        else:\r\n            return coin_counter(x-y, y)+coin_counter(x, y*2)\r\n    return coin_counter(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-GreaterThan, Children(LeafConstNode(NameExpressionNode-m), SingleChild(LeafConstNode(NameExpressionNode-n)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(ConstantExpressionNode-0)))))))), 3), Selected(\\x => Match(x, StartsWithTarget(Target(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"BinaryExpressionNode\")))))))))))))))))))))), InOrderSort(ast)))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 310, in coin_counter","    return coin_counter(x-y,y)+coin_counter(x,y*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 310, in coin_counter","    return coin_counter(x-y,y)+coin_counter(x,y*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 310, in coin_counter","    return coin_counter(x-y,y)+coin_counter(x,y*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 310, in coin_counter","    return coin_counter(x-y,y)+coin_counter(x,y*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 310, in coin_counter","    return coin_counter(x-y,y)+coin_counter(x,y*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 310, in coin_counter","    return coin_counter(x-y,y)+coin_counter(x,y*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 303, in coin_counter","    if x==0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":439,"studentId":0,"date":null,"diff":"\r\nInputObject                    SideIndicator\r\n-----------                    -------------\r\n        if left==0 :           =>           \r\n        if left==0 or left==1: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper(left, denomination):\n        if left==0 or left==1:\n            return 1\n        elif left<0:\n              return 0\n        elif denomination>left:\n            return 0        \n        else:\n            return helper(left,2*denomination)+helper(left-denomination,denomination)  \n    return helper(amount,1)    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper(left, denomination):\n        if left==0 :\n            return 1\n        elif left<0:\n              return 0\n        elif denomination>left:\n            return 0        \n        else:\n            return helper(left,2*denomination)+helper(left-denomination,denomination)  \n    return helper(amount,1)    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def helper(left, denomination):\r\n        if amount==0 or left==1:\r\n            return 1\r\n        elif left<0:\r\n            return 0\r\n        elif denomination>left:\r\n            return 0\r\n        else:\r\n            return helper(left, 2*denomination)+helper(left-denomination, denomination)\r\n    return helper(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","11","","# Error: expected","#     6","# but got","#     11","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":440,"studentId":0,"date":null,"diff":"\r\nInputObject         SideIndicator\r\n-----------         -------------\r\n        elif x < 0: =>           \r\n        elif n < 0: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    def count(x,y):\n        if x == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif y == 1:\n            return 1\n        else:\n            return count(x-y, y) + count(x, y//2)\n    n = 1\n    while amount // n > 0:\n        n = n*2\n    return count(amount,n//2)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    def count(x,y):\n        if x == 0:\n            return 1\n        elif x < 0:\n            return 0\n        elif y == 1:\n            return 1\n        else:\n            return count(x-y, y) + count(x, y//2)\n    n = 1\n    while amount // n > 0:\n        n = n*2\n    return count(amount,n//2)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 301, in count","    return count(x-y, y) + count(x, y//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 301, in count","    return count(x-y, y) + count(x, y//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 301, in count","    return count(x-y, y) + count(x, y//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 301, in count","    return count(x-y, y) + count(x, y//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 301, in count","    return count(x-y, y) + count(x, y//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 301, in count","    return count(x-y, y) + count(x, y//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 294, in count","    if x == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":441,"studentId":0,"date":null,"diff":"\r\nInputObject                                                           SideIndicator\r\n-----------                                                           -------------\r\n        return change(a-p,p if a-p>=p else maxp(a-p)) + change(a,p/2) =>           \r\n        return change(a-p,maxp(a-p/2)/2) + change(a,p/2)              <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def maxp(a):\n        p = 1\n        while p<=a/2:\n            p=p*2\n        return p\n    p1 = maxp(amount)\n    def change(a,p):\n        if p == 1 or a == 0:\n            return 1\n        return change(a-p,maxp(a-p/2)/2) + change(a,p/2)\n    return change(amount,p1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def maxp(a):\n        p = 1\n        while p<=a/2:\n            p=p*2\n        return p\n    p1 = maxp(amount)\n    def change(a,p):\n        if p == 1 or a == 0:\n            return 1\n        return change(a-p,p if a-p>=p else maxp(a-p)) + change(a,p/2)\n    return change(amount,p1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","14",">>> count_change(20)","192","","# Error: expected","#     60","# but got","#     192","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":442,"studentId":0,"date":null,"diff":"\r\nInputObject                                                          SideIndicator\r\n-----------                                                          -------------\r\n    from math import log                                             =>           \r\n    def largest_coin(n):                                             =>           \r\n        return 2 ** (log(n, 2) // 1)                                 =>           \r\n    def num_partitions(n, m):                                        =>           \r\n        if m == 1:                                                   =>           \r\n        elif m > n:                                                  =>           \r\n            return num_partitions(n, m / 2)                          =>           \r\n            return num_partitions(n, m/2) + num_partitions(n - m, m) =>           \r\n    if amount == 0 or amount == 1:                                   =>           \r\n        return 1                                                     =>           \r\n        return num_partitions(amount, largest_coin(amount))          =>           \r\n            return 1                                                 =>           \r\n        else:                                                        =>           \r\n    else:                                                            =>           \r\n    \"\"\"                                                              =>           \r\n                                                                     =>           \r\n                                                                     =>           \r\n    \"\"\"                                                              =>           \r\n                                                                     =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def coin_values(amount, values):\n        if amount == 0 or amount == 1:\n            return 1\n        elif amount < 0:\n            return 0\n        elif values == 0: \n            return 0\n        elif values >= 4:\n            return coin_values(amount - values, values) + coin_values(amount, values - 2)           \n        else:\n            return coin_values(amount - values, values) + coin_values(amount, values - 1)\n    return coin_values(amount, even_or_else(amount))   \n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n\ndef other(a, b):\n    return 6 - (a + b)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    from math import log\n\n    def largest_coin(n):\n        return 2 ** (log(n, 2) // 1)\n\n    def num_partitions(n, m):\n        if m == 1:\n            return 1\n        elif m > n:\n            return num_partitions(n, m / 2)\n        else:\n            return num_partitions(n, m/2) + num_partitions(n - m, m)\n\n    if amount == 0 or amount == 1:\n        return 1\n    else:\n        return num_partitions(amount, largest_coin(amount))\n\n    \"\"\"\n    def coin_values(amount, values):\n        if amount == 0 or amount == 1:\n            return 1\n        elif amount < 0:\n            return 0\n        elif values == 0: \n            return 0\n        elif values >= 4:\n            return coin_values(amount - values, values) + coin_values(amount, values - 2)           \n        else:\n            return coin_values(amount - values, values) + coin_values(amount, values - 1)\n    return coin_values(amount, even_or_else(amount))   \n    \"\"\"\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n\ndef other(a, b):\n    return 6 - (a + b)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def coin_values(amount, values):\r\n        if amount==0 or amount==1:\r\n            return 1\r\n        elif amount<0:\r\n            return 0\r\n        elif values==0:\r\n            return 0\r\n        elif values>=4:\r\n            return coin_values(amount-values, values)+coin_values(amount, values-2)\r\n        else:\r\n            return coin_values(amount-values, values)+coin_values(amount, values-1)\r\n    return coin_values(amount, even_or_else(amount))\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination\r\ndef other(a, b):\r\n    return 6-(a+k)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","7","","# Error: expected","#     6","# but got","#     7","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":443,"studentId":0,"date":null,"diff":"\r\nInputObject                        SideIndicator\r\n-----------                        -------------\r\n    if amount == 1 or amount == 0: =>           \r\n    if amount == 1 or amount == 2: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if amount == 1 or amount == 2:\n        return 1\n    return count_change(amount//2) + count_change(amount - 2)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if amount == 1 or amount == 0:\n        return 1\n    return count_change(amount//2) + count_change(amount - 2)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","5","","# Error: expected","#     6","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":444,"studentId":0,"date":null,"diff":"\r\nInputObject            SideIndicator\r\n-----------            -------------\r\n        elif n>amount: =>           \r\n            return 0   =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def total_change(n, amount):\n        if amount==0:\n            return 1\n        elif amount<0:\n            return 0\n        else:\n            return total_change(n, amount-n)+total_change(2*n, amount)\n    return total_change(1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def total_change(n, amount):\n        if amount==0:\n            return 1\n        elif amount<0:\n            return 0\n        elif n>amount:\n            return 0\n        else:\n            return total_change(n, amount-n)+total_change(2*n, amount)\n    return total_change(1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def total_change(n, amount):\r\n        if amount==0:\r\n            return 1\r\n        elif amount<0:\r\n            return 0\r\n        else:\r\n            return total_change(n, amount-n)+total_change(2*n, amount)\r\n    return total_change(1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 299, in total_change","    return total_change(n, amount-n)+total_change(2*n, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 299, in total_change","    return total_change(n, amount-n)+total_change(2*n, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 299, in total_change","    return total_change(n, amount-n)+total_change(2*n, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 299, in total_change","    return total_change(n, amount-n)+total_change(2*n, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 299, in total_change","    return total_change(n, amount-n)+total_change(2*n, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 299, in total_change","    return total_change(n, amount-n)+total_change(2*n, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 294, in total_change","    if amount==0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":445,"studentId":0,"date":null,"diff":"\r\nInputObject SideIndicator\r\n----------- -------------\r\n            <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    max_methods = max_coins(amount)\n    \n    def max_coins(n):\n        max_coin = 0\n        while n > 0:\n            n //= 2\n            max_coin += 1\n        return max_coin\n\n    def method_finder(a, b):\n        if b < 0:\n            return 0\n        if b == 0:\n            return 1\n        if a < 0:\n            return 0\n        if a == 0:\n            return 1\n        else:\n            coin_with = method_finder(a - pow(2, b), b)\n            coin_without = method_finder(a, b - 1)\n            return coin_with + coin_without\n\n    return method_finder(amount, max_methods)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def max_coins(n):\n        max_coin = 0\n        while n > 0:\n            n //= 2\n            max_coin += 1\n        return max_coin\n\n    def method_finder(a, b):\n        if b < 0:\n            return 0\n        if b == 0:\n            return 1\n        if a < 0:\n            return 0\n        if a == 0:\n            return 1\n        else:\n            coin_with = method_finder(a - pow(2, b), b)\n            coin_without = method_finder(a, b - 1)\n            return coin_with + coin_without\n\n    max_methods = max_coins(amount)\n    return method_finder(amount, max_methods)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 312, in count_change","    max_methods = max_coins(amount)","UnboundLocalError: local variable 'max_coins' referenced before assignment","","# Error: expected","#     6","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":446,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n    return make_change() =>           \r\n    return make_change   <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def make_change(change=1, n=amount):      # amount is defined as n in problem statement\n        if n < 0:               # negative money amount - not possbile\n            return 0\n        elif n == 0:            # no money amount so change is 0\n            return 1\n        elif change > n:        # change is only made when sum of coins is equal to the amount\n            return 0\n        else:\n            return make_change(change, n - change) + make_change(2 * change, n)\n    return make_change\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def make_change(change=1, n=amount):      # amount is defined as n in problem statement\n        if n < 0:               # negative money amount - not possbile\n            return 0\n        elif n == 0:            # no money amount so change is 0\n            return 1\n        elif change > n:        # change is only made when sum of coins is equal to the amount\n            return 0\n        else:\n            return make_change(change, n - change) + make_change(2 * change, n)\n    return make_change()\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def make_change(change = 1, n = amount):\r\n        if n<0:\r\n            return 0\r\n        elif n==0:\r\n            return 1\r\n        elif change>n:\r\n            return 0\r\n        else:\r\n            return make_change(change, n-change)+make_change(2*change, n)\r\n    return make_change\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","<function count_change.<locals>.make_change at 0x000002AA56A65620>","","# Error: expected","#     6","# but got","#     <function count_change.<locals>.make_change at 0x000002AA56A65620>","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":447,"studentId":0,"date":null,"diff":"\r\nInputObject                  SideIndicator\r\n-----------                  -------------\r\n        elif value > amount: =>           \r\n        elif coin > amount:  <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def change(value, amount):\n        if amount == 0:\n            return 1\n        elif coin > amount:\n            return 0\n        else:\n            return change(value, amount - value) + change(2 * value, amount)\n    return change(1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def change(value, amount):\n        if amount == 0:\n            return 1\n        elif value > amount:\n            return 0\n        else:\n            return change(value, amount - value) + change(2 * value, amount)\n    return change(1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def change(value, amount):\r\n        if amount==0:\r\n            return 1\r\n        elif coin>amount:\r\n            return 0\r\n        else:\r\n            return change(value, amount-value)+change(2*value, amount)\r\n    return change(1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 30","    ? = 1","    ^","SyntaxError: invalid syntax","","Error loading assignment: Error importing file hw02.py"]},{"ErrorFlag":0,"Id":448,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n    if amount % 10 == 0: =>           \r\n        amount += 1      =>           \r\n\"\"\"                      =>           \r\ndef itWorks(amount):     =>           \r\n\"\"\"                      =>           \r\n    \"\"\"                  <=           \r\n    \"\"\"                  <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def largest_coin_exponent(amount):\n        \"\"\"Return the largest coin exponent I possible for AMOUNT.\"\"\"\n        i = 0\n        while 2**i <= amount:\n            i += 1\n        return i - 1\n    def coin_partition(amount, largest_coin_exponent):\n        if amount <= 0 or largest_coin_exponent < 0:\n            return 0\n        if amount == 1:\n            return 1\n        with_largest = coin_partition(amount - 2**largest_coin_exponent, largest_coin_exponent)\n        without_largest = coin_partition(amount, largest_coin_exponent - 1)\n        return with_largest + without_largest\n    return coin_partition(amount, largest_coin_exponent(amount))\n    \"\"\"\n    if amount == 0:\n        return 0\n    def recurse(amount, max_x, total):\n        x = 1\n        while 2**x <= amount and x <= max_x:\n            if amount >= 2:\n                total = recurse(amount - 2**x, x, total) + 1\n            x = x + 1\n        return total\n    return recurse(amount, amount, 1)\n    \"\"\"\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    if amount % 10 == 0:\n        amount += 1\n    def largest_coin_exponent(amount):\n        \"\"\"Return the largest coin exponent I possible for AMOUNT.\"\"\"\n        i = 0\n        while 2**i <= amount:\n            i += 1\n        return i - 1\n    def coin_partition(amount, largest_coin_exponent):\n        if amount <= 0 or largest_coin_exponent < 0:\n            return 0\n        if amount == 1:\n            return 1\n        with_largest = coin_partition(amount - 2**largest_coin_exponent, largest_coin_exponent)\n        without_largest = coin_partition(amount, largest_coin_exponent - 1)\n        return with_largest + without_largest\n    return coin_partition(amount, largest_coin_exponent(amount))\n\"\"\"\ndef itWorks(amount):\n    if amount == 0:\n        return 0\n    def recurse(amount, max_x, total):\n        x = 1\n        while 2**x <= amount and x <= max_x:\n            if amount >= 2:\n                total = recurse(amount - 2**x, x, total) + 1\n            x = x + 1\n        return total\n    return recurse(amount, amount, 1)\n\"\"\"\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def largest_coin_exponent(amount):\r\n        i = 0\r\n        while 2**i<=amount:\r\n            i += 1\r\n        return i-1\r\n    def coin_partition(amount, largest_coin_exponent):\r\n        if amount<=0 or largest_coin_exponent<0:\r\n            return 0\r\n        if amount==0:\r\n            return 1\r\n        with_largest = coin_partition(amount-2**largest_coin_exponent, largest_coin_exponent)\r\n        without_largest = coin_partition(amount, largest_coin_exponent-1)\r\n        return with_largest+k\r\n    return coin_partition(amount, largest_coin_exponent(amount))\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","10","","# Error: expected","#     14","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":449,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n        if amount < 0:     =>           \r\n        if amount < coins: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(2)\n    2\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_change_helper(amount, coins):\n        if coins < 1:\n            return 0\n        if amount < coins:\n            return 0  \n        if amount == 0:\n            return 1\n        else: \n            return count_change_helper(amount-coins, coins) + count_change_helper(amount, coins/2) \n    \n    coins = 1\n    while coins*2 <= amount:\n        coins = coins*2\n\n    return count_change_helper(amount, coins)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(2)\n    2\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_change_helper(amount, coins):\n        if coins < 1:\n            return 0\n        if amount < 0:\n            return 0  \n        if amount == 0:\n            return 1\n        else: \n            return count_change_helper(amount-coins, coins) + count_change_helper(amount, coins/2) \n    \n    coins = 1\n    while coins*2 <= amount:\n        coins = coins*2\n\n    return count_change_helper(amount, coins)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(2)","0","","# Error: expected","#     2","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":450,"studentId":0,"date":null,"diff":"\r\nInputObject                                                         SideIndicator\r\n-----------                                                         -------------\r\n    m = find_largest(amount)                                        =>           \r\n    def partition(amount, m):                                       =>           \r\n        if amount == 0:                                             =>           \r\n            return 1                                                =>           \r\n        elif amount < 0:                                            =>           \r\n            return 0                                                =>           \r\n        elif m == 0:                                                =>           \r\n            return 0                                                =>           \r\n        elif m != find_largest(m):                                  =>           \r\n            return partition(amount, m-1)                           =>           \r\n        else:                                                       =>           \r\n            return partition(amount-m, m) + partition(amount, m -1) =>           \r\n    return partition(amount, m)                                     =>           \r\n                                                                    =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def find_largest(n):\n        if n == 1:\n            return 1\n        else:\n            a = 1\n            while a < 100:\n                if n == pow(2, a):\n                    return n\n                else:\n                    a += 1\n        return find_largest(n - 1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def find_largest(n):\n        if n == 1:\n            return 1\n        else:\n            a = 1\n            while a < 100:\n                if n == pow(2, a):\n                    return n\n                else:\n                    a += 1\n        return find_largest(n - 1)\n    m = find_largest(amount)\n\n    def partition(amount, m):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif m == 0:\n            return 0\n        elif m != find_largest(m):\n            return partition(amount, m-1)\n        else:\n            return partition(amount-m, m) + partition(amount, m -1)\n    return partition(amount, m)    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def find_largest(n):\r\n        if amount==1:\r\n            return 1\r\n        else:\r\n            a = 1\r\n            while a<100:\r\n                if n==pow(2, a):\r\n                    return n\r\n                else:\r\n                    a += 1\r\n        return find_largest(n-1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","","# Error: expected","#     6","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":451,"studentId":0,"date":null,"diff":"\r\nInputObject                                                        SideIndicator\r\n-----------                                                        -------------\r\n        return helper(amount - n, high) + helper(amount, high - 1) =>           \r\n    return helper(amount, high)                                    =>           \r\n                                                                   =>           \r\n        return helper(amount - n, high) + helper(amount, high -1)  <=           \r\n    return helper(amount, high, sum)                               <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    sum = 0\n\n\n    def f(i):\n        return 2**i\n\n    def highest(f, amount):\n        i = 0\n        n = f(i)\n        while n < amount:\n            i += 1\n            n = f(i)\n        return i-1\n\n    high = highest(f, amount)\n\n\n    def helper(amount, high):\n        n = f(high)\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif high < 0:\n            return 0\n        \n\n        return helper(amount - n, high) + helper(amount, high -1)\n\n\n\n\n    return helper(amount, high, sum)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    sum = 0\n\n\n    def f(i):\n        return 2**i\n\n    def highest(f, amount):\n        i = 0\n        n = f(i)\n        while n < amount:\n            i += 1\n            n = f(i)\n        return i-1\n\n    high = highest(f, amount)\n\n\n    def helper(amount, high):\n        n = f(high)\n\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif high < 0:\n            return 0\n        \n\n        return helper(amount - n, high) + helper(amount, high - 1)\n\n\n\n\n    return helper(amount, high)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    amount = 0\r\n    def f(i):\r\n        return 2**i\r\n    def highest(f, amount):\r\n        i = 0\r\n        n = f(i)\r\n        while n<amount:\r\n            i += 1\r\n            n = f(i)\r\n        return i-1\r\n    high = highest(f, amount)\r\n    def helper(amount, high):\r\n        n = f(high)\r\n        if amount==0:\r\n            return 1\r\n        elif amount<0:\r\n            return 0\r\n        elif high<0:\r\n            return 0\r\n        return helper(amount-n, high)+helper(amount, high-1)\r\n    return helper(amount, high, sum)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 367, in count_change","    return helper(amount, high, sum)","TypeError: helper() takes 2 positional arguments but 3 were given","","# Error: expected","#     6","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":452,"studentId":0,"date":null,"diff":"\r\nInputObject                                                            SideIndicator\r\n-----------                                                            -------------\r\n    def helper_function(fn, i, operator):                              =>           \r\n        total = 0                                                      =>           \r\n        while (i >= 0):                                                =>           \r\n            total = operator(fn(i), total)                             =>           \r\n            i -= 1                                                     =>           \r\n        return total                                                   =>           \r\n    def add_function(x, y):                                            =>           \r\n        return x + y                                                   =>           \r\n    if (amount < 0):                                                   =>           \r\n    elif (amount == 0 or amount == 1):                                 =>           \r\n        return 1                                                       =>           \r\n    elif (amount == 2):                                                =>           \r\n        return 2                                                       =>           \r\n        new_amount = amount // 2                                       =>           \r\n        return helper_function(count_change, new_amount, add_function) =>           \r\n                                                                       =>           \r\n                                                                       =>           \r\n                                                                       =>           \r\n                                                                       =>           \r\n    if (amount==1 or amount==2):                                       <=           \r\n    if (amount%2==0):                                                  <=           \r\n        return count_change(amount/2)                                  <=           \r\n        return count_change(amount/2+1)                                <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    if (amount==1 or amount==2):\n        return amount\n\n    if (amount%2==0):\n        return count_change(amount/2)\n    else:\n        return count_change(amount/2+1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper_function(fn, i, operator):\n        total = 0\n        while (i >= 0):\n            total = operator(fn(i), total)\n            i -= 1\n        return total\n\n    def add_function(x, y):\n        return x + y\n\n    if (amount < 0):\n        return amount\n\n    elif (amount == 0 or amount == 1):\n        return 1\n\n    elif (amount == 2):\n        return 2\n\n    else:\n        new_amount = amount // 2\n        return helper_function(count_change, new_amount, add_function)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","2.0","","# Error: expected","#     6","# but got","#     2.0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":453,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n        if amount < 0:    =>           \r\n        elif amount == 0: =>           \r\n        if num < 0:       <=           \r\n        elif num == 0:    <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def partition(amount, max_power): \n        if num < 0:\n            return 0\n        elif num == 0:\n            return 1\n        elif max_power == 0:\n            return 1\n        else:\n            exists = partition(amount - 2**max_power, max_power)\n            not_exists = partition(amount, max_power -1)\n            return exists + not_exists\n\n    def find_max_power(num):\n        q = 0\n        while pow(2, q) <= num:\n            q += 1\n        return q - 1\n\n    max_power = find_max_power(amount)\n\n    return partition(amount, max_power)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def partition(amount, max_power): \n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif max_power == 0:\n            return 1\n        else:\n            exists = partition(amount - 2**max_power, max_power)\n            not_exists = partition(amount, max_power -1)\n            return exists + not_exists\n\n    def find_max_power(num):\n        q = 0\n        while pow(2, q) <= num:\n            q += 1\n        return q - 1\n\n    max_power = find_max_power(amount)\n\n    return partition(amount, max_power)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def partition(amount, max_power):\r\n        if num<0:\r\n            return 0\r\n        elif num==0:\r\n            return 1\r\n        elif max_power==0:\r\n            return 1\r\n        else:\r\n            exists = partition(amount-2**max_power, max_power)\r\n            not_exists = partition(amount, max_power-1)\r\n            return exists+k\r\n    def find_max_power(num):\r\n        q = 0\r\n        while pow(2, q)<=num:\r\n            q += 1\r\n        return q-1\r\n    max_power = find_max_power(amount)\r\n    return partition(amount, max_power)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 360, in count_change","    return partition(amount, max_power)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 341, in partition","    if num < 0:","NameError: name 'num' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":454,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n            k = k*2      =>           \r\n        k = k*2          =>           \r\n            if k == n:   <=           \r\n                return k <=           \r\n            else:        <=           \r\n                k = k**2 <=           \r\n        if k == n:       <=           \r\n            return k     <=           \r\n        else:            <=           \r\n            k = k**2     <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_partitions(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_partitions(n-coin(m), coin(m)) + count_partitions(n, m-1)\n\n    def coin(n):\n        \"\"\"Returns n if n is a valid coin of 1-cent, 2-cent, 4-cent, 8-cent, 16-cent, etc.\"\"\"\n        if n == 1 or n == 2:\n            return n\n        k = 2\n        while k < n:\n            if k == n:\n                return k\n            else:\n                k = k**2\n        if k == n:\n            return k\n        else:\n            return 0\n    return count_partitions(amount, amount)\n\ndef coin(n):\n    \"\"\"Returns n if n is a valid coin of 1-cent, 2-cent, 4-cent, 8-cent, 16-cent, etc.\"\"\"\n    if n == 1 or n == 2:\n        return n\n    k = 2\n    while k < n:\n        if k == n:\n            return k\n        else:\n            k = k**2\n    if k == n:\n        return k\n    else:\n        return 0\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_partitions(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_partitions(n-coin(m), coin(m)) + count_partitions(n, m-1)\n\n    def coin(n):\n        \"\"\"Returns n if n is a valid coin of 1-cent, 2-cent, 4-cent, 8-cent, 16-cent, etc.\"\"\"\n        if n == 1 or n == 2:\n            return n\n        k = 2\n        while k < n:\n            k = k*2\n        if k == n:\n            return k\n        else:\n            return 0\n    return count_partitions(amount, amount)\n\ndef coin(n):\n    \"\"\"Returns n if n is a valid coin of 1-cent, 2-cent, 4-cent, 8-cent, 16-cent, etc.\"\"\"\n    if n == 1 or n == 2:\n        return n\n    k = 2\n    while k < n:\n        k = k*2\n    if k == n:\n        return k\n    else:\n        return 0\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_partitions(n, m):\r\n        if amount==0:\r\n            return 1\r\n        elif n<0:\r\n            return 0\r\n        elif m==0:\r\n            return 0\r\n        else:\r\n            return count_partitions(n-coin(m), coin(m))+count_partitions(n, m-1)\r\n    def coin(n):\r\n        if n==1 or n==2:\r\n            return n\r\n        k = 2\r\n        while k<n:\r\n            if k==n:\r\n                return k\r\n            else:\r\n                k = k**2\r\n        if k==n:\r\n            return k\r\n        else:\r\n            return 0\r\n    return count_partitions(amount, amount)\r\ndef coin(n):\r\n    if n==1 or n==2:\r\n        return n\r\n    k = 2\r\n    while k<n:\r\n        if k==n:\r\n            return k\r\n        else:\r\n            k = k**2\r\n    if k==n:\r\n        return k\r\n    else:\r\n        return 0\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","12","","# Error: expected","#     14","# but got","#     12","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":455,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n        elif m > amount:  =>           \r\n        elif m > amounts: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    def divider(amount, m):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif m > amounts:\n            return 0\n        else:\n            return divider(amount-m, m) + divider(amount, 2*m) \n    return divider(amount, 1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    def divider(amount, m):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif m > amount:\n            return 0\n        else:\n            return divider(amount-m, m) + divider(amount, 2*m) \n    return divider(amount, 1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def divider(amount, m):\r\n        if amount==0:\r\n            return 1\r\n        elif amount<0:\r\n            return 0\r\n        elif m>amounts:\r\n            return 0\r\n        else:\r\n            return divider(amount-m, m)+divider(amount, 2*m)\r\n    return divider(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 307, in count_change","    return divider(amount, 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 303, in divider","    elif m > amounts:","NameError: name 'amounts' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":456,"studentId":0,"date":null,"diff":"\r\nInputObject                               SideIndicator\r\n-----------                               -------------\r\n    return count_change_helper(amount, 1) =>           \r\n    return count_change_helper(amount, 2) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_change_helper(amount, x):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif x > amount:\n            return 0\n        else:\n            return count_change_helper(amount - x, x) + count_change_helper(amount, 2 * x)\n    return count_change_helper(amount, 2)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_change_helper(amount, x):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif x > amount:\n            return 0\n        else:\n            return count_change_helper(amount - x, x) + count_change_helper(amount, 2 * x)\n    return count_change_helper(amount, 1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_change_helper(amount, x):\r\n        if amount<0:\r\n            return 0\r\n        elif amount==0:\r\n            return 1\r\n        elif x>amount:\r\n            return 0\r\n        else:\r\n            return count_change_helper(amount-x, x)+count_change_helper(amount, 2*x)\r\n    return count_change_helper(amount, 2)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":457,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                SideIndicator\r\n-----------                                                                -------------\r\n    def make_change(amount, count_self=False):                             =>           \r\n        if amount == 1:                                                    =>           \r\n            return 0                                                       =>           \r\n        elif amount <= 0:                                                  =>           \r\n            return 0                                                       =>           \r\n        else:                                                              =>           \r\n            i = 0                                                          =>           \r\n            while 2 ** i < amount:                                         =>           \r\n                i += 1                                                     =>           \r\n            if 2 ** i > amount:                                            =>           \r\n                i -= 1                                                     =>           \r\n            if 2 ** i == amount:                                           =>           \r\n                if not count_self:                                         =>           \r\n                    i -= 1                                                 =>           \r\n                else:                                                      =>           \r\n                    return 1 + make_change(amount, False)                  =>           \r\n            gp = 2 ** i                                                    =>           \r\n            return 1 + make_change(amount - gp) + make_change(gp)          =>           \r\n    return make_change(amount, True) + 1                                   =>           \r\n    def partition_change(n, m):                                            =>           \r\n        if n == 0:                                                         =>           \r\n            return 1                                                       =>           \r\n        elif n < 0:                                                        =>           \r\n            return 0                                                       =>           \r\n        elif m == 0:                                                       =>           \r\n            return 0                                                       =>           \r\n        else:                                                              =>           \r\n            i = 0                                                          =>           \r\n            while 2 ** i < m:                                              =>           \r\n                i += 1                                                     =>           \r\n            if 2 ** i > m:                                                 =>           \r\n                i -= 1                                                     =>           \r\n            m = 2 ** i                                                     =>           \r\n            return partition_change(n - m, m) + partition_change(n, m - 1) =>           \r\n    return partition_change(amount, amount)                                =>           \r\n    \"\"\"                                                                    =>           \r\n    \"\"\"                                                                    =>           \r\n    if amount == 1:                                                        <=           \r\n        return 0                                                           <=           \r\n    elif amount <= 0:                                                      <=           \r\n        return 0                                                           <=           \r\n    else:                                                                  <=           \r\n        i = 0                                                              <=           \r\n        while 2 ** i < amount:                                             <=           \r\n            i += 1                                                         <=           \r\n        if 2 ** i >= amount:                                               <=           \r\n            i -= 1                                                         <=           \r\n        gp = 2 ** i                                                        <=           \r\n        return count_change(amount - gp) + count_change(gp) + 1            <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    #print(amount)\n    if amount == 1:\n        return 0\n    elif amount <= 0:\n        return 0\n    else:\n        i = 0\n        while 2 ** i < amount:\n            i += 1\n        if 2 ** i >= amount:\n            i -= 1\n        gp = 2 ** i\n        return count_change(amount - gp) + count_change(gp) + 1\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    #print(amount)\n    \"\"\"\n    def make_change(amount, count_self=False):\n        if amount == 1:\n            return 0\n        elif amount <= 0:\n            return 0\n        else:\n            i = 0\n            while 2 ** i < amount:\n                i += 1\n            if 2 ** i > amount:\n                i -= 1\n            if 2 ** i == amount:\n                if not count_self:\n                    i -= 1\n                else:\n                    return 1 + make_change(amount, False)\n            gp = 2 ** i\n            return 1 + make_change(amount - gp) + make_change(gp)\n    return make_change(amount, True) + 1\n    \"\"\"\n    def partition_change(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            i = 0\n            while 2 ** i < m:\n                i += 1\n            if 2 ** i > m:\n                i -= 1\n            m = 2 ** i\n            return partition_change(n - m, m) + partition_change(n, m - 1)\n    return partition_change(amount, amount)\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    if amount==1:\r\n        return 0\r\n    elif amount<=0:\r\n        return 0\r\n    else:\r\n        i = 0\r\n        while 2**i<amount:\r\n            i += 1\r\n        if 2**i>=amount:\r\n            i -= 1\r\n        gp = 2**i\r\n        return count_change(amount-gp)+count_change(gp)+1\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","9","","# Error: expected","#     14","# but got","#     9","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":458,"studentId":0,"date":null,"diff":"\r\nInputObject                  SideIndicator\r\n-----------                  -------------\r\n        elif amount<0:       =>           \r\n        elif max_currency<0: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    n=1\n    while 2**n<amount:\n        n+=1\n    max_currency=2**n\n    def coins(amount, max_currency):\n        if max_currency==1 or amount==0:\n            return 1\n        elif max_currency<0:\n            return 0\n        else:\n            return coins(amount, max_currency//2)+coins(amount-max_currency,max_currency)\n    return coins(amount,max_currency)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    n=1\n    while 2**n<amount:\n        n+=1\n    max_currency=2**n\n    def coins(amount, max_currency):\n        if max_currency==1 or amount==0:\n            return 1\n        elif amount<0:\n            return 0\n        else:\n            return coins(amount, max_currency//2)+coins(amount-max_currency,max_currency)\n    return coins(amount,max_currency)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in coins","    return coins(amount, max_currency//2)+coins(amount-max_currency,max_currency)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in coins","    return coins(amount, max_currency//2)+coins(amount-max_currency,max_currency)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in coins","    return coins(amount, max_currency//2)+coins(amount-max_currency,max_currency)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in coins","    return coins(amount, max_currency//2)+coins(amount-max_currency,max_currency)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in coins","    return coins(amount, max_currency//2)+coins(amount-max_currency,max_currency)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in coins","    return coins(amount, max_currency//2)+coins(amount-max_currency,max_currency)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 310, in coins","    if max_currency==1 or amount==0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":459,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                              SideIndicator\r\n-----------                                                                                              -------------\r\n    def how_many_parts(amount):                                                                          =>           \r\n        x = 0                                                                                            =>           \r\n        while amount >= pow(2, x):                                                                       =>           \r\n            x += 1                                                                                       =>           \r\n        return x - 1                                                                                     =>           \r\n    parts = how_many_parts(amount)                                                                       =>           \r\n    def count_partitions(amount, parts):                                                                 =>           \r\n        if amount < 0:                                                                                   =>           \r\n            return 0                                                                                     =>           \r\n        elif amount == 0 or parts == 0:                                                                  =>           \r\n            return 1                                                                                     =>           \r\n        else:                                                                                            =>           \r\n            return count_partitions(amount - pow(2, parts), parts) + count_partitions(amount, parts - 1) =>           \r\n    return count_partitions(amount, parts)                                                               =>           \r\n    def solve_hanoi(origin, intermediate, destination, n):                                               =>           \r\n            print_move(origin, destination)                                                              =>           \r\n            solve_hanoi(origin, destination, intermediate, n - 1)                                        =>           \r\n            print_move(origin, destination)                                                              =>           \r\n            solve_hanoi(intermediate, origin, destination, n - 1)                                        =>           \r\n    def count_partitions(n, m):                                                                          <=           \r\n        \"\"\"Count the ways to partition n using parts up to m.\"\"\"                                         <=           \r\n        while x >= 0:                                                                                    <=           \r\n            m = 2**x                                                                                     <=           \r\n            m2 = 2**(x - 1)                                                                              <=           \r\n            if n == 0:                                                                                   <=           \r\n                return 1                                                                                 <=           \r\n            elif n < 0:                                                                                  <=           \r\n                return 0                                                                                 <=           \r\n            elif m == 0:                                                                                 <=           \r\n                return 0                                                                                 <=           \r\n            else:                                                                                        <=           \r\n                return count_partitions(n-m, m) + count_partitions(n, m2)                                <=           \r\n    def solve_hanoi(to_rod, intermediate, from_rod, n):                                                  <=           \r\n            move_disk(to_rod, from_rod)                                                                  <=           \r\n            solve_hanoi(to_rod, from_rod, intermediate, n - 1)                                           <=           \r\n            move_disk(to_rod, from_rod)                                                                  <=           \r\n            solve_hanoi(intermediate, to_rod, from_rod, n - 1)                                           <=           \r\n    def move_disk(from_rod, to_rod):                                                                     <=           \r\n        print(\"Move the top disk from rod %s to rod %s\" % (from_rod, to_rod))                            <=           \r\n                                                                                                         <=           \r\n                                                                                                         <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_partitions(n, m):\n        \"\"\"Count the ways to partition n using parts up to m.\"\"\"\n        while x >= 0:\n            m = 2**x\n            m2 = 2**(x - 1)\n            if n == 0:\n                return 1\n            elif n < 0:\n                return 0\n            elif m == 0:\n                return 0\n            else:\n                return count_partitions(n-m, m) + count_partitions(n, m2)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def how_many_parts(amount):\n        x = 0\n        while amount >= pow(2, x):\n            x += 1\n        return x - 1\n    parts = how_many_parts(amount)\n    def count_partitions(amount, parts):\n        if amount < 0:\n            return 0\n        elif amount == 0 or parts == 0:\n            return 1\n        else:\n            return count_partitions(amount - pow(2, parts), parts) + count_partitions(amount, parts - 1)\n    return count_partitions(amount, parts)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_partitions(n, m):\r\n        while amount>=0:\r\n            m = 2**x\r\n            m2 = 2**(x-1)\r\n            if n==0:\r\n                return 1\r\n            elif n<0:\r\n                return 0\r\n            elif m==0:\r\n                return 0\r\n            else:\r\n                return count_partitions(n-m, m)+count_partitions(n, m2)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","","# Error: expected","#     6","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":460,"studentId":0,"date":null,"diff":"\r\nInputObject                                                  SideIndicator\r\n-----------                                                  -------------\r\n        elif m > amtleft:                                    =>           \r\n            return 0                                         =>           \r\n            return count(m, amtleft-m) + count(2*m, amtleft) =>           \r\n            return count(m, amtleft-m) + count(2*m, amount)  <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count(m, amtleft):\n        if amtleft < 0:\n            return 0\n        elif amtleft == 0:\n            return 1\n        else:\n            return count(m, amtleft-m) + count(2*m, amount)\n    return count(1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count(m, amtleft):\n        if amtleft < 0:\n            return 0\n        elif amtleft == 0:\n            return 1\n        elif m > amtleft:\n            return 0\n        else:\n            return count(m, amtleft-m) + count(2*m, amtleft)\n    return count(1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count(m, amtleft):\r\n        if amount<0:\r\n            return 0\r\n        elif amtleft==0:\r\n            return 1\r\n        else:\r\n            return count(m, amtleft-m)+count(2*m, amount)\r\n    return count(1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 305, in count","    return count(m, amtleft-m) + count(2*m, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 305, in count","    return count(m, amtleft-m) + count(2*m, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 305, in count","    return count(m, amtleft-m) + count(2*m, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 305, in count","    return count(m, amtleft-m) + count(2*m, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 305, in count","    return count(m, amtleft-m) + count(2*m, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 305, in count","    return count(m, amtleft-m) + count(2*m, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 300, in count","    if amtleft < 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":461,"studentId":0,"date":null,"diff":"\r\nInputObject                                                            SideIndicator\r\n-----------                                                            -------------\r\n        while 2**(n+1) < amount:                                       =>           \r\n            return helper(amount - n , n) + helper(amount, power(n))   =>           \r\n            # return 2                                                 =>           \r\n        while 2**(n+1) <= amount:                                      <=           \r\n            # return helper(amount - n , n) + helper(amount, power(n)) <=           \r\n            return 2                                                   <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def power(amount):\n        n = 0\n        while 2**(n+1) <= amount:\n            n += 1\n        return 2**n\n\n    def helper(amount,n):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif n == 1:\n            return 1\n        else: \n            # return helper(amount - n , n) + helper(amount, power(n))\n            return 2\n\n    return helper(amount, power(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def power(amount):\n        n = 0\n        while 2**(n+1) < amount:\n            n += 1\n        return 2**n\n\n    def helper(amount,n):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif n == 1:\n            return 1\n        else: \n            return helper(amount - n , n) + helper(amount, power(n))\n            # return 2\n\n    return helper(amount, power(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def power(amount):\r\n        amount = 0\r\n        while 2**(n+1)<=amount:\r\n            n += 1\r\n        return 2**n\r\n    def helper(amount, n):\r\n        if amount==0:\r\n            return 1\r\n        elif amount<0:\r\n            return 0\r\n        elif n==1:\r\n            return 1\r\n        else:\r\n            return 2\r\n    return helper(amount, power(amount))\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","2","","# Error: expected","#     6","# but got","#     2","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":462,"studentId":0,"date":null,"diff":"\r\nInputObject           SideIndicator\r\n-----------           -------------\r\n        elif coin==0: =>           \r\n            return 0  =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    coin = 2**(amount-1)\n    def count_change_helper(n,coin):\n        if n==0:\n            return 1\n        elif n < 0:\n            return 0\n        else: \n            return count_change_helper(n-coin,coin) + count_change_helper(n,coin//2)\n    return count_change_helper(amount,coin)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    coin = 2**(amount-1)\n    def count_change_helper(n,coin):\n        if n==0:\n            return 1\n        elif n < 0:\n            return 0\n        elif coin==0:\n            return 0\n        else: \n            return count_change_helper(n-coin,coin) + count_change_helper(n,coin//2)\n    return count_change_helper(amount,coin)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 284, in count_change_helper","    return count_change_helper(n-coin,coin) + count_change_helper(n,coin//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 284, in count_change_helper","    return count_change_helper(n-coin,coin) + count_change_helper(n,coin//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 284, in count_change_helper","    return count_change_helper(n-coin,coin) + count_change_helper(n,coin//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 284, in count_change_helper","    return count_change_helper(n-coin,coin) + count_change_helper(n,coin//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 284, in count_change_helper","    return count_change_helper(n-coin,coin) + count_change_helper(n,coin//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 284, in count_change_helper","    return count_change_helper(n-coin,coin) + count_change_helper(n,coin//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 279, in count_change_helper","    if n==0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":463,"studentId":0,"date":null,"diff":"\r\nInputObject                  SideIndicator\r\n-----------                  -------------\r\n    return ways(amount,coin) =>           \r\n    ways(amount,coin)        <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    coin=1\n    def ways(remaining,coin):\n        if remaining<coin:\n            return 0\n        elif remaining==coin:\n            return 1\n        else:\n            return ways(remaining-coin,coin)+ways(remaining,coin*2)\n            \n    ways(amount,coin)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    coin=1\n    def ways(remaining,coin):\n        if remaining<coin:\n            return 0\n        elif remaining==coin:\n            return 1\n        else:\n            return ways(remaining-coin,coin)+ways(remaining,coin*2)\n            \n    return ways(amount,coin)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    amount = 1\r\n    def ways(remaining, coin):\r\n        if remaining<coin:\r\n            return 0\r\n        elif remaining==coin:\r\n            return 1\r\n        else:\r\n            return ways(remaining-coin, coin)+ways(remaining, coin*2)\r\n    ways(amount, coin)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","","# Error: expected","#     6","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":464,"studentId":0,"date":null,"diff":"\r\nInputObject                       SideIndicator\r\n-----------                       -------------\r\n    return count_using(1, amount) =>           \r\n    count_using(1, amount)        <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_using(min_coin, amount):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif min_coin > amount:\n            return 0\n        else:\n            with_min = count_using(min_coin, amount - min_coin)\n            without_min = count_using(2*min_coin, amount)\n            return with_min + without_min\n    count_using(1, amount)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_using(min_coin, amount):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif min_coin > amount:\n            return 0\n        else:\n            with_min = count_using(min_coin, amount - min_coin)\n            without_min = count_using(2*min_coin, amount)\n            return with_min + without_min\n    return count_using(1, amount)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_using(min_coin, amount):\r\n        if amount<0:\r\n            return 0\r\n        elif amount==0:\r\n            return 1\r\n        elif min_coin>amount:\r\n            return 0\r\n        else:\r\n            with_min = count_using(min_coin, amount-min_coin)\r\n            without_min = count_using(2*min_coin, amount)\r\n            return with_min+k\r\n    count_using(1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","","# Error: expected","#     6","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":465,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                                  SideIndicator\r\n-----------                                                                                                  -------------\r\n        elif amount == 0:                                                                                    =>           \r\n            return 1                                                                                         =>           \r\n            return change( amount - possible_coins[0], possible_coins) + change(amount, possible_coins[1:] ) =>           \r\n    # if amount < 0 or len(possible_coins) == 0:                                                             =>           \r\n    #         return 0                                                                                       =>           \r\n    #     else:                                                                                              =>           \r\n    #         with_largest = change( amount - possible_coins[len(possible_coins) - 1], possible_coins)       =>           \r\n    #         without_largest = change(amount, possible_coins[0: -1] )                                       =>           \r\n    #         return without_largest  + without_largest                                                      =>           \r\n                                                                                                             =>           \r\n                                                                                                             =>           \r\n            with_largest = change( amount - possible_coins[len(possible_coins) - 1], possible_coins)         <=           \r\n            without_largest = change(amount, possible_coins[0: -1] )                                         <=           \r\n            return without_largest  + without_largest                                                        <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    possible_coins =  [2 ** i for i in range(0, amount + 1) if 2 ** i <= amount]\n    def change(amount, possible_coins):\n        if amount < 0 or len(possible_coins) == 0:\n            return 0\n        else:\n            with_largest = change( amount - possible_coins[len(possible_coins) - 1], possible_coins)\n            without_largest = change(amount, possible_coins[0: -1] )\n            return without_largest  + without_largest\n        \n    return change(amount, possible_coins)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    possible_coins =  [2 ** i for i in range(0, amount + 1) if 2 ** i <= amount]\n    def change(amount, possible_coins):\n        if amount < 0 or len(possible_coins) == 0:\n            return 0\n        elif amount == 0:\n            return 1\n        else:\n            return change( amount - possible_coins[0], possible_coins) + change(amount, possible_coins[1:] )\n        \n    return change(amount, possible_coins)\n\n\n    # if amount < 0 or len(possible_coins) == 0:\n    #         return 0\n    #     else:\n    #         with_largest = change( amount - possible_coins[len(possible_coins) - 1], possible_coins)\n    #         without_largest = change(amount, possible_coins[0: -1] )\n    #         return without_largest  + without_largest\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":466,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                SideIndicator\r\n-----------                                                                -------------\r\n            totalA = helper(amount-parts, parts)                           =>           \r\n            totalB = helper(amount, parts//2)                              =>           \r\n    #first move: if n is an odd number, move top disk from rod 1 to rod 3  =>           \r\n    #first move: if n is an odd number, move top disk from rod 1 to rod 2  =>           \r\n    if n == 1:                                                             =>           \r\n        print_move(start, end)                                             =>           \r\n                                                                           =>           \r\n            totalA = count_change(amount-parts, parts)                     <=           \r\n            totalB = count-change(amount, parts//2)                        <=           \r\n    \"*** YOUR CODE HERE ***\"                                               <=           \r\n                                                                           <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    #parts is the the max worth of a coin that is still less \n    #than the value of amount\n    parts = 2\n    while parts <= amount:\n        parts = parts**2 \n\n\n    def helper(amount, parts):\n        if amount == 0 :\n            return 1 \n        elif amount < 0:\n            return 0 \n        elif parts == 0:\n            return 0 \n        else: \n            totalA = count_change(amount-parts, parts)\n            totalB = count-change(amount, parts//2)\n            return totalA + totalB \n\n    return helper(amount, parts)\n\n\n\n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    #parts is the the max worth of a coin that is still less \n    #than the value of amount\n    parts = 2\n    while parts <= amount:\n        parts = parts**2 \n\n\n    def helper(amount, parts):\n        if amount == 0 :\n            return 1 \n        elif amount < 0:\n            return 0 \n        elif parts == 0:\n            return 0 \n        else: \n            totalA = helper(amount-parts, parts)\n            totalB = helper(amount, parts//2)\n            return totalA + totalB \n\n    return helper(amount, parts)\n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 349, in count_change","    return helper(amount, parts)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 345, in helper","    totalA = count_change(amount-parts, parts)","TypeError: count_change() takes 1 positional argument but 2 were given","","# Error: expected","#     6","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":467,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n        elif coin == 1:   =>           \r\n        elif amount == 1: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper(amount, coin):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif amount == 1:\n            return 1\n        else:\n            return helper(amount - coin, coin) + helper(amount, coin // 2)\n\n    coin = 1\n    while coin < amount:\n        coin = coin * 2\n    coin = coin // 2\n\n    return helper(amount, coin)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper(amount, coin):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif coin == 1:\n            return 1\n        else:\n            return helper(amount - coin, coin) + helper(amount, coin // 2)\n\n    coin = 1\n    while coin < amount:\n        coin = coin * 2\n    coin = coin // 2\n\n    return helper(amount, coin)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in helper","    return helper(amount - coin, coin) + helper(amount, coin // 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in helper","    return helper(amount - coin, coin) + helper(amount, coin // 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in helper","    return helper(amount - coin, coin) + helper(amount, coin // 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in helper","    return helper(amount - coin, coin) + helper(amount, coin // 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in helper","    return helper(amount - coin, coin) + helper(amount, coin // 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 315, in helper","    return helper(amount - coin, coin) + helper(amount, coin // 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 308, in helper","    if amount == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":468,"studentId":0,"date":null,"diff":"\r\nInputObject                                                     SideIndicator\r\n-----------                                                     -------------\r\n    def helper(amount, coin):                                   =>           \r\n        if coin > amount:                                       =>           \r\n            return 0                                            =>           \r\n        if coin == amount:                                      =>           \r\n            return 1                                            =>           \r\n        return helper(amount,coin*2) + helper(amount-coin,coin) =>           \r\n    return helper(amount,1)                                     =>           \r\n                                                                =>           \r\n                                                                =>           \r\n    if amount <= 0:                                             <=           \r\n        return 0                                                <=           \r\n    if amount == 1:                                             <=           \r\n        return 1                                                <=           \r\n    if amount == 2:                                             <=           \r\n        return 2                                                <=           \r\n    biggest_coin = 4                                            <=           \r\n    total = 0                                                   <=           \r\n    if amount - biggest_coin > 0:                               <=           \r\n        total += count_change(amount-biggest_coin)              <=           \r\n        biggest_coin *= 2                                       <=           \r\n    return total                                                <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    if amount <= 0:\n        return 0\n    if amount == 1:\n        return 1\n    if amount == 2:\n        return 2\n    biggest_coin = 4\n    total = 0\n    if amount - biggest_coin > 0:\n        total += count_change(amount-biggest_coin)\n        biggest_coin *= 2\n    return total\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def helper(amount, coin):\n        if coin > amount:\n            return 0\n        if coin == amount:\n            return 1\n        return helper(amount,coin*2) + helper(amount-coin,coin)\n    return helper(amount,1)\n\n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    if amount<=0:\r\n        return 0\r\n    if amount==1:\r\n        return 1\r\n    if amount==2:\r\n        return 2\r\n    biggest_coin = 4\r\n    total = 0\r\n    if amount-biggest_coin>0:\r\n        total += count_change(amount-biggest_coin)\r\n        biggest_coin *= 2\r\n    return total\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":469,"studentId":0,"date":null,"diff":"\r\nInputObject                      SideIndicator\r\n-----------                      -------------\r\n    return c1(amount, 2**amount) =>           \r\n    return c1(n, 2**n)           <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def c1(x, used):\n        if x is 0:\n            return 1\n        ret = 0\n        pow2 = 1\n        while pow2 <= x:\n            if pow2 <= used: #only use coins smaller than what you've tried so far.\n                ret+= c1(x-pow2, pow2)\n            pow2*=2\n        return ret\n    return c1(n, 2**n)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def c1(x, used):\n        if x is 0:\n            return 1\n        ret = 0\n        pow2 = 1\n        while pow2 <= x:\n            if pow2 <= used: #only use coins smaller than what you've tried so far.\n                ret+= c1(x-pow2, pow2)\n            pow2*=2\n        return ret\n    return c1(amount, 2**amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 304, in count_change","    return c1(n, 2**n)","NameError: name 'n' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":470,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                 SideIndicator\r\n-----------                                                                 -------------\r\n        with_curr_coin = count_change_helper(amount - curr_coin, curr_coin) =>           \r\n        without_curr_coin = count_change_helper(amount, curr_coin * 2)      =>           \r\n        with_curr_coin = check_change_helper(amount - curr_coin, curr_coin) <=           \r\n        without_curr_coin = check_change_helper(amount, curr_coin * 2)      <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    return count_change_helper(amount, 1)\ndef count_change_helper(amount, curr_coin):\n    if amount == 0:\n        return 1\n    elif amount < 0:\n        return 0\n    elif curr_coin > amount:\n        return 0\n    else:\n        with_curr_coin = check_change_helper(amount - curr_coin, curr_coin)\n        without_curr_coin = check_change_helper(amount, curr_coin * 2)\n    return with_curr_coin + without_curr_coin\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    return count_change_helper(amount, 1)\ndef count_change_helper(amount, curr_coin):\n    if amount == 0:\n        return 1\n    elif amount < 0:\n        return 0\n    elif curr_coin > amount:\n        return 0\n    else:\n        with_curr_coin = count_change_helper(amount - curr_coin, curr_coin)\n        without_curr_coin = count_change_helper(amount, curr_coin * 2)\n    return with_curr_coin + without_curr_coin\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    return count_change_helper(amount, 1)\r\ndef count_change_helper(amount, curr_coin):\r\n    if amount==0:\r\n        return 1\r\n    elif amount<0:\r\n        return 0\r\n    elif curr_coin>amount:\r\n        return 0\r\n    else:\r\n        with_curr_coin = check_change_helper(amount-curr_coin, curr_coin)\r\n        without_curr_coin = check_change_helper(amount, curr_coin*2)\r\n    return with_curr_coin+k\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 328, in count_change","    return count_change_helper(amount, 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 337, in count_change_helper","    with_curr_coin = check_change_helper(amount - curr_coin, curr_coin)","NameError: name 'check_change_helper' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":471,"studentId":0,"date":null,"diff":"\r\nInputObject                                                SideIndicator\r\n-----------                                                -------------\r\n            yes = count_helper(number, amount - number)    =>           \r\n            yes = count_helper(number, amount - minnumber) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_helper(number, amount):\n        if amount == 0:\n            return 1\n        elif number > amount:\n            return 0\n        else:\n            yes = count_helper(number, amount - minnumber)\n            no = count_helper(2 * number, amount)\n            return yes + no\n    return count_helper(1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_helper(number, amount):\n        if amount == 0:\n            return 1\n        elif number > amount:\n            return 0\n        else:\n            yes = count_helper(number, amount - number)\n            no = count_helper(2 * number, amount)\n            return yes + no\n    return count_helper(1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_helper(number, amount):\r\n        if amount==0:\r\n            return 1\r\n        elif number>amount:\r\n            return 0\r\n        else:\r\n            yes = count_helper(number, amount-minnumber)\r\n            no = count_helper(2*number, amount)\r\n            return yes+k\r\n    return count_helper(1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 317, in count_change","    return count_helper(1, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 314, in count_helper","    yes = count_helper(number, amount - minnumber)","NameError: name 'minnumber' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":472,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n        elif v > amount: =>           \r\n        elif a > amount: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def coins(v, amount):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif a > amount:\n            return 0\n        else:\n            y = coins(v, amount - v)\n            n = coins(2*v, amount)\n            return y + n\n    return coins(1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def coins(v, amount):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif v > amount:\n            return 0\n        else:\n            y = coins(v, amount - v)\n            n = coins(2*v, amount)\n            return y + n\n    return coins(1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def coins(v, amount):\r\n        if amount<0:\r\n            return 0\r\n        elif amount==0:\r\n            return 1\r\n        elif a>amount:\r\n            return 0\r\n        else:\r\n            y = coins(v, amount-v)\r\n            n = coins(2*v, amount)\r\n            return y+k\r\n    return coins(1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 317, in count_change","    return coins(1, amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 311, in coins","    elif a > amount:","NameError: name 'a' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":473,"studentId":0,"date":null,"diff":"\r\nInputObject                                                 SideIndicator\r\n-----------                                                 -------------\r\n            return count_ways(n-m, m) + count_ways(n, m//2) =>           \r\n    if amount == 0:                                         <=           \r\n        return 1                                            <=           \r\n            return count_ways(n-m, m) + count_ways(n, m/2)  <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    power = 0\n    largest_coin = 1\n    if amount == 0:\n        return 1\n    while amount - largest_coin > 0:\n        power += 1\n        largest_coin = 2**power\n    def count_ways(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_ways(n-m, m) + count_ways(n, m/2)\n    return count_ways(amount, largest_coin)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    power = 0\n    largest_coin = 1\n    while amount - largest_coin > 0:\n        power += 1\n        largest_coin = 2**power\n    def count_ways(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_ways(n-m, m) + count_ways(n, m//2)\n    return count_ways(amount, largest_coin)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 293, in count_ways","    return count_ways(n-m, m) + count_ways(n, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 293, in count_ways","    return count_ways(n-m, m) + count_ways(n, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 293, in count_ways","    return count_ways(n-m, m) + count_ways(n, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 293, in count_ways","    return count_ways(n-m, m) + count_ways(n, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 293, in count_ways","    return count_ways(n-m, m) + count_ways(n, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 293, in count_ways","    return count_ways(n-m, m) + count_ways(n, m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 286, in count_ways","    if n == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":474,"studentId":0,"date":null,"diff":"\r\nInputObject    SideIndicator\r\n-----------    -------------\r\n    x=n[0]     =>           \r\n        x=n[0] <=           \r\n\r\n\r\n","before":"def count_change(amount, n=[1,2,4,8,16,32,64]):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    if amount==0:\n        return 1\n    if amount < 0 or len(n)==0:\n        return 0\n        x=n[0]\n    return count_change(amount, n[1:]) + count_change(amount - x, n)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount, n=[1,2,4,8,16,32,64]):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    if amount==0:\n        return 1\n    if amount < 0 or len(n)==0:\n        return 0\n    x=n[0]\n    return count_change(amount, n[1:]) + count_change(amount - x, n)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 292, in count_change","    return count_change(amount, n[1:]) + count_change(amount - x, n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 292, in count_change","    return count_change(amount, n[1:]) + count_change(amount - x, n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 292, in count_change","    return count_change(amount, n[1:]) + count_change(amount - x, n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 292, in count_change","    return count_change(amount, n[1:]) + count_change(amount - x, n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 292, in count_change","    return count_change(amount, n[1:]) + count_change(amount - x, n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 292, in count_change","    return count_change(amount, n[1:]) + count_change(amount - x, n)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 292, in count_change","    return count_change(amount, n[1:]) + count_change(amount - x, n)","UnboundLocalError: local variable 'x' referenced before assignment","","# Error: expected","#     6","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":475,"studentId":0,"date":null,"diff":"\r\nInputObject                                                 SideIndicator\r\n-----------                                                 -------------\r\n    \"\"\"Return the number of ways to make change for amount. =>           \r\n    >>> count_change(7)                                     =>           \r\n    >>> count_change(10)                                    =>           \r\n    14                                                      =>           \r\n    >>> count_change(20)                                    =>           \r\n    60                                                      =>           \r\n    >>> count_change(100)                                   =>           \r\n    9828                                                    =>           \r\n    6                                                       =>           \r\n    \"\"\"                                                     =>           \r\n                                                            =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    highest_coin = 1\n    while highest_coin <= amount:\n        highest_coin = highest_coin * 2\n    if highest_coin > amount:\n        highest_coin = highest_coin // 2\n\n    def recurse_count(x, highcoin):\n        if x < 0:\n            return 0\n        if x == 0 or highcoin == 1:\n            return 1\n        else:\n            return recurse_count(x, highcoin // 2) + recurse_count(x - highcoin, highcoin)\n    return recurse_count(amount, highest_coin)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    highest_coin = 1\n    while highest_coin <= amount:\n        highest_coin = highest_coin * 2\n    if highest_coin > amount:\n        highest_coin = highest_coin // 2\n\n    def recurse_count(x, highcoin):\n        if x < 0:\n            return 0\n        if x == 0 or highcoin == 1:\n            return 1\n        else:\n            return recurse_count(x, highcoin // 2) + recurse_count(x - highcoin, highcoin)\n    return recurse_count(amount, highest_coin)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","","-- No doctests found for count_change --","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":476,"studentId":0,"date":null,"diff":"\r\nInputObject                                                SideIndicator\r\n-----------                                                -------------\r\n            return 1 + coins(amount, largest_binary(n//2)) =>           \r\n        amount                                             <=           \r\n            return 1                                       <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def largest_binary(amount):\n        if amount == 0:\n            return 0\n        if amount == 1:\n            return 1\n        return max([2**n for n in range(1, amount+1) if 2**n <= amount])\n\n    def coins(amount, n):\n        if n==0:\n            return 0\n        amount \n        if n == 1:\n            return 1\n        if amount - n == 0:\n            return 1\n        if amount - n < 0:\n            return coins(amount, largest_binary(n//2))\n        return coins(amount, n//2) + coins(amount-n, n)\n    return coins(amount,largest_binary(amount)) \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def largest_binary(amount):\n        if amount == 0:\n            return 0\n        if amount == 1:\n            return 1\n        return max([2**n for n in range(1, amount+1) if 2**n <= amount])\n\n    def coins(amount, n):\n        if n==0:\n            return 0\n        if n == 1:\n            return 1\n        if amount - n == 0:\n            return 1 + coins(amount, largest_binary(n//2))\n        if amount - n < 0:\n            return coins(amount, largest_binary(n//2))\n        return coins(amount, n//2) + coins(amount-n, n)\n    return coins(amount,largest_binary(amount)) \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","10","","# Error: expected","#     14","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":477,"studentId":0,"date":null,"diff":"\r\nInputObject                                                           SideIndicator\r\n-----------                                                           -------------\r\n    n = 1                                                             =>           \r\n    while n <= amount:                                                =>           \r\n        n *=2                                                         =>           \r\n            return count_partition(amount-coin_type, coin_type) \\     =>           \r\n            + count_partition(amount, coin_type//2)                   =>           \r\n    return count_partition(amount, n)                                 =>           \r\n                                                                      =>           \r\n            return count_partition(amount-coin_type*2, coin_type*2) \\ <=           \r\n            + count_partition(amount, coin_type)                      <=           \r\n    return count_partition(amount, 1)                                 <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_partition(amount, coin_type):\n    \tif amount == 0:\n    \t\treturn 1\n    \telif amount < 0:\n    \t\treturn 0\n    \telif coin_type == 0:\n    \t\treturn 0\n    \telse:\n    \t\treturn count_partition(amount-coin_type*2, coin_type*2) \\\n    \t\t+ count_partition(amount, coin_type)\n    return count_partition(amount, 1)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    n = 1\n    while n <= amount:\n    \tn *=2\n\n    def count_partition(amount, coin_type):\n    \tif amount == 0:\n    \t\treturn 1\n    \telif amount < 0:\n    \t\treturn 0\n    \telif coin_type == 0:\n    \t\treturn 0\n    \telse:\n    \t\treturn count_partition(amount-coin_type, coin_type) \\\n    \t\t+ count_partition(amount, coin_type//2)\n    return count_partition(amount, n)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_partition(amount, coin_type):\r\n        if amount==0:\r\n            return 1\r\n        elif amount<0:\r\n            return 0\r\n        elif coin_type==0:\r\n            return 0\r\n        else:\r\n            return count_partition(amount-coin_type*2, coin_type*2)+count_partition(amount, coin_type)\r\n    return count_partition(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 317, in count_partition","    + count_partition(amount, coin_type)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 317, in count_partition","    + count_partition(amount, coin_type)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 317, in count_partition","    + count_partition(amount, coin_type)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 317, in count_partition","    + count_partition(amount, coin_type)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 317, in count_partition","    + count_partition(amount, coin_type)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 316, in count_partition","    return count_partition(amount-coin_type*2, coin_type*2) \\","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 309, in count_partition","    if amount == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":478,"studentId":0,"date":null,"diff":"\r\nInputObject            SideIndicator\r\n-----------            -------------\r\n        elif n > amt:  =>           \r\n        elif n >= amt: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(1)\n    1\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def ccount(amt, n):\n        if amt < 0:\n            return 0\n        if amt == 0:\n            return 1\n        elif n >= amt:\n            return 0\n        else:\n            #if amt % 2 == 0:\n            return ccount(amt - n, n) + ccount(amt, 2*n)\n            #amt = amt - 1\n            #return ccount(amt, n) + ccount(amt - 1, 2*n)\n    return ccount(amount, 1) \n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(1)\n    1\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def ccount(amt, n):\n        if amt < 0:\n            return 0\n        if amt == 0:\n            return 1\n        elif n > amt:\n            return 0\n        else:\n            #if amt % 2 == 0:\n            return ccount(amt - n, n) + ccount(amt, 2*n)\n            #amt = amt - 1\n            #return ccount(amt, n) + ccount(amt - 1, 2*n)\n    return ccount(amount, 1) \n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def ccount(amt, n):\r\n        if amount<0:\r\n            return 0\r\n        if amt==0:\r\n            return 1\r\n        elif n>=amt:\r\n            return 0\r\n        else:\r\n            return ccount(amt-n, n)+ccount(amt, 2*n)\r\n    return ccount(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(1)","0","","# Error: expected","#     1","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":479,"studentId":0,"date":null,"diff":"\r\nInputObject                         SideIndicator\r\n-----------                         -------------\r\n        if amount < 0 or coin <= 0: =>           \r\n        if amount < 0 or coin < 0:  <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    # My solution to this problem was, to a large extent, inspired\n    # by what the folks at The Algorithmist wrote on the general-case\n    # Coin Change problem, and how it can be solved using recursive\n    # set theory.\n    # \"http://www.algorithmist.com/index.php/Coin_Change\"\n    def make_change(amount, coin):\n        if amount < 0 or coin < 0:\n            return 0\n        if amount <= 0:\n            return 1\n        return make_change(amount, coin // 2) \\\n            + make_change(amount - coin, coin)\n    return make_change(amount, hi_pow_2_below(amount))\n\ndef is_pow_2(n):\n    \"\"\"Return True if positive integer N is a power of 2. \n    Return False otherwise.\n\n    >>> is_pow_2(2)\n    True\n    >>> is_pow_2(7)\n    False\n    >>> is_pow_2(256)\n    True\n    >>> is_pow_2(264)\n    False\n    \"\"\"\n    powers = 2\n    while powers <= n:\n        if powers == n:\n            return True\n        powers *= 2\n    return False\n\ndef hi_pow_2_below(n):\n    \"\"\"Finds the highest power of 2 below positive integer N.\"\"\"\n    if n % 2 != 0:\n        n -= 1\n    while n >= 2:\n        if is_pow_2(n):\n            return n\n        n -= 2\n    return 2\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n\ndef other(start, end):\n    \"\"\"Assuming START and END are different and are both elements \n    of the set {1, 2, 3}, return the one number in the set {1, 2, 3}\n    that is not contained in {start, end}\"\"\"\n    return 6 - start - end\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    # My solution to this problem was, to a large extent, inspired\n    # by what the folks at The Algorithmist wrote on the general-case\n    # Coin Change problem, and how it can be solved using recursive\n    # set theory.\n    # \"http://www.algorithmist.com/index.php/Coin_Change\"\n    def make_change(amount, coin):\n        if amount < 0 or coin <= 0:\n            return 0\n        if amount <= 0:\n            return 1\n        return make_change(amount, coin // 2) \\\n            + make_change(amount - coin, coin)\n    return make_change(amount, hi_pow_2_below(amount))\n\ndef is_pow_2(n):\n    \"\"\"Return True if positive integer N is a power of 2. \n    Return False otherwise.\n\n    >>> is_pow_2(2)\n    True\n    >>> is_pow_2(7)\n    False\n    >>> is_pow_2(256)\n    True\n    >>> is_pow_2(264)\n    False\n    \"\"\"\n    powers = 2\n    while powers <= n:\n        if powers == n:\n            return True\n        powers *= 2\n    return False\n\ndef hi_pow_2_below(n):\n    \"\"\"Finds the highest power of 2 below positive integer N.\"\"\"\n    if n % 2 != 0:\n        n -= 1\n    while n >= 2:\n        if is_pow_2(n):\n            return n\n        n -= 2\n    return 2\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n\ndef other(start, end):\n    \"\"\"Assuming START and END are different and are both elements \n    of the set {1, 2, 3}, return the one number in the set {1, 2, 3}\n    that is not contained in {start, end}\"\"\"\n    return 6 - start - end\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 305, in make_change","    return make_change(amount, coin // 2) \\","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 305, in make_change","    return make_change(amount, coin // 2) \\","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 305, in make_change","    return make_change(amount, coin // 2) \\","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 305, in make_change","    return make_change(amount, coin // 2) \\","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 305, in make_change","    return make_change(amount, coin // 2) \\","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 305, in make_change","    return make_change(amount, coin // 2) \\","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 301, in make_change","    if amount < 0 or coin < 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":480,"studentId":0,"date":null,"diff":"\r\nInputObject                                   SideIndicator\r\n-----------                                   -------------\r\n        if amount <0 or max <=0: return 0     =>           \r\n        elif max == 1 or amount ==0: return 1 =>           \r\n        if amount <=0 or max <=0: return 0    <=           \r\n        elif max == 1 or amount==0: return 1  <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count(amount,max):\n        if amount <=0 or max <=0: return 0\n        elif max == 1 or amount==0: return 1\n        else: return count(amount-max,max)+count(amount,max//2)\n    \n    return count(amount,2**(amount//2))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count(amount,max):\n        if amount <0 or max <=0: return 0\n        elif max == 1 or amount ==0: return 1\n        else: return count(amount-max,max)+count(amount,max//2)\n    \n    return count(amount,2**(amount//2))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","10","","# Error: expected","#     14","# but got","#     10","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":481,"studentId":0,"date":null,"diff":"\r\nInputObject         SideIndicator\r\n-----------         -------------\r\n        print(test) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    return count_change_helper(amount, 0, 1, [])\n\ndef count_change_helper(amount, value, denom, test):\n    test = test[:]\n\n    if value == amount:\n        print(test)\n        return 1\n    if value > amount or value + denom > amount:\n        return 0\n\n    ways = 0\n    while value <= amount:\n        ways += count_change_helper(amount, value, denom * 2, test)\n        value += denom\n        test += [denom]\n    return ways\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    return count_change_helper(amount, 0, 1, [])\n\ndef count_change_helper(amount, value, denom, test):\n    test = test[:]\n\n    if value == amount:\n        return 1\n    if value > amount or value + denom > amount:\n        return 0\n\n    ways = 0\n    while value <= amount:\n        ways += count_change_helper(amount, value, denom * 2, test)\n        value += denom\n        test += [denom]\n    return ways\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","[1, 2, 4]","[1, 2, 2, 2]","[1, 1, 1, 4]","[1, 1, 1, 2, 2]","[1, 1, 1, 1, 1, 2]","[1, 1, 1, 1, 1, 1, 1]","6","","# Error: expected","#     6","# but got","#     [1, 2, 4]","#     [1, 2, 2, 2]","#     [1, 1, 1, 4]","#     [1, 1, 1, 2, 2]","#     [1, 1, 1, 1, 1, 2]","#     [1, 1, 1, 1, 1, 1, 1]","#     6","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":482,"studentId":0,"date":null,"diff":"\r\nInputObject                       SideIndicator\r\n-----------                       -------------\r\n        elif amount == cent_type: =>           \r\n        elif amount == 1:         <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \n    def helper(amount, cent_type):\n        if amount < cent_type:\n            return 0\n        elif amount == 1:\n            return 1\n        else:\n            return helper(amount-cent_type, cent_type) + helper(amount, 2*cent_type)\n    return helper(amount,1)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \n    def helper(amount, cent_type):\n        if amount < cent_type:\n            return 0\n        elif amount == cent_type:\n            return 1\n        else:\n            return helper(amount-cent_type, cent_type) + helper(amount, 2*cent_type)\n    return helper(amount,1)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def helper(amount, cent_type):\r\n        if amount<cent_type:\r\n            return 0\r\n        elif amount==1:\r\n            return 1\r\n        else:\r\n            return helper(amount-cent_type, cent_type)+helper(amount, 2*cent_type)\r\n    return helper(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","1","","# Error: expected","#     6","# but got","#     1","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":483,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                  SideIndicator\r\n-----------                                                                  -------------\r\n        return change_helper(amount,kinds[1:])+change_helper(amount-d,kinds) =>           \r\n        return count_helper(amount,kinds[1:])+count_helper(amount-d,kinds)   <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def change_helper(amount, kinds):\n        if(amount == 0):\n            return 1\n        if amount<0 or len(kinds)==0:\n            return 0\n        d = kinds[0]\n        return count_helper(amount,kinds[1:])+count_helper(amount-d,kinds)\n    if(amount == 0):\n        return 1\n    kinds = [1,2,4,8,16,32,64,128,256]\n    return change_helper(amount, kinds)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def change_helper(amount, kinds):\n        if(amount == 0):\n            return 1\n        if amount<0 or len(kinds)==0:\n            return 0\n        d = kinds[0]\n        return change_helper(amount,kinds[1:])+change_helper(amount-d,kinds)\n    if(amount == 0):\n        return 1\n    kinds = [1,2,4,8,16,32,64,128,256]\n    return change_helper(amount, kinds)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 336, in count_change","    return change_helper(amount, kinds)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 332, in change_helper","    return count_helper(amount,kinds[1:])+count_helper(amount-d,kinds)","NameError: name 'count_helper' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":484,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n            return 1 =>           \r\n            return 0 <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    \"\"\"logic: C(4,25) = C(3,25) + C(4,25-25)\"\"\"\n\n    def helper(n, big_coin):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif big_coin == 0:\n            return 0\n        return helper(n - pow(2, big_coin), big_coin) + helper(n, big_coin-1)\n\n    def biggest_coin(n):\n        k = 0\n        while pow(2, k) <= n:\n            k += 1\n        return k - 1\n\n    big_coin = biggest_coin(amount)\n\n    return helper(amount, big_coin)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    \"\"\"logic: C(4,25) = C(3,25) + C(4,25-25)\"\"\"\n\n    def helper(n, big_coin):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif big_coin == 0:\n            return 1\n        return helper(n - pow(2, big_coin), big_coin) + helper(n, big_coin-1)\n\n    def biggest_coin(n):\n        k = 0\n        while pow(2, k) <= n:\n            k += 1\n        return k - 1\n\n    big_coin = biggest_coin(amount)\n\n    return helper(amount, big_coin)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def helper(n, big_coin):\r\n        if amount==0:\r\n            return 1\r\n        elif n<0:\r\n            return 0\r\n        elif big_coin==0:\r\n            return 0\r\n        return helper(n-pow(2, big_coin), big_coin)+helper(n, big_coin-1)\r\n    def biggest_coin(n):\r\n        k = 0\r\n        while pow(2, k)<=n:\r\n            k += 1\r\n        return k-1\r\n    big_coin = biggest_coin(amount)\r\n    return helper(amount, big_coin)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":485,"studentId":0,"date":null,"diff":"\r\nInputObject            SideIndicator\r\n-----------            -------------\r\n    i, j = 1, 0        =>           \r\n    while j <= amount: =>           \r\n        j = pow(2, i)  =>           \r\n        i +=1          =>           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_partitions(amount, x):\n        if amount == 0:\n            return 1\n        if amount < 0:\n            return 0\n        if x == 0:\n            return 0\n        else:\n            return count_partitions(amount-x, x) + count_partitions(amount, x//2)\n\n    return count_partitions(amount, j//2)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_partitions(amount, x):\n        if amount == 0:\n            return 1\n        if amount < 0:\n            return 0\n        if x == 0:\n            return 0\n        else:\n            return count_partitions(amount-x, x) + count_partitions(amount, x//2)\n    i, j = 1, 0\n    while j <= amount:\n        j = pow(2, i)\n        i +=1\n\n    return count_partitions(amount, j//2)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 319, in count_change","    return count_partitions(amount, j//2)","NameError: name 'j' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":486,"studentId":0,"date":null,"diff":"\r\nInputObject                SideIndicator\r\n-----------                -------------\r\n        if n < 0 or k < 0: =>           \r\n        if n < 0:          <=           \r\n                           <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def high(d):\n        for i in range(d):\n            if 2 ** i > d:\n                return i - 1 \n\n    def num_partitions(n, k):\n        if n < 0:\n            return 0 \n        if n == 0:\n            return 1\n        else:\n            return num_partitions(n - 2 ** k, k) + num_partitions(n, k - 1)\n    \n    \n    return num_partitions(amount, high(amount))\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def high(d):\n        for i in range(d):\n            if 2 ** i > d:\n                return i - 1 \n\n    def num_partitions(n, k):\n        if n < 0 or k < 0:\n            return 0 \n        if n == 0:\n            return 1\n        else:\n            return num_partitions(n - 2 ** k, k) + num_partitions(n, k - 1)\n    \n    return num_partitions(amount, high(amount))\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def high(d):\r\n        for amount in range(d):\r\n            if 2**i>d:\r\n                return i-1\r\n    def num_partitions(n, k):\r\n        if n<0:\r\n            return 0\r\n        if n==0:\r\n            return 1\r\n        else:\r\n            return num_partitions(n-2**k, k)+num_partitions(n, k-1)\r\n    return num_partitions(amount, high(amount))\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 352, in num_partitions","    return num_partitions(n - 2 ** k, k) + num_partitions(n, k - 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 352, in num_partitions","    return num_partitions(n - 2 ** k, k) + num_partitions(n, k - 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 352, in num_partitions","    return num_partitions(n - 2 ** k, k) + num_partitions(n, k - 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 352, in num_partitions","    return num_partitions(n - 2 ** k, k) + num_partitions(n, k - 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 352, in num_partitions","    return num_partitions(n - 2 ** k, k) + num_partitions(n, k - 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 352, in num_partitions","    return num_partitions(n - 2 ** k, k) + num_partitions(n, k - 1)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 347, in num_partitions","    if n < 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":487,"studentId":0,"date":null,"diff":"\r\nInputObject                                                  SideIndicator\r\n-----------                                                  -------------\r\n        elif m == 0:                                         =>           \r\n    return count_partitions(amount, largest_power_2(amount)) =>           \r\n        elif m == 1:                                         <=           \r\n    count_partitions(amount, largest_power_2(amount))        <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_partitions(n, m):\n        \"\"\"Count the ways to partition n using parts up to m.\"\"\"\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 1:\n            return 0\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, m//2)\n\n    def largest_power_2(parts):\n        n = 1\n        while n < parts:\n            n *= 2\n        return n\n\n    count_partitions(amount, largest_power_2(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_partitions(n, m):\n        \"\"\"Count the ways to partition n using parts up to m.\"\"\"\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_partitions(n-m, m) + count_partitions(n, m//2)\n\n    def largest_power_2(parts):\n        n = 1\n        while n < parts:\n            n *= 2\n        return n\n\n    return count_partitions(amount, largest_power_2(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","","# Error: expected","#     6","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":488,"studentId":0,"date":null,"diff":"\r\nInputObject                    SideIndicator\r\n-----------                    -------------\r\n        return 0               =>           \r\n    return helper(amount, 1)   =>           \r\n        return 0               <=           \r\n    coin_size = 1              <=           \r\n    return coin_one + coin_two <=           \r\n                               <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    if amount == 0:\n        return 0\n    elif amount < 0:\n        return 0\n\n    coin_size = 1 \n\n\n    def helper(amount, coin_size):\n        if amount == 0:\n            return 1 \n        elif amount < 0:\n            return 0\n        elif coin_size * 2 > amount:\n            return helper(amount-coin_size, coin_size)\n        else:\n            coin_one = helper(amount-coin_size, coin_size) \n            coin_two = helper(amount, coin_size*2)\n        return coin_one + coin_two \n\n    return coin_one + coin_two\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    if amount == 0:\n        return 0\n    elif amount < 0:\n        return 0 \n\n\n    def helper(amount, coin_size):\n        if amount == 0:\n            return 1 \n        elif amount < 0:\n            return 0\n        elif coin_size * 2 > amount:\n            return helper(amount-coin_size, coin_size)\n        else:\n            coin_one = helper(amount-coin_size, coin_size) \n            coin_two = helper(amount, coin_size*2)\n        return coin_one + coin_two \n\n    return helper(amount, 1)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    if amount==0:\r\n        return 0\r\n    elif amount<0:\r\n        return 0\r\n    coin_size = 1\r\n    def helper(amount, coin_size):\r\n        if amount==0:\r\n            return 1\r\n        elif amount<0:\r\n            return 0\r\n        elif coin_size*2>amount:\r\n            return helper(amount-coin_size, coin_size)\r\n        else:\r\n            coin_one = helper(amount-coin_size, coin_size)\r\n            coin_two = helper(amount, coin_size*2)\r\n        return coin_one+k\r\n    return coin_one+coin_two\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 333, in count_change","    return coin_one + coin_two","NameError: name 'coin_one' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":489,"studentId":0,"date":null,"diff":"\r\nInputObject                                  SideIndicator\r\n-----------                                  -------------\r\n    current, prev, old  = 3, 2, 1            =>           \r\n    if n <= 3:                               =>           \r\n        return n                             =>           \r\n    while n > 0:                             =>           \r\n        current, prev = prev, current + prev =>           \r\n        n = n - 1                            =>           \r\n    return current                           =>           \r\n    def ways(n, m):                          =>           \r\n        while 2**i <= x:                     =>           \r\n        return 2**(i - 1)                    =>           \r\n                                             =>           \r\n                                             =>           \r\n                                             =>           \r\n                                             =>           \r\n    def ways(n,m):                           <=           \r\n        while i**2 <= x:                     <=           \r\n        return i - 1                         <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    n = amount\n    def ways(n,m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return ways(n-m, m) + ways(n, m//2)\n    return ways(n, powers_of_two(n))\ndef powers_of_two(x):\n        i = 0\n        while i**2 <= x:\n            i += 1\n        return i - 1\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    n = amount\n    def ways(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return ways(n-m, m) + ways(n, m//2)\n    return ways(n, powers_of_two(n))\ndef powers_of_two(x):\n        i = 0\n        while 2**i <= x:\n            i += 1\n        return 2**(i - 1)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","4","","# Error: expected","#     6","# but got","#     4","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":490,"studentId":0,"date":null,"diff":"\r\nInputObject             SideIndicator\r\n-----------             -------------\r\n        elif coin == 0: =>           \r\n        elif i == 0:    <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"   \n    i, k = 1, 1\n    while i <= amount:\n        i, k = 2*i, k + 1\n    \n\n    def count_helper(amount, coin):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif i == 0:\n            return 0\n        else:\n            return count_helper(amount-coin, coin) + count_helper(amount, coin//2)\n    return count_helper(amount, i)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"   \n    i, k = 1, 1\n    while i <= amount:\n        i, k = 2*i, k + 1\n    \n\n    def count_helper(amount, coin):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif coin == 0:\n            return 0\n        else:\n            return count_helper(amount-coin, coin) + count_helper(amount, coin//2)\n    return count_helper(amount, i)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 309, in count_helper","    return count_helper(amount-coin, coin) + count_helper(amount, coin//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 309, in count_helper","    return count_helper(amount-coin, coin) + count_helper(amount, coin//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 309, in count_helper","    return count_helper(amount-coin, coin) + count_helper(amount, coin//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 309, in count_helper","    return count_helper(amount-coin, coin) + count_helper(amount, coin//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 309, in count_helper","    return count_helper(amount-coin, coin) + count_helper(amount, coin//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 309, in count_helper","    return count_helper(amount-coin, coin) + count_helper(amount, coin//2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 302, in count_helper","    if amount == 0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":491,"studentId":0,"date":null,"diff":"\r\nInputObject                                SideIndicator\r\n-----------                                -------------\r\n        if number < 0 or largestcoin < 1:  =>           \r\n        if number < 0 or largestcoin <= 1: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    num = 1\n    while num <= amount:\n        num = num*2\n    num = num/2\n\n    def counter(number, largestcoin):\n        if number < 0 or largestcoin <= 1:\n            return 0\n        if number == 0:\n            return 1\n        return counter(number, largestcoin/2) + counter(number-largestcoin, largestcoin)\n    return counter(amount, num)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    num = 1\n    while num <= amount:\n        num = num*2\n    num = num/2\n\n    def counter(number, largestcoin):\n        if number < 0 or largestcoin < 1:\n            return 0\n        if number == 0:\n            return 1\n        return counter(number, largestcoin/2) + counter(number-largestcoin, largestcoin)\n    return counter(amount, num)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":492,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n        elif m > amount:  =>           \r\n        elif m >= amount: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\" \n\n    def count_partitions(amount, m):\n        \"\"\"Count the ways to partition n using parts up to m.\"\"\"\n      \n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif m >= amount:\n            return 0\n        else:\n            return count_partitions(amount-m, m) + count_partitions(amount,2*m)\n\n    return count_partitions(amount, 1)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\" \n\n    def count_partitions(amount, m):\n        \"\"\"Count the ways to partition n using parts up to m.\"\"\"\n      \n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif m > amount:\n            return 0\n        else:\n            return count_partitions(amount-m, m) + count_partitions(amount,2*m)\n\n    return count_partitions(amount, 1)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_partitions(amount, m):\r\n        if amount==0:\r\n            return 1\r\n        elif amount<0:\r\n            return 0\r\n        elif m>=amount:\r\n            return 0\r\n        else:\r\n            return count_partitions(amount-m, m)+count_partitions(amount, 2*m)\r\n    return count_partitions(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":493,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                              SideIndicator\r\n-----------                                                                                              -------------\r\n            return count_partition(n, highest_pow_of_2(m-1)) + count_partition(n-m, m)                   =>           \r\n    return count_partition(amount, highest_pow_of_2(amount))                                             =>           \r\n            return count_partition(n, highest_pow_of_2(m-1)) + count_partition(highest_pow_of_2(n-m), m) <=           \r\n    return count_partition(amount, highest_pow_of_2(amount)) - 1                                         <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def highest_pow_of_2(num):\n        temp = 1\n        while temp <= num:\n            if temp == num:\n                return temp \n            temp = temp * 2\n        return temp//2       \n    def count_partition(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0 \n        else:\n            return count_partition(n, highest_pow_of_2(m-1)) + count_partition(highest_pow_of_2(n-m), m)\n\n    return count_partition(amount, highest_pow_of_2(amount)) - 1 \n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def highest_pow_of_2(num):\n        temp = 1\n        while temp <= num:\n            if temp == num:\n                return temp \n            temp = temp * 2\n        return temp//2       \n    def count_partition(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0 \n        else:\n            return count_partition(n, highest_pow_of_2(m-1)) + count_partition(n-m, m)\n\n    return count_partition(amount, highest_pow_of_2(amount))\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","12","","# Error: expected","#     14","# but got","#     12","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":494,"studentId":0,"date":null,"diff":"\r\nInputObject                      SideIndicator\r\n-----------                      -------------\r\n        if c > n:                =>           \r\n            return 0             =>           \r\n    # def power(x):              <=           \r\n    #     k = 0                  <=           \r\n    #     counter = -1           <=           \r\n    #     while (pow(2, k) < x): <=           \r\n    #         k +=1              <=           \r\n    #         # counter += 1     <=           \r\n    #     return k               <=           \r\n    # c = 2**power(amount)       <=           \r\n    # n_m = 2**(power(amount)-1) <=           \r\n        if c < n:                <=           \r\n            return 1             <=           \r\n                                 <=           \r\n                                 <=           \r\n    \"*** YOUR CODE HERE ***\"     <=           \r\n                                 <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    \n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n\n    # def power(x):\n    #     k = 0\n    #     counter = -1\n    #     while (pow(2, k) < x):\n    #         k +=1\n    #         # counter += 1\n    #     return k\n    \n    # c = 2**power(amount)\n    # n_m = 2**(power(amount)-1)\n\n    def slice_change(n,c):\n        if n - c == 0:\n            return 1\n        \n        if c < n:\n            return 1\n\n        else:\n            \n            return slice_change(n-c, c) + slice_change(n,2*c)\n\n    return slice_change(amount,1)\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    \n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n        \n    def slice_change(n,c):\n        if n - c == 0:\n            return 1\n        if c > n:\n            return 0\n\n\n        else:\n            \n            return slice_change(n-c, c) + slice_change(n,2*c)\n\n    return slice_change(amount,1)\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def slice_change(n, c):\r\n        if amount-c==0:\r\n            return 1\r\n        if c<n:\r\n            return 1\r\n        else:\r\n            return slice_change(n-c, c)+slice_change(n, 2*c)\r\n    return slice_change(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","1","","# Error: expected","#     6","# but got","#     1","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":495,"studentId":0,"date":null,"diff":"\r\nInputObject SideIndicator\r\n----------- -------------\r\n            <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return count(1, amount)\n\n    def count(minimum, amount):\n        if amount<0:\n            return 0\n        elif amount==0:\n            return 1\n        elif minimum>amount:\n            return 0\n        else:\n            return count(minimum, amount-minimum)+count(2*minimum, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count(minimum, amount):\n        if amount<0:\n            return 0\n        elif amount==0:\n            return 1\n        elif minimum>amount:\n            return 0\n        else:\n            return count(minimum, amount-minimum)+count(2*minimum, amount)\n    return count(1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    return amount(1, amount)\r\n    def count(minimum, amount):\r\n        if amount<0:\r\n            return 0\r\n        elif amount==0:\r\n            return 1\r\n        elif minimum>amount:\r\n            return 0\r\n        else:\r\n            return count(minimum, amount-minimum)+count(2*minimum, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 289, in count_change","    return count(1, amount)","UnboundLocalError: local variable 'count' referenced before assignment","","# Error: expected","#     6","# but got","#     UnboundLocalError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":496,"studentId":0,"date":null,"diff":"\r\nInputObject                                        SideIndicator\r\n-----------                                        -------------\r\n            with_m = coin_func(total-m, m)         =>           \r\n            without_m = coin_func (total, m//2)    =>           \r\n            with_m = count_change(total-m, m)      <=           \r\n            without_m = count_change (total, m//2) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def find_biggest_coin(coin):\n        increasing_coin= 1\n        increase= increasing_coin*2\n        while increase<=coin:\n            increasing_coin= increasing_coin*2\n            increase= increasing_coin*2\n        return increasing_coin\n\n    big_coin= find_biggest_coin(amount)\n    \n    def coin_func(total, m):\n        if total < 0:\n            return 0\n        elif total == 0:\n            return 1\n        elif m == 0:\n            return 0\n        else:\n            with_m = count_change(total-m, m)\n            without_m = count_change (total, m//2)\n            return with_m + without_m\n\n    return coin_func(amount, big_coin)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def find_biggest_coin(coin):\n        increasing_coin= 1\n        increase= increasing_coin*2\n        while increase<=coin:\n            increasing_coin= increasing_coin*2\n            increase= increasing_coin*2\n        return increasing_coin\n\n    big_coin= find_biggest_coin(amount)\n    \n    def coin_func(total, m):\n        if total < 0:\n            return 0\n        elif total == 0:\n            return 1\n        elif m == 0:\n            return 0\n        else:\n            with_m = coin_func(total-m, m)\n            without_m = coin_func (total, m//2)\n            return with_m + without_m\n\n    return coin_func(amount, big_coin)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 331, in count_change","    return coin_func(amount, big_coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 327, in coin_func","    with_m = count_change(total-m, m)","TypeError: count_change() takes 1 positional argument but 2 were given","","# Error: expected","#     6","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":497,"studentId":0,"date":null,"diff":"\r\nInputObject                  SideIndicator\r\n-----------                  -------------\r\n    q=[y for y in x if y<=n] =>           \r\n                             =>           \r\n                             =>           \r\n    q=[y for y in x if x<=n] <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_change_inner(amount,parts):\n        if amount==0:\n            return 1\n        elif amount<0:\n            return 0\n        elif parts==0:\n            return 0\n        else:\n            return count_change_inner(amount-parts,parts)+count_change_inner(amount,parts//2)\n    return count_change_inner(amount,highest_power(amount))\ndef highest_power(n):\n    '''returns the highest power of 2 that passes underneath an amount'''\n    x=[]\n    for i in range(0,n+1):\n        x.append(2**i)\n    q=[y for y in x if x<=n]\n    return max(q)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def count_change_inner(amount,parts):\n        if amount==0:\n            return 1\n        elif amount<0:\n            return 0\n        elif parts==0:\n            return 0\n        else:\n            return count_change_inner(amount-parts,parts)+count_change_inner(amount,parts//2)\n    return count_change_inner(amount,highest_power(amount))\n\n\ndef highest_power(n):\n    '''returns the highest power of 2 that passes underneath an amount'''\n    x=[]\n    for i in range(0,n+1):\n        x.append(2**i)\n    q=[y for y in x if y<=n]\n    return max(q)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 319, in count_change","    return count_change_inner(amount,highest_power(amount))","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 325, in highest_power","    q=[y for y in x if x<=n]","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 325, in <listcomp>","    q=[y for y in x if x<=n]","TypeError: unorderable types: list() <= int()","","# Error: expected","#     6","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":498,"studentId":0,"date":null,"diff":"\r\nInputObject         SideIndicator\r\n-----------         -------------\r\n    if amount <= 1: =>           \r\n    if amount == 1: <=           \r\n    if amount == 0: <=           \r\n        return 0    <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    if amount == 1:\n        return 1\n    if amount == 0:\n        return 0\n    return count_change(amount - 2) + count_change(amount // 2)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    if amount <= 1:\n        return 1\n    return count_change(amount - 2) + count_change(amount // 2)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","5","","# Error: expected","#     6","# but got","#     5","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":499,"studentId":0,"date":null,"diff":"\r\nInputObject       SideIndicator\r\n-----------       -------------\r\n    return f(x,6) =>           \r\n    return f(x,5) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    x = amount\n    def f(n , m):\n\n    \t\n    \tif m < 0:\n    \t\treturn 0\n    \telif n < 0:\n    \t\treturn 0\n    \telif n == 1 or n ==0:\n    \t\treturn 1\n    \telse:\n    \t\treturn f(n-(2**m),m) + f(n,m-1)\n\n    return f(x,5)\n\n\n\n\n\n\n\n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    x = amount\n    def f(n , m):\n\n    \t\n    \tif m < 0:\n    \t\treturn 0\n    \telif n < 0:\n    \t\treturn 0\n    \telif n == 1 or n ==0:\n    \t\treturn 1\n    \telse:\n    \t\treturn f(n-(2**m),m) + f(n,m-1)\n\n    return f(x,6)\n\n\n\n\n\n\n\n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    amount = amount\r\n    def f(n, m):\r\n        if m<0:\r\n            return 0\r\n        elif n<0:\r\n            return 0\r\n        elif n==1 or n==0:\r\n            return 1\r\n        else:\r\n            return f(n-(2**m), m)+f(n, m-1)\r\n    return f(x, 5)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","14",">>> count_change(20)","60",">>> count_change(100)","9544","","# Error: expected","#     9828","# but got","#     9544","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":500,"studentId":0,"date":null,"diff":"\r\nInputObject               SideIndicator\r\n-----------               -------------\r\n                          =>           \r\n        if amt < 0:       =>           \r\n    print(largest)        <=           \r\n        if amt - num < 0: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    filler = 0\n    while 2**filler < amount:\n        filler += 1\n    largest = 2**(filler - 1)\n    print(largest)\n    def counter(num, amt):\n        if amt == 0:\n            return 1\n        if amt - num < 0:\n            return 0\n        if num < 1:\n            return 0\n        else:\n            return counter(num, amt - num) + counter(num / 2, amt)\n    return counter(largest, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    filler = 0\n    while 2**filler < amount:\n        filler += 1\n    largest = 2**(filler - 1)\n    \n    def counter(num, amt):\n        if amt == 0:\n            return 1\n        if amt < 0:\n            return 0\n        if num < 1:\n            return 0\n        else:\n            return counter(num, amt - num) + counter(num / 2, amt)\n    return counter(largest, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","4","3","","# Error: expected","#     6","# but got","#     4","#     3","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":501,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n        elif n>amount:   =>           \r\n        #elif n<0:       =>           \r\n          #  return 0    =>           \r\n       # elif n==0:      =>           \r\n          #  return n**2 =>           \r\n        elif n<0:        <=           \r\n        elif n==0:       <=           \r\n            return n**2  <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    def using(amount,n):\n        if amount==0:\n            return 1\n        elif amount<0:\n            return 0\n        elif n<0:\n            return 0\n        elif n==0:\n            return n**2\n        else:\n            return using(amount-n,n)+using(amount,n*2)\n    return using(amount,1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    def using(amount,n):\n        if amount==0:\n            return 1\n        elif amount<0:\n            return 0\n        elif n>amount:\n            return 0\n        #elif n<0:\n          #  return 0\n       # elif n==0:\n          #  return n**2\n        else:\n            return using(amount-n,n)+using(amount,n*2)\n    return using(amount,1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def using(amount, n):\r\n        if amount==0:\r\n            return 1\r\n        elif amount<0:\r\n            return 0\r\n        elif n<0:\r\n            return 0\r\n        elif n==0:\r\n            return n**2\r\n        else:\r\n            return using(amount-n, n)+using(amount, n*2)\r\n    return using(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 331, in using","    return using(amount-n,n)+using(amount,n*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 331, in using","    return using(amount-n,n)+using(amount,n*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 331, in using","    return using(amount-n,n)+using(amount,n*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 331, in using","    return using(amount-n,n)+using(amount,n*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 331, in using","    return using(amount-n,n)+using(amount,n*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 331, in using","    return using(amount-n,n)+using(amount,n*2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 322, in using","    if amount==0:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":502,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                    SideIndicator\r\n-----------                                                                    -------------\r\n    def partitions(n, smallest_coin):                                          =>           \r\n            return 0                                                           =>           \r\n            with_smallest_coin = partitions(n-smallest_coin, smallest_coin)    =>           \r\n            without_smallest_coin = partitions(n, smallest_coin*2)             =>           \r\n            return with_smallest_coin + without_smallest_coin                  =>           \r\n    return partitions(amount, 1)                                               =>           \r\n    def partitions(n, smallest_coin, count):                                   <=           \r\n            return count                                                       <=           \r\n            with_smallest_coin = partitions(n-smallest_coin, smallest_coin, 0) <=           \r\n            without_smallest_coin = partitions(n, smallest_coin*2, 0)          <=           \r\n            count = with_smallest_coin + without_smallest_coin                 <=           \r\n    return partitions(amount, 1, 0)                                            <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def partitions(n, smallest_coin, count):\n        if n == 0:\n            return 1\n        elif smallest_coin > n:\n            return count\n        else:\n            with_smallest_coin = partitions(n-smallest_coin, smallest_coin, 0)\n            without_smallest_coin = partitions(n, smallest_coin*2, 0)\n            count = with_smallest_coin + without_smallest_coin\n    return partitions(amount, 1, 0)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def partitions(n, smallest_coin):\n        if n == 0:\n            return 1\n        elif smallest_coin > n:\n            return 0\n        else:\n            with_smallest_coin = partitions(n-smallest_coin, smallest_coin)\n            without_smallest_coin = partitions(n, smallest_coin*2)\n            return with_smallest_coin + without_smallest_coin\n    return partitions(amount, 1)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def partitions(n, smallest_coin, count):\r\n        if n==0:\r\n            return 1\r\n        elif smallest_coin>n:\r\n            return count\r\n        else:\r\n            with_smallest_coin = partitions(n-smallest_coin, smallest_coin, 0)\r\n            without_smallest_coin = partitions(n, smallest_coin*2, 0)\r\n            count = with_smallest_coin+k\r\n    return partitions(amount, 1, 0)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 325, in count_change","    return partitions(amount, 1, 0)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 322, in partitions","    with_smallest_coin = partitions(n-smallest_coin, smallest_coin, 0)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 322, in partitions","    with_smallest_coin = partitions(n-smallest_coin, smallest_coin, 0)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 322, in partitions","    with_smallest_coin = partitions(n-smallest_coin, smallest_coin, 0)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 322, in partitions","    with_smallest_coin = partitions(n-smallest_coin, smallest_coin, 0)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 322, in partitions","    with_smallest_coin = partitions(n-smallest_coin, smallest_coin, 0)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 324, in partitions","    count = with_smallest_coin + without_smallest_coin","TypeError: unsupported operand type(s) for +: 'NoneType' and 'NoneType'","","# Error: expected","#     6","# but got","#     TypeError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":503,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                                             SideIndicator\r\n-----------                                                                                             -------------\r\n        return 2 ** (n - 1)                                                                             =>           \r\n                return count_reduc(amount - highest, highest) + count_reduc(amount, highest // 2)       =>           \r\n        return n - 1                                                                                    <=           \r\n                return count_reduc(amount - 2**highest, highest) + count_reduc(amount, highest - 1)     <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def highest_pow_2(limit):\n        n = 0\n        while 2 ** n <= limit:\n            n += 1\n        return n - 1\n\n    def count_reduc(amount, highest):\n        if amount == 0:\n            return 1\n        else:\n            if amount < 0 or highest == 0:\n                return 0\n            else:\n                return count_reduc(amount - 2**highest, highest) + count_reduc(amount, highest - 1)    \n    \n    return count_reduc(amount, highest_pow_2(amount))\n\n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def highest_pow_2(limit):\n        n = 0\n        while 2 ** n <= limit:\n            n += 1\n        return 2 ** (n - 1)\n\n    def count_reduc(amount, highest):\n        if amount == 0:\n            return 1\n        else:\n            if amount < 0 or highest == 0:\n                return 0\n            else:\n                return count_reduc(amount - highest, highest) + count_reduc(amount, highest // 2)    \n    \n    return count_reduc(amount, highest_pow_2(amount))\n\n    \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def highest_pow_2(limit):\r\n        amount = 0\r\n        while 2**n<=limit:\r\n            n += 1\r\n        return n-1\r\n    def count_reduc(amount, highest):\r\n        if amount==0:\r\n            return 1\r\n        else:\r\n            if amount<0 or highest==0:\r\n                return 0\r\n            else:\r\n                return count_reduc(amount-2**highest, highest)+count_reduc(amount, highest-1)\r\n    return count_reduc(amount, highest_pow_2(amount))\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":504,"studentId":0,"date":null,"diff":"\r\nInputObject              SideIndicator\r\n-----------              -------------\r\n        if n==0:         =>           \r\n        elif n<0:        =>           \r\n            return 0     =>           \r\n        if m==1:         =>           \r\n            return 1     =>           \r\n                         =>           \r\n        if n==1 or m==1: <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    largest_coin = 1\n    while largest_coin <=amount:\n        largest_coin = 2*largest_coin\n    largest_coin = largest_coin/2\n    def count_partitions(n,m):\n        if n==1 or m==1:\n            return 1\n        else:\n            return count_partitions(n-m,m)+count_partitions(n,m/2)\n    return count_partitions(amount,largest_coin)\n\"\"\"\nif 80,\n\ni can use a quarter\n if i use a quarter,\n80% quarter == rest,\nif i dont,\nlargest coin would be  next largest coin,\n\"\"\"\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    largest_coin = 1\n    while largest_coin <=amount:\n        largest_coin = 2*largest_coin\n    largest_coin = largest_coin/2\n    def count_partitions(n,m):\n        if n==0:\n            return 1\n        elif n<0:\n            return 0\n        if m==1:\n            return 1\n        \n        else:\n            return count_partitions(n-m,m)+count_partitions(n,m/2)\n    return count_partitions(amount,largest_coin)\n\"\"\"\nif 80,\n\ni can use a quarter\n if i use a quarter,\n80% quarter == rest,\nif i dont,\nlargest coin would be  next largest coin,\n\"\"\"\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 301, in count_partitions","    return count_partitions(n-m,m)+count_partitions(n,m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 301, in count_partitions","    return count_partitions(n-m,m)+count_partitions(n,m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 301, in count_partitions","    return count_partitions(n-m,m)+count_partitions(n,m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 301, in count_partitions","    return count_partitions(n-m,m)+count_partitions(n,m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 301, in count_partitions","    return count_partitions(n-m,m)+count_partitions(n,m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 301, in count_partitions","    return count_partitions(n-m,m)+count_partitions(n,m/2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 298, in count_partitions","    if n==1 or m==1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     6","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":505,"studentId":0,"date":null,"diff":"\r\nInputObject                                               SideIndicator\r\n-----------                                               -------------\r\n        without_min_coin = count_coin(amount, 2*min_coin) =>           \r\n        without_min_coin = coin_coin(amount, 2*min_coin)  <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    def count_coin(amount, min_coin=1):\n        if amount < min_coin:\n            return 0\n        if amount == min_coin:\n            return 1\n        with_min_coin = count_coin(amount-min_coin, min_coin)\n        without_min_coin = coin_coin(amount, 2*min_coin)\n        return with_min_coin + without_min_coin\n    return count_coin(amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\n    def count_coin(amount, min_coin=1):\n        if amount < min_coin:\n            return 0\n        if amount == min_coin:\n            return 1\n        with_min_coin = count_coin(amount-min_coin, min_coin)\n        without_min_coin = count_coin(amount, 2*min_coin)\n        return with_min_coin + without_min_coin\n    return count_coin(amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def count_coin(amount, min_coin = 1):\r\n        if amount<min_coin:\r\n            return 0\r\n        if amount==min_coin:\r\n            return 1\r\n        with_min_coin = count_coin(amount-min_coin, min_coin)\r\n        without_min_coin = coin_coin(amount, 2*min_coin)\r\n        return with_min_coin+without_min_coin\r\n    return count_coin(amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 312, in count_change","    return count_coin(amount)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 309, in count_coin","    with_min_coin = count_coin(amount-min_coin, min_coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 309, in count_coin","    with_min_coin = count_coin(amount-min_coin, min_coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 309, in count_coin","    with_min_coin = count_coin(amount-min_coin, min_coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 309, in count_coin","    with_min_coin = count_coin(amount-min_coin, min_coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 309, in count_coin","    with_min_coin = count_coin(amount-min_coin, min_coin)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 310, in count_coin","    without_min_coin = coin_coin(amount, 2*min_coin)","NameError: name 'coin_coin' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":506,"studentId":0,"date":null,"diff":"\r\nInputObject                                                                 SideIndicator\r\n-----------                                                                 -------------\r\n    n = n - 1                                                               =>           \r\n    def countParts(amount, n):                                              =>           \r\n        elif (amount < 0) or (n < 0):                                       =>           \r\n            return countParts(amount - 2**n, n) + countParts(amount, n - 1) =>           \r\n    return countParts(amount, n)                                            =>           \r\n                                                                            =>           \r\n    print(2**(n-1))                                                         <=           \r\n    coins = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]                   <=           \r\n    while coins[-1] > amount:                                               <=           \r\n        coins = coins[0:-1]                                                 <=           \r\n    def countParts(amount, m):                                              <=           \r\n        m1 = m[-1]                                                          <=           \r\n        m2 = m[-2]                                                          <=           \r\n        print(m1, m2, amount)                                               <=           \r\n        elif (amount < 0) or (m1 == 0):                                     <=           \r\n            return countParts(amount - m1, m1) + countParts(amount, m2)     <=           \r\n    return countParts(amount, coins)                                        <=           \r\n    \"\"\"                                                                     <=           \r\n    \"\"\"                                                                     <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    n = 0\n    while 2**n < amount:\n        n += 1\n    print(2**(n-1))\n    \"\"\"\n    coins = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]\n    while coins[-1] > amount:\n        coins = coins[0:-1]\n    def countParts(amount, m):\n        m1 = m[-1]\n        m2 = m[-2]\n        print(m1, m2, amount)\n        if amount == 0:\n            return 1\n        elif (amount < 0) or (m1 == 0):\n            return 0\n        else:\n            return countParts(amount - m1, m1) + countParts(amount, m2)\n    return countParts(amount, coins)\n    \"\"\"\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    n = 0\n    while 2**n < amount:\n        n += 1\n    n = n - 1\n\n    def countParts(amount, n):\n        if amount == 0:\n            return 1\n        elif (amount < 0) or (n < 0):\n            return 0\n        else:\n            return countParts(amount - 2**n, n) + countParts(amount, n - 1)\n    return countParts(amount, n)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    amount = 0\r\n    while 2**n<amount:\r\n        n += 1\r\n    print(2**(n-1))\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","4","","# Error: expected","#     6","# but got","#     4","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":507,"studentId":0,"date":null,"diff":"\r\nInputObject          SideIndicator\r\n-----------          -------------\r\n            return 1 =>           \r\n                     =>           \r\n            return 0 <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def get_coin_set(n):    \n        x = 0\n        while pow(2, x) <= n:\n            x += 1\n        return x - 1\n\n    def change_partition(n, coin_set):    \n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif coin_set == 0:\n            return 0\n        else:\n            has_power = change_partition(n - pow(2, coin_set), coin_set)\n            no_power = change_partition(n, coin_set - 1)\n            return has_power + no_power\n    coin_set = get_coin_set(amount)\n    return change_partition(amount, coin_set)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def get_coin_set(n):    \n        x = 0\n        while pow(2, x) <= n:\n            x += 1\n        return x - 1\n\n    def change_partition(n, coin_set):    \n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif coin_set == 0:\n            return 1\n        else:\n            has_power = change_partition(n - pow(2, coin_set), coin_set)\n            no_power = change_partition(n, coin_set - 1)\n            return has_power + no_power\n    \n    coin_set = get_coin_set(amount)\n    return change_partition(amount, coin_set)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def get_coin_set(n):\r\n        x = 0\r\n        while pow(2, x)<=n:\r\n            x += 1\r\n        return x-1\r\n    def change_partition(n, coin_set):\r\n        if n==0:\r\n            return 1\r\n        elif n<0:\r\n            return 0\r\n        elif coin_set==0:\r\n            return 0\r\n        else:\r\n            has_power = change_partition(n-pow(2, coin_set), coin_set)\r\n            no_power = change_partition(n, coin_set-1)\r\n            return has_power+k\r\n    coin_set = get_coin_set(amount)\r\n    return change_partition(amount, coin_set)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","0","","# Error: expected","#     6","# but got","#     0","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":508,"studentId":0,"date":null,"diff":"\r\nInputObject                                            SideIndicator\r\n-----------                                            -------------\r\n        if amount == 1:                                =>           \r\n    def count_partitions(amount, m):                   =>           \r\n            return 1                                   =>           \r\n    return count_partitions(amount, coin_m(amount))    =>           \r\n                                                       =>           \r\n    \"\"\"def count_partitions(amount, m):                <=           \r\n    return count_partitions(amount, coin_m(amount))\"\"\" <=           \r\n    return coin_m(amount)                              <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def coin_m(amount):\n        exponent = 0\n        base = 2\n        while base**exponent < amount:\n            exponent += 1\n        return base**(exponent-1)\n\n    \"\"\"def count_partitions(amount, m):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            with_m = count_partitions(amount-m, m)\n            without_m = count_partitions(amount, m-coin_m(m))\n            return with_m + without_m\n    return count_partitions(amount, coin_m(amount))\"\"\"\n    return coin_m(amount)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def coin_m(amount):\n        exponent = 0\n        base = 2\n        if amount == 1:\n            return 1\n        while base**exponent < amount:\n            exponent += 1\n        return base**(exponent-1)\n\n    def count_partitions(amount, m):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            with_m = count_partitions(amount-m, m)\n            without_m = count_partitions(amount, m-coin_m(m))\n            return with_m + without_m\n    return count_partitions(amount, coin_m(amount))\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def coin_m(amount):\r\n        amount = 0\r\n        base = 2\r\n        while base**exponent<amount:\r\n            exponent += 1\r\n        return base**(exponent-1)\r\n    return coin_m(amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","4","","# Error: expected","#     6","# but got","#     4","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":509,"studentId":0,"date":null,"diff":"\r\nInputObject                                                             SideIndicator\r\n-----------                                                             -------------\r\n    def count_with(coin, amount):                                       =>           \r\n        if amount < 0:                                                  =>           \r\n            return 0                                                    =>           \r\n        elif amount == 0:                                               =>           \r\n            return 1                                                    =>           \r\n        elif coin > amount:                                             =>           \r\n            return 0                                                    =>           \r\n        else:                                                           =>           \r\n            with_coin = count_with(coin, amount - coin)                 =>           \r\n            no_coin = count_with(2 * coin, amount)                      =>           \r\n            return with_coin + no_coin                                  =>           \r\n                                                                        =>           \r\n    return count_with(1, amount)                                        =>           \r\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)  =>           \r\n    if amount == 1:                                                     <=           \r\n        return 1                                                        <=           \r\n    elif amount / 4 >= 1:                                               <=           \r\n        return 1 + count_change(amount - 2) + count_change(amount // 4) <=           \r\n    else:                                                               <=           \r\n        return 1 + count_change(amount - 2)                             <=           \r\n\"\"\"                                                                     <=           \r\n    while index <= len(change_list):                                    <=           \r\n        if change_list(index) / 2 >= 1:                                 <=           \r\n            count += 1                                                  <=           \r\n        else                                                            <=           \r\n    def make_list(amount, partial_list):                                <=           \r\n        index = 0                                                       <=           \r\n        while(index <= partial_list):                                   <=           \r\n            t                                                           <=           \r\n            index += 1                                                  <=           \r\n\"\"\"                                                                     <=           \r\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)  <=           \r\n                                                                        <=           \r\n                                                                        <=           \r\n                                                                        <=           \r\n                                                                        <=           \r\n                                                                        <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if amount == 1:\n        return 1\n    elif amount / 4 >= 1:\n        return 1 + count_change(amount - 2) + count_change(amount // 4)\n    else:\n        return 1 + count_change(amount - 2)\n\n\n\"\"\"\n\n    while index <= len(change_list):\n        if change_list(index) / 2 >= 1:\n            count += 1\n\n        else\n    def make_list(amount, partial_list):\n        index = 0\n        while(index <= partial_list):\n            t\n            index += 1\n\n\"\"\"\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_with(coin, amount):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif coin > amount:\n            return 0\n        else:\n            with_coin = count_with(coin, amount - coin)\n            no_coin = count_with(2 * coin, amount)\n            return with_coin + no_coin\n            \n    return count_with(1, amount)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination) \n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","6",">>> count_change(10)","Traceback (most recent call last):","  ...","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 302, in count_change","    return 1 + count_change(amount - 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 302, in count_change","    return 1 + count_change(amount - 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 302, in count_change","    return 1 + count_change(amount - 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 302, in count_change","    return 1 + count_change(amount - 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 302, in count_change","    return 1 + count_change(amount - 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 302, in count_change","    return 1 + count_change(amount - 2)","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 297, in count_change","    if amount == 1:","RecursionError: maximum recursion depth exceeded in comparison","","# Error: expected","#     14","# but got","#     RecursionError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":2,"Id":510,"studentId":0,"date":null,"diff":"\r\nInputObject                              SideIndicator\r\n-----------                              -------------\r\n    return amount_of_ways(amount, coin)  =>           \r\n    return amount_of_ways(amount, coins) <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    coin = []\n    i = 1\n    while i <= amount:\n        if i <= amount:\n            coin.append(i)\n            i *= 2\n    def amount_of_ways(number, coins):\n        if number == 0:\n            return 1\n        if number < 0:\n            return 0 \n        if len(coins) ==0:\n            return 0\n\n        return amount_of_ways( number - coins[0], coins) + amount_of_ways(number, coins[1:])\n    return amount_of_ways(amount, coins)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    coin = []\n    i = 1\n    while i <= amount:\n        if i <= amount:\n            coin.append(i)\n            i *= 2\n    def amount_of_ways(number, coins):\n        if number == 0:\n            return 1\n        if number < 0:\n            return 0 \n        if len(coins) ==0:\n            return 0\n\n        return amount_of_ways( number - coins[0], coins) + amount_of_ways(number, coins[1:])\n    return amount_of_ways(amount, coin)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 302, in count_change","    return amount_of_ways(amount, coins)","NameError: name 'coins' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":511,"studentId":0,"date":null,"diff":"\r\nInputObject                                 SideIndicator\r\n-----------                                 -------------\r\n    # def lv(amount):                       =>           \r\n    #     i = 0                             =>           \r\n    #     largest_value=2**i                =>           \r\n    #     while 2**i<=amount:               =>           \r\n    #         i+=1                          =>           \r\n    #         largest_value=2**i            =>           \r\n    #     return largest_value              =>           \r\n            d = splitting(x, y*2)           =>           \r\n                                            =>           \r\n    return splitting(amount, 1)             =>           \r\n    # def largest_value(a):                 <=           \r\n    #     if a <=1 :                        <=           \r\n    #         return 0                      <=           \r\n    #     else:                             <=           \r\n    #         b = 1                         <=           \r\n    #         while b < a:                  <=           \r\n    #             b = b * 2                 <=           \r\n    #         return b//2                   <=           \r\n            d = splitting(x, y/2)           <=           \r\n            i = 0                           <=           \r\n            largest_value = 2**i            <=           \r\n            while 2**i <= amount:           <=           \r\n                i+= 1                       <=           \r\n                largest_value = 2**i        <=           \r\n    return splitting(amount, largest_value) <=           \r\n                                            <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    # def largest_value(a):\n    # \tif a <=1 :\n    # \t\treturn 0\n    # \telse: \n    # \t\tb = 1\n    # \t\twhile b < a:\n    # \t\t\tb = b * 2\n    # \t\treturn b//2\n\n\n    def splitting(x,y):\n    \tif x < y :\n    \t\treturn 0\n    \telif x == y:\n    \t\treturn 1\n    \telif y == 0:\n    \t\treturn 1\n    \telse:\n    \t\tc = splitting(x-y,y)\n    \t\td = splitting(x, y/2)\n    \t\treturn c + d\n    \t\ti = 0\n    \t\tlargest_value = 2**i\n    \t\twhile 2**i <= amount:\n    \t\t\ti+= 1\n    \t\t\tlargest_value = 2**i\n\n    return splitting(amount, largest_value)\n\n\n    \t\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n\t# def lv(amount):\n\t# \ti = 0\n\t# \tlargest_value=2**i\n\t# \twhile 2**i<=amount:\n\t# \t\ti+=1\n\t# \t\tlargest_value=2**i\n\t# \treturn largest_value\n\n    def splitting(x,y):\n    \tif x < y :\n    \t\treturn 0\n    \telif x == y:\n    \t\treturn 1\n    \telif y == 0:\n    \t\treturn 1\n    \telse:\n    \t\tc = splitting(x-y,y)\n    \t\td = splitting(x, y*2)\n    \t\treturn c + d\n    \t\t\n\n    return splitting(amount, 1)\n\n\n    \t\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def splitting(x, y):\r\n        if x<y:\r\n            return 0\r\n        elif x==y:\r\n            return 1\r\n        elif y==0:\r\n            return 1\r\n        else:\r\n            c = splitting(x-y, y)\r\n            d = splitting(x, y/2)\r\n            return c+k\r\n            i = 0\r\n            largest_value = 2**i\r\n            while 2**i<=amount:\r\n                i += 1\r\n                largest_value = 2**i\r\n    return splitting(amount, largest_value)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","Traceback (most recent call last):","  File \"C:\\Users\\Gustavo\\Box Sync\\pesquisa\\tutor\\hw02-sp16\\hw02.py\", line 332, in count_change","    return splitting(amount, largest_value)","NameError: name 'largest_value' is not defined","","# Error: expected","#     6","# but got","#     NameError","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":1,"Id":512,"studentId":0,"date":null,"diff":"\r\nInputObject                                                          SideIndicator\r\n-----------                                                          -------------\r\n    def highest_coin(amount):                                        =>           \r\n        n = 0                                                        =>           \r\n        while 2**n < amount:                                         =>           \r\n            n+=1                                                     =>           \r\n        return 2**n                                                  =>           \r\n    def count_partitions(n,m):                                       =>           \r\n        if n == 0:                                                   =>           \r\n            return 1                                                 =>           \r\n        elif n < 0:                                                  =>           \r\n            return 0                                                 =>           \r\n        elif m < 1:                                                  =>           \r\n            return 0                                                 =>           \r\n        else:                                                        =>           \r\n            return count_partitions(n-m,m) + count_partitions(n,m/2) =>           \r\n    return count_partitions(amount,highest_coin(amount))             =>           \r\n                                                                     <=           \r\n\r\n\r\n","before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\" \n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\" \n    def highest_coin(amount):\n        n = 0\n        while 2**n < amount:\n            n+=1\n        return 2**n\n    def count_partitions(n,m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m < 1:\n            return 0\n        else:\n            return count_partitions(n-m,m) + count_partitions(n,m/2)\n    return count_partitions(amount,highest_coin(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":["=====================================================================","Assignment: Homework 2","OK, version v1.5.3","=====================================================================","","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","Running tests","","---------------------------------------------------------------------","Doctests for count_change","",">>> from hw02 import *",">>> count_change(7)","","# Error: expected","#     6","# but got","#     ","","---------------------------------------------------------------------","Test summary","    0 test cases passed before encountering first failed test case",""]},{"ErrorFlag":0,"Id":513,"studentId":0,"date":null,"diff":null,"before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    # TO DO\n    #number of combination of coins larger than value 1, total less than amount\n\n    def coin_value(c):\n        return 2 ** c\n\n    def coin_partitions(n, k):\n        if n < 0:\n            return 0\n        elif k == 1 or n == 0:\n            return 1\n        else:\n            return coin_partitions(n - k, k) + coin_partitions(n, k - 1)\n\n\n    def largest_coin_index():\n        x = 1\n        while 2 ** (x + 1) <= amount:\n            x += 1\n        return x\n\n    return coin_partitions(amount, largest_coin_index()) \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    # TO DO\n    #number of combination of coins larger than value 1, total less than amount\n\n    def coin_value(c):\n        return 2 ** c\n\n    def coin_partitions(n, k):\n        if n < 0:\n            return 0\n        elif k == 0 or n == 0:\n            return 1\n        else:\n            return coin_partitions(n - coin_value(k), k) + coin_partitions(n, k - 1)\n\n    def largest_coin_index():\n        x = 0\n        while 2 ** (x + 1) <= amount:\n            x += 1\n        return x\n\n    return coin_partitions(amount, largest_coin_index()) \n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def coin_value(c):\r\n        return 2**amount\r\n    def coin_partitions(n, k):\r\n        if n<0:\r\n            return 0\r\n        elif k==1 or n==0:\r\n            return 1\r\n        else:\r\n            return coin_partitions(n-k, k)+coin_partitions(n, k-1)\r\n    def largest_coin_index():\r\n        x = 1\r\n        while 2**(x+1)<=amount:\r\n            x += 1\r\n        return x\r\n    return coin_partitions(amount, largest_coin_index())\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":2,"Id":514,"studentId":0,"date":null,"diff":null,"before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def largest_change(n):\n        power = 0\n        while 2 ** power < n:\n            power += 1\n        return 2 ** (power - 1)\n    def count(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        else:\n            return count(n - m, m) + count(n, m / 2)\n    return count(amount, largest_change(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def largest_change(n):\n        power = 0\n        while 2 ** power < n:\n            power += 1\n        return 2 ** (power - 1)\n    def count(n, m):\n        if n == 0:\n            return 1\n        elif n < 0 or m < 1:\n            return 0\n        else:\n            return count(n - m, m) + count(n, m / 2)\n    return count(amount, largest_change(amount))\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":515,"studentId":0,"date":null,"diff":null,"before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    coins = []\n    n = 0\n    while 2**n <= amount:\n        coins += [2**n]\n        n += 1\n    def count_change_help(amount, coins):\n        if amount < 0:\n            return 0\n        if amount == 0:\n            return 1\n        else:\n            return count_change_help((amount - coins[0]), coins) + count_change_help(amount, coins[1:])\n    return count_change_help(amount, coins)\n\n\n    \"\"\"def count_change_helper(n):\n        #only one way to make one cent\n        if amount <=1:\n            return 1\n        #what is the biggest size coin that will fit?\n        n = 1\n        total = 0\n        while 2**n <=amount:\n            total = n\n            n += 1\n        biggest_coin = 2**n\n        #use as many of that coin as possible\n        k = 1\n        while k*(2**n) <= amount:\n            k += 1\n        times_you_use_it = k\n        #now subtract the amount by k times the biggest coin\n        amount = amount - (times_you_use_it*biggest_coin)\n        #take your new amount is your new n and repeat that process\n        n = amount\n    return count_change_helper(amount)\"\"\"\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    coins = []\n    n = 0\n    while 2**n <= amount:\n        coins += [2**n]\n        n += 1\n    def count_change_help(amount, coins):\n        if amount < 0:\n            return 0\n        if amount == 0:\n            return 1\n        if len(coins) == 0:\n            return 0\n        else:\n            return count_change_help((amount - coins[0]), coins) + count_change_help(amount, coins[1:])\n    return count_change_help(amount, coins)\n\n\n    \"\"\"def count_change_helper(n):\n        #only one way to make one cent\n        if amount <=1:\n            return 1\n        #what is the biggest size coin that will fit?\n        n = 1\n        total = 0\n        while 2**n <=amount:\n            total = n\n            n += 1\n        biggest_coin = 2**n\n        #use as many of that coin as possible\n        k = 1\n        while k*(2**n) <= amount:\n            k += 1\n        times_you_use_it = k\n        #now subtract the amount by k times the biggest coin\n        amount = amount - (times_you_use_it*biggest_coin)\n        #take your new amount is your new n and repeat that process\n        n = amount\n    return count_change_helper(amount)\"\"\"\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":516,"studentId":0,"date":null,"diff":null,"before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def counter(so_far,amount):\n        if amount==0:\n            return 1\n        elif so_far>amount:\n            return 0\n        else:\n            return counter(so_far+1,amount)+counter(so_far*2,amount)\n    return counter(1,amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def counter(so_far,amount):\n        if amount==0:\n            return 1\n        if so_far==amount:\n            return 1\n        elif so_far>amount:\n            return 0\n        else:\n            return counter(so_far+1,amount)+counter(so_far*2,amount)\n    return counter(1,amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def counter(so_far, amount):\r\n        if amount==0:\r\n            return 1\r\n        elif so_far>amount:\r\n            return 0\r\n        else:\r\n            return counter(so_far+1, amount)+counter(so_far*2, amount)\r\n    return counter(1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":517,"studentId":0,"date":null,"diff":null,"before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    num_combos = 0\n    coins = []\n    x = 0\n    while amount >= 2**x:\n        coins.append(2**x)\n        x += 1\n    y = len(coins)\n    def count_finder(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_finder(n-coins[m], m) + count_finder(n, m-1)\n    return count_finder(amount, y)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    num_combos = 0\n    coins = [0]\n    x = 0\n    while amount >= 2**x:\n        coins.append(2**x)\n        x += 1\n    y = len(coins)-1\n    def count_finder(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        else:\n            return count_finder(n-coins[m], m) + count_finder(n, m-1)\n    return count_finder(amount, y)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    amount = 0\r\n    coins = []\r\n    x = 0\r\n    while amount>=2**x:\r\n        coins.append(2**x)\r\n        x += 1\r\n    y = len(coins)\r\n    def count_finder(n, m):\r\n        if n==0:\r\n            return 1\r\n        elif n<0:\r\n            return 0\r\n        elif m==0:\r\n            return 0\r\n        else:\r\n            return count_finder(n-coins[m], m)+count_finder(n, m-1)\r\n    return count_finder(amount, y)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":2,"Id":518,"studentId":0,"date":null,"diff":null,"before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"\"\"coins = 2**x for x in ran\n    def count(curr_amount,power,total):\n        coins = [2**x for x in range(power+1)]\n        if coins[-1] > amount:\n            return total\n    return count(amount,0,0)\"\"\"\n    i, n, coins = 0, 0, []\n    while n < amount:\n        n += 2**i\n        coins.append(2**i)\n        i +=1\n    coins = coins[::-1]\n\n    def count(amount, coins):\n        if amount == 0:\n            return 1\n        elif amount < 0 or not coins:\n            return 0\n        else:\n            return count(amount - coins[0],coins) + count(amount,coints[1:])\n    return count(amount,coins)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"\"\"coins = 2**x for x in ran\n    def count(curr_amount,power,total):\n        coins = [2**x for x in range(power+1)]\n        if coins[-1] > amount:\n            return total\n    return count(amount,0,0)\"\"\"\n    i, n, coins = 0, 0, []\n    while n < amount:\n        n += 2**i\n        coins.append(2**i)\n        i +=1\n    coins = coins[::-1]\n\n    def count(amount, coins):\n        if amount == 0:\n            return 1\n        elif amount < 0 or not coins:\n            return 0\n        else:\n            return count(amount - coins[0],coins) + count(amount,coins[1:])\n    return count(amount,coins)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":519,"studentId":0,"date":null,"diff":null,"before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def counter(amount , coin = 1):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif coin > amount:\n            return 0\n        else:\n            change_with_coin = counter(amount - coin, coin)\n            change_other_coins = counter(amount, coin*2)\n            return change_with_coin + change_other_coins\n    return counter(amount, coin)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    def counter(amount , coin = 1):\n        if amount < 0:\n            return 0\n        elif amount == 0:\n            return 1\n        elif coin > amount:\n            return 0\n        else:\n            change_with_coin = counter(amount - coin, coin)\n            change_other_coins = counter(amount, coin*2)\n            return change_with_coin + change_other_coins\n    return counter(amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def counter(amount, coin = 1):\r\n        if amount<0:\r\n            return 0\r\n        elif amount==0:\r\n            return 1\r\n        elif coin>amount:\r\n            return 0\r\n        else:\r\n            change_with_coin = counter(amount-coin, coin)\r\n            change_other_coins = counter(amount, coin*2)\r\n            return change_with_coin+k\r\n    return counter(amount, coin)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":520,"studentId":0,"date":null,"diff":null,"before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def numMoves (coinValue, money):\n        if money < 0:\n            return 0\n        elif money == 0:\n            return 0\n        elif coinValue > money:\n            return 0\n        else:\n            minIncluded = numMoves(coinValue, money - coinValue)\n            minExcluded = numMoves(2*coinValue, money)\n            return minIncluded + minExcluded\n\n    return numMoves(1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def numMoves (coinValue, money):\n        if money < 0:\n            return 0\n        elif money == 0:\n            return 1\n        elif coinValue > money:\n            return 0\n        else:\n            minIncluded = numMoves(coinValue, money - coinValue)\n            minExcluded = numMoves(2*coinValue, money)\n            return minIncluded + minExcluded\n\n    return numMoves(1, amount)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def numMoves(coinValue, money):\r\n        if money<0:\r\n            return 0\r\n        elif money==0:\r\n            return 0\r\n        elif coinValue>money:\r\n            return 0\r\n        else:\r\n            minIncluded = numMoves(coinValue, money-coinValue)\r\n            minExcluded = numMoves(2*coinValue, money)\r\n            return minIncluded+k\r\n    return numMoves(1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":521,"studentId":0,"date":null,"diff":null,"before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def partitionz(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m > n:\n            return 1\n        else:\n            return partitionz(n-m, m) + partitionz(n, m*2)\n    return partitionz(amount, 1)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def partitionz(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m > n:\n            return 0\n        else:\n            return partitionz(n-m, m) + partitionz(n, m*2)\n    return partitionz(amount, 1)\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def partitionz(n, m):\r\n        if amount==0:\r\n            return 1\r\n        elif n<0:\r\n            return 0\r\n        elif m>n:\r\n            return 1\r\n        else:\r\n            return partitionz(n-m, m)+partitionz(n, m*2)\r\n    return partitionz(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":522,"studentId":0,"date":null,"diff":null,"before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helpp(minn, amount):\n        if ((amount < 0) or (minn > amount)):\n            return 0;\n        elif (amount == 0):\n            return 1;\n        else:\n            return helpp(minn, amount-minn) + helpp(2*minn, amount);\n    return helpp(1, amount);\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helpp(minn, amount):\n        if (amount < 0):\n            return 0;\n        elif (amount == 0):\n            return 1;\n        elif (minn > amount):\n            return 0;\n        else:\n            return helpp(minn, amount-minn) + helpp(2*minn, amount);\n    return helpp(1, amount);\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def helpp(minn, amount):\r\n        if ((amount<0) or (minn>amount)):\r\n            return 0\r\n        elif (amount==0):\r\n            return 1\r\n        else:\r\n            return helpp(minn, amount-minn)+helpp(2*minn, amount)\r\n    return helpp(1, amount)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":523,"studentId":0,"date":null,"diff":null,"before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\" \n    def all_possible_cases (n):\n        final_result = 0\n        while pow(2, final_result) <=n:\n            final_result += 1\n        return final_result - 1\n\n    number_of_cases = all_possible_cases(amount)\n    def count(n,possible_cases):\n        if n<0:\n            return 0\n        elif n == 0:\n            return 1\n        elif possible_cases == 0:\n            return 2**0 \n        else:\n            b= count (n - pow(2, number_of_cases), number_of_cases)\n            a= count (n, number_of_cases - 1)\n            return a+b\n\n\n    return count(amount, number_of_cases)\n\n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\" \n    def all_possible_cases (n):\n        final_result = 0\n        while pow(2, final_result) <n or pow(2, final_result)==n:\n            final_result += 1\n        return final_result - 1\n\n    number_of_cases = all_possible_cases(amount)\n    def count(n,possible_cases):\n        if n<0:\n            return 0\n        elif n == 0:\n            return 1\n        elif possible_cases == 0:\n            return 2**0 \n        else:\n            b= count (n - pow(2, possible_cases), possible_cases)\n            a= count (n, possible_cases - 1)\n            return a+b\n\n\n    return count(amount, number_of_cases)\n\n\n\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    def all_possible_cases(n):\r\n        final_result = 0\r\n        while pow(2, final_result)<=n:\r\n            final_result += 1\r\n        return final_result-1\r\n    number_of_cases = all_possible_cases(amount)\r\n    def count(n, possible_cases):\r\n        if n<0:\r\n            return 0\r\n        elif n==0:\r\n            return 1\r\n        elif possible_cases==0:\r\n            return 2**0\r\n        else:\r\n            b = count(n-pow(2, number_of_cases), number_of_cases)\r\n            a = count(n, number_of_cases-1)\r\n            return a+k\r\n    return count(amount, number_of_cases)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-0)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":2,"Id":524,"studentId":0,"date":null,"diff":null,"before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def biggest_power(x):\n        if 2^x > amount:\n            return x - 1\n        else:\n            return biggest_power(x + 1)\n    def change(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        return change(n - m, m) + change(n, m // 2)\n    return change(amount, 2^biggest_power(0))\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def biggest_power(x):\n        if 2**x > amount:\n            return x - 1\n        else:\n            return biggest_power(x + 1)\n    def change(n, m):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        elif m == 0:\n            return 0\n        return change(n - m, m) + change(n, m // 2)\n    return change(amount, 2**biggest_power(0))\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":525,"studentId":0,"date":null,"diff":null,"before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def change(amount, x):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif x == 0:\n            return 0\n        else:\n            return change(amount - x, x) + change(amount, x // 2)\n    i = 0\n    m = 0\n    while m <= amount:\n        m = 2 ** i\n        i += 1\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def change(amount, x):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif x == 0:\n            return 0\n        else:\n            return change(amount - x, x) + change(amount, x // 2)\n    i = 0\n    m = 0\n    while m <= amount // 2:\n        m = 2 ** i\n        i += 1\n    if amount < 2:\n        m = 1\n    return change(amount, m)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":526,"studentId":0,"date":null,"diff":null,"before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    m = 1\n    def count_partitions(amount, m):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        else:\n            return count_partitions(amount-m, m) + count_partitions(amount, m*2)\n    return count_partitions(amount, 1)\n\n    # if amount == 1:\n    #     return 1\n    # elif amount == 2:\n    #     return 2\n    # else:\n    #     return count_change(amount) + count_change(amount-1)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    m = 1\n    def count_partitions(amount, m):\n        if amount == 0:\n            return 1\n        elif amount < 0:\n            return 0\n        elif m > amount:\n            return 0\n        else:\n            return count_partitions(amount-m, m) + count_partitions(amount, m*2)\n    return count_partitions(amount, 1)\n\n    # if amount == 1:\n    #     return 1\n    # elif amount == 2:\n    #     return 2\n    # else:\n    #     return count_change(amount) + count_change(amount-1)\n\n\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    amount = 1\r\n    def count_partitions(amount, m):\r\n        if amount==0:\r\n            return 1\r\n        elif amount<0:\r\n            return 0\r\n        else:\r\n            return count_partitions(amount-m, m)+count_partitions(amount, m*2)\r\n    return count_partitions(amount, 1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":527,"studentId":0,"date":null,"diff":null,"before":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    i = 1\n    lst = []\n    while 2**i <= amount:\n        lst.append(2**i)\n        i += 1\n\n\n\n    def partition(x, y):\n        if x < 0 or y <= 0:\n            return 1\n        if x == 0 :\n            return 1\n        else:\n            return partition(x-lst[y], y) + partition(x, y-1)\n    return partition(amount, len(lst)-1)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","after":"def count_change(amount):\n    \"\"\"Return the number of ways to make change for amount.\n\n    >>> count_change(7)\n    6\n    >>> count_change(10)\n    14\n    >>> count_change(20)\n    60\n    >>> count_change(100)\n    9828\n    \"\"\"\n    i = 1\n    highest = 0\n    while 2**i <= amount:\n        highest = 2**i\n        i += 1\n\n\n\n\n    def partition(x, y):\n        if x < 0 or y <= 0:\n            return 0\n        if x == 0 :\n            return 1\n        else:\n            return partition(x-y, y) + partition(x, y//2)\n    return partition(amount, highest)\n\ndef print_move(origin, destination):\n    \"\"\"Print instructions to move a disk.\"\"\"\n    print(\"Move the top disk from rod\", origin, \"to rod\", destination)\n","Time":0,"SynthesizedAfter":"\r\ndef count_change(amount):\r\n    amount = 1\r\n    lst = []\r\n    while 2**i<=amount:\r\n        lst.append(2**i)\r\n        i += 1\r\n    def partition(x, y):\r\n        if x<0 or y<=0:\r\n            return 1\r\n        if x==0:\r\n            return 1\r\n        else:\r\n            return partition(x-lst[y], y)+partition(x, y-1)\r\n    return partition(amount, len(lst)-1)\r\ndef print_move(origin, destination):\r\n    print\"Move the top disk from rod\", origin, \"to rod\", destination","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-amount)), Selected(\\x => Match(x, StartsWithTarget(Target(LeafWildcard(\"NameExpressionNode\")))), InOrderSort(ast))))))","failed":null}]