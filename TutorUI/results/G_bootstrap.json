[{"ErrorFlag":0,"Id":0,"studentId":196,"date":"2016-02-08 08:13:19.976848","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x = n\n    if n <= 3:\n        return n\n    elif x-3 == n:\n        return 1\n    else:\n        return g(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-08T08:13:19.976848","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":196,"date":"2016-02-08 08:14:36.522435","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def counter(i):\n        if i == n - 3:\n            return 1\n        return g(i - 1)\n    counter(n)\n\n\n","after":null,"SubmissionTime":"2016-02-08T08:14:36.522435","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":196,"date":"2016-02-08 08:19:13.539388","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def counter(i):\n        if i == 4:\n            return 0\n        return g(n-i) + ((i+1)*g(n-(i+1)))\n    return counter(1)\n\n\n","after":null,"SubmissionTime":"2016-02-08T08:19:13.539388","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":196,"date":"2016-02-08 08:19:13.539388","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def counter(i):\n        if i == 4:\n            return 0\n        return g(n-i) + ((i+1)*g(n-(i+1)))\n    return counter(1)\n\n\n","after":null,"SubmissionTime":"2016-02-08T08:19:13.539388","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":196,"date":"2016-02-08 08:19:13.539388","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def counter(i):\n        if i == 4:\n            return 0\n        return g(n-i) + ((i+1)*g(n-(i+1)))\n    return counter(1)\n\n\n","after":null,"SubmissionTime":"2016-02-08T08:19:13.539388","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":196,"date":"2016-02-08 08:19:39.877939","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def counter(i):\n        if i == 4:\n            return 0\n        return g(n-i) + ((i+1)*g(n-(i+1)))\n    counter(1)\n\n\n","after":null,"SubmissionTime":"2016-02-08T08:19:39.877939","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":196,"date":"2016-02-08 08:19:52.041524","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def counter(i):\n        if i == 4:\n            return 1\n        return g(n-i) + ((i+1)*g(n-(i+1)))\n    counter(1)\n\n\n","after":null,"SubmissionTime":"2016-02-08T08:19:52.041524","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":605,"date":"2016-02-08 09:41:33.785732","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-08T09:41:33.785732","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":177,"date":"2016-02-08 10:02:57.842470","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        G(n) == n\n        return G\n    else: \n        G(n) == G(n-1) + 2 * G(n-2) + 3 * G(n-3)\n        return G\n","after":null,"SubmissionTime":"2016-02-08T10:02:57.84247","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":177,"date":"2016-02-08 10:03:12.944140","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        g(n) == n\n        return g\n    else: \n        g(n) == g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n        return g\n","after":null,"SubmissionTime":"2016-02-08T10:03:12.94414","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":177,"date":"2016-02-08 10:03:21.614923","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        g(n) == n\n        \n    else: \n        g(n) == g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n        \n","after":null,"SubmissionTime":"2016-02-08T10:03:21.614923","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":558,"date":"2016-02-08 10:30:11.151784","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n > 3:\n        return g(n-1)*g(n-2)*g(n-3)\n    else:\n        return n\n\n","after":null,"SubmissionTime":"2016-02-08T10:30:11.151784","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":161,"date":"2016-02-08 11:31:18.739669","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-08T11:31:18.739669","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":45,"date":"2016-02-08 12:02:09.832735","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n    \treturn 0\n    elif n <= 3:\n    \treturn n + g(n-1)\n    \treturn g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-08T12:02:09.832735","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":45,"date":"2016-02-08 12:02:41.343154","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n    \treturn 0\n    elif n <= 3:\n    \treturn n + g(n-1)\n    return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-08T12:02:41.343154","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":45,"date":"2016-02-08 12:03:27.999447","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n    \treturn 0\n    elif n <= 3:\n    \tprint(n)\n    \treturn n + g(n-1)\n    return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-08T12:03:27.999447","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":19,"date":"2016-02-08 13:42:54.766858","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    return G(n-1) + 2 * G(n-2) + 3 * G(n-3)\n\n","after":null,"SubmissionTime":"2016-02-08T13:42:54.766858","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":784,"date":"2016-02-08 13:43:46.110287","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:  \n        return n\n    return g(n-1)*g(n-2)*g(n-3)\n\n\n","after":null,"SubmissionTime":"2016-02-08T13:43:46.110287","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))))))), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":1,"Id":0,"studentId":166,"date":"2016-02-08 13:44:03.000863","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-08T13:44:03.000863","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":444,"date":"2016-02-08 13:55:42.818898","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(i, n):\n        if n <= 3:\n            return n\n        else:\n            return helper(i, n - 1) + (i + 1) * helper(i + 1, n - 2)\n\n\n\n","after":null,"SubmissionTime":"2016-02-08T13:55:42.818898","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":444,"date":"2016-02-08 13:55:58.358244","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(i, n):\n        if n <= 3:\n            return n\n        else:\n            return helper(i, n - 1) + (i + 1) * helper(i + 1, n - 2)\n    return helper(1, n)\n\n\n","after":null,"SubmissionTime":"2016-02-08T13:55:58.358244","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":444,"date":"2016-02-08 13:56:20.664456","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(i, n):\n        if n <= 3:\n            return n\n        else:\n            return helper(i, n - i) + (i + 1) * helper(i + 1, n - i - 1)\n    return helper(1, n)\n\n\n","after":null,"SubmissionTime":"2016-02-08T13:56:20.664456","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":854,"date":"2016-02-08 13:57:08.110172","diff":null,"before":"def g(n,x):\n    \"\"\"Return the value of G(n), computed recursively.\n    \n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n > 3:\n        return g(n - 1) + 2*g(n - 2) + 3*g(n - 3)\n    return n\n\n","after":null,"SubmissionTime":"2016-02-08T13:57:08.110172","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":444,"date":"2016-02-08 13:57:12.876825","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(i, n):\n        if n <= 3:\n            return n\n        else:\n            return i * helper(i, n - i) + (i + 1) * helper(i + 1, n - i - 1)\n    return helper(1, n)\n\n\n","after":null,"SubmissionTime":"2016-02-08T13:57:12.876825","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":444,"date":"2016-02-08 13:57:40.506706","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(i, n):\n        if n <= 3:\n            return n\n        else:\n            return i * helper(i, n - i) + (i + 1) * helper(i + 1, n - i )\n    return helper(1, n)\n\n\n","after":null,"SubmissionTime":"2016-02-08T13:57:40.506706","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":444,"date":"2016-02-08 13:58:33.985937","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(i, n):\n        if n <= 3:\n            return n\n        else:\n            return i * helper(i, n - i) + helper(i + 1, n - i - 1)\n    return helper(1, n)\n\n\n","after":null,"SubmissionTime":"2016-02-08T13:58:33.985937","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":620,"date":"2016-02-08 14:09:34.353369","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    else:\n        return g(n-1)+2*g(n-1)+3*g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-08T14:09:34.353369","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":444,"date":"2016-02-08 14:46:11.694411","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n#    if n <= 3:\n#        return n\n#    else:\n#        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n    sum = 0\n    if n <= 3:\n        return n\n    else:\n        for i in range(1,4):\n            sum = sum + i * g_iter(n-i)\n        return sum\n\n\n","after":null,"SubmissionTime":"2016-02-08T14:46:11.694411","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":25,"date":"2016-02-08 17:14:11.741308","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return n*g(n)+ (n-1)*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-08T17:14:11.741308","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":25,"date":"2016-02-08 17:14:48.751243","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return (n-1)*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-08T17:14:48.751243","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":25,"date":"2016-02-08 17:15:04.095270","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return (n-1)*g(n-1) + 1\n\n","after":null,"SubmissionTime":"2016-02-08T17:15:04.09527","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":308,"date":"2016-02-08 17:17:42.061819","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i = 1\n    g = 0\n    if n <= 3:\n        return n\n    else:\n        g = G(n-1) + 2 * G(n-2) + 3 * G(n - 3)\n        return g\n\n\n","after":null,"SubmissionTime":"2016-02-08T17:17:42.061819","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":308,"date":"2016-02-08 17:17:59.198848","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i = 1\n    g = 0\n    if n <= 3:\n        return n\n    else:\n        g = (n-1) + 2 * (n-2) + 3 * (n - 3)\n        return g\n\n\n","after":null,"SubmissionTime":"2016-02-08T17:17:59.198848","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":308,"date":"2016-02-08 17:19:18.135232","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    g = 0\n    if n <= 3:\n        return n\n    else:\n        g = (n-1) + 2 * (n-2) + 3 * (n - 3)\n        return g\n\n\n","after":null,"SubmissionTime":"2016-02-08T17:19:18.135232","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":308,"date":"2016-02-08 17:20:08.677686","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    g = 0\n    if n <= 3:\n        return n\n    else:\n        g = (n-1) + 2 * (n-2) + 3 * (n - 3)\n        g = g + g(n-1)\n        return g\n\n\n","after":null,"SubmissionTime":"2016-02-08T17:20:08.677686","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":670,"date":"2016-02-08 19:55:59.334133","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return n + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-08T19:55:59.334133","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":670,"date":"2016-02-08 19:58:57.624030","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return (n + g(n-1))\n\n","after":null,"SubmissionTime":"2016-02-08T19:58:57.62403","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":670,"date":"2016-02-08 19:59:10.024598","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return (n)\n    else:\n        return (n + g(n-1))\n\n","after":null,"SubmissionTime":"2016-02-08T19:59:10.024598","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":670,"date":"2016-02-08 20:02:37.038719","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + n\n\n","after":null,"SubmissionTime":"2016-02-08T20:02:37.038719","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":670,"date":"2016-02-08 20:05:32.023151","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) * n\n\n","after":null,"SubmissionTime":"2016-02-08T20:05:32.023151","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":670,"date":"2016-02-08 20:05:50.262189","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) * n-1\n\n","after":null,"SubmissionTime":"2016-02-08T20:05:50.262189","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":670,"date":"2016-02-08 20:09:04.299413","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) * (n-1)\n\n","after":null,"SubmissionTime":"2016-02-08T20:09:04.299413","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":670,"date":"2016-02-08 20:09:20.088372","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) * (n)\n\n","after":null,"SubmissionTime":"2016-02-08T20:09:20.088372","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":670,"date":"2016-02-08 20:09:29.598381","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) * (n - 1)\n\n","after":null,"SubmissionTime":"2016-02-08T20:09:29.598381","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":670,"date":"2016-02-08 20:09:53.402824","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) * (n + 1)\n\n","after":null,"SubmissionTime":"2016-02-08T20:09:53.402824","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":670,"date":"2016-02-08 20:11:27.104559","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) * n\n\n","after":null,"SubmissionTime":"2016-02-08T20:11:27.104559","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":670,"date":"2016-02-08 20:12:20.164689","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) * ((n+1) - 1 ) \n\n","after":null,"SubmissionTime":"2016-02-08T20:12:20.164689","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":670,"date":"2016-02-08 20:17:45.887257","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 2\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) * (i+1)\n\n","after":null,"SubmissionTime":"2016-02-08T20:17:45.887257","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":670,"date":"2016-02-08 20:17:54.672871","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 1\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) * (i+1)\n\n","after":null,"SubmissionTime":"2016-02-08T20:17:54.672871","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1009,"date":"2016-02-08 20:29:22.095035","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 1 or n == 2 or n == 3:\n        return n\n    return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-08T20:29:22.095035","SynthesizedAfter":"\r\ndef g(n):\r\n    if n==1 or n==2 or n==3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":788,"date":"2016-02-08 21:19:22.317141","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <=3:\n        return n\n    else:\n        return G(n-1) + 2*G(n-2) + 3*G(n-3)\n","after":null,"SubmissionTime":"2016-02-08T21:19:22.317141","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":838,"date":"2016-02-08 22:03:27.482366","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def obligatory_description(m, i):\n        if m <= 3:\n            return m\n        else:\n            return m * i + obligatory_description(m - 1, i + 1)\n    return obligatory_description(n, 1)\n\n","after":null,"SubmissionTime":"2016-02-08T22:03:27.482366","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":838,"date":"2016-02-08 22:03:56.530084","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def obligatory_description(m, i):\n        if m <= 3:\n            return m\n        else:\n            return m * i + obligatory_description(m - 1, i + 1)\n    return obligatory_description(n, 2)\n\n","after":null,"SubmissionTime":"2016-02-08T22:03:56.530084","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":443,"date":"2016-02-08 22:14:51.587334","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n","after":null,"SubmissionTime":"2016-02-08T22:14:51.587334","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":535,"date":"2016-02-08 22:20:06.498136","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return g(n-1) + (n+1)\n\n","after":null,"SubmissionTime":"2016-02-08T22:20:06.498136","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":535,"date":"2016-02-08 22:21:13.858685","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-08T22:21:13.858685","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":535,"date":"2016-02-08 22:21:20.520613","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return g(n-1) + n\n\n","after":null,"SubmissionTime":"2016-02-08T22:21:20.520613","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":535,"date":"2016-02-08 22:21:35.659410","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return g(n-1) + (n+1)\n\n","after":null,"SubmissionTime":"2016-02-08T22:21:35.65941","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":535,"date":"2016-02-08 22:21:40.391190","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return g(n-1) + (n+3)\n\n","after":null,"SubmissionTime":"2016-02-08T22:21:40.39119","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":535,"date":"2016-02-08 22:21:54.116446","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return g(n-1) + g(n+1)\n\n","after":null,"SubmissionTime":"2016-02-08T22:21:54.116446","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":535,"date":"2016-02-08 22:22:39.496506","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return (g(n-1)+n+1)\n\n","after":null,"SubmissionTime":"2016-02-08T22:22:39.496506","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":535,"date":"2016-02-08 22:23:04.953019","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return (g(n-1)*n)\n\n","after":null,"SubmissionTime":"2016-02-08T22:23:04.953019","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":535,"date":"2016-02-08 22:23:11.969576","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return (g(n-1)*n-2)\n\n","after":null,"SubmissionTime":"2016-02-08T22:23:11.969576","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":535,"date":"2016-02-08 22:24:16.004482","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return (G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3))\n\n","after":null,"SubmissionTime":"2016-02-08T22:24:16.004482","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return (g(n-1)+2*g(n-2)+3*g(n-3))","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":554,"date":"2016-02-08 22:44:44.615184","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    if n <= 3:\n        return n\n    else:\n        k = 1\n        while k <= 3:\n            return k * g(n-k)\n        \n\n","after":null,"SubmissionTime":"2016-02-08T22:44:44.615184","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":554,"date":"2016-02-08 22:45:50.699354","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    if n <= 3:\n        return n\n    else:\n        g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n        \n\n","after":null,"SubmissionTime":"2016-02-08T22:45:50.699354","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":168,"date":"2016-02-08 23:34:03.936031","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 1:\n        return 1\n    if n > 3:\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3) \n    return n\n\n","after":null,"SubmissionTime":"2016-02-08T23:34:03.936031","SynthesizedAfter":"\r\ndef g(n):\r\n    if n==1:\r\n        return 1\r\n    if n>3:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)\r\n    return n","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":773,"date":"2016-02-09 02:16:20.010319","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if (n<=3): return n\n    return g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-09T02:16:20.010319","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":773,"date":"2016-02-09 02:18:14.072600","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if (n<=3): return n\n    return factorial(g(n-1))\n\n","after":null,"SubmissionTime":"2016-02-09T02:18:14.0726","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":773,"date":"2016-02-09 02:18:25.129305","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if (n<=3): return n\n    return factorial(g(n))\n\n","after":null,"SubmissionTime":"2016-02-09T02:18:25.129305","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":773,"date":"2016-02-09 02:18:33.077743","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if (n<=3): return n\n    return factorial(g(n-1))\n\n","after":null,"SubmissionTime":"2016-02-09T02:18:33.077743","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":773,"date":"2016-02-09 02:20:48.985953","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if (n<=3): return n\n    return (n-3)*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-09T02:20:48.985953","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":773,"date":"2016-02-09 02:21:04.219515","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if (n<=3): return n\n    return (n-2)*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-09T02:21:04.219515","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":1045,"date":"2016-02-09 02:39:30.219772","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-09T02:39:30.219772","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1045,"date":"2016-02-09 02:50:03.007569","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n\n    return g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-09T02:50:03.007569","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":727,"date":"2016-02-09 06:21:34.112329","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    elif n % 3 == 1:\n        return 3 * g(n-1)\n    elif n % 3 == 2:\n        return 2 * g(n-1)\n    else:\n        return g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-09T06:21:34.112329","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":727,"date":"2016-02-09 06:23:58.424704","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 0:\n        return\n    if n <= 3:\n        return g(n-1)\n    elif n % 3 == 1:\n        return 3 * g(n-1)\n    elif n % 3 == 2:\n        return 2 * g(n-1)\n    else:\n        return g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-09T06:23:58.424704","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":727,"date":"2016-02-09 06:24:49.186318","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 0:\n        return 1\n    if n <= 3:\n        return n * g(n-1)\n    elif n % 3 == 1:\n        return 3 * g(n-1)\n    elif n % 3 == 2:\n        return 2 * g(n-1)\n    else:\n        return g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-09T06:24:49.186318","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":727,"date":"2016-02-09 06:32:47.870347","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n <= 3:\n        return n + g(n-1)\n    elif n % 3 == 1:\n        return 3 * n + g(n-1)\n    elif n % 3 == 2:\n        return 2 * n + g(n-1)\n    else:\n        return g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-09T06:32:47.870347","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":727,"date":"2016-02-09 06:43:12.482196","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) * g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-09T06:43:12.482196","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":202,"date":"2016-02-09 08:05:13.239054","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<= 3:\n        return n \n    else:\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n        \n\n","after":null,"SubmissionTime":"2016-02-09T08:05:13.239054","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":821,"date":"2016-02-09 09:40:10.399876","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return G(n-1) + 2 * G(n-2) + 3 * G(n-3)\n\n","after":null,"SubmissionTime":"2016-02-09T09:40:10.399876","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":502,"date":"2016-02-09 10:21:53.560881","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total, k = 0, 1\n    if k <=n:\n        if n <=3:\n            return n\n\n        return k*g(n-k)\n\n","after":null,"SubmissionTime":"2016-02-09T10:21:53.560881","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":502,"date":"2016-02-09 10:22:05.035813","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total, k = 0, 1\n    if k <=n:\n        if n <=3:\n            return n\n\n    return k*g(n-k)\n\n","after":null,"SubmissionTime":"2016-02-09T10:22:05.035813","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":502,"date":"2016-02-09 10:22:49.343302","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total, k = 0, 1\n    if k <=n:\n        if n <=3:\n            return n\n        else:\n            return k*g(n-k)\n    return n\n\n","after":null,"SubmissionTime":"2016-02-09T10:22:49.343302","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":502,"date":"2016-02-09 10:23:25.372382","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total, k = 0, 1\n    if k <=n:\n        if n <=3:\n            return n\n        else:\n            return k*g(n-k)\n        total, k = total + k*g(n-k), k+1\n    return n\n\n","after":null,"SubmissionTime":"2016-02-09T10:23:25.372382","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":502,"date":"2016-02-09 10:23:35.142074","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total, k = 0, 1\n    if k <=n:\n        if n <=3:\n            return n\n        else:\n            return k*g(n-k)\n    total, k = total + k*g(n-k), k+1\n    return n\n\n","after":null,"SubmissionTime":"2016-02-09T10:23:35.142074","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":502,"date":"2016-02-09 10:24:11.320869","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total, k = 0, 1\n    if n <= 3:\n        return n\n    else:\n        return k*g(n-k)\n    total, k = total + k*g(n-k), k+1\n    return n\n\n","after":null,"SubmissionTime":"2016-02-09T10:24:11.320869","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":502,"date":"2016-02-09 10:27:51.406163","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total, k = 0, 1\n    if k < n:\n\n        if n <= 3:\n            return n\n        else:\n            return k*g(n-k)\n    total, k = total + k*g(n-k), k+1\n    return n\n\n","after":null,"SubmissionTime":"2016-02-09T10:27:51.406163","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":502,"date":"2016-02-09 10:29:00.552014","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total, k = 0, 1\n    while k < n:\n\n        if n <= 3:\n            return n\n        else:\n            return k*g(n-k)\n    total, k = total + k*g(n-k), k+1\n    return n\n\n","after":null,"SubmissionTime":"2016-02-09T10:29:00.552014","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":502,"date":"2016-02-09 10:29:18.010740","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total, k = 0, 1\n    while k < n:\n        if n <= 3:\n            return n\n        else:\n            return k*g(n-k)\n        total, k = total + k*g(n-k), k+1\n    return n\n\n","after":null,"SubmissionTime":"2016-02-09T10:29:18.01074","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":502,"date":"2016-02-09 10:31:23.709587","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total, k = 0, 1\n    while k < n:\n        if n <= 3:\n            return n\n        else:\n            return k*g(n-k)\n        total, k = total + k*g(n-k), k+1\n    return g\n\n","after":null,"SubmissionTime":"2016-02-09T10:31:23.709587","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":502,"date":"2016-02-09 10:31:42.134187","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total, k = 0, 1\n    while k < n:\n        if n <= 3:\n            return n\n        else:\n            return k*g(n-k)\n        total, k = total + k*g(n-k), k+1\n    return total + k* g(n-k) \n\n","after":null,"SubmissionTime":"2016-02-09T10:31:42.134187","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":502,"date":"2016-02-09 10:33:48.120841","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total, k = 0, 1\n    if n <= 3:\n        return n\n    while k < n:\n        if n > 3:\n            return total + k*g(n-k)\n        total, k = total + k*g(n-k), k+1\n    \n\n","after":null,"SubmissionTime":"2016-02-09T10:33:48.120841","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":711,"date":"2016-02-09 10:34:15.299704","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    return g(n-1)*2*g(n-2)*3*g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-09T10:34:15.299704","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":502,"date":"2016-02-09 10:34:50.740423","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total, k = 0, 1\n    if n <= 3:\n        return n\n    while k < n:\n        if n > 3:\n            total, k = total = k * g(k-3). k + 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-09T10:34:50.740423","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":502,"date":"2016-02-09 10:35:09.311680","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total, k = 0, 1\n    if n <= 3:\n        return n\n    while k < n:\n        if n > 3:\n            total, k = total = k * g(n -k). k + 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-09T10:35:09.31168","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":502,"date":"2016-02-09 10:35:18.893143","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total, k = 0, 1\n    if n <= 3:\n        return n\n    while k < n:\n        if n > 3:\n            total, k = total = k * g(n -k), k + 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-09T10:35:18.893143","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":502,"date":"2016-02-09 10:35:35.340140","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total, k = 0, 1\n    if n <= 3:\n        return n\n    while k < n:\n        if n > 3:\n            total, k = total + k * g(n-k), k + 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-09T10:35:35.34014","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":502,"date":"2016-02-09 10:36:18.000407","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total, k = 0, 1\n    if n <= 3:\n        return n\n    while k < n:\n        if n > 3:\n            total, k = total + k * g(n-k), k \n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-09T10:36:18.000407","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":502,"date":"2016-02-09 10:38:18.693839","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total, k = 0, 1\n    if n <= 3:\n        return n\n    while k < n:\n        if n > 3:\n            total, k = total + k * g(n-k), k+1\n    return total \n\n\n","after":null,"SubmissionTime":"2016-02-09T10:38:18.693839","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":502,"date":"2016-02-09 10:39:13.037688","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total, k = 0, 1\n    if n <= 3:\n        return n\n\n    elif n > 3:\n        total, k = total + k * g(n-k), k+1\n\n    return total \n\n\n","after":null,"SubmissionTime":"2016-02-09T10:39:13.037688","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":986,"date":"2016-02-09 11:24:42.920993","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n < 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-09T11:24:42.920993","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":898,"date":"2016-02-09 12:06:02.360394","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n       return  G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)  \n\n","after":null,"SubmissionTime":"2016-02-09T12:06:02.360394","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":419,"date":"2016-02-09 14:06:50.235449","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        return g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-09T14:06:50.235449","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":419,"date":"2016-02-09 14:07:43.488977","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        return g(g(n-1))\n\n","after":null,"SubmissionTime":"2016-02-09T14:07:43.488977","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":332,"date":"2016-02-09 14:42:58.732121","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n \n    else:\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-09T14:42:58.732121","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":1,"Id":0,"studentId":903,"date":"2016-02-09 15:25:21.851696","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-09T15:25:21.851696","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-09 15:25:55.349874","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return n * (g(n - 1) + n)\n\n\n","after":null,"SubmissionTime":"2016-02-09T15:25:55.349874","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-09 15:32:24.990279","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n - count_up(x+1)) \n    return count_up(0)\n\n\n","after":null,"SubmissionTime":"2016-02-09T15:32:24.990279","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-09 15:32:46.160702","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n\n\n","after":null,"SubmissionTime":"2016-02-09T15:32:46.160702","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":21,"date":"2016-02-09 15:38:41.509206","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    elif n > 3:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 1)\n\n\n","after":null,"SubmissionTime":"2016-02-09T15:38:41.509206","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":423,"date":"2016-02-09 15:52:23.972743","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n\n","after":null,"SubmissionTime":"2016-02-09T15:52:23.972743","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":423,"date":"2016-02-09 15:53:16.671344","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    else: \n        return g(n-1)+1 * g(n-2)+3 * g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-09T15:53:16.671344","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-09 16:04:42.690007","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    #def helper(x):\n    if n <= 3:\n        return n\n    else:\n        return mul(n, ((n-1) + n+1) )\n\n         #(g(n-1) + n+1)\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-09T16:04:42.690007","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-09 16:07:53.732062","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return mul(n, ((n-count_up(x+1) + n+count_up(x+1)))) \n    return count_up(0)\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-09T16:07:53.732062","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-09 16:09:23.330425","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return mul(n, g(n - count_up(x+1)))\n\n\n                                                    #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-09T16:09:23.330425","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-09 16:09:46.424509","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return mul(n, g(n - count_up(x+1)))    #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-09T16:09:46.424509","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-09 16:10:18.749486","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(n, g(n - x))    #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-09T16:10:18.749486","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":128,"date":"2016-02-09 16:10:27.448607","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return g(n-1)+2\n\n","after":null,"SubmissionTime":"2016-02-09T16:10:27.448607","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":128,"date":"2016-02-09 16:11:13.099746","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-09T16:11:13.099746","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":128,"date":"2016-02-09 16:11:57.124394","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return g(n-1)+ 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-09T16:11:57.124394","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-09 16:16:13.401577","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul((n + (x+1)), g(n - x))    #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-09T16:16:13.401577","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-09 16:17:01.994807","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(n, g(n - x)) + x   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-09T16:17:01.994807","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-09 16:17:50.201931","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + x   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-09T16:17:50.201931","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-09 16:19:01.232699","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-09T16:19:01.232699","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-09 16:19:55.157348","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return n + mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-09T16:19:55.157348","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-09 16:20:11.320380","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return (n+1) + mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-09T16:20:11.32038","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-09 16:20:26.296345","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return g(n) + mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-09T16:20:26.296345","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-09 16:20:46.659324","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return g(mul(x, g(n - x)) + (x+1))   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-09T16:20:46.659324","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1008,"date":"2016-02-09 17:26:59.149801","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return (G(n-1)+ 2*G(n-2) + 3*G(n-3))\n\n","after":null,"SubmissionTime":"2016-02-09T17:26:59.149801","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return (g(n-1)+2*g(n-2)+3*g(n-3))","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":126,"date":"2016-02-09 17:40:25.580717","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-09T17:40:25.580717","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1008,"date":"2016-02-09 17:57:06.249313","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    a,b,c=1,2,3\n    if n<=3:\n        return n\n    else:\n        a,b,c=a+1,2*(a+b),3*(a+b+c)\n        n-=1\n    return c\n\n","after":null,"SubmissionTime":"2016-02-09T17:57:06.249313","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1008,"date":"2016-02-09 17:57:32.469923","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    a,b,c=1,2,3\n    if n<=3:\n        return n\n    else:\n        a,b,c=a+1,2*(a+b),3*(a+b+c)\n        n-=1\n    return b\n\n","after":null,"SubmissionTime":"2016-02-09T17:57:32.469923","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1008,"date":"2016-02-09 17:57:44.022323","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    a,b,c=1,2,3\n    if n<=3:\n        return n\n    else:\n        a,b,c=a+1,2*(a+b),3*(a+b+c)\n        n-=1\n    return a+b\n\n","after":null,"SubmissionTime":"2016-02-09T17:57:44.022323","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1008,"date":"2016-02-09 17:57:58.013797","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    a,b,c=1,2,3\n    if n<=3:\n        return n\n    else:\n        a,b,c=a+1,2*(a+b),3*(a+b+c)\n        n-=1\n    return a\n\n","after":null,"SubmissionTime":"2016-02-09T17:57:58.013797","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1008,"date":"2016-02-09 17:58:13.196112","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    a,b,c=1,2,3\n    if n<=3:\n        return n\n    else:\n        a,b,c=a+1,2*(a+b),3*(a+b+c)\n        n-=1\n    return c\n\n","after":null,"SubmissionTime":"2016-02-09T17:58:13.196112","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1008,"date":"2016-02-09 17:58:40.747208","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    a,b,c=1,2,3\n    if n<=3:\n        return n\n    else:\n        a,b,c=a+1,2*(a+b),3*(a+b+c)\n        n-=1\n    return (a+c)//2\n\n","after":null,"SubmissionTime":"2016-02-09T17:58:40.747208","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":304,"date":"2016-02-09 18:12:09.640472","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    if n > 3:\n        return G(n - 1)+ 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-09T18:12:09.640472","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    if n>3:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":712,"date":"2016-02-09 18:29:13.815282","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return (g(n-1)+2+g(n-2)+3(g(n-3)))\n\n\n","after":null,"SubmissionTime":"2016-02-09T18:29:13.815282","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":460,"date":"2016-02-09 19:37:23.929297","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) * g(n-2) + g(n-3)\n\n\n","after":null,"SubmissionTime":"2016-02-09T19:37:23.929297","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":460,"date":"2016-02-09 19:38:49.292910","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) * g(n-2) * g(n-3)\n\n\n","after":null,"SubmissionTime":"2016-02-09T19:38:49.29291","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))))))), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":797,"date":"2016-02-09 20:49:20.253653","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return g(n - 1) * g(n - 2) * g(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-09T20:49:20.253653","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))))))), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":1,"Id":0,"studentId":1059,"date":"2016-02-09 21:51:27.274067","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-09T21:51:27.274067","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":335,"date":"2016-02-09 21:52:07.697724","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n >= 0:\n        return g(n) \n\n","after":null,"SubmissionTime":"2016-02-09T21:52:07.697724","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":335,"date":"2016-02-09 21:55:40.638904","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    for i in range(0,n+1):\n        return g\n\n","after":null,"SubmissionTime":"2016-02-09T21:55:40.638904","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":335,"date":"2016-02-09 22:40:03.707223","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total = 0\n    if n <= 3:\n        return n \n    elif n > 3:\n        for i in range (1, 4):\n            #n -= i \n            total += i * g_iter(n-i) \n        return total \n   \n","after":null,"SubmissionTime":"2016-02-09T22:40:03.707223","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":335,"date":"2016-02-09 22:41:44.149968","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total = 0\n    if n <= 3:\n        return n \n    elif n > 3:\n        for i in range (1, 4):\n            a = n - i \n            #n -= i \n            total += i * g_iter(a) \n        return total \n   \n","after":null,"SubmissionTime":"2016-02-09T22:41:44.149968","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":335,"date":"2016-02-09 22:43:56.986565","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total = 0\n    if n <= 3:\n        return n \n    elif n > 3:\n        for i in range (1, 4):\n            a = n - i \n            b = g_iter(a)\n            total += i * b\n        return total \n   \n","after":null,"SubmissionTime":"2016-02-09T22:43:56.986565","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":335,"date":"2016-02-09 22:48:39.684735","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total = 0\n    if n <= 3:\n        return n \n    elif n > 3:\n        for i in range (1, 4):\n            a = n - i \n            b = g(a)\n            total += i * b\n        return total \n   \n","after":null,"SubmissionTime":"2016-02-09T22:48:39.684735","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":335,"date":"2016-02-09 22:50:24.670740","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total = 0\n    if n <= 3:\n        return n \n    elif n > 3:\n        if i in range (1, 4):\n            a = n - i \n            b = g(a)\n            total += i * b\n        return total \n   \n","after":null,"SubmissionTime":"2016-02-09T22:50:24.67074","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":335,"date":"2016-02-09 22:51:30.405499","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total = 0\n    if n <= 3:\n        return n \n    elif n > 3:\n        if i == range(1, 4):\n            a = n - i \n            b = g(a)\n            total += i * b\n        return total \n   \n","after":null,"SubmissionTime":"2016-02-09T22:51:30.405499","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":335,"date":"2016-02-09 22:52:08.562682","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total = 0\n    i = 0 \n    if n <= 3:\n        return n \n    elif n > 3:\n        if i == range(1, 4):\n            a = n - i \n            b = g(a)\n            total += i * b\n        return total \n   \n","after":null,"SubmissionTime":"2016-02-09T22:52:08.562682","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":335,"date":"2016-02-09 22:56:33.010807","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total = 0\n    i = 0 \n    if n <= 3:\n        return n \n    elif n > 3:\n        if i <= 3:\n            a = n - i \n            b = g(a)\n            total += i * b\n        return total \n   \n","after":null,"SubmissionTime":"2016-02-09T22:56:33.010807","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":335,"date":"2016-02-09 22:57:22.409633","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total = 0\n    i = 0 \n    if n <= 3:\n        return n \n    elif n > 3:\n        if i == [1, 2, 3]:\n            a = n - i \n            b = g(a)\n            total += i * b\n        return total \n   \n","after":null,"SubmissionTime":"2016-02-09T22:57:22.409633","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":679,"date":"2016-02-09 22:58:28.808137","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-09T22:58:28.808137","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":335,"date":"2016-02-09 22:58:49.561618","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total = 0\n    i = 0 \n    if n <= 3:\n        return n \n    elif n > 3:\n        #for i in range(1, 4):\n        i == [1, 2, 3]\n        a = n - i \n        b = g(a)\n        total += i * b\n    return total \n   \n","after":null,"SubmissionTime":"2016-02-09T22:58:49.561618","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":335,"date":"2016-02-09 22:59:56.004418","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total = 0\n    if n <= 3:\n        return n \n    elif n > 3:\n        #for i in range(1, 4):\n        i == [1, 2, 3]\n        a = n - i \n        b = g(a)\n        total += i * b\n    return total \n   \n","after":null,"SubmissionTime":"2016-02-09T22:59:56.004418","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":335,"date":"2016-02-09 23:06:42.328658","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total = 0\n    i = 0 \n    if n <= 3:\n        return n \n    elif n > 3:\n        #for i in range(1, 4):\n        i == [1, 2, 3]\n        a = n - i \n        b = g(a)\n        total += i * b\n    return total \n   \n","after":null,"SubmissionTime":"2016-02-09T23:06:42.328658","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":335,"date":"2016-02-09 23:07:54.464784","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total = 0\n    i = 0 \n    if n <= 3:\n        return n \n    elif n > 3:\n        #for i in range(1, 4):\n        if i <= 3:\n            a = n - i \n            b = g(a)\n            total += i * b\n        return total \n   \n","after":null,"SubmissionTime":"2016-02-09T23:07:54.464784","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":319,"date":"2016-02-09 23:15:59.287739","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<4:\n        return n\n    tot = 0\n    for i in range(1,4):\n        tot+= i * g(n-i)\n    return tot\n","after":null,"SubmissionTime":"2016-02-09T23:15:59.287739","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":335,"date":"2016-02-09 23:20:46.864963","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total = 0\n    i = 0 \n    if n <= 3:\n        return n \n    elif n > 3:\n        #for i in range(1, 4):\n        i = [1, 4]\n        a = n - i \n        b = g(a)\n        total += i * b\n    return total \n   \n","after":null,"SubmissionTime":"2016-02-09T23:20:46.864963","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":718,"date":"2016-02-09 23:42:20.568671","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    elif n>3:\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-09T23:42:20.568671","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    elif n>3:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":42,"date":"2016-02-09 23:47:18.171519","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-09T23:47:18.171519","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":275,"date":"2016-02-10 00:39:58.470276","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    else:\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-10T00:39:58.470276","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":694,"date":"2016-02-10 02:32:29.546904","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        def G(n):\n            return n\n    else:\n        def G(n):\n            return G(n-1) + 2 * G(n-2) + 3* G(n -3)\n    return G(n)\n\n","after":null,"SubmissionTime":"2016-02-10T02:32:29.546904","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        def G(n):\r\n            return n\r\n    else:\r\n        def G(n):\r\n            return g(n-1)+2*g(n-2)+3*g(n-3)\r\n    return G(n)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":694,"date":"2016-02-10 02:38:34.561639","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        def G(n):\n            return n\n    if n > 3:\n        def G(n):\n            return G(n-1)\n\n","after":null,"SubmissionTime":"2016-02-10T02:38:34.561639","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":694,"date":"2016-02-10 02:38:56.476517","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        def G(n):\n            return n\n    if n > 3:\n        def G(n):\n            return G(n-1)\n    return G(n)\n\n","after":null,"SubmissionTime":"2016-02-10T02:38:56.476517","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":694,"date":"2016-02-10 02:39:44.554655","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        def G(n):\n            return n\n    if n > 3:\n        def G(n):\n            if n> n-3:\n                return G(n-1)\n    return G(n)\n\n","after":null,"SubmissionTime":"2016-02-10T02:39:44.554655","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":694,"date":"2016-02-10 02:40:17.080829","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        def G(n):\n            return n\n    if n > 3:\n        def G(n):\n            if n > 3:\n                return G(n-1)\n    return G(n)\n\n","after":null,"SubmissionTime":"2016-02-10T02:40:17.080829","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":694,"date":"2016-02-10 02:43:08.012768","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(n):\n        if n < 3:\n            return n\n        if n > 3:\n            return G(n-1) + G(n-2)\n    return G(n)\n\n","after":null,"SubmissionTime":"2016-02-10T02:43:08.012768","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":694,"date":"2016-02-10 02:43:19.980640","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(n):\n        if n <= 3:\n            return n\n        if n > 3:\n            return G(n-1) + G(n-2)\n    return G(n)\n\n","after":null,"SubmissionTime":"2016-02-10T02:43:19.98064","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":721,"date":"2016-02-10 07:40:38.170333","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3: \n        return n\n    else: \n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-10T07:40:38.170333","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":690,"date":"2016-02-10 08:44:43.269749","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return \n\n","after":null,"SubmissionTime":"2016-02-10T08:44:43.269749","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":863,"date":"2016-02-10 09:04:25.090432","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 1:\n        return g(1)\n    else:\n        return g(n) + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-10T09:04:25.090432","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":863,"date":"2016-02-10 09:05:06.468012","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 1:\n        return G(1)\n    else:\n        return G(n) + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-10T09:05:06.468012","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":137,"date":"2016-02-10 09:09:04.780471","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-10T09:09:04.780471","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":670,"date":"2016-02-10 10:50:38.212310","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-10T10:50:38.21231","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":365,"date":"2016-02-10 11:25:51.606847","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    nextnumber=n-1\n    result=n*nextnumber\n    if n==1:\n        return result\n    return n*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-10T11:25:51.606847","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":365,"date":"2016-02-10 11:26:34.181855","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    nextnumber=n-1\n    result=n*nextnumber\n    if n==1:\n        return result\n    return n-1*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-10T11:26:34.181855","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":365,"date":"2016-02-10 11:31:29.405239","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    def G(a):\n        nextnumber=n-1\n        result=a*nextnumber\n        if n==1:\n            return result\n        a=a+1\n    return a*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-10T11:31:29.405239","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":365,"date":"2016-02-10 11:33:23.918326","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    a=0\n    def G(a):\n        nextnumber=n-1\n        result=a*nextnumber\n        if n==1:\n            return result\n        a=a+1\n        return G(a)*g(n-1)\n    return G(a)\n\n","after":null,"SubmissionTime":"2016-02-10T11:33:23.918326","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":365,"date":"2016-02-10 11:34:17.125291","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    a=0\n    def G(a):\n        nextnumber=n-1\n        result=a*nextnumber\n        if n==1:\n            return result\n        return G(a+1)*g(n-1)\n    return G(a)\n\n","after":null,"SubmissionTime":"2016-02-10T11:34:17.125291","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":365,"date":"2016-02-10 11:37:48.648118","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    a=0\n    def G(a):\n        nextnumber=n-1\n        result=a*nextnumber\n        if a==n or n==1:\n            return result\n        return G(a+1)*g(n-1)\n    return G(a)\n\n","after":null,"SubmissionTime":"2016-02-10T11:37:48.648118","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":365,"date":"2016-02-10 11:41:28.232727","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    a=0\n    def G(a):\n        nextnumber=n-1\n        result=a*nextnumber+(a+1)(nextnumber-1)\n        if a==n or n==1:\n            return result\n        return G(a+1)\n    return G(a)\n\n","after":null,"SubmissionTime":"2016-02-10T11:41:28.232727","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":365,"date":"2016-02-10 11:43:57.796696","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    a=0\n    def G(a):\n        nextnumber=n-1\n        result=(a*nextnumber)+(a+1)(nextnumber-1)\n        if a==n or n==1:\n            return result\n        return G(a+1)\n    return G(a)\n\n","after":null,"SubmissionTime":"2016-02-10T11:43:57.796696","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":365,"date":"2016-02-10 11:44:11.099094","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    a=0\n    def G(a):\n        nextnumber=n-1\n        result=(a*nextnumber)+(a+1)*(nextnumber-1)\n        if a==n or n==1:\n            return result\n        return G(a+1)\n    return G(a)\n\n","after":null,"SubmissionTime":"2016-02-10T11:44:11.099094","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":365,"date":"2016-02-10 11:44:34.512470","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    a=0\n    def G(a):\n        nextnumber=n-1\n        result=(a*nextnumber)+(a+1)*(nextnumber-1)\n        if a+1==n or n-1==1:\n            return result\n        return G(a+1)\n    return G(a)\n\n","after":null,"SubmissionTime":"2016-02-10T11:44:34.51247","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    a = 0\r\n    def G(a):\r\n        nextnumber = n-2\r\n        result = (a*nextnumber)+(a+1)*(nextnumber-1)\r\n        if a+1==n or n-1==1:\r\n            return result\r\n        return G(a+1)\r\n    return G(a)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":365,"date":"2016-02-10 11:45:32.124095","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    a=0\n    def G(a):\n        nextnumber=n-1\n        result=(a*nextnumber)+(a+1)*(nextnumber-1)\n        if a+2==n or n-2==1:\n            return result\n        return G(a+1)\n    return G(a)\n\n","after":null,"SubmissionTime":"2016-02-10T11:45:32.124095","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":365,"date":"2016-02-10 11:45:51.537671","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    a=0\n    def G(a):\n        nextnumber=n-1\n        result=(a*nextnumber)+(a+1)*(nextnumber-1)\n        if a+3==n or n-3==1:\n            return result\n        return G(a+1)\n    return G(a)\n\n","after":null,"SubmissionTime":"2016-02-10T11:45:51.537671","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":365,"date":"2016-02-10 11:48:09.562881","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    a=1\n    def G(a):\n        nextnumber=n-1\n        result=(a*nextnumber)+(a+1)*(nextnumber-2)\n        if a==n or n==1:\n            return result\n        return G(a+1)\n    return G(a)\n\n","after":null,"SubmissionTime":"2016-02-10T11:48:09.562881","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":365,"date":"2016-02-10 11:48:19.554217","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    a=1\n    def G(a):\n        nextnumber=n-1\n        result=(a*nextnumber)+(a+1)*(nextnumber-2)\n        if a==n:\n            return result\n        return G(a+1)\n    return G(a)\n\n","after":null,"SubmissionTime":"2016-02-10T11:48:19.554217","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":365,"date":"2016-02-10 11:49:53.144856","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    a=1\n    def G(a):\n        nextnumber=n-1\n        result=(a*nextnumber)+(a+1)*(nextnumber-2)\n        if a==3:\n            return result\n        return G(a+1)\n    return G(a)\n\n","after":null,"SubmissionTime":"2016-02-10T11:49:53.144856","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":365,"date":"2016-02-10 11:50:42.691356","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    a=1\n    def G(a):\n        nextnumber=n-1\n        result=(a*nextnumber)+(a+1)*(nextnumber-2)\n        if a==2:\n            return result\n        return G(a+1)\n    return G(a)\n\n","after":null,"SubmissionTime":"2016-02-10T11:50:42.691356","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":365,"date":"2016-02-10 12:12:31.669627","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    a=1\n    if n<=3:\n        return n\n    nextnumber=(a+1)*g(n-(a+1))\n    result=a*g(n-a) + nextnumber\n    if a==3:\n        return result\n    return a*g(n-a)+(a+1)*g(n-(a+1))\n\n","after":null,"SubmissionTime":"2016-02-10T12:12:31.669627","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":365,"date":"2016-02-10 12:16:25.965743","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    a=1\n    if n<=3:\n        return n\n    def G(n,a):\n        nextnumber=(a+1)*g(n-(a+1))\n        result=a*g(n-a) + nextnumber\n        if a==3:\n            return result\n        return a*g(n-a)+(a+1)*g(n-(a+1))\n    return G(n,a)\n\n","after":null,"SubmissionTime":"2016-02-10T12:16:25.965743","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":124,"date":"2016-02-10 12:22:25.650617","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i = n-1\n    if n <= 3:\n        return n\n    else:\n        return (n-1) + i*(n-i)\n\n","after":null,"SubmissionTime":"2016-02-10T12:22:25.650617","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":124,"date":"2016-02-10 12:22:42.187154","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i = n-1\n    if n <= 3:\n        return n\n    else:\n        return n-1 + i*(n-i)\n\n","after":null,"SubmissionTime":"2016-02-10T12:22:42.187154","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":124,"date":"2016-02-10 12:23:14.101306","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i = n-1\n    if n <= 3:\n        return n\n    else:\n        return n + n-1 + i*(n-i)\n\n","after":null,"SubmissionTime":"2016-02-10T12:23:14.101306","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":352,"date":"2016-02-10 12:47:31.270780","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) * g(n - 2) * g(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-10T12:47:31.27078","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))))))), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":365,"date":"2016-02-10 13:07:21.358754","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def check_duplicates(n):\n        if n-a>3:\n            return True\n        False\n    a=1\n    if n<=3:\n        return n\n    def G(n,a):\n        nextnumber=(a+1)*g(n-(a+1))\n        result=a*g(n-a) + nextnumber\n        if a==3:\n            return result\n        return a*g(n-a)+(a+1)*g(n-(a+1))\n    if check_duplicates(n):\n        a=1\n        G(n-1,a)\n    return G(n,a)\n\n","after":null,"SubmissionTime":"2016-02-10T13:07:21.358754","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":365,"date":"2016-02-10 13:12:23.528888","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def check_duplicates(n):\n        if n-a>3:\n            return True\n        False\n    a=1\n    if n<=3:\n        return n\n    def G(n,a):\n        nextnumber=(a+1)*(n-(a+1))\n        result=a*(n-a) + nextnumber\n        if not check_duplicates and a==3:\n            return result\n        if check_duplicates(n) and a==3:\n            a=1\n            n=n-1\n            return G(n,a)\n        return G(n, a+1)\n    return G(n,a)\n\n","after":null,"SubmissionTime":"2016-02-10T13:12:23.528888","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":365,"date":"2016-02-10 13:14:30.356237","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def check_duplicates(n):\n        if n-a>3:\n            return True\n        False\n    a=1\n    if n<=3:\n        return n\n    def G(n,a):\n        nextnumber=(a+1)*(n-(a+1))\n        result=a*(n-a) + nextnumber\n        if not check_duplicates(n) and a==3:\n            return result\n        if check_duplicates(n) and a==3:\n            a=1\n            n=n-1\n            return G(n,a)\n        return G(n, a+1)\n    return G(n,a)\n\n","after":null,"SubmissionTime":"2016-02-10T13:14:30.356237","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":205,"date":"2016-02-10 14:11:43.800253","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 0\n    if n <= 3:\n        return n\n    if n > 3:\n        return (i + 1) * G(i + 1)\n\n","after":null,"SubmissionTime":"2016-02-10T14:11:43.800253","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":205,"date":"2016-02-10 14:12:12.854830","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 0\n    if n <= 3:\n        return n\n    if n > 3:\n        return (i + 1) * g(i + 1)\n\n","after":null,"SubmissionTime":"2016-02-10T14:12:12.85483","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":205,"date":"2016-02-10 14:13:54.592549","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 0\n    if n <= 3:\n        return n\n    if n > 3:\n        return (i + 1) * g(i + 1)\n\n    return G(1)\n\n","after":null,"SubmissionTime":"2016-02-10T14:13:54.592549","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":307,"date":"2016-02-10 14:15:59.078970","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if(n <= 3):\n        return n\n    else:\n        return g(n-1) \n\n","after":null,"SubmissionTime":"2016-02-10T14:15:59.07897","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":205,"date":"2016-02-10 14:17:45.341653","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 0\n    p = 0\n    if n <= 3:\n        return n\n    if n > 3:\n        return (i + 1) * G(n - (p - 1))\n\n    return G(n)\n\n","after":null,"SubmissionTime":"2016-02-10T14:17:45.341653","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":205,"date":"2016-02-10 14:17:45.341653","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 0\n    p = 0\n    if n <= 3:\n        return n\n    if n > 3:\n        return (i + 1) * G(n - (p - 1))\n\n    return G(n)\n\n","after":null,"SubmissionTime":"2016-02-10T14:17:45.341653","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":307,"date":"2016-02-10 14:17:46.368683","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if(n <= 3):\n        return n\n    else:\n        return n* g(n-1) \n\n","after":null,"SubmissionTime":"2016-02-10T14:17:46.368683","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":205,"date":"2016-02-10 14:18:04.113990","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 0\n    p = 0\n    if n <= 3:\n        return n\n    if n > 3:\n        return (i + 1) * g(n - (p - 1))\n\n    return G(n)\n\n","after":null,"SubmissionTime":"2016-02-10T14:18:04.11399","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":205,"date":"2016-02-10 14:19:21.176941","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 0\n    p = 0\n    def G(i):\n        if n <= 3:\n            return n\n        if n > 3:\n            return (i + 1) * G(n - (p - 1))\n\n    return G(n)\n\n","after":null,"SubmissionTime":"2016-02-10T14:19:21.176941","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":205,"date":"2016-02-10 14:21:19.482586","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 0\n    p = 0\n    sum = 0\n    def G(i):\n        if n <= 3:\n            return n\n        if n > 3:\n            return sum + ((i + 1) * G(n - (p - 1)))\n\n    return G(n)\n\n","after":null,"SubmissionTime":"2016-02-10T14:21:19.482586","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":97,"date":"2016-02-10 14:31:46.622752","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <=3:\n        return n\n    else:\n        return g(n-1)+g(n-2)+g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-10T14:31:46.622752","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":414,"date":"2016-02-10 15:11:20.896996","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x, y = 1, 1\n    while n > 3:\n        g += y * g(n - x)\n        x, y, n = x + 1, y + 1, n + 1\n    return g\n","after":null,"SubmissionTime":"2016-02-10T15:11:20.896996","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":414,"date":"2016-02-10 15:11:32.467051","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x, y, g = 1, 1, 1\n    while n > 3:\n        g += y * g(n - x)\n        x, y, n = x + 1, y + 1, n + 1\n    return g\n","after":null,"SubmissionTime":"2016-02-10T15:11:32.467051","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":414,"date":"2016-02-10 15:14:52.397610","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x, y, f = 1, 1, 0\n    while n > 3:\n        f += y * g(n - x)\n        x, y, n = x + 1, y + 1, n + 1\n    return f\n","after":null,"SubmissionTime":"2016-02-10T15:14:52.39761","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":414,"date":"2016-02-10 15:18:56.941171","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 3:\n        return n\n    else:\n        x, y, f = 1, 1, 0\n        while n > 3:\n            f += y * g(n - x)\n            x, y= x + 1, y + 1\n        return f\n","after":null,"SubmissionTime":"2016-02-10T15:18:56.941171","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":414,"date":"2016-02-10 15:19:13.694891","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n < 3:\n        return n\n    else:\n        x, y, f = 1, 1, 0\n        while n > 3:\n            f += y * g(n - x)\n            x, y= x + 1, y + 1\n        return f\n","after":null,"SubmissionTime":"2016-02-10T15:19:13.694891","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":414,"date":"2016-02-10 15:19:54.350188","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n < 3:\n        return n\n    else:\n        x, y, f = 1, 1, 0\n        while n > 3:\n            f += y * g(n - x)\n            x, y, n = x + 1, y + 1, n + 1\n        return f\n","after":null,"SubmissionTime":"2016-02-10T15:19:54.350188","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":414,"date":"2016-02-10 15:22:33.045601","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n < 3:\n        return n\n    else:\n        x, val = 1, 0\n        while x > 3:\n            val += x * g(n - x)\n            x += 1\n        return val\n","after":null,"SubmissionTime":"2016-02-10T15:22:33.045601","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":414,"date":"2016-02-10 15:23:00.833687","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n < 3:\n        return n\n    else:\n        x, val = n, 0\n        while x >= 3:\n            val += x * g(n - x)\n            x += 1\n        return val\n","after":null,"SubmissionTime":"2016-02-10T15:23:00.833687","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":414,"date":"2016-02-10 15:23:32.466737","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        x, val = n, 0\n        while x > 3:\n            val += x * g(n - x)\n            x += 1\n        return val\n","after":null,"SubmissionTime":"2016-02-10T15:23:32.466737","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":414,"date":"2016-02-10 15:24:04.029937","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        x, val = 1, 0\n        while n > 3:\n            val += x * g(n - x)\n            x += 1\n        return val\n","after":null,"SubmissionTime":"2016-02-10T15:24:04.029937","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":17,"date":"2016-02-10 15:34:10.076972","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                          if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),     if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k = 0\n    if n <= 3:\n        return n\n    if n > 3:\n        return g(n-1) + (k + 1)*(g(n-2))\n\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-10T15:34:10.076972","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":27,"date":"2016-02-10 15:39:51.459032","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return g(n-1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-10T15:39:51.459032","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":736,"date":"2016-02-10 16:06:30.595237","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        print (n)\n        G(n-1)*n\n\n","after":null,"SubmissionTime":"2016-02-10T16:06:30.595237","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":736,"date":"2016-02-10 16:07:47.584055","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        print (G)\n        G(n-1)*n\n\n","after":null,"SubmissionTime":"2016-02-10T16:07:47.584055","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":269,"date":"2016-02-10 16:49:12.622389","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + g(n - 2) + g(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-10T16:49:12.622389","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":269,"date":"2016-02-10 16:49:32.379522","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) * g(n - 2) * g(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-10T16:49:32.379522","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-10 18:39:49.199706","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    if n <=3:\n        return n\n    else:\n        (G(n-1) + 2) + 2(G(n-1))\n    \n\n","after":null,"SubmissionTime":"2016-02-10T18:39:49.199706","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":520,"date":"2016-02-10 18:45:56.768029","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(n, i):\n        if n - i <= 3:\n            return n - i\n        else:\n            i += 1\n            return i * counter(n - i, i) + counter(n - (i + 1), i +1)\n    return counter(n, 0)\n\n","after":null,"SubmissionTime":"2016-02-10T18:45:56.768029","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-10 18:46:37.847044","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    if n <=3:\n        G = lambda n: n\n        return G(n)\n    \n    \n\n","after":null,"SubmissionTime":"2016-02-10T18:46:37.847044","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-10 18:47:18.043133","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    if n <=3:\n        G = lambda n: n\n        return G(n)\n    if n > 3:\n        G = lambda n: G(n-1)\n    \n    \n\n","after":null,"SubmissionTime":"2016-02-10T18:47:18.043133","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-10 18:47:32.664964","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    if n <=3:\n        G = lambda n: n\n        return G(n)\n    if n > 3:\n        G = lambda n: G(n-1)\n        return G(n)\n    \n    \n\n","after":null,"SubmissionTime":"2016-02-10T18:47:32.664964","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-10 18:49:43.415806","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    if n <=3:\n        G = lambda n: n\n        return G(n)\n    if n > 3:\n        G = lambda n: G(n-1)\n        return G(n-1) + G(n)\n    \n    \n\n","after":null,"SubmissionTime":"2016-02-10T18:49:43.415806","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-10 18:50:24.081779","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    if n <=3:\n        G = lambda n: n\n        return G(n)\n    if n > 3:\n        G = lambda n: G(n-1)\n        return G(n-1) \n    \n    \n\n","after":null,"SubmissionTime":"2016-02-10T18:50:24.081779","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-10 18:51:11.385335","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    if n <=3:\n        G = lambda n: n\n        return n\n    if n > 3:\n        G = lambda n: G(n-1)\n        return G(n-1) \n    \n    \n\n","after":null,"SubmissionTime":"2016-02-10T18:51:11.385335","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-10 18:51:46.445471","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    if n <=3:\n        G = lambda n: n\n    if n > 3:\n        G = lambda n: G(n-1)\n        \n    return G(n) \n    \n    \n\n","after":null,"SubmissionTime":"2016-02-10T18:51:46.445471","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-10 18:53:58.694900","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    if n <=3:\n        G = lambda n: n\n    if n > 3:\n        G = lambda n: n\n        \n    return G(n) \n    \n    \n\n","after":null,"SubmissionTime":"2016-02-10T18:53:58.6949","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-10 19:02:39.521611","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    if n <=3:\n        return n\n    if n > 3:\n        G = lambda n: G(n-1) \n        \n    return G(n) \n    \n    \n\n","after":null,"SubmissionTime":"2016-02-10T19:02:39.521611","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-10 19:03:02.085346","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    if n <=3:\n        return n\n    if n > 3:\n        G = lambda n: G(n-1) \n        return G(n)\n        \n     \n    \n    \n\n","after":null,"SubmissionTime":"2016-02-10T19:03:02.085346","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-10 19:03:35.553405","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    if n <=3:\n        return n\n    if n > 3:\n        G = lambda n: g(n-1) \n        return G(n)\n        \n     \n    \n    \n\n","after":null,"SubmissionTime":"2016-02-10T19:03:35.553405","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-10 19:19:13.656468","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    if n <=3:\n        return n\n    if n > 3:\n        G = lambda n: n * g(n-1) \n        return G(n)\n        \n     \n    \n    \n\n","after":null,"SubmissionTime":"2016-02-10T19:19:13.656468","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-10 19:19:46.440234","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    if n <=3:\n        return n\n    if n > 3:\n        G = lambda n: n * g(n-1) + (n-1)* g(n-2)\n        return G(n)\n        \n     \n    \n    \n\n","after":null,"SubmissionTime":"2016-02-10T19:19:46.440234","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    if n>3:\r\n        G = lambda n: n*g(n-3)+(n-1)*g(n-2)\r\n        return G(n)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-10 19:20:07.736414","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    if n <=3:\n        return n\n    if n > 3:\n        G = lambda n: n-1 * g(n-1)\n        return G(n)\n        \n     \n    \n    \n\n","after":null,"SubmissionTime":"2016-02-10T19:20:07.736414","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-10 19:20:15.019523","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    if n <=3:\n        return n\n    if n > 3:\n        G = lambda n: (n-1) * g(n-1)\n        return G(n)\n        \n     \n    \n    \n\n","after":null,"SubmissionTime":"2016-02-10T19:20:15.019523","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-10 19:21:31.317301","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    if n <=3:\n        return n\n    if n > 3:\n        G = lambda n: (n) * g(n-1)\n        return G(n)\n        \n     \n    \n    \n\n","after":null,"SubmissionTime":"2016-02-10T19:21:31.317301","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-10 19:21:54.754188","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    if n <=3:\n        return n\n    if n > 3:\n        G = lambda n: g(n) + (n) * g(n-1)\n        return G(n)\n        \n     \n    \n    \n\n","after":null,"SubmissionTime":"2016-02-10T19:21:54.754188","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-10 19:23:10.566694","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    if n <=3:\n        return n\n    if n > 3:\n        G = lambda n: (n-1) * g(n-1)\n        return G(n)\n        \n     \n    \n    \n\n","after":null,"SubmissionTime":"2016-02-10T19:23:10.566694","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-10 19:23:32.404598","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    if n <=3:\n        return n\n    if n > 3:\n        G = lambda n: n * g(n-1)\n        return G(n)\n        \n     \n    \n    \n\n","after":null,"SubmissionTime":"2016-02-10T19:23:32.404598","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":481,"date":"2016-02-10 20:05:09.747185","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    else: \n        return g(n)*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-10T20:05:09.747185","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":481,"date":"2016-02-10 20:07:14.246606","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    else: \n        return g(n-1)*g(n-2)\n\n","after":null,"SubmissionTime":"2016-02-10T20:07:14.246606","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":212,"date":"2016-02-10 20:13:55.845649","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-10T20:13:55.845649","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":561,"date":"2016-02-10 20:14:03.141914","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        g = n\n        return g\n\n","after":null,"SubmissionTime":"2016-02-10T20:14:03.141914","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":211,"date":"2016-02-10 20:23:26.645774","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return G(n-1) + G(n-2) + 3 * G(n-3)\n\n","after":null,"SubmissionTime":"2016-02-10T20:23:26.645774","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":211,"date":"2016-02-10 20:23:42.277381","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + g(n-2) + 3 * g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-10T20:23:42.277381","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":212,"date":"2016-02-10 20:26:07.688763","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    if n <= 3:\n        return n\n    else:\n        return n * g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-10T20:26:07.688763","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return 1*g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":561,"date":"2016-02-10 20:46:42.442620","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        g = n\n        return g\n    else:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n\n","after":null,"SubmissionTime":"2016-02-10T20:46:42.44262","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":219,"date":"2016-02-10 20:49:13.160157","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def the_g(n):\n        if n <= 3: \n            return n \n        else: \n            return sum(the_g(n-1), n)\n    return the_g(n)\n\n\n","after":null,"SubmissionTime":"2016-02-10T20:49:13.160157","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":219,"date":"2016-02-10 20:49:40.961351","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def the_g(n):\n        if n <= 3: \n            return n \n        else: \n            return the_g(n-1) + n\n    return the_g(n)\n\n\n","after":null,"SubmissionTime":"2016-02-10T20:49:40.961351","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":561,"date":"2016-02-10 20:49:41.714043","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        g = n\n        return g\n    else:\n        k=n\n        return g(k-1) + 2*g(k-2) + 3*g(k-3)\n\n\n","after":null,"SubmissionTime":"2016-02-10T20:49:41.714043","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":194,"date":"2016-02-10 20:58:36.744597","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return identity(n)\n    else: \n        g(n-1) + 2 * g(n-2) + 3 * g(n-3) \n\n","after":null,"SubmissionTime":"2016-02-10T20:58:36.744597","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":520,"date":"2016-02-10 21:26:37.587530","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"\"\"def counter(n, i):\n        if n - i <= 3:\n            return n - i\n        else:\n            i += 1\n            return i * counter(n - i, i) + counter(n - (i + 1), i +1)\n    return counter(n, 0)\"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * G(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-10T21:26:37.58753","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":980,"date":"2016-02-10 21:32:24.655402","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <=3:\n        return n\n    else:\n        return g(n-1) * g(n-2) * g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-10T21:32:24.655402","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))))))), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":552,"date":"2016-02-10 21:56:02.681812","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + g(n-2) + g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-10T21:56:02.681812","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))))))))","failed":null},{"ErrorFlag":1,"Id":0,"studentId":170,"date":"2016-02-10 22:34:58.179581","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-10T22:34:58.179581","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":170,"date":"2016-02-10 22:35:50.510257","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return G(n-1)+2*G(n-2)+3*G(n-3)\n\n","after":null,"SubmissionTime":"2016-02-10T22:35:50.510257","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":171,"date":"2016-02-10 22:38:13.736086","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <=3:\n        return n\n    else:\n        a = a + 1\n        return g(n - 1) + a * g(n - a)\n\n","after":null,"SubmissionTime":"2016-02-10T22:38:13.736086","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":171,"date":"2016-02-10 22:38:50.525898","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    a = 0\n    if n <=3:\n        return n\n    else:\n        a = a + 1\n        return g(n - 1) + a * g(n - a)\n\n","after":null,"SubmissionTime":"2016-02-10T22:38:50.525898","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":171,"date":"2016-02-10 22:39:40.711272","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    a = 0\n    if n < 3:\n        return n\n    else:\n        a = a + 1\n        return g(n - 1) + a * g(n - a)\n\n","after":null,"SubmissionTime":"2016-02-10T22:39:40.711272","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":171,"date":"2016-02-10 22:39:52.569602","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    a = 0\n    if n <= 3:\n        return n\n    else:\n        a = a + 1\n        return g(n - 1) + a * g(n - a)\n\n","after":null,"SubmissionTime":"2016-02-10T22:39:52.569602","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":171,"date":"2016-02-10 22:45:58.303210","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    a = 0\n    if n <= 3:\n        return n\n    else:\n        a = a + 1\n        return a * g(n - a)\n\n","after":null,"SubmissionTime":"2016-02-10T22:45:58.30321","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":171,"date":"2016-02-10 22:46:57.985087","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    a = 1\n    if n <= 3:\n        return n\n    else:\n        a = a + 1\n        return g(n - 1) + a * g(n - a)\n\n","after":null,"SubmissionTime":"2016-02-10T22:46:57.985087","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":171,"date":"2016-02-10 22:47:17.386675","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    a = 2\n    if n <= 3:\n        return n\n    else:\n        a = a + 1\n        return g(n - 1) + a * g(n - a)\n\n","after":null,"SubmissionTime":"2016-02-10T22:47:17.386675","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":561,"date":"2016-02-10 22:49:28.065964","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        g = n\n        return g\n    else:\n        k=n\n        return g(k-1) + 2*g(k-2) + 3*g(k-3)\n        k -= 1\n\n\n","after":null,"SubmissionTime":"2016-02-10T22:49:28.065964","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":561,"date":"2016-02-10 22:49:28.065964","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        g = n\n        return g\n    else:\n        k=n\n        return g(k-1) + 2*g(k-2) + 3*g(k-3)\n        k -= 1\n\n\n","after":null,"SubmissionTime":"2016-02-10T22:49:28.065964","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":171,"date":"2016-02-10 22:50:35.329586","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    if n <= 3:\n        return n\n    else:\n        g(n-1) + 2 * g(n-2) + 3*g(n-3)\n\n\n","after":null,"SubmissionTime":"2016-02-10T22:50:35.329586","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":670,"date":"2016-02-10 22:55:06.021756","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + (2*g(n-2)) + (3*g(n-2))\n\n","after":null,"SubmissionTime":"2016-02-10T22:55:06.021756","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+(2*g(n-2))+(3*g(n-3))","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":959,"date":"2016-02-10 23:07:10.772865","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    else:\n        return (n - 1) * g(n - (n - 1)) + g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-10T23:07:10.772865","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":959,"date":"2016-02-10 23:13:03.156358","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    else:\n        return (n - 1) * g(n - (n - 1)) + (n - 2) * g(n - (n - 2)) + (n - 3) * g(n - (n - 3))\n\n","after":null,"SubmissionTime":"2016-02-10T23:13:03.156358","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":959,"date":"2016-02-10 23:15:59.674441","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    else:\n        return 3 * g(n - (n - 1)) + 2 * g(n - (n - 2)) + g(n - (n - 3))\n\n","after":null,"SubmissionTime":"2016-02-10T23:15:59.674441","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":417,"date":"2016-02-10 23:22:38.341844","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return g\n\n","after":null,"SubmissionTime":"2016-02-10T23:22:38.341844","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":417,"date":"2016-02-10 23:26:12.843151","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3\n\n","after":null,"SubmissionTime":"2016-02-10T23:26:12.843151","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":329,"date":"2016-02-11 00:24:55.074434","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    i=1\n\n    if n <=3:\n        return n\n    else:\n        result = result + i * g(n-i)\n        return result\n\n\n","after":null,"SubmissionTime":"2016-02-11T00:24:55.074434","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":329,"date":"2016-02-11 00:25:10.361328","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    i=1\n    result=0\n    if n <=3:\n        return n\n    else:\n        result = result + i * g(n-i)\n        return result\n\n\n","after":null,"SubmissionTime":"2016-02-11T00:25:10.361328","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":736,"date":"2016-02-11 02:21:43.453825","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        print\n        G(n-1) + (n+1)\n\n","after":null,"SubmissionTime":"2016-02-11T02:21:43.453825","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":736,"date":"2016-02-11 02:22:49.410950","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        print\n        g(n-1) + (n+1)\n\n","after":null,"SubmissionTime":"2016-02-11T02:22:49.41095","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":736,"date":"2016-02-11 02:24:15.560766","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        print (n)\n        g(n-1) + (n+1)\n\n","after":null,"SubmissionTime":"2016-02-11T02:24:15.560766","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":736,"date":"2016-02-11 02:24:30.649061","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        print(n)\n        g(n-1) + (n+1)\n\n","after":null,"SubmissionTime":"2016-02-11T02:24:30.649061","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":736,"date":"2016-02-11 02:25:04.933060","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        print(n)\n        (g(n-1) + (n+1))*n\n\n","after":null,"SubmissionTime":"2016-02-11T02:25:04.93306","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":595,"date":"2016-02-11 06:37:28.753128","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    if k < 3:\n        counter(k)\n    \n    def counter(k):\n        return g(k - 1) + 2*g(k-2) + 3*g(k-3)\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T06:37:28.753128","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":595,"date":"2016-02-11 06:37:44.632581","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    if n < 3:\n        counter(n)\n    \n    def counter(k):\n        return g(k - 1) + 2*g(k-2) + 3*g(k-3)\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T06:37:44.632581","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":595,"date":"2016-02-11 06:39:33.513749","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    if n > 3:\n        counter(n)\n    \n    def counter(k):\n        return g(k - 1) + 2*g(k-2) + 3*g(k-3)\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T06:39:33.513749","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":595,"date":"2016-02-11 06:40:11.311588","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    if n > 3:\n        return counter(n)\n    \n    def counter(k):\n        return g(k - 1) + 2*g(k-2) + 3*g(k-3)\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T06:40:11.311588","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-11 08:16:12.460332","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    if n <=3:\n        G = lambda n: n\n        return n\n    if n > 3:\n        G = lambda n: n * g(n-1)\n        return G(n)\n        \n     \n    \n    \n\n","after":null,"SubmissionTime":"2016-02-11T08:16:12.460332","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-11 08:16:22.661239","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    if n <=3:\n        G = lambda n: n\n        return G(n)\n    if n > 3:\n        G = lambda n: n * g(n-1)\n        return G(n)\n        \n     \n    \n    \n\n","after":null,"SubmissionTime":"2016-02-11T08:16:22.661239","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-11 08:16:51.270602","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    if n <=3:\n        G = lambda n: n\n        return G(n) + n* g(n-1)\n    if n > 3:\n        G = lambda n: n * g(n-1)\n        return G(n)\n        \n     \n    \n    \n\n","after":null,"SubmissionTime":"2016-02-11T08:16:51.270602","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-11 08:17:21.331432","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return\n    \n    if n <=3:\n        G = lambda n: n\n        return G(n) + n * g(n-1)\n    if n > 3:\n        G = lambda n: n * g(n-1)\n        return G(n)\n        \n     \n    \n    \n\n","after":null,"SubmissionTime":"2016-02-11T08:17:21.331432","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-11 08:17:49.640617","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return\n    \n    if n <=3:\n        G = lambda n: n\n        return g(n) + n * g(n-1)\n    if n > 3:\n        G = lambda n: n * g(n-1)\n        return G(n)\n        \n     \n    \n    \n\n","after":null,"SubmissionTime":"2016-02-11T08:17:49.640617","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-11 08:18:11.578786","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return\n    \n    if n <=3:\n        G = lambda n: n\n        return G(n) + n * g(n-1)\n    if n > 3:\n        G = lambda n: n * g(n-1)\n        return G(n)\n        \n     \n    \n    \n\n","after":null,"SubmissionTime":"2016-02-11T08:18:11.578786","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-11 08:18:34.384230","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return\n    \n    if n <=3:\n        G = lambda n: n\n        return G(n) + n * g(n-1)\n    if n > 3:\n        G = lambda n: n * g(n-1)\n        return G(n) + n * g(n-1)\n        \n     \n    \n    \n\n","after":null,"SubmissionTime":"2016-02-11T08:18:34.38423","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-11 08:18:55.617853","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return 0\n    \n    if n <=3:\n        G = lambda n: n\n        return G(n) + n * g(n-1)\n    if n > 3:\n        G = lambda n: n * g(n-1)\n        return G(n) + n * g(n-1)\n        \n     \n    \n    \n\n","after":null,"SubmissionTime":"2016-02-11T08:18:55.617853","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-11 08:19:25.949108","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 0\n    \n    if n <=3:\n        G = lambda n: n\n        return G(n) + n * g(n-1)\n    if n > 3:\n        G = lambda n: n * g(n-1)\n        return G(n) + n * g(n-1)\n        \n     \n    \n    \n\n","after":null,"SubmissionTime":"2016-02-11T08:19:25.949108","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-11 08:19:53.655657","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    if n <=3:\n        G = lambda n: n\n        return G(n) + n * g(n-1)\n    if n > 3:\n        G = lambda n: n * g(n-1)\n        return G(n) + n * g(n-1)\n        \n     \n    \n    \n\n","after":null,"SubmissionTime":"2016-02-11T08:19:53.655657","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-11 08:20:08.697171","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    if n <=3:\n        G = lambda n: n\n        return G(n) + g(n-1)\n    if n > 3:\n        G = lambda n: n * g(n-1)\n        return G(n) + n * g(n-1)\n        \n     \n    \n    \n\n","after":null,"SubmissionTime":"2016-02-11T08:20:08.697171","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-11 08:20:37.400830","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    if n <=3:\n        G = lambda n: n\n        return G(n-1) + g(n-2)\n    if n > 3:\n        G = lambda n: n * g(n-1)\n        return G(n) + n * g(n-1)\n        \n     \n    \n    \n\n","after":null,"SubmissionTime":"2016-02-11T08:20:37.40083","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-11 08:20:43.591586","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    if n <=3:\n        G = lambda n: n\n        return G(n-1) + g(n)\n    if n > 3:\n        G = lambda n: n * g(n-1)\n        return G(n) + n * g(n-1)\n        \n     \n    \n    \n\n","after":null,"SubmissionTime":"2016-02-11T08:20:43.591586","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-11 08:21:32.793688","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    if n <=3:\n        G = lambda n: n\n        return G(n-1) \n    if n > 3:\n        G = lambda n: n * g(n-1)\n        return G(n) + n * g(n-1)\n        \n     \n    \n    \n\n","after":null,"SubmissionTime":"2016-02-11T08:21:32.793688","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-11 08:21:41.350780","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    if n <=3:\n        G = lambda n: n\n        return G(n) \n    if n > 3:\n        G = lambda n: n * g(n-1)\n        return G(n) + n * g(n-1)\n        \n     \n    \n    \n\n","after":null,"SubmissionTime":"2016-02-11T08:21:41.35078","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-11 08:22:39.802690","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    if n <=3:\n        G = lambda n: n\n        return G(n) \n    if n > 3:\n        G = lambda n: n * g(n-1)\n        return G(n) + (n-1)*g(n-1)\n        \n     \n    \n    \n\n","after":null,"SubmissionTime":"2016-02-11T08:22:39.80269","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-11 08:23:22.275082","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    if n <=3:\n        G = lambda n: n\n        return G(n) \n    if n > 3:\n        G = lambda n: g(n-1)\n        return G(n) + (n-1)* g(n-1)\n        \n     \n    \n    \n\n","after":null,"SubmissionTime":"2016-02-11T08:23:22.275082","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-11 08:24:16.942703","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    if n <=3:\n        G = lambda n: n\n        return G(n) \n    if n > 3:\n        G = lambda n: g(n-1)\n        return G(n) + (n-1)* g(n-(n-1))\n        \n     \n    \n    \n\n","after":null,"SubmissionTime":"2016-02-11T08:24:16.942703","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-11 08:25:17.240962","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    if n <=3:\n        G = lambda n: n\n        return G(n) \n    if n > 3:\n        G = lambda n: g(n-1)\n        return G(n) + g(n-1)\n        \n     \n    \n    \n\n","after":null,"SubmissionTime":"2016-02-11T08:25:17.240962","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-11 08:25:49.922329","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    if n <=3:\n        G = lambda n: n\n        return G(n) \n    if n > 3:\n        G = lambda n: g(n-1)\n        return G(n) + g(n-2)\n        \n     \n    \n    \n\n","after":null,"SubmissionTime":"2016-02-11T08:25:49.922329","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":487,"date":"2016-02-11 09:45:10.992389","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def gHelp(count, total):\n        if count==0:\n            return total\n        else:\n            return gHelp(count-1, total+1)\n    return gHelp(n)\n","after":null,"SubmissionTime":"2016-02-11T09:45:10.992389","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":487,"date":"2016-02-11 09:45:22.436062","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def gHelp(count, total):\n        if count==0:\n            return total\n        else:\n            return gHelp(count-1, total+1)\n    return gHelp(n, 0)\n","after":null,"SubmissionTime":"2016-02-11T09:45:22.436062","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":487,"date":"2016-02-11 09:56:09.933316","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def gHelp(count, total):\n        if count ==0:\n            return total\n        elif n<=3:\n            return gHelp(count-1,total+1)\n    return gHelp(n, 0)\n\n\n","after":null,"SubmissionTime":"2016-02-11T09:56:09.933316","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":487,"date":"2016-02-11 09:59:26.478576","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def gHelp(count, total):\n        if count ==0:\n            return total\n        elif n<=3:\n            return gHelp(count-1,total+1)\n        elif n>3:\n            return (total+1)*gHelp(n-total, total+1)\n    return gHelp(n, 0)\n\n\n","after":null,"SubmissionTime":"2016-02-11T09:59:26.478576","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":487,"date":"2016-02-11 10:00:05.293174","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def gHelp(count, total):\n        if count ==0:\n            return total\n        elif n<=3:\n            return gHelp(count-1,total+1)\n        elif n>3:\n            return (total+1)*gHelp(n-total-1, total+1)\n    return gHelp(n, 0)\n\n\n","after":null,"SubmissionTime":"2016-02-11T10:00:05.293174","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":487,"date":"2016-02-11 10:00:32.205773","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def gHelp(count, total):\n        if count ==0:\n            return total\n        elif n<=3:\n            return gHelp(count-1,total+1)\n        elif n>3:\n            return (total+1)*gHelp(n-total-1, total+1) + gHelp(count,total)\n    return gHelp(n, 0)\n\n\n","after":null,"SubmissionTime":"2016-02-11T10:00:32.205773","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":90,"date":"2016-02-11 10:25:21.789930","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + g(n-2) + 3 * g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-11T10:25:21.78993","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":1,"Id":0,"studentId":919,"date":"2016-02-11 11:11:56.589130","diff":null,"before":"def g(x):\n        if n <= 1:\n            return x\n        return repeated(f, n-1)(x)\n    if n == 0:\n        return g\n\n    return compose1(f, g)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    return (g(n-1)) + g(n-2) + g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-11T11:11:56.58913","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":795,"date":"2016-02-11 11:20:12.446157","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if 0 < n < 3:\n        return n \n    else: \n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n\n","after":null,"SubmissionTime":"2016-02-11T11:20:12.446157","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":795,"date":"2016-02-11 11:22:35.898905","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n < 3:\n        return n \n    else: \n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n\n","after":null,"SubmissionTime":"2016-02-11T11:22:35.898905","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":958,"date":"2016-02-11 12:18:20.757167","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return 3\n    return g(n-1) + 2 * g(n-2) + 3*g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-11T12:18:20.757167","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":791,"date":"2016-02-11 13:11:08.383024","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-11T13:11:08.383024","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":791,"date":"2016-02-11 13:12:06.765537","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n == 1:\n        return n\n    else:\n        return g(n)\n","after":null,"SubmissionTime":"2016-02-11T13:12:06.765537","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":791,"date":"2016-02-11 13:12:24.054156","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n < 3:\n        return n\n    else:\n        return g(n)\n","after":null,"SubmissionTime":"2016-02-11T13:12:24.054156","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":791,"date":"2016-02-11 13:12:24.054156","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n < 3:\n        return n\n    else:\n        return g(n)\n","after":null,"SubmissionTime":"2016-02-11T13:12:24.054156","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":791,"date":"2016-02-11 13:13:00.289659","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    else:\n        return g(n)\n","after":null,"SubmissionTime":"2016-02-11T13:13:00.289659","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":791,"date":"2016-02-11 13:13:41.232663","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    else:\n        return g(n)\n","after":null,"SubmissionTime":"2016-02-11T13:13:41.232663","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":791,"date":"2016-02-11 13:16:39.984489","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    else:\n        return G(n)\n","after":null,"SubmissionTime":"2016-02-11T13:16:39.984489","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":791,"date":"2016-02-11 13:17:12.798143","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    else:\n        return g(n)\n","after":null,"SubmissionTime":"2016-02-11T13:17:12.798143","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":106,"date":"2016-02-11 13:25:39.310083","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-11T13:25:39.310083","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":841,"date":"2016-02-11 13:57:45.909822","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n  \n    else:\n        n-1\n        g(n)*n \n\n","after":null,"SubmissionTime":"2016-02-11T13:57:45.909822","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":841,"date":"2016-02-11 13:59:40.406481","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k=0\n    if k<=n:\n        return n  \n    else:\n        k=k+1\n        g(n-1)*n \n\n","after":null,"SubmissionTime":"2016-02-11T13:59:40.406481","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":561,"date":"2016-02-11 14:07:02.758590","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        n = g\n        return g\n    else:\n        k=n\n        return g(k-1) + 2*g(k-2) + 3*g(k-3)\n        k -= 1\n\n\n","after":null,"SubmissionTime":"2016-02-11T14:07:02.75859","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChildren(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), TChild(Target(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementNode, TChildren(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChildren(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), TChild(Node(AugmentedAssignStatementNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast)))))))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":561,"date":"2016-02-11 14:07:38.482060","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        g = n\n        return g\n    else:\n        k=n\n        return g(k-1) + 2*g(k-2) + 3*g(k-3)\n        k -= 1\n\n\n","after":null,"SubmissionTime":"2016-02-11T14:07:38.48206","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-11 14:10:45.428480","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    if n <=3:\n        G = lambda n: n\n        return G(n) \n    if n > 3:\n        G = lambda n: g(n-1)\n        return g(n-1) + g(n-1)\n        \n     \n    \n    \n\n","after":null,"SubmissionTime":"2016-02-11T14:10:45.42848","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-11 14:10:45.428480","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    if n <=3:\n        G = lambda n: n\n        return G(n) \n    if n > 3:\n        G = lambda n: g(n-1)\n        return g(n-1) + g(n-1)\n        \n     \n    \n    \n\n","after":null,"SubmissionTime":"2016-02-11T14:10:45.42848","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1003,"date":"2016-02-11 14:11:03.514743","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    else:\n        return g(n-1)\n\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T14:11:03.514743","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-11 14:11:19.339452","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    if n <=3:\n        G = lambda n: n\n        return G(n) \n    if n > 3:\n        G = lambda n: g(n-1)\n        return G(n) + g(n-1)\n        \n     \n    \n    \n\n","after":null,"SubmissionTime":"2016-02-11T14:11:19.339452","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1003,"date":"2016-02-11 14:11:23.132845","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    else:\n        return g(n) * g(n-1)\n\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T14:11:23.132845","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-11 14:12:32.104807","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    if n <=3:\n        G = lambda n: n\n        return 5 \n    if n > 3:\n        G = lambda n: g(n-1)\n        return G(n) + g(n-1)\n        \n     \n    \n    \n\n","after":null,"SubmissionTime":"2016-02-11T14:12:32.104807","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1003,"date":"2016-02-11 14:13:48.910986","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    else:\n        if n > 6:\n            return g(g(n-1))\n\n\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T14:13:48.910986","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1003,"date":"2016-02-11 14:15:35.264932","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    else:\n        if n > 6:\n            return lambda n: g(n-1)\n\n\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T14:15:35.264932","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1003,"date":"2016-02-11 14:18:23.454741","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    else:\n        x = lambda n: g(n-x)\n        if n > 6:\n            return x\n\n\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T14:18:23.454741","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1003,"date":"2016-02-11 14:18:29.344825","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    else:\n        x = lambda n: g(n-n)\n        if n > 6:\n            return x\n\n\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T14:18:29.344825","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":561,"date":"2016-02-11 14:19:32.492611","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        g = n\n        return g\n    else:\n        \n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n       \n\n\n","after":null,"SubmissionTime":"2016-02-11T14:19:32.492611","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1003,"date":"2016-02-11 14:20:30.147523","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    else:\n        def G(n): n * g(n-n)\n        if n >= 6:\n            return G(n)\n\n\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T14:20:30.147523","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-11 14:20:47.279778","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    if n <=3:\n        G = lambda n: n\n        return G(n) \n    if n > 3:\n        G = lambda n: g(n-1)\n        return G(n) + g(n-1)\n        \n     \n    \n    \n\n","after":null,"SubmissionTime":"2016-02-11T14:20:47.279778","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1003,"date":"2016-02-11 14:20:52.915913","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    else:\n        def G(n): \n            return n * g(n-n)\n        return G(n)\n\n\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T14:20:52.915913","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1003,"date":"2016-02-11 14:21:03.900431","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    else:\n        def G(n): \n            return n * g(n)\n        return G(n)\n\n\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T14:21:03.900431","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":781,"date":"2016-02-11 14:21:37.360976","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def g_helper(i):\n        if n<=3:\n            return n\n        elif i<n:\n            return n + (i+1)*g(n-(i+1))\n    \n    return g_helper(1)\n\n","after":null,"SubmissionTime":"2016-02-11T14:21:37.360976","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1003,"date":"2016-02-11 14:23:02.762820","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    else:\n        i = n\n        def G(n,i=n): \n            return n * g(n-i)\n        return G(n)\n\n\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T14:23:02.76282","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1003,"date":"2016-02-11 14:23:12.900642","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    else:\n        i = n-1\n        def G(n,i=n): \n            return n * g(n-i)\n        return G(n)\n\n\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T14:23:12.900642","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1003,"date":"2016-02-11 14:23:18.175283","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    else:\n        i = n+1\n        def G(n,i=n): \n            return n * g(n-i)\n        return G(n)\n\n\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T14:23:18.175283","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1003,"date":"2016-02-11 14:24:07.176981","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    else:\n        i = n+1\n        def G(n,i=n): \n            return n * g(i-n)\n        return G(n)\n\n\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T14:24:07.176981","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1003,"date":"2016-02-11 14:24:37.222860","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n\n    else:\n        i = n+1\n\n        def G(n,i=n): \n            return n * G(i-n)\n\n        return G(n)\n\n\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T14:24:37.22286","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":781,"date":"2016-02-11 14:24:42.138823","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def g_helper(i):\n        if n<=3:\n            return n\n        elif i<=n:\n            return n + (i+1)*g(n-(i+1))\n    return g_helper(1)\n\n","after":null,"SubmissionTime":"2016-02-11T14:24:42.138823","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1003,"date":"2016-02-11 14:24:52.473099","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n\n    else:\n        i = n+1\n\n        def G(n,i=n): \n            return i * g(i-n)\n\n        return G(n)\n\n\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T14:24:52.473099","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":781,"date":"2016-02-11 14:27:12.104550","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def g_helper(i):\n        if n<=3:\n            return n\n        elif i<=n:\n            return g(n) + (i+1)*g(n-(i+1))\n    return g_helper(1)\n\n","after":null,"SubmissionTime":"2016-02-11T14:27:12.10455","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":781,"date":"2016-02-11 14:27:41.194915","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def g_helper(i):\n        if n<=3:\n            return n\n        elif i<=n:\n            return g(n-i) + (i+1)*g(n-(i+1))\n    return g_helper(1)\n\n","after":null,"SubmissionTime":"2016-02-11T14:27:41.194915","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":373,"date":"2016-02-11 14:28:11.270822","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<= 3:\n        return n\n    else:\n        return n*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-11T14:28:11.270822","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return 1*g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":1003,"date":"2016-02-11 14:29:35.597489","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n\n    else:\n        return n * g(n)\n\n    \n      \n\n\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T14:29:35.597489","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1003,"date":"2016-02-11 14:29:50.612445","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n\n    else:\n        return n * g(n-1)\n\n    \n      \n\n\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T14:29:50.612445","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return 1*g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":1003,"date":"2016-02-11 14:30:05.664677","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n\n    else:\n        return n-1 * g(n-1)\n\n    \n      \n\n\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T14:30:05.664677","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1003,"date":"2016-02-11 14:30:37.714328","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    else:\n        return n+1 * g(n-1)\n\n    \n      \n\n\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T14:30:37.714328","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1003,"date":"2016-02-11 14:30:47.023580","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    else:\n        return n+1 + g(n-1)\n\n    \n      \n\n\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T14:30:47.02358","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":373,"date":"2016-02-11 14:31:17.252557","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<= 3:\n        return n\n\n    return n*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-11T14:31:17.252557","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1003,"date":"2016-02-11 14:33:09.840592","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    elif n == 4:\n        return n * G(n+1 - n)\n\n    \n      \n\n\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T14:33:09.840592","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1003,"date":"2016-02-11 14:33:15.092708","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    elif n == 4:\n        return n * g(n+1 - n)\n\n    \n      \n\n\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T14:33:15.092708","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1003,"date":"2016-02-11 14:33:29.533758","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    elif n == 4:\n        return n * g(n+1 - n-1)\n\n    \n      \n\n\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T14:33:29.533758","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1003,"date":"2016-02-11 14:33:36.796513","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    elif n == 4:\n        return n * g(n)\n\n    \n      \n\n\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T14:33:36.796513","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":373,"date":"2016-02-11 14:34:02.553799","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<= 3:\n        return n\n\n    return g(n-1) + 2*G(n-2) + 3*G(n-3)\n\n","after":null,"SubmissionTime":"2016-02-11T14:34:02.553799","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1003,"date":"2016-02-11 14:34:22.003144","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    elif n == 4:\n        return n * g(n-1) + n * g(n-2) + 3 * g(n-3)\n\n    \n      \n\n\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T14:34:22.003144","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1003,"date":"2016-02-11 14:35:01.429096","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    elif n > 3:\n        return n * g(n-1) + n * g(n-2) + 3 * g(n-3)\n\n    \n      \n\n\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T14:35:01.429096","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1003,"date":"2016-02-11 14:35:42.792678","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    elif n > 3:\n        return (n*g(n-1)) + (n*g(n-2)) + (3* g(n-3))\n\n    \n      \n\n\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T14:35:42.792678","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1003,"date":"2016-02-11 14:35:55.399102","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    elif n > 3:\n        return (n*g(n-3)) + (n*g(n-2)) + (3* g(n-1))\n\n    \n      \n\n\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T14:35:55.399102","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1003,"date":"2016-02-11 14:36:01.844231","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    elif n > 3:\n        return (n*g(n-3)) + (n*g(n-2)) \n\n    \n      \n\n\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T14:36:01.844231","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1003,"date":"2016-02-11 14:36:17.458173","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    elif n > 3:\n        return g(n-3) + (n*g(n-2)) + (3* g(n-1))\n\n    \n      \n\n\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T14:36:17.458173","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1003,"date":"2016-02-11 14:36:39.970821","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    elif n > 3:\n        return g(n-3) + (2*g(n-2)) + (3* g(n-1))\n\n    \n      \n\n\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T14:36:39.970821","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":348,"date":"2016-02-11 14:44:57.425375","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-11T14:44:57.425375","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":811,"date":"2016-02-11 15:00:38.328368","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    if n>3:\n        return G(n-1)+2*G(n-2)+3*G(n-3)\n\n","after":null,"SubmissionTime":"2016-02-11T15:00:38.328368","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    if n>3:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":781,"date":"2016-02-11 15:07:42.285279","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def g_helper(i):\n        if n<=3:\n            return n\n        elif i<=n:\n            return i*g(n-i) + (i+1)*g(n-(i+1))\n    return g_helper(1)\n\n","after":null,"SubmissionTime":"2016-02-11T15:07:42.285279","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":781,"date":"2016-02-11 15:10:04.931393","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    def g_helper(i):\n        if n<=3:\n            return n\n        elif i<n:\n            return i*g(n-i) + (i+1)*g(n-(i+1))\n    return g_helper(1)\n\n","after":null,"SubmissionTime":"2016-02-11T15:10:04.931393","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":781,"date":"2016-02-11 15:11:46.923210","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    def g_helper(i):\n        if n<=3:\n            return n\n        elif i<n:\n            return i*g_helper(n-i) + (i+1)*g_helper(n-(i+1))\n    return g_helper(1)\n\n","after":null,"SubmissionTime":"2016-02-11T15:11:46.92321","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":781,"date":"2016-02-11 15:14:05.579088","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    def g_helper(i):\n        if n-i<=4:\n            return n\n        elif i<n:\n            return i*g_helper(n-i) + (i+1)*g_helper(n-(i+1))\n    return g_helper(1)\n\n","after":null,"SubmissionTime":"2016-02-11T15:14:05.579088","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":781,"date":"2016-02-11 15:14:16.066078","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    def g_helper(i):\n        if n-i<4:\n            return n\n        elif i<n:\n            return i*g_helper(n-i) + (i+1)*g_helper(n-(i+1))\n    return g_helper(1)\n\n","after":null,"SubmissionTime":"2016-02-11T15:14:16.066078","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":781,"date":"2016-02-11 15:14:37.524672","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    def g_helper(i):\n        if n-i<=3:\n            return n\n        elif i<n:\n            return i*g_helper(n-i) + (i+1)*g_helper(n-(i+1))\n    return g_helper(1)\n\n","after":null,"SubmissionTime":"2016-02-11T15:14:37.524672","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":781,"date":"2016-02-11 15:16:15.697494","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    def g_helper(i):\n        if n-i<4:\n            return n\n        elif i<n:\n            return i*g_helper(n-i) + (i+1)*g_helper(n-(i+1))\n    return g_helper(1)\n\n","after":null,"SubmissionTime":"2016-02-11T15:16:15.697494","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":677,"date":"2016-02-11 15:18:23.615526","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n            return n\n    def multiplier(x):\n        if x == 3:\n            return 0\n        else:\n            return x*g(n-x) + multiplier(x-1)\n    return multiplier(1)\n\n","after":null,"SubmissionTime":"2016-02-11T15:18:23.615526","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":677,"date":"2016-02-11 15:19:50.462708","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def multiplier(x):\n        if n <= 3:\n            return n\n        if x == 3:\n            return 0\n        else:\n            return x*g(n-x) + multiplier(x-1)\n    return multiplier(1)\n\n","after":null,"SubmissionTime":"2016-02-11T15:19:50.462708","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":677,"date":"2016-02-11 15:21:10.173273","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def multiplier(x):\n        if n <= 3:\n            return n\n        if x > 3:\n            return 0\n        else:\n            return x*g(n-x) + multiplier(x-1)\n    return multiplier(1)\n\n","after":null,"SubmissionTime":"2016-02-11T15:21:10.173273","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":781,"date":"2016-02-11 15:22:37.186046","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    def g_helper(i):\n        if n-i<=4:\n            return n\n        elif n-i>4:\n            if i<n:\n                return i*g_helper(n-i) + (i+1)*g_helper(n-(i+1))\n    return g_helper(1)\n\n","after":null,"SubmissionTime":"2016-02-11T15:22:37.186046","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":781,"date":"2016-02-11 15:23:30.247156","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    def g_helper(i):\n        if n-i<=2:\n            return n\n        elif n-i>4:\n            if i<n:\n                return i*g_helper(n-i) + (i+1)*g_helper(n-(i+1))\n    return g_helper(1)\n\n","after":null,"SubmissionTime":"2016-02-11T15:23:30.247156","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":781,"date":"2016-02-11 15:23:40.559898","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    def g_helper(i):\n        if n-i<=2:\n            return n\n        elif n-i>2:\n            if i<n:\n                return i*g_helper(n-i) + (i+1)*g_helper(n-(i+1))\n    return g_helper(1)\n\n","after":null,"SubmissionTime":"2016-02-11T15:23:40.559898","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":781,"date":"2016-02-11 15:25:14.255238","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    def g_helper(i):\n        if n-i<=2:\n            return n\n        elif n-i>2:\n            if i<=n:\n                return i*g_helper(n-i) + (i+1)*g_helper(n-(i+1))\n    return g_helper(1)\n\n","after":null,"SubmissionTime":"2016-02-11T15:25:14.255238","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":518,"date":"2016-02-11 15:29:43.015246","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        i=1\n        if i<n:\n            return g(n-1)+i*g(n-2)\n            i+=1\n\n","after":null,"SubmissionTime":"2016-02-11T15:29:43.015246","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":518,"date":"2016-02-11 15:36:12.949160","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        i=2\n        y=g(n-1)\n        if i<=n:\n            return y+i*g(n-i)\n            i+=1\n\n","after":null,"SubmissionTime":"2016-02-11T15:36:12.94916","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":176,"date":"2016-02-11 15:38:24.532509","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    k = n\n    return k*g(k-1)\n\n","after":null,"SubmissionTime":"2016-02-11T15:38:24.532509","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":232,"date":"2016-02-11 15:58:11.737272","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    def compute_G(i):\n\n        if n <= 3:\n            return n\n        elif i != n:\n            value += i*g(n - i)\n            compute_G(i + 1)\n        return value\n\n    return compute_G(1)\n\n    \n\n","after":null,"SubmissionTime":"2016-02-11T15:58:11.737272","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":232,"date":"2016-02-11 15:58:51.836758","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    value = 0\n\n    def compute_G(i):\n\n        if n <= 3:\n            return n\n        elif i != n:\n            value += i*g(n - i)\n            compute_G(i + 1)\n        return value\n\n    return compute_G(1)\n\n    \n\n","after":null,"SubmissionTime":"2016-02-11T15:58:51.836758","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":815,"date":"2016-02-11 16:08:07.603143","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n < 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-11T16:08:07.603143","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":736,"date":"2016-02-11 16:10:01.496328","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        print(n)\n        g(n-1) + (n+1)\n\n","after":null,"SubmissionTime":"2016-02-11T16:10:01.496328","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":995,"date":"2016-02-11 16:10:44.997265","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def helper(i, n):\n        if i <= 3:\n            return i \n        else:\n            return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n\n","after":null,"SubmissionTime":"2016-02-11T16:10:44.997265","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":232,"date":"2016-02-11 16:22:29.487825","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    \n\n    def compute_G(i):\n\n        if n <= 3:\n            return n\n        elif i <= 3:\n            i += 1\n            return i*g(n - i) +g(n)\n\n    return compute_G(1)\n\n    \n\n","after":null,"SubmissionTime":"2016-02-11T16:22:29.487825","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":232,"date":"2016-02-11 16:23:36.325696","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    \n\n    def compute_G(i):\n\n        if n <= 3:\n            return n\n        elif i < 4:\n            i += 1\n            return i*g(n - i) + g(n-1)\n\n    return compute_G(1)\n\n    \n\n","after":null,"SubmissionTime":"2016-02-11T16:23:36.325696","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":644,"date":"2016-02-11 16:24:41.164927","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <=3:\n        return n\n    else:\n        return G(n-1) + 2 * G(n-2) + 3 * G(n-3)\n\n\n","after":null,"SubmissionTime":"2016-02-11T16:24:41.164927","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":232,"date":"2016-02-11 16:26:21.674592","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    \n\n    def compute_G(i):\n\n        if n <= 3:\n            return n\n        elif i < 4:\n            #i += 1\n            return i*g(n - i) + g(n-1)\n        i += 1\n\n    return compute_G(1)\n\n    \n\n","after":null,"SubmissionTime":"2016-02-11T16:26:21.674592","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":232,"date":"2016-02-11 16:27:16.612361","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    \n\n    def compute_G(i):\n\n        if n <= 3:\n            return n\n        elif i < 4:\n            i += 1\n            return (i-1)*g(n - (i-1)) + g(n-1)\n\n    return compute_G(1)\n\n    \n\n","after":null,"SubmissionTime":"2016-02-11T16:27:16.612361","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":232,"date":"2016-02-11 16:27:31.592675","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    \n\n    def compute_G(i):\n\n        if n <= 3:\n            return n\n        elif i < 5:\n            i += 1\n            return (i-1)*g(n - (i-1)) + g(n-1)\n\n    return compute_G(1)\n\n    \n\n","after":null,"SubmissionTime":"2016-02-11T16:27:31.592675","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":232,"date":"2016-02-11 16:28:54.910565","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    \n\n    def compute_G(i):\n\n        if n <= 3:\n            return n\n        elif i < 5:\n            i += 1\n            return (i-1)*g(n - (i-1))\n\n    return compute_G(1)\n\n    \n\n","after":null,"SubmissionTime":"2016-02-11T16:28:54.910565","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":995,"date":"2016-02-11 16:37:13.687422","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def helper(i):\n        i = n \n        if i <= 3:\n            return i \n        else:\n            return g(i-1) + 2 * g(i-2) + 3 * g(i-3)\n\n    return helper(n, n) \n\n\n","after":null,"SubmissionTime":"2016-02-11T16:37:13.687422","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":995,"date":"2016-02-11 16:38:27.920722","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def helper(i):\n        i = n \n        if i <= 3:\n            return i \n        else:\n            return helper(i-1) + 2 * helper(i-2) + 3 * helper(i-3)\n\n    return helper(n) \n\n\n","after":null,"SubmissionTime":"2016-02-11T16:38:27.920722","SynthesizedAfter":"\r\ndef g(n):\r\n    def helper(i):\r\n        i = n\r\n        if i<=3:\r\n            return i\r\n        else:\r\n            return g(i-1)+2*g(i-2)+3*g(i-3)\r\n    return helper(n)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":388,"date":"2016-02-11 16:50:44.134469","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        k = 1\n        return G(n-1) + 2*G(n-2) + 3*G(n-3)\n\n","after":null,"SubmissionTime":"2016-02-11T16:50:44.134469","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        k = 1\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":2,"Id":0,"studentId":353,"date":"2016-02-11 17:17:44.763041","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    return n if n <= 3 else g(n) * g(n-1) * g(n-2) * g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-11T17:17:44.763041","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":736,"date":"2016-02-11 17:18:40.259604","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        print(n)\n        g(n+1) + (n-1)\n\n","after":null,"SubmissionTime":"2016-02-11T17:18:40.259604","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":736,"date":"2016-02-11 17:19:00.054072","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        print(n)\n        g(n-1) + (n-1)\n\n","after":null,"SubmissionTime":"2016-02-11T17:19:00.054072","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":736,"date":"2016-02-11 17:19:13.898321","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        print(n)\n        g(n-1) + n\n\n","after":null,"SubmissionTime":"2016-02-11T17:19:13.898321","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":736,"date":"2016-02-11 17:19:30.077476","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        \n        g(n-1) + n\n\n","after":null,"SubmissionTime":"2016-02-11T17:19:30.077476","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":736,"date":"2016-02-11 17:19:54.252224","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        print(n)\n        g(n+1) + n\n\n","after":null,"SubmissionTime":"2016-02-11T17:19:54.252224","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":736,"date":"2016-02-11 17:27:05.695198","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        print(n)\n        return g(n-1) + 2* g(n-2) + 3 * g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-11T17:27:05.695198","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        print(n)\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":736,"date":"2016-02-11 17:27:59.173688","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return print(n)\n        # return g(n-1) + 2* g(n-2) + 3 * g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-11T17:27:59.173688","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":176,"date":"2016-02-11 17:31:56.479970","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    def pain(k,i,result):\n        if k == n:\n            return result\n        return result+g(k-1)\n    return pain(n,0,0)\n\n","after":null,"SubmissionTime":"2016-02-11T17:31:56.47997","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":106,"date":"2016-02-11 17:32:28.630728","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return n + g(n+1)\n\n","after":null,"SubmissionTime":"2016-02-11T17:32:28.630728","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":176,"date":"2016-02-11 17:32:53.314597","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    def pain(k,i,result):\n        if k == n:\n            return result\n        print (result ,g(k-1))\n    return pain(n,0,0)\n\n","after":null,"SubmissionTime":"2016-02-11T17:32:53.314597","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1071,"date":"2016-02-11 17:38:42.299680","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    i=1\n    other_num=1\n    if n<=3:\n        return (n)\n    else:\n        return g(n-other_num)*i\n        i+=1\n        other_num+=1\n\n","after":null,"SubmissionTime":"2016-02-11T17:38:42.29968","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":341,"date":"2016-02-11 17:39:01.478821","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n >=3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-11T17:39:01.478821","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1071,"date":"2016-02-11 17:39:22.249917","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    i=1\n    other_num=1\n    if n<=3:\n        return (n)\n    else:\n        i+=1\n        other_num+=1\n        return g(n-other_num)*i\n        \n\n","after":null,"SubmissionTime":"2016-02-11T17:39:22.249917","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1071,"date":"2016-02-11 17:41:36.060453","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    i=1\n    other_num=1\n    if n<=3:\n        return (n)\n    else:\n        i+=1\n        other_num+=1\n        return g(n-other_num)*i+(g(n-1))\n        \n\n","after":null,"SubmissionTime":"2016-02-11T17:41:36.060453","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1071,"date":"2016-02-11 17:42:59.279919","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    i=1\n    other_num=1\n    if n<=3:\n        return (n)\n    else:\n        i+=1\n        other_num+=1\n        return g(n-other_num)*i+(g(n-1))+(g(n-3))\n        \n\n","after":null,"SubmissionTime":"2016-02-11T17:42:59.279919","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1071,"date":"2016-02-11 17:45:27.850651","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    other_num=1\n    if n<=3:\n        return (n)\n    else:\n        i+=1\n        other_num+=1\n        return (g(n-1))+g(n-other_num)*2+(g(n-3))*3\n        \n\n","after":null,"SubmissionTime":"2016-02-11T17:45:27.850651","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":326,"date":"2016-02-11 18:23:33.985674","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    while n == 3:\n        return 1\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2  * g(n-2) + 3 * g(n-3)\n\n\n","after":null,"SubmissionTime":"2016-02-11T18:23:33.985674","SynthesizedAfter":"\r\ndef g(n):\r\n    while n==3:\r\n        return n\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":1,"Id":0,"studentId":184,"date":"2016-02-11 18:43:13.563171","diff":null,"before":"def g(n):\n        if n==1:\n            return 1\n        else:\n            return term(n)*f(n-1)\n    return f(n)\n\ndef factorial(n):\n    \"\"\"Return n factorial for n >= 0 by calling product.\n\n    >>> factorial(4)\n    24\n    >>> factorial(6)\n    720\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'factorial', ['Recursion', 'For', 'While'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return product(n, identity)\n\nfrom operator import add, mul\n\ndef accumulate(combiner, base, n, term):\n    \"\"\"Return the result of combining the first N terms in a sequence.  The\n    terms to be combined are TERM(1), TERM(2), ..., TERM(N).  COMBINER is a\n    two-argument function.  Treating COMBINER as if it were a binary operator,\n    the return value is\n        BASE COMBINER TERM(1) COMBINER TERM(2) ... COMBINER TERM(N)\n\n    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n    15\n    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n    26\n    >>> accumulate(add, 11, 0, identity) # 11\n    11\n    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n    25\n    >>> accumulate(mul, 2, 3, square)   # 2 * 1^2 * 2^2 * 3^2\n    72\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \"\"\"def f(x):\n        if x==1:\n            return base+term(1)\n        else: \n            return combiner(f(x-1),term(x))\n    return f(n)\"\"\"\n    s=base\n    for i in range(1,n+1):\n        s=combiner(s,term(i))\n    return s\n    \ndef summation_using_accumulate(n, term):\n    \"\"\"Returns the sum of TERM(1) + ... + TERM(N). The implementation\n    uses accumulate.\n\n    >>> summation_using_accumulate(5, square)\n    55\n    >>> summation_using_accumulate(5, triple)\n    45\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'summation_using_accumulate',\n    ...       ['Recursion', 'For', 'While'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return accumulate(add, 0, n, term)\n\ndef product_using_accumulate(n, term):\n    \"\"\"An implementation of product using accumulate.\n\n    >>> product_using_accumulate(4, square)\n    576\n    >>> product_using_accumulate(6, triple)\n    524880\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'product_using_accumulate',\n    ...       ['Recursion', 'For', 'While'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return accumulate(mul, 1, n, term)\n\ndef true(x):\n    return True\n\ndef false(x):\n    return False\n\ndef odd(x):\n    return x % 2 == 1\n\ndef filtered_accumulate(combiner, base, pred, n, term):\n    \"\"\"Return the result of combining the terms in a sequence of N terms\n    that satisfy the predicate PRED.  COMBINER is a two-argument function.\n    If v1, v2, ..., vk are the values in TERM(1), TERM(2), ..., TERM(N)\n    that satisfy PRED, then the result is\n         BASE COMBINER v1 COMBINER v2 ... COMBINER vk\n    (treating COMBINER as if it were a binary operator, like +). The\n    implementation uses accumulate.\n\n    >>> filtered_accumulate(add, 0, true, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n    15\n    >>> filtered_accumulate(add, 11, false, 5, identity) # 11\n    11\n    >>> filtered_accumulate(add, 0, odd, 5, identity)   # 0 + 1 + 3 + 5\n    9\n    >>> filtered_accumulate(mul, 1, odd, 5, square)  # 1 * 1 * 9 * 25\n    225\n    >>> # Do not use while/for loops or recursion\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'filtered_accumulate',\n    ...       ['While', 'For', 'Recursion', 'FunctionDef'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return accumulate(lambda a,b:combiner(a,b) if pred(term(b)) else (lambda x,y: x)(a,b) , base, n, term)\n\ndef repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)\n    >>> add_three(5)\n    8\n    >>> repeated(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> repeated(square, 2)(5) # square(square(5))\n    625\n    >>> repeated(square, 4)(5) # square(square(square(square(5))))\n    152587890625\n    >>> repeated(square, 0)(5)\n    5\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==0:\n        return lambda x:x\n    def fn(x):\n        def g(n):\n            if n==1:\n                return f\n            else:\n                return compose1(g(n-1),f)\n            \n        func=g(n)\n        return func(x)\n    return fn\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    else:\n        return g(n-1)*g(n-2)*g(n-3)\n    \n\n","after":null,"SubmissionTime":"2016-02-11T18:43:13.563171","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":660,"date":"2016-02-11 18:43:56.498389","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    return n + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-11T18:43:56.498389","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":660,"date":"2016-02-11 18:44:36.082939","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return n + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-11T18:44:36.082939","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":776,"date":"2016-02-11 18:46:06.786904","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <=3:\n        return n \n    elif n > 3:\n        return (n-1) + 2 * n-2 + 3 *(n-3)\n\n    \n","after":null,"SubmissionTime":"2016-02-11T18:46:06.786904","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":776,"date":"2016-02-11 18:47:00.711699","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <=3:\n        return n \n    elif n > 3:\n        return (n-1) + 2 * n-2 \n\n    \n","after":null,"SubmissionTime":"2016-02-11T18:47:00.711699","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":660,"date":"2016-02-11 18:47:20.190637","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 1:\n        return n\n    else:\n        return n + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-11T18:47:20.190637","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":776,"date":"2016-02-11 18:47:28.203302","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <=3:\n        return n \n    elif n > 3:\n        return (n-1) + 2 * n-3\n\n    \n","after":null,"SubmissionTime":"2016-02-11T18:47:28.203302","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":660,"date":"2016-02-11 18:49:23.785467","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return n + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-11T18:49:23.785467","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":776,"date":"2016-02-11 18:49:33.608247","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <=3:\n        return n \n    elif n > 3:\n        return (n-1) + 2 * (n-2) + 3 (n-3)\n\n    \n","after":null,"SubmissionTime":"2016-02-11T18:49:33.608247","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":776,"date":"2016-02-11 18:50:06.847058","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <=3:\n        return n \n    elif n > 3:\n        return (n - 1) + 2 * (n - 2) + 3 (n - 3)\n\n    \n","after":null,"SubmissionTime":"2016-02-11T18:50:06.847058","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":776,"date":"2016-02-11 18:50:18.061766","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <=3:\n        return n \n    elif n > 3:\n        return (n - 1) + 2 * (n - 2) \n\n    \n","after":null,"SubmissionTime":"2016-02-11T18:50:18.061766","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":660,"date":"2016-02-11 18:50:48.401246","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) * 2 + 2\n\n","after":null,"SubmissionTime":"2016-02-11T18:50:48.401246","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":383,"date":"2016-02-11 19:23:45.231298","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return n * g(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-11T19:23:45.231298","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return 1*g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":384,"date":"2016-02-11 19:23:45.231298","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return n * g(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-11T19:23:45.231298","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return 1*g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":384,"date":"2016-02-11 19:24:52.037598","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return n-1 * g(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-11T19:24:52.037598","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":383,"date":"2016-02-11 19:24:52.037598","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return n-1 * g(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-11T19:24:52.037598","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":383,"date":"2016-02-11 19:25:00.915801","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return n * g(n)\n\n\n","after":null,"SubmissionTime":"2016-02-11T19:25:00.915801","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":384,"date":"2016-02-11 19:25:00.915801","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return n * g(n)\n\n\n","after":null,"SubmissionTime":"2016-02-11T19:25:00.915801","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":383,"date":"2016-02-11 19:25:09.500610","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return n * g(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-11T19:25:09.50061","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":384,"date":"2016-02-11 19:25:09.500610","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return n * g(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-11T19:25:09.50061","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":383,"date":"2016-02-11 19:26:55.949253","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) * n+1\n\n\n","after":null,"SubmissionTime":"2016-02-11T19:26:55.949253","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":384,"date":"2016-02-11 19:26:55.949253","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) * n+1\n\n\n","after":null,"SubmissionTime":"2016-02-11T19:26:55.949253","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":384,"date":"2016-02-11 19:27:01.406591","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) * n\n\n\n","after":null,"SubmissionTime":"2016-02-11T19:27:01.406591","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":383,"date":"2016-02-11 19:27:01.406591","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) * n\n\n\n","after":null,"SubmissionTime":"2016-02-11T19:27:01.406591","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-11 19:59:59.778412","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(x):\n        if n <= 3:\n            return n\n        else:\n            return n * (n - x + helper(x+1))\n            #return n * g(n-x) + x+1\n    return helper(1)\n\n\n\n\n\n\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-11T19:59:59.778412","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-11 20:00:47.206149","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(x):\n        if x >= 3:\n            return 1\n        else:\n            return n * (n - x + helper(x+1))\n            #return n * g(n-x) + x+1\n    return helper(1)\n\n\n\n\n\n\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-11T20:00:47.206149","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-11 20:01:26.395851","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def helper(x):\n            if x >= 3:\n                return 1\n            else:\n                return n * (n - x + helper(x+1))\n            #return n * g(n-x) + x+1\n    return helper(1)\n\n\n\n\n\n\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-11T20:01:26.395851","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-11 20:01:41.168700","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def helper(x):\n            if x >= 3:\n                return 1\n            else:\n                return x * (n - x + helper(x+1))\n            #return n * g(n-x) + x+1\n    return helper(1)\n\n\n\n\n\n\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-11T20:01:41.1687","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-11 20:01:59.142768","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def helper(x):\n            if x >= 3:\n                return x\n            else:\n                return x * (n - x + helper(x+1))\n            #return n * g(n-x) + x+1\n    return helper(1)\n\n\n\n\n\n\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-11T20:01:59.142768","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-11 20:02:41.685536","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def helper(x):\n            if x >= 3:\n                return 0\n            else:\n                return x * (g(n - x) + helper(x+1))\n            #return n * g(n-x) + x+1\n    return helper(1)\n\n\n\n\n\n\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-11T20:02:41.685536","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-11 20:03:07.214446","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def helper(x):\n            if x >= 3:\n                return 0\n            else:\n                return n * (g(n - x) + helper(x+1))\n            #return n * g(n-x) + x+1\n    return helper(1)\n\n\n\n\n\n\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-11T20:03:07.214446","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-11 20:03:19.017293","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def helper(x):\n            if x >= 3:\n                return 0\n            else:\n                return (g(n - x) + helper(x+1))\n            #return n * g(n-x) + x+1\n    return helper(1)\n\n\n\n\n\n\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-11T20:03:19.017293","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-11 20:04:13.029738","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def helper(x):\n            if x >= 3:\n                return 0\n            else:\n                return x * (g(n - x) + x+1)\n            #return n * g(n-x) + x+1\n    return helper(1)\n\n\n\n\n\n\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-11T20:04:13.029738","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-11 20:04:27.980710","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def helper(x):\n            if x >= 3:\n                return 0\n            else:\n                return x * (g(n - x) + helper(x+1))\n            #return n * g(n-x) + x+1\n    return helper(1)\n\n\n\n\n\n\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-11T20:04:27.98071","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-11 20:04:50.457446","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def helper(x):\n            if x >= 3:\n                return x\n            else:\n                return x * (g(n - x) + helper(x+1))\n            #return n * g(n-x) + x+1\n    return helper(1)\n\n\n\n\n\n\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-11T20:04:50.457446","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-11 20:05:06.005021","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def helper(x):\n            if x >= 3:\n                return 0\n            else:\n                return x * (g(n - x) + helper(x+1))\n            #return n * g(n-x) + x+1\n    return helper(1)\n\n\n\n\n\n\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-11T20:05:06.005021","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-11 20:05:17.079959","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def helper(x):\n            if x >= 3:\n                return 1\n            else:\n                return x * (g(n - x) + helper(x+1))\n            #return n * g(n-x) + x+1\n    return helper(1)\n\n\n\n\n\n\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-11T20:05:17.079959","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-11 20:05:27.123207","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def helper(x):\n            if x >= 3:\n                return 2\n            else:\n                return x * (g(n - x) + helper(x+1))\n            #return n * g(n-x) + x+1\n    return helper(1)\n\n\n\n\n\n\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-11T20:05:27.123207","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-11 20:05:46.870232","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def helper(x):\n            if x > 3:\n                return x \n            else:\n                return x * (g(n - x) + helper(x+1))\n            #return n * g(n-x) + x+1\n    return helper(1)\n\n\n\n\n\n\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-11T20:05:46.870232","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-11 20:06:13.965286","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def helper(x):\n            if x == 3:\n                return x \n            else:\n                return x * (g(n - x) + helper(x+1))\n            #return n * g(n-x) + x+1\n    return helper(1)\n\n\n\n\n\n\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-11T20:06:13.965286","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-11 20:06:27.851281","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def helper(x):\n            if x == 3:\n                return x/3 \n            else:\n                return x * (g(n - x) + helper(x+1))\n            #return n * g(n-x) + x+1\n    return helper(1)\n\n\n\n\n\n\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-11T20:06:27.851281","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-11 20:07:05.377719","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def helper(x):\n            if x == 3:\n                return x \n            else:\n                return (g(n - x) + helper(x+1)) * x \n            #return n * g(n-x) + x+1\n    return helper(1)\n\n\n\n\n\n\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-11T20:07:05.377719","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-11 20:07:15.655288","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def helper(x):\n            if x == 3:\n                return x \n            else:\n                return (g(n - x) + helper(x+1)) * n\n            #return n * g(n-x) + x+1\n    return helper(1)\n\n\n\n\n\n\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-11T20:07:15.655288","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-11 20:08:00.346556","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def helper(x):\n            if x >= 3:\n                return x \n            else:\n                return (n - x) + helper(x+1)\n            #return n * g(n-x) + x+1\n    return helper(1)\n\n\n\n\n\n\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-11T20:08:00.346556","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-11 20:08:21.841182","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def helper(x):\n            if x >= 3:\n                return x \n            else:\n                return x * (n - x) + helper(x+1)\n            #return n * g(n-x) + x+1\n    return helper(1)\n\n\n\n\n\n\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-11T20:08:21.841182","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-11 20:08:40.629468","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def helper(x):\n            if x >= 3:\n                return x \n            else:\n                return n * (n - x) + helper(x+1)\n            #return n * g(n-x) + x+1\n    return helper(1)\n\n\n\n\n\n\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-11T20:08:40.629468","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-11 20:09:05.533117","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def helper(x):\n            if x >= 3:\n                return x \n            else:\n                return x * g(n - x) + helper(x+1)\n            #return n * g(n-x) + x+1\n    return helper(1)\n\n\n\n\n\n\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-11T20:09:05.533117","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":461,"date":"2016-02-11 20:10:15.684319","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-11T20:10:15.684319","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return 1*g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-11 20:10:42.063810","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def helper(x):\n            if x >= 3:\n                return x \n            else:\n                return n * g(n - x) + helper(x+1)\n    return helper(1)\n\n\n\n\n\n\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-11T20:10:42.06381","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-11 20:11:31.584839","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def helper(x):\n            if x >= 3:\n                return x \n            else:\n                return x * g(n - x) + helper(x+1)\n    return helper(1)\n\n\n\n\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n    \"\"\"\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-11T20:11:31.584839","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-11 20:13:09.234701","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def helper(x):\n            if x >= 3:\n                return x \n            else:\n                #return x * g(n - x) + helper(x+1)\n                return (g(n-x) + (x+1)) * (g(n-x) + helper(x+1))\n    return helper(1)\n\n\n\n\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n    \"\"\"\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-11T20:13:09.234701","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-11 20:13:37.504165","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def helper(x):\n            if x >= 3:\n                return x \n            else:\n                #return x * g(n - x) + helper(x+1)\n                return (n-x) + (x+1) * (g(n-x) + helper(x+1))\n    return helper(1)\n\n\n\n\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n    \"\"\"\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-11T20:13:37.504165","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-11 20:14:02.024498","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def helper(x):\n            if x >= 3:\n                return x \n            else:\n                #return x * g(n - x) + helper(x+1)\n                return (n-x) + (x+1) * (g(n-x+1) + helper(x+2))\n    return helper(1)\n\n\n\n\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n    \"\"\"\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-11T20:14:02.024498","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-11 20:14:13.191063","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def helper(x):\n            if x >= 3:\n                return x \n            else:\n                #return x * g(n - x) + helper(x+1)\n                return (n-x) + (x+1) * (g(n-x+1) + helper(x+1))\n    return helper(1)\n\n\n\n\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n    \"\"\"\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-11T20:14:13.191063","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":459,"date":"2016-02-11 20:22:13.912018","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return G(n-1)+2*G(n-2)+3*G(n-3)\n\n","after":null,"SubmissionTime":"2016-02-11T20:22:13.912018","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":293,"date":"2016-02-11 20:22:23.503478","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return 3\n    else:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T20:22:23.503478","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":393,"date":"2016-02-11 20:25:25.580929","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if x <=3:\n        return x\n    else:\n        g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n    #G(n) = n,                                       if n <= 3\n    #G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n","after":null,"SubmissionTime":"2016-02-11T20:25:25.580929","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":393,"date":"2016-02-11 20:25:43.690248","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <=3:\n        return n\n    else:\n        g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n    #G(n) = n,                                       if n <= 3\n    #G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n","after":null,"SubmissionTime":"2016-02-11T20:25:43.690248","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":393,"date":"2016-02-11 20:27:09.783101","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def helper(x):\n        if x <=3:\n            return x\n        else:\n            helper(n-1) + 2*helper(n-2) + 3*helper(n-3)\n\n    return helper(n)\n\n\n    #G(n) = n,                                       if n <= 3\n    #G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n","after":null,"SubmissionTime":"2016-02-11T20:27:09.783101","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":426,"date":"2016-02-11 20:29:39.965574","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return G(n-1) + 2 * G(n-2) + 3 * G(n-3)\n\n","after":null,"SubmissionTime":"2016-02-11T20:29:39.965574","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":393,"date":"2016-02-11 20:29:54.596608","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def helper(x):\n        if x <=3:\n            return x\n        else:\n            helper(x-1) + 2*helper(x-2) + 3*helper(x-3)\n\n    return helper(n)\n\n\n    #G(n) = n,                                       if n <= 3\n    #G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n","after":null,"SubmissionTime":"2016-02-11T20:29:54.596608","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":393,"date":"2016-02-11 20:38:09.310661","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def helper(x):\n        if x <=3:\n            return x\n        elif x<=5:\n            helper(x-1) + 2*helper(x-2) + 3*helper(x-3)\n\n    return helper(n)\n\n\n    #G(n) = n,                                       if n <= 3\n    #G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n","after":null,"SubmissionTime":"2016-02-11T20:38:09.310661","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":393,"date":"2016-02-11 20:41:05.646770","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def helper(x):\n        if x <=3:\n            return x\n        elif x<=5:\n            helper(x-1) + 2 * helper(x-2) + 3 * helper(x-3)\n\n    return helper(n)\n\n\n    #G(n) = n,                                       if n <= 3\n    #G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n","after":null,"SubmissionTime":"2016-02-11T20:41:05.64677","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":328,"date":"2016-02-11 20:58:55.839304","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    g = lambda n: n\n    \n    if n <= 3:\n        return g\n    else:\n        n -= 1\n        g = g(n)\n        return g\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T20:58:55.839304","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":328,"date":"2016-02-11 20:59:24.974852","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    g = lambda n: n\n    \n    if n <= 3:\n        return g\n    else:\n        n += 1\n        g = g(n-1)\n        return g\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T20:59:24.974852","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":328,"date":"2016-02-11 20:59:49.296335","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    g = lambda n: n\n    \n    if n <= 3:\n        return g(n)\n    else:\n        n += 1\n        g = g(n-1)\n        return g\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T20:59:49.296335","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":328,"date":"2016-02-11 21:00:42.908688","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    g = lambda n: n\n    k = 2\n    if n <= 3:\n        return g(n)\n    else:\n        n -= 1\n        g = g(n-1) * k\n        k += 1\n        return g\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T21:00:42.908688","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":328,"date":"2016-02-11 21:10:22.162523","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    g = lambda n: n\n    k = 2\n    if n <= 3:\n        return g(n)\n    else:\n        if k <= 3:\n            g = g(n-1) * k\n            n -= 1\n            k += 1\n        return g\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T21:10:22.162523","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":469,"date":"2016-02-11 21:11:32.257583","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    if n > 3:\n        return n * g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-11T21:11:32.257583","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    if n>3:\r\n        return 1*g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":469,"date":"2016-02-11 21:13:12.042179","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    if n > 3:\n        return n + n * g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-11T21:13:12.042179","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":328,"date":"2016-02-11 21:17:29.108755","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    g = lambda n: n\n    k = 2\n    if n <= 3:\n        return g(n)\n    else:\n        if k <= 3:\n            g = g + g(n-1) * k\n            n -= 1\n            k += 1\n        return g\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T21:17:29.108755","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":328,"date":"2016-02-11 21:17:34.645607","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    g = lambda n: n\n    k = 2\n    if n <= 3:\n        return g(n)\n    else:\n        if k <= 3:\n            g = g(n-1) * k\n            n -= 1\n            k += 1\n        return g\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T21:17:34.645607","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":328,"date":"2016-02-11 21:18:09.990795","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    g = lambda n: n\n    k = 2\n    if n <= 3:\n        return g(n)\n    else:\n        if k <= 3:\n            g = g(n-1) * k\n            n -= 1\n            k += 1\n            return g\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T21:18:09.990795","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":328,"date":"2016-02-11 21:18:30.900054","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    g = lambda n: n\n    k = 2\n    if n <= 3:\n        return g(n)\n    else:\n        if k <= 3:\n            g = g(n) * k\n            n -= 1\n            k += 1\n            return \n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T21:18:30.900054","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":328,"date":"2016-02-11 21:18:36.476912","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    g = lambda n: n\n    k = 2\n    if n <= 3:\n        return g(n)\n    else:\n        if k <= 3:\n            g = g(n) * k\n            n -= 1\n            k += 1\n            return g\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T21:18:36.476912","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":328,"date":"2016-02-11 21:18:51.248712","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    g = lambda n: n\n    k = 2\n    if n <= 3:\n        return g(n)\n    else:\n        if k <= 3:\n            n -= 1\n            g = g(n) * k\n            k += 1\n            return g\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T21:18:51.248712","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":328,"date":"2016-02-11 21:20:18.544795","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    g = lambda n: n\n    k = 2\n    if n <= 3:\n        return g(n)\n    else:\n        if k <= 3:\n            n -= 1\n            g = g(n) * k\n            k += 1\n        return g(n)\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T21:20:18.544795","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":328,"date":"2016-02-11 21:20:35.295380","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    g = lambda n: n\n    k = 2\n    if n <= 3:\n        return g(n)\n    else:\n        if k <= 3:\n            n -= 1\n            g = g(n) * k\n            k += 1\n        return g\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T21:20:35.29538","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":328,"date":"2016-02-11 21:22:48.671285","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    if n <= 3:\n        return n\n    else:\n        return g(n-1)*2 + g(n-2)*3 + g(n-3) \n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T21:22:48.671285","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":905,"date":"2016-02-11 21:26:32.102452","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return g(n)\n    else:\n        return g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-11T21:26:32.102452","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":658,"date":"2016-02-11 21:44:54.103225","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return sum(g(n-1))\n\n","after":null,"SubmissionTime":"2016-02-11T21:44:54.103225","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":658,"date":"2016-02-11 21:47:24.637698","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return (g(n-1))\n\n","after":null,"SubmissionTime":"2016-02-11T21:47:24.637698","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":658,"date":"2016-02-11 21:49:31.821297","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return (g(n-identity(n)))\n\n","after":null,"SubmissionTime":"2016-02-11T21:49:31.821297","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":658,"date":"2016-02-11 21:50:21.101242","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return (g(n-1))\n\n","after":null,"SubmissionTime":"2016-02-11T21:50:21.101242","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":658,"date":"2016-02-11 21:51:49.670353","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return (g(n-1)) + g(n)\n\n","after":null,"SubmissionTime":"2016-02-11T21:51:49.670353","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":658,"date":"2016-02-11 21:52:15.953913","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return (g(n-1)) * identity(n)\n\n","after":null,"SubmissionTime":"2016-02-11T21:52:15.953913","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":658,"date":"2016-02-11 21:59:00.941149","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return n * (g(n+1))\n\n","after":null,"SubmissionTime":"2016-02-11T21:59:00.941149","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":658,"date":"2016-02-11 21:59:19.366828","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return (g(n+1))\n\n","after":null,"SubmissionTime":"2016-02-11T21:59:19.366828","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":658,"date":"2016-02-11 21:59:56.375102","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return (g(n - 1))\n\n","after":null,"SubmissionTime":"2016-02-11T21:59:56.375102","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":658,"date":"2016-02-11 22:04:30.666457","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    elif n > 3: \n        return n * (g(n - 1))\n\n","after":null,"SubmissionTime":"2016-02-11T22:04:30.666457","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":658,"date":"2016-02-11 22:04:30.666457","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    elif n > 3: \n        return n * (g(n - 1))\n\n","after":null,"SubmissionTime":"2016-02-11T22:04:30.666457","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":658,"date":"2016-02-11 22:06:21.154242","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    elif n > 3: \n        return n * (g(n - n))\n\n","after":null,"SubmissionTime":"2016-02-11T22:06:21.154242","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":658,"date":"2016-02-11 22:06:38.445852","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    elif n > 3: \n        return n + 1 * (g(n - 1))\n\n","after":null,"SubmissionTime":"2016-02-11T22:06:38.445852","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":658,"date":"2016-02-11 22:06:46.118533","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    elif n > 3: \n        return (n + 1) * (g(n - 1))\n\n","after":null,"SubmissionTime":"2016-02-11T22:06:46.118533","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":658,"date":"2016-02-11 22:07:03.018564","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    elif n > 3: \n        return (g(n + 1)) * (g(n - 1))\n\n","after":null,"SubmissionTime":"2016-02-11T22:07:03.018564","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":39,"date":"2016-02-11 22:16:22.430539","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return (n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-11T22:16:22.430539","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":39,"date":"2016-02-11 22:24:42.923543","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    elif n > 3:\n        return (n-1) * g(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-11T22:24:42.923543","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    elif n>3:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":884,"date":"2016-02-11 22:31:11.812010","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(g(n - 1) + 2 * g(n - 2) + 3 * G(n - 3))\n\n","after":null,"SubmissionTime":"2016-02-11T22:31:11.81201","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":884,"date":"2016-02-11 22:31:21.657980","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3))\n\n","after":null,"SubmissionTime":"2016-02-11T22:31:21.65798","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":884,"date":"2016-02-11 22:31:44.359698","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g((n - 1) + 2 * (n - 2) + 3 * (n - 3))\n\n","after":null,"SubmissionTime":"2016-02-11T22:31:44.359698","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":366,"date":"2016-02-11 22:40:34.061234","diff":null,"before":"def g(x):\n            return x \n        return g\n    k = 1\n    x = f\n    while k < n:\n        x = compose1(f,x)\n        k += 1 \n    return x\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    return g(n) + v*g(n-1) \n\n","after":null,"SubmissionTime":"2016-02-11T22:40:34.061234","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":366,"date":"2016-02-11 22:41:10.942860","diff":null,"before":"def g(x):\n            return x \n        return g\n    k = 1\n    x = f\n    while k < n:\n        x = compose1(f,x)\n        k += 1 \n    return x\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    v += 1\n    return g(n) + v*g(n-1) \n\n","after":null,"SubmissionTime":"2016-02-11T22:41:10.94286","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":366,"date":"2016-02-11 22:41:29.551222","diff":null,"before":"def g(x):\n            return x \n        return g\n    k = 1\n    x = f\n    while k < n:\n        x = compose1(f,x)\n        k += 1 \n    return x\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    v = 0 \n    v += 1\n    return g(n) + v*g(n-1) \n\n","after":null,"SubmissionTime":"2016-02-11T22:41:29.551222","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":366,"date":"2016-02-11 22:41:57.722909","diff":null,"before":"def g(x):\n            return x \n        return g\n    k = 1\n    x = f\n    while k < n:\n        x = compose1(f,x)\n        k += 1 \n    return x\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    v = 0 \n    v += 1\n    return v*g(n-1) \n\n","after":null,"SubmissionTime":"2016-02-11T22:41:57.722909","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":366,"date":"2016-02-11 22:41:57.722909","diff":null,"before":"def g(x):\n            return x \n        return g\n    k = 1\n    x = f\n    while k < n:\n        x = compose1(f,x)\n        k += 1 \n    return x\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    v = 0 \n    v += 1\n    return v*g(n-1) \n\n","after":null,"SubmissionTime":"2016-02-11T22:41:57.722909","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":366,"date":"2016-02-11 22:46:32.354759","diff":null,"before":"def g(x):\n            return x \n        return g\n    k = 1\n    x = f\n    while k < n:\n        x = compose1(f,x)\n        k += 1 \n    return x\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    v = 0 \n    v += 1\n    return v*g(n-1) \n\n","after":null,"SubmissionTime":"2016-02-11T22:46:32.354759","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":366,"date":"2016-02-11 22:46:39.148340","diff":null,"before":"def g(x):\n            return x \n        return g\n    k = 1\n    x = f\n    while k < n:\n        x = compose1(f,x)\n        k += 1 \n    return x\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    v = 0 \n    v += 1\n    return v*g(n-1) \n\n","after":null,"SubmissionTime":"2016-02-11T22:46:39.14834","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":366,"date":"2016-02-11 22:46:53.981497","diff":null,"before":"def g(x):\n            return x \n        return g\n    k = 1\n    x = f\n    while k < n:\n        x = compose1(f,x)\n        k += 1 \n    return x\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    v = 0 \n    v += 1\n    return v*g(n-1) \n\n","after":null,"SubmissionTime":"2016-02-11T22:46:53.981497","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":366,"date":"2016-02-11 22:55:50.250311","diff":null,"before":"def g(x):\n            return x \n        return g\n    k = 1\n    x = f\n    while k < n:\n        x = compose1(f,x)\n        k += 1 \n    return x\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return n \n    v = 1 \n    v += 1 \n    return g(n-1) + v*g(n-2)\n\n","after":null,"SubmissionTime":"2016-02-11T22:55:50.250311","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":366,"date":"2016-02-11 22:56:05.535196","diff":null,"before":"def g(x):\n            return x \n        return g\n    k = 1\n    x = f\n    while k < n:\n        x = compose1(f,x)\n        k += 1 \n    return x\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 0:\n        return n \n    v = 1 \n    v += 1 \n    return g(n-1) + v*g(n-2)\n\n","after":null,"SubmissionTime":"2016-02-11T22:56:05.535196","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":366,"date":"2016-02-11 22:59:44.460380","diff":null,"before":"def g(x):\n            return x \n        return g\n    k = 1\n    x = f\n    while k < n:\n        x = compose1(f,x)\n        k += 1 \n    return x\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 0:\n        return n \n    v = 0\n    v += 1 \n    return x*g(n-x) + x*g(n-x)\n\n","after":null,"SubmissionTime":"2016-02-11T22:59:44.46038","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":366,"date":"2016-02-11 23:01:11.284768","diff":null,"before":"def g(x):\n            return x \n        return g\n    k = 1\n    x = f\n    while k < n:\n        x = compose1(f,x)\n        k += 1 \n    return x\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n -1\n    v = 0\n    v += 1 \n    return x*g(n-x) + x*g(n-x)\n\n","after":null,"SubmissionTime":"2016-02-11T23:01:11.284768","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":366,"date":"2016-02-11 23:01:16.659543","diff":null,"before":"def g(x):\n            return x \n        return g\n    k = 1\n    x = f\n    while k < n:\n        x = compose1(f,x)\n        k += 1 \n    return x\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n \n    v = 0\n    v += 1 \n    return x*g(n-x) + x*g(n-x)\n\n","after":null,"SubmissionTime":"2016-02-11T23:01:16.659543","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":366,"date":"2016-02-11 23:01:25.888584","diff":null,"before":"def g(x):\n            return x \n        return g\n    k = 1\n    x = f\n    while k < n:\n        x = compose1(f,x)\n        k += 1 \n    return x\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n \n    x = 0\n    x += 1 \n    return x*g(n-x) + x*g(n-x)\n\n","after":null,"SubmissionTime":"2016-02-11T23:01:25.888584","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":39,"date":"2016-02-11 23:02:54.594516","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 0:\n        return\n    if n <= 3:\n        return n\n    elif n > 3:\n        return (n+1) * g(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-11T23:02:54.594516","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":366,"date":"2016-02-11 23:03:41.259866","diff":null,"before":"def g(x):\n            return x \n        return g\n    k = 1\n    x = f\n    while k < n:\n        x = compose1(f,x)\n        k += 1 \n    return x\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n \n    x = 1\n    x += 1 \n    return g(n-1) + x*g(n-x)\n\n","after":null,"SubmissionTime":"2016-02-11T23:03:41.259866","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":366,"date":"2016-02-11 23:04:08.075968","diff":null,"before":"def g(x):\n            return x \n        return g\n    k = 1\n    x = f\n    while k < n:\n        x = compose1(f,x)\n        k += 1 \n    return x\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n \n    x = 1\n    x += 1 \n    return x*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-11T23:04:08.075968","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":366,"date":"2016-02-11 23:04:49.442257","diff":null,"before":"def g(x):\n            return x \n        return g\n    k = 1\n    x = f\n    while k < n:\n        x = compose1(f,x)\n        k += 1 \n    return x\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n \n    x = 0\n    x += 1 \n    return x*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-11T23:04:49.442257","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":366,"date":"2016-02-11 23:05:00.390005","diff":null,"before":"def g(x):\n            return x \n        return g\n    k = 1\n    x = f\n    while k < n:\n        x = compose1(f,x)\n        k += 1 \n    return x\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n \n    x = 0\n    x += 1 \n    return x*g(n-x)\n\n","after":null,"SubmissionTime":"2016-02-11T23:05:00.390005","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":39,"date":"2016-02-11 23:06:50.440209","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def count(x):\n        if x == 0:\n            return 1\n        else:\n            return (x+1) * g(x-1)\n    count(n)\n\n\n","after":null,"SubmissionTime":"2016-02-11T23:06:50.440209","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":366,"date":"2016-02-11 23:07:03.881123","diff":null,"before":"def g(x):\n            return x \n        return g\n    k = 1\n    x = f\n    while k < n:\n        x = compose1(f,x)\n        k += 1 \n    return x\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n \n    if n > 3: \n        x = 0\n        x += 1 \n        return x*g(n-x)\n\n","after":null,"SubmissionTime":"2016-02-11T23:07:03.881123","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":366,"date":"2016-02-11 23:07:23.398330","diff":null,"before":"def g(x):\n            return x \n        return g\n    k = 1\n    x = f\n    while k < n:\n        x = compose1(f,x)\n        k += 1 \n    return x\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n > 3: \n        x = 0\n        x += 1 \n        return x*g(n-x)\n    if n <= 3:\n        return n\n\n","after":null,"SubmissionTime":"2016-02-11T23:07:23.39833","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":39,"date":"2016-02-11 23:07:32.084401","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def count(x):\n        if x == 0:\n            return 1\n        else:\n            return (x+1) * count(x-1)\n    count(n)\n\n\n","after":null,"SubmissionTime":"2016-02-11T23:07:32.084401","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":39,"date":"2016-02-11 23:07:55.736797","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def count(x):\n        if x == 0:\n            return 1\n        if x < 3:\n            return x\n        else:\n            return (x+1) * count(x-1)\n    count(n)\n\n\n","after":null,"SubmissionTime":"2016-02-11T23:07:55.736797","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":39,"date":"2016-02-11 23:08:09.314234","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def count(x):\n        if x == 0:\n            return 1\n        if x < 3:\n            return x\n        else:\n            return (x+1) * count(x-1)\n    return count(n)\n\n\n","after":null,"SubmissionTime":"2016-02-11T23:08:09.314234","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":39,"date":"2016-02-11 23:08:21.893100","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def count(x):\n        if x == 0:\n            return 1\n        if x <= 3:\n            return x\n        else:\n            return (x+1) * count(x-1)\n    return count(n)\n\n\n","after":null,"SubmissionTime":"2016-02-11T23:08:21.8931","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":366,"date":"2016-02-11 23:09:44.682085","diff":null,"before":"def g(x):\n            return x \n        return g\n    k = 1\n    x = f\n    while k < n:\n        x = compose1(f,x)\n        k += 1 \n    return x\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <=1:\n        return n +1 \n    x = 0\n    x += 1 \n    return x*g(n-x) + x*g(n-x)\n\n","after":null,"SubmissionTime":"2016-02-11T23:09:44.682085","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":366,"date":"2016-02-11 23:09:59.598093","diff":null,"before":"def g(x):\n            return x \n        return g\n    k = 1\n    x = f\n    while k < n:\n        x = compose1(f,x)\n        k += 1 \n    return x\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <=0:\n        return n +1 \n    x = 0\n    x += 1 \n    return x*g(n-x) + x*g(n-x)\n\n","after":null,"SubmissionTime":"2016-02-11T23:09:59.598093","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":366,"date":"2016-02-11 23:16:40.714229","diff":null,"before":"def g(x):\n            return x \n        return g\n    k = 1\n    x = f\n    while k < n:\n        x = compose1(f,x)\n        k += 1 \n    return x\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <=0:\n        return 3\n    x = 1\n    \n    x += 1\n    return g(n-1) + x*g(n-x)\n\n","after":null,"SubmissionTime":"2016-02-11T23:16:40.714229","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":366,"date":"2016-02-11 23:17:12.129821","diff":null,"before":"def g(x):\n            return x \n        return g\n    k = 1\n    x = f\n    while k < n:\n        x = compose1(f,x)\n        k += 1 \n    return x\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <=0:\n        return 1\n    x = 1\n    x += 1\n    return g(n-1) + x*g(n-x)\n\n","after":null,"SubmissionTime":"2016-02-11T23:17:12.129821","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":366,"date":"2016-02-11 23:17:24.476843","diff":null,"before":"def g(x):\n            return x \n        return g\n    k = 1\n    x = f\n    while k < n:\n        x = compose1(f,x)\n        k += 1 \n    return x\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n ==0:\n        return 1\n    x = 1\n    x += 1\n    return g(n-1) + x*g(n-x)\n\n","after":null,"SubmissionTime":"2016-02-11T23:17:24.476843","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":366,"date":"2016-02-11 23:29:45.487858","diff":null,"before":"def g(x):\n            return x \n        return g\n    k = 1\n    x = f\n    while k < n:\n        x = compose1(f,x)\n        k += 1 \n    return x\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <=0:\n        return n\n    x = 1\n    x += 1\n    return g(n-1) + x*g(n-x)\n\n","after":null,"SubmissionTime":"2016-02-11T23:29:45.487858","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":366,"date":"2016-02-11 23:30:02.291137","diff":null,"before":"def g(x):\n            return x \n        return g\n    k = 1\n    x = f\n    while k < n:\n        x = compose1(f,x)\n        k += 1 \n    return x\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <=0:\n        return 1\n    x = 1\n    x += 1\n    return g(n-1) + x*g(n-x)\n\n","after":null,"SubmissionTime":"2016-02-11T23:30:02.291137","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":366,"date":"2016-02-11 23:30:26.220788","diff":null,"before":"def g(x):\n            return x \n        return g\n    k = 1\n    x = f\n    while k < n:\n        x = compose1(f,x)\n        k += 1 \n    return x\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <=0:\n        return 0\n    x = 1\n    x += 1\n    return g(n-1) + x*g(n-x)\n\n","after":null,"SubmissionTime":"2016-02-11T23:30:26.220788","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":366,"date":"2016-02-11 23:45:54.624644","diff":null,"before":"def g(x):\n            return x \n        return g\n    k = 1\n    x = f\n    while k < n:\n        x = compose1(f,x)\n        k += 1 \n    return x\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <=0:\n        return 3\n    x = 1\n    x += 1\n    return x*g(n-x)\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T23:45:54.624644","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":366,"date":"2016-02-11 23:47:44.420940","diff":null,"before":"def g(x):\n            return x \n        return g\n    k = 1\n    x = f\n    while k < n:\n        x = compose1(f,x)\n        k += 1 \n    return x\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <=0:\n        return n\n    x = 1\n    x += 1\n    return x*g(n-x)\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T23:47:44.42094","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":366,"date":"2016-02-11 23:47:52.147928","diff":null,"before":"def g(x):\n            return x \n        return g\n    k = 1\n    x = f\n    while k < n:\n        x = compose1(f,x)\n        k += 1 \n    return x\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <=3:\n        return n\n    x = 1\n    x += 1\n    return x*g(n-x)\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T23:47:52.147928","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":365,"date":"2016-02-11 23:58:57.233198","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    result=0\n    a=1\n    def G(a):\n        nextnumber=a*(n-a)\n        if n-a>3:\n            nextnumber=0\n        result=result+nextnumber\n        if n-a>3:\n            return G(a+1)\n        if a==3:\n            return result\n        return G(a+1)\n    def value(a):\n        if n-a>3:\n            n=n-1\n            return G(a)\n    return G(a)+value(a)\n\n","after":null,"SubmissionTime":"2016-02-11T23:58:57.233198","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":365,"date":"2016-02-11 23:59:29.960269","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    result=0\n    a=1\n    def G(a):\n        nextnumber=a*(n-a)\n        if n-a>3:\n            nextnumber=0\n        result=result+nextnumber\n        if n-a>3:\n            return G(a+1)\n        if a==3:\n            return result\n        return G(a+1)\n    def value(a):\n        if n-a>3:\n            n=n-1\n            result=0\n            return G(a)\n    return G(a)+value(a)\n\n","after":null,"SubmissionTime":"2016-02-11T23:59:29.960269","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":995,"date":"2016-02-12 00:08:52.708960","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    if i <= 3:\n        return i \n    else:\n        return g(i-1) + 2 * g(i-2) + 3 * g(i-3)\n    return helper(n) \n\n\n","after":null,"SubmissionTime":"2016-02-12T00:08:52.70896","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":995,"date":"2016-02-12 00:09:03.078680","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    if i <= 3:\n        return i \n    else:\n        return g(i-1) + 2 * g(i-2) + 3 * g(i-3)\n\n\n","after":null,"SubmissionTime":"2016-02-12T00:09:03.07868","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":808,"date":"2016-02-12 00:12:20.518695","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return G(n-1) + 2 * G(n-2) + 3 * G(n-3)\n\n","after":null,"SubmissionTime":"2016-02-12T00:12:20.518695","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":1,"Id":0,"studentId":148,"date":"2016-02-12 03:06:07.081919","diff":null,"before":"def g(x, y):\n            def h(z):\n                return f(x, y, z)\n            return h\n        return g\n    def recurse(f, n, x):\n        if n == 0:\n            return x\n        if n == 1:\n            return f(x)\n        if n == 2:\n            return compose1(f,f)(x)\n        if n > 2:\n            return compose1(repeated(f, n - 1),f)(x)\n    currycurse = currythis(recurse)\n    return currycurse(f, n)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n\n","after":null,"SubmissionTime":"2016-02-12T03:06:07.081919","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":257,"date":"2016-02-12 08:04:39.029645","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else :\n        return g(n-1) + 2*g(n-2) + g(n-3)\n","after":null,"SubmissionTime":"2016-02-12T08:04:39.029645","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":289,"date":"2016-02-12 11:04:47.827278","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    result = 0\n    if n <= 0:\n        return result \n    if n<=3:\n        result = n\n    else: \n        result = (n-1)*g(n-1) + result\n    return result\n\n","after":null,"SubmissionTime":"2016-02-12T11:04:47.827278","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":289,"date":"2016-02-12 11:07:46.658365","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    result = 0\n    if n <= 0:\n        result = 0\n    if n<=3:\n        result = n\n    else: \n        result = (n-1)*g(n-1) + result\n    return result\n\n","after":null,"SubmissionTime":"2016-02-12T11:07:46.658365","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":981,"date":"2016-02-12 11:19:51.692240","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def g_helper(x):\n        if(x==n):\n            return 1\n        return x*g(n-x)\n    if(x==1):\n        return g(1)\n    if(x==2):\n        return g(2)\n    if(x==3):\n        return g(3)\n    return g_helper(1)\n\n","after":null,"SubmissionTime":"2016-02-12T11:19:51.69224","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":981,"date":"2016-02-12 11:21:06.370851","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def g_helper(x):\n        if(x==n):\n            return 1\n        return x*g(n-x)\n    if(n==1):\n        return g(1)\n    if(n==2):\n        return g(2)\n    if(n==3):\n        return g(3)\n    return g_helper(1)\n\n","after":null,"SubmissionTime":"2016-02-12T11:21:06.370851","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":981,"date":"2016-02-12 11:23:28.618052","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def g_helper(x):\n        if(x==n):\n            return 1\n        return x*g(n-x)\n\n    if n<=3:\n        return n \n    return g_helper(1)\n\n","after":null,"SubmissionTime":"2016-02-12T11:23:28.618052","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":981,"date":"2016-02-12 11:25:25.251293","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def g_helper(x):\n        if(x==n):\n            return 1\n        return x*g(n-x)*g_helper(x+1)\n\n    if n<=3:\n        return n\n    return g_helper(1)\n\n","after":null,"SubmissionTime":"2016-02-12T11:25:25.251293","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":981,"date":"2016-02-12 11:41:36.787773","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22 n = 5, 432\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if(n<=3):\n        return n\n    return g(n-1) + 2*g(n-2)+3*g(n-3)\n\n\n","after":null,"SubmissionTime":"2016-02-12T11:41:36.787773","SynthesizedAfter":"\r\ndef g(n):\r\n    if (n<=3):\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 11:48:46.575872","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def g_helper(n, count):\n        if n == 3:\n            return n\n        return (count+1)*g(n-1)\n    return g_helper(n, 0)\n\n\n","after":null,"SubmissionTime":"2016-02-12T11:48:46.575872","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 11:49:29.558729","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def g_helper(n, count):\n        if n == 3:\n            return n\n        return (count+1)*g_helper(n-1, count+1)\n    return g_helper(n, 0)\n\n\n","after":null,"SubmissionTime":"2016-02-12T11:49:29.558729","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 11:54:53.134317","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    def g_helper(n, count):\n        if n <= 3:\n            return n\n        total = total + (count+1)*g_helper(n-1, count+1)\n        return total\n    return g_helper(n, 0)\n\n\n","after":null,"SubmissionTime":"2016-02-12T11:54:53.134317","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 12:00:28.287615","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    def g_helper(n, count, total):\n        if n <= 3:\n            return n\n        total = total + (count+1)*g_helper(n-1, count+1, total)\n    return g_helper(n, 0, 0)\n\n\n","after":null,"SubmissionTime":"2016-02-12T12:00:28.287615","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 12:04:10.045410","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    def g_helper(n, count, total):\n        def g_helper2(n, count):\n            if n <= 3:\n                return n\n            total = total + (count+1)*g_helper2(n-1, count+1)\n    return g_helper2(n, 0, 0)\n\n\n","after":null,"SubmissionTime":"2016-02-12T12:04:10.04541","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 12:04:39.333092","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    def g_helper(n, count, total):\n        def g_helper2(n, count):\n            if n <= 3:\n                return n\n            total = total + (count+1)*g_helper2(n-1, count+1)\n            return total\n    return g_helper2(n, 0, 0)\n\n\n","after":null,"SubmissionTime":"2016-02-12T12:04:39.333092","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 12:05:26.801278","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    def g_helper(n, count, total):\n        def g_helper2(n, count):\n            if n <= 3:\n                return n\n            total = total + (count+1)*g_helper2(n-1, count+1)\n            return total\n        return g_helper2(n, 0, 0)\n    return g_helper(n, 0)\n\n\n","after":null,"SubmissionTime":"2016-02-12T12:05:26.801278","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 12:05:41.478361","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    def g_helper(n, count, total):\n        def g_helper2(n, count):\n            if n <= 3:\n                return n\n            total = total + (count+1)*g_helper2(n-1, count+1)\n            return total\n        return g_helper2(n, 0)\n    return g_helper(n, 0, 0)\n\n\n","after":null,"SubmissionTime":"2016-02-12T12:05:41.478361","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 12:06:52.215686","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    def g_helper(n, count, total):\n        def g_helper2(n, count):\n            if n <= 3:\n                return n\n            result = total + (count+1)*g_helper2(n-1, count+1)\n            return result\n        return g_helper2(n, 0)\n    return g_helper(n, 0, 0)\n\n\n","after":null,"SubmissionTime":"2016-02-12T12:06:52.215686","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":320,"date":"2016-02-12 12:14:42.777508","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        g(n-1) + 2(g(n-2)) + 3(g(n-3))\n\n","after":null,"SubmissionTime":"2016-02-12T12:14:42.777508","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 12:15:37.526887","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    def g_helper(total):\n        def g_helper2(n, count):\n            if n<=3:\n                return 3\n            return (count+1)*g_helper2(n-1, count+1)\n        return total + g_helper2(n, 0)\n    return g_helper(0)\n\n\n\n\n\n\n\n\n    def g_helper(n, count):\n        def g_helper2(n, total):\n            if n <= 3:\n                return n\n            result = total + (count+1)*g_helper2(n-1, count+1)\n            return g_helper2()\n        return g_helper2(n, 0)\n    return g_helper(n, 0, 0)\n\n\n","after":null,"SubmissionTime":"2016-02-12T12:15:37.526887","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 12:15:46.068841","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    def g_helper(total):\n        def g_helper2(n, count):\n            if n<=3:\n                return n\n            return (count+1)*g_helper2(n-1, count+1)\n        return total + g_helper2(n, 0)\n    return g_helper(0)\n\n\n\n\n\n\n\n\n    def g_helper(n, count):\n        def g_helper2(n, total):\n            if n <= 3:\n                return n\n            result = total + (count+1)*g_helper2(n-1, count+1)\n            return g_helper2()\n        return g_helper2(n, 0)\n    return g_helper(n, 0, 0)\n\n\n","after":null,"SubmissionTime":"2016-02-12T12:15:46.068841","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 12:16:08.191313","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    def g_helper(total):\n        def g_helper2(n, count):\n            if n<=3:\n                return n\n            return (count+1)*g_helper2(n-1, count+1)\n        return total + g_helper2(n, 0)\n    return g_helper(0)\n\n\n\n\n\n\n\n\n    #def g_helper(n, count):\n     #   def g_helper2(n, total):\n      #      if n <= 3:\n       #         return n\n        #    result = total + (count+1)*g_helper2(n-1, count+1)\n         #   return g_helper2()\n       # return g_helper2(n, 0)\n    #return g_helper(n, 0, 0)\n\n\n","after":null,"SubmissionTime":"2016-02-12T12:16:08.191313","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":320,"date":"2016-02-12 12:16:21.099606","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(n):\n        if n <= 3:\n            return n\n        else:\n            return G(n-1) + 2(G(n-2)) + 3(G(n-3))\n    return G\n\n","after":null,"SubmissionTime":"2016-02-12T12:16:21.099606","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":320,"date":"2016-02-12 12:16:41.750182","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(n):\n        if n <= 3:\n            return n\n        else:\n            return G(n-1) + 2(G(n-2)) + 3(G(n-3))\n    return G(n)\n\n","after":null,"SubmissionTime":"2016-02-12T12:16:41.750182","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 12:16:58.790635","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    def g_helper(n, total):\n        def g_helper2(n, count):\n            if n<=3:\n                return n\n            return (count+1)*g_helper2(n-1, count+1)\n        return g_helper(n, g_helper2(n, 0))\n    return g_helper(0)\n\n\n    #def g_helper(n, count):\n     #   def g_helper2(n, total):\n      #      if n <= 3:\n       #         return n\n        #    result = total + (count+1)*g_helper2(n-1, count+1)\n         #   return g_helper2()\n       # return g_helper2(n, 0)\n    #return g_helper(n, 0, 0)\n\n\n","after":null,"SubmissionTime":"2016-02-12T12:16:58.790635","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 12:17:08.919610","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    def g_helper(n, total):\n        def g_helper2(n, count):\n            if n<=3:\n                return n\n            return (count+1)*g_helper2(n-1, count+1)\n        return g_helper(n, g_helper2(n, 0))\n    return g_helper(n, 0)\n\n\n    #def g_helper(n, count):\n     #   def g_helper2(n, total):\n      #      if n <= 3:\n       #         return n\n        #    result = total + (count+1)*g_helper2(n-1, count+1)\n         #   return g_helper2()\n       # return g_helper2(n, 0)\n    #return g_helper(n, 0, 0)\n\n\n","after":null,"SubmissionTime":"2016-02-12T12:17:08.91961","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 12:18:31.124799","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n\n    def g_helper(n, count, total):\n        def g_helper2(n, count):\n            if n<=3:\n                return n\n            return (count+1)*g_helper2(n-1, count+1)\n        return total + g_helper(n, g_helper2(n, 0))\n    return g_helper(n, 0)\n\n\n    #def g_helper(n, count):\n     #   def g_helper2(n, total):\n      #      if n <= 3:\n       #         return n\n        #    result = total + (count+1)*g_helper2(n-1, count+1)\n         #   return g_helper2()\n       # return g_helper2(n, 0)\n    #return g_helper(n, 0, 0)\n\n\n","after":null,"SubmissionTime":"2016-02-12T12:18:31.124799","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 12:18:41.134556","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n\n    def g_helper(n, count, total):\n        def g_helper2(n, count):\n            if n<=3:\n                return n\n            return (count+1)*g_helper2(n-1, count+1)\n        return total + g_helper(n, g_helper2(n, 0))\n    return g_helper(n, 0, 0)\n\n\n    #def g_helper(n, count):\n     #   def g_helper2(n, total):\n      #      if n <= 3:\n       #         return n\n        #    result = total + (count+1)*g_helper2(n-1, count+1)\n         #   return g_helper2()\n       # return g_helper2(n, 0)\n    #return g_helper(n, 0, 0)\n\n\n","after":null,"SubmissionTime":"2016-02-12T12:18:41.134556","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 12:18:58.949933","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n\n    def g_helper(n, count, total):\n        def g_helper2(n, count):\n            if n<=3:\n                return n\n            return (count+1)*g_helper2(n-1, count+1)\n        return total + g_helper(n, g_helper2(n, 0), total)\n    return g_helper(n, 0, 0)\n\n\n    #def g_helper(n, count):\n     #   def g_helper2(n, total):\n      #      if n <= 3:\n       #         return n\n        #    result = total + (count+1)*g_helper2(n-1, count+1)\n         #   return g_helper2()\n       # return g_helper2(n, 0)\n    #return g_helper(n, 0, 0)\n\n\n","after":null,"SubmissionTime":"2016-02-12T12:18:58.949933","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 12:25:43.442389","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def total_count(n, total):\n        def g_helper(n, count):\n            if n<=3:\n                return n\n            else:\n                return count*g_helper(n-1, count+1)\n        if n<=3:\n            return n\n        return total + total_count(g_helper(n-1, count+1))\n\n\n","after":null,"SubmissionTime":"2016-02-12T12:25:43.442389","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 12:27:40.359248","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def total_count(n, total):\n        def g_helper(n, count):\n            if n<=3:\n                return n\n            else:\n                return count*g_helper(n-1, count+1)\n        if n ==0:\n            return 0\n        return total + total_count(n-1, g_helper(n-1, count+1))\n\n\n","after":null,"SubmissionTime":"2016-02-12T12:27:40.359248","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 12:28:07.773737","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def total_count(n, total):\n        def g_helper(n, count):\n            if n<=3:\n                return n\n            else:\n                return count*g_helper(n-1, count+1)\n        if n ==0:\n            return 0\n        return total + total_count(n-1, g_helper(n-1, count+1))\n    return total_count(0, n)\n\n\n","after":null,"SubmissionTime":"2016-02-12T12:28:07.773737","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 12:28:24.523838","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def total_count(n, total):\n        def g_helper(n, count):\n            if n<=3:\n                return n\n            else:\n                return count*g_helper(n-1, count+1)\n        if n ==0:\n            return 0\n        return total + total_count(n-1, g_helper(n-1, count+1))\n    return total_count(n, 0)\n\n\n","after":null,"SubmissionTime":"2016-02-12T12:28:24.523838","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 12:32:35.503427","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def totalsum(partsum):\n        def g_helper(n, count):\n            if n<=3:\n                return n\n            else:\n                return count*g_helper(n-1, count+1)\n        return partsum + g_helper(n, 0)\n    return totalsum(0)\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T12:32:35.503427","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 12:34:57.959456","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def totalsum(n, partsum):\n        def g_helper(n, count):\n                return count*g_helper(n-1, count+1)\n        if n<=3:\n            return n\n        return partsum + totalsum(n-1, g_helper(n, 0))\n    return totalsum(0)\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T12:34:57.959456","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 12:35:12.821266","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def totalsum(n, partsum):\n        def g_helper(n, count):\n                return count*g_helper(n-1, count+1)\n        if n<=3:\n            return n\n        return partsum + totalsum(n-1, g_helper(n, 0))\n    return totalsum(n, 0)\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T12:35:12.821266","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":431,"date":"2016-02-12 12:35:29.999794","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n < 3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-1) + 3 *g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-12T12:35:29.999794","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":431,"date":"2016-02-12 12:35:49.049620","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <=3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-1) + 3 *g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-12T12:35:49.04962","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 12:35:59.334658","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def totalsum(n, partsum):\n        def g_helper(n, count):\n            if n==0:\n                return 0\n            return count*g_helper(n-1, count+1)\n        if n<=3:\n            return n\n        return partsum + totalsum(n-1, g_helper(n, 0))\n    return totalsum(n, 0)\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T12:35:59.334658","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 12:38:29.233136","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def totalsum(n, partsum):\n        def g_helper(n, count):\n            if n==0:\n                return 1\n            return count*g_helper(n-1, count+1)\n        if n<=3:\n            return n\n        return partsum + totalsum(n-1, g_helper(n, 0))\n    return totalsum(n, 0)\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T12:38:29.233136","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 12:40:13.620618","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def totalsum(n, partsum):\n        def g_helper(count):\n            if count==n:\n                return 1\n            return count*g_helper(count+1)\n        if n<=3:\n            return n\n        return partsum + totalsum(n-1, g_helper(n, 0))\n    return totalsum(n, 0)\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T12:40:13.620618","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 12:40:34.224201","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def totalsum(n, partsum):\n        def g_helper(count):\n            if count==n:\n                return 1\n            return count*g_helper(count+1)\n        if n<=3:\n            return n\n        return partsum + totalsum(n-1, g_helper(1))\n    return totalsum(n, 0)\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T12:40:34.224201","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 12:40:58.710245","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def totalsum(n, partsum):\n        def g_helper(count):\n            if count==0:\n                return 1\n            return count*g_helper(count+1)\n        if n<=3:\n            return n\n        return partsum + totalsum(n-1, g_helper(1))\n    return totalsum(n, 0)\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T12:40:58.710245","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 12:41:55.570966","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def totalsum(n, partsum):\n        def g_helper(count):\n            if count>=3:\n                return 1\n            return count*g_helper(count+1)\n        if n<=3:\n            return n\n        return partsum + totalsum(n-1, g_helper(1))\n    return totalsum(n, 0)\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T12:41:55.570966","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 12:45:19.191668","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def totalsum(n, partsum):\n        def g_helper(count):\n            if count==n:\n                return 0\n            return count*g_helper(count+1)\n        if n<=3:\n            return n\n        return partsum + totalsum(n-1, g_helper(1))\n    return totalsum(n, 0)\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T12:45:19.191668","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 12:48:22.561233","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def totalsum(n, partsum):\n        def g_helper(n, count):\n            if count==n:\n                return 0\n            return count*g_helper(n, count+1)\n        if n<=3:\n            return n\n        return partsum + totalsum(n-1, g_helper(n, 1))\n    return totalsum(n, 0)\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T12:48:22.561233","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 12:54:53.311124","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def totalsum(partsum):\n        def g_term(n, count):\n            if n<=3:\n                return n\n            return count*g_term(n-1, count+1)\n        return partsum + g_term(n, 1)\n    return totalsum(n, 0)\n\n       \n\n\n","after":null,"SubmissionTime":"2016-02-12T12:54:53.311124","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 12:55:01.719890","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def totalsum(partsum):\n        def g_term(n, count):\n            if n<=3:\n                return n\n            return count*g_term(n-1, count+1)\n        return partsum + g_term(n, 1)\n    return totalsum(0)\n\n       \n\n\n","after":null,"SubmissionTime":"2016-02-12T12:55:01.71989","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 12:58:37.162117","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def totalsum(partsum):\n        def g_term(n, count):\n            if n<=3:\n                return n\n            return count*g_term(n-3, count-1)\n        return partsum + g_term(n, 3)\n    return totalsum(0)\n\n       \n\n\n","after":null,"SubmissionTime":"2016-02-12T12:58:37.162117","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 12:59:27.762712","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def totalsum(partsum):\n        def g_term(n, count):\n            if n<=3:\n                return n\n            return count*g_term(n-count, count-1)\n        return partsum + g_term(n, 3)\n    return totalsum(0)\n\n       \n\n\n","after":null,"SubmissionTime":"2016-02-12T12:59:27.762712","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":320,"date":"2016-02-12 13:06:36.122076","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(n):\n        if n <= 3:\n            return n\n        else:\n            return G(n-1)\n    return G(n)\n\n","after":null,"SubmissionTime":"2016-02-12T13:06:36.122076","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":320,"date":"2016-02-12 13:07:42.850422","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(n):\n        if n <= 3:\n            return n\n        else:\n            return G(n-1) + G(n-2) + G(n-3)\n    return G(n)\n\n","after":null,"SubmissionTime":"2016-02-12T13:07:42.850422","SynthesizedAfter":"\r\ndef g(n):\r\n    def G(n):\r\n        if n<=3:\r\n            return n\r\n        else:\r\n            return G(n-1)+2*G(n-2)+3*G(n-3)\r\n    return G(n)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":384,"date":"2016-02-12 13:10:54.309429","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10 Why? Because G(3) + 2 G(2) + 3 G(1) + 4 G(0)\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 1\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + (i+1) * g(n-2)\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:10:54.309429","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":383,"date":"2016-02-12 13:10:54.309429","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10 Why? Because G(3) + 2 G(2) + 3 G(1) + 4 G(0)\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 1\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + (i+1) * g(n-2)\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:10:54.309429","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 13:10:54.373104","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def totalsum(partsum):\n        def g_term(n, count):\n            if n<=3:\n                return count*n\n            else:\n                return count*g_term(n-1, count+1)\n        return partsum + g_term(n, 1)\n    return totalsum(0)\n\n       \n\n\n","after":null,"SubmissionTime":"2016-02-12T13:10:54.373104","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 13:11:06.016461","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def totalsum(partsum):\n        def g_term(n, count):\n            if n<=3:\n                return count*n\n            else:\n                return count*g_term(n-1, count+1)\n        return partsum + g_term(n, 0)\n    return totalsum(0)\n\n       \n\n\n","after":null,"SubmissionTime":"2016-02-12T13:11:06.016461","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":384,"date":"2016-02-12 13:11:08.435774","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 1\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + (i+1) * g(n-2)\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:11:08.435774","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":383,"date":"2016-02-12 13:11:08.435774","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 1\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + (i+1) * g(n-2)\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:11:08.435774","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 13:11:20.767015","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def totalsum(partsum):\n        def g_term(n, count):\n            if n<=3:\n                return count*n\n            else:\n                return count*g_term(n-1, count+1)\n        return partsum + g_term(n, 1)\n    return totalsum(0)\n\n       \n\n\n","after":null,"SubmissionTime":"2016-02-12T13:11:20.767015","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 13:13:20.085017","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def totalsum(partsum):\n        def g_term(n, count):\n            if n<=3:\n                return count*n\n            else:\n                return count*g_term(n-1, count+1)\n        return partsum + g_term(n+1, 1)\n    return totalsum(0)\n\n       \n\n\n","after":null,"SubmissionTime":"2016-02-12T13:13:20.085017","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 13:13:48.032550","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def totalsum(partsum):\n        def g_term(n, count):\n            if count>=3:\n                return count*n\n            else:\n                return count*g_term(n+1, count+1)\n        return partsum + g_term(n, 1)\n    return totalsum(0)\n\n       \n\n\n","after":null,"SubmissionTime":"2016-02-12T13:13:48.03255","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 13:14:08.390685","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def totalsum(partsum):\n        def g_term(n, count):\n            if n<=3:\n                return count*n\n            else:\n                return count*g_term(n-1, count+1)\n        return partsum + g_term(n, 1)\n    return totalsum(0)\n\n       \n\n\n","after":null,"SubmissionTime":"2016-02-12T13:14:08.390685","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":384,"date":"2016-02-12 13:14:39.268409","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"\"\"G(3) + 2 G(2) + 3 G(1) + 4 G(0)\"\"\"\n    def helper(i):\n        if n <= 3:\n            return n\n        else:\n            return g(n-1) + i+1 * g(n-2)\n    return helper(1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:14:39.268409","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":383,"date":"2016-02-12 13:14:39.268409","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"\"\"G(3) + 2 G(2) + 3 G(1) + 4 G(0)\"\"\"\n    def helper(i):\n        if n <= 3:\n            return n\n        else:\n            return g(n-1) + i+1 * g(n-2)\n    return helper(1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:14:39.268409","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 13:16:02.058146","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def totalsum(k, partsum):\n        def g_term(n, count):\n            if n<=3:\n                return count*n\n            else:\n                return count*g_term(n-1, count+1)\n        if k>3:\n            return partsum\n        return totalsum(k+1 + g_term(n, 1))\n    return totalsum(0, 0)\n\n       \n\n\n","after":null,"SubmissionTime":"2016-02-12T13:16:02.058146","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 13:16:16.247334","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def totalsum(k, partsum):\n        def g_term(n, count):\n            if n<=3:\n                return count*n\n            else:\n                return count*g_term(n-1, count+1)\n        if k>3:\n            return partsum\n        return partsum + totalsum(k+1, g_term(n, 1))\n    return totalsum(0, 0)\n\n       \n\n\n","after":null,"SubmissionTime":"2016-02-12T13:16:16.247334","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":384,"date":"2016-02-12 13:17:15.161565","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"\"\"G(3) + 2 G(2) + 3 G(1) + 4 G(0)\"\"\"\n    if n <= 3:\n        return n\n    else:\n        k = g(n-1) + i+1 * g(n-2)\n        print(k)\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:17:15.161565","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":383,"date":"2016-02-12 13:17:15.161565","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"\"\"G(3) + 2 G(2) + 3 G(1) + 4 G(0)\"\"\"\n    if n <= 3:\n        return n\n    else:\n        k = g(n-1) + i+1 * g(n-2)\n        print(k)\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:17:15.161565","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":383,"date":"2016-02-12 13:17:29.036609","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"\"\"G(3) + 2 G(2) + 3 G(1) + 4 G(0)\"\"\"\n    i = 1\n    if n <= 3:\n        return n\n    else:\n        k = g(n-1) + i+1 * g(n-2)\n        print(k)\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:17:29.036609","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":384,"date":"2016-02-12 13:17:29.036609","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"\"\"G(3) + 2 G(2) + 3 G(1) + 4 G(0)\"\"\"\n    i = 1\n    if n <= 3:\n        return n\n    else:\n        k = g(n-1) + i+1 * g(n-2)\n        print(k)\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:17:29.036609","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":384,"date":"2016-02-12 13:18:33.061146","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"\"\"G(3) + 2 G(2) + 3 G(1) + 4 G(0)\"\"\"\n    i = 1\n    if n <= 3:\n        return n\n    if n == 1:\n        return n\n    else:\n        return g(n-1) + g(n-2) * (i + 1)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:18:33.061146","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":383,"date":"2016-02-12 13:18:33.061146","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"\"\"G(3) + 2 G(2) + 3 G(1) + 4 G(0)\"\"\"\n    i = 1\n    if n <= 3:\n        return n\n    if n == 1:\n        return n\n    else:\n        return g(n-1) + g(n-2) * (i + 1)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:18:33.061146","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":383,"date":"2016-02-12 13:19:39.751522","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"\"\"G(3) + 2 G(2) + 3 G(1) + 4 G(0)\"\"\"\n\n    if n == 1:\n        return n\n    else:\n        return g(n-1) + g(n-2)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:19:39.751522","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":384,"date":"2016-02-12 13:19:39.751522","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"\"\"G(3) + 2 G(2) + 3 G(1) + 4 G(0)\"\"\"\n\n    if n == 1:\n        return n\n    else:\n        return g(n-1) + g(n-2)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:19:39.751522","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":384,"date":"2016-02-12 13:20:21.733795","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"\"\"G(3) + 2 G(2) + 3 G(1) + 4 G(0)\"\"\"\n\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + g(n-2)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:20:21.733795","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":383,"date":"2016-02-12 13:20:21.733795","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"\"\"G(3) + 2 G(2) + 3 G(1) + 4 G(0)\"\"\"\n\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + g(n-2)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:20:21.733795","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 13:20:36.794487","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def total_sum(k, partsum):\n        def g_term(n, count):\n            if n<=3:\n                return count*n\n            else:\n                return count*g_term(n-1, count+1)\n        if k==1:\n            return partsum\n        return total_sum(k-1, partsum + g_term(n-1, count+1))\n    return total_sum(3, sum)\n        \n\n\n","after":null,"SubmissionTime":"2016-02-12T13:20:36.794487","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 13:20:57.950649","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def total_sum(k, partsum):\n        def g_term(n, count):\n            if n<=3:\n                return count*n\n            else:\n                return count*g_term(n-1, count+1)\n        if k==1:\n            return partsum\n        return total_sum(k-1, partsum + g_term(n, 0))\n    return total_sum(3, partsum)\n        \n\n\n","after":null,"SubmissionTime":"2016-02-12T13:20:57.950649","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 13:21:06.005973","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def total_sum(k, partsum):\n        def g_term(n, count):\n            if n<=3:\n                return count*n\n            else:\n                return count*g_term(n-1, count+1)\n        if k==1:\n            return partsum\n        return total_sum(k-1, partsum + g_term(n, 0))\n    return total_sum(3, 0)\n        \n\n\n","after":null,"SubmissionTime":"2016-02-12T13:21:06.005973","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 13:21:25.445894","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def total_sum(k, partsum):\n        def g_term(n, count):\n            if n<=3:\n                return count*n\n            else:\n                return count*g_term(n-1, count+1)\n        if k<1:\n            return partsum\n        return total_sum(k-1, partsum + g_term(n, 0))\n    return total_sum(3, 0)\n        \n\n\n","after":null,"SubmissionTime":"2016-02-12T13:21:25.445894","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":384,"date":"2016-02-12 13:21:35.602927","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"\"\"G(3) + 2 G(2) + 3 G(1) + 4 G(0)\"\"\"\n\n    if n == 1:\n        return n\n    else:\n        return g(n-1) + (i+1) * g(n-2)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:21:35.602927","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":383,"date":"2016-02-12 13:21:35.602927","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"\"\"G(3) + 2 G(2) + 3 G(1) + 4 G(0)\"\"\"\n\n    if n == 1:\n        return n\n    else:\n        return g(n-1) + (i+1) * g(n-2)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:21:35.602927","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 13:21:59.382979","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def total_sum(k, partsum):\n        def g_term(n, count):\n            if n<=3:\n                return count*n\n            else:\n                return count*g_term(n-1, count+1)\n        if k<1:\n            return partsum\n        return partsum+total_sum(k-1, partsum + g_term(n, 0))\n    return total_sum(3, 0)\n        \n\n\n","after":null,"SubmissionTime":"2016-02-12T13:21:59.382979","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":383,"date":"2016-02-12 13:22:12.297370","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"\"\"G(3) + 2 G(2) + 3 G(1) + 4 G(0)\"\"\"\n    i = 1\n    if n == 1:\n        return n\n    else:\n        i += 1\n        return (i) * g(n-1) + (i+1) * g(n-2)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:22:12.29737","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":384,"date":"2016-02-12 13:22:12.297370","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"\"\"G(3) + 2 G(2) + 3 G(1) + 4 G(0)\"\"\"\n    i = 1\n    if n == 1:\n        return n\n    else:\n        i += 1\n        return (i) * g(n-1) + (i+1) * g(n-2)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:22:12.29737","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 13:22:21.215093","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def total_sum(k, partsum):\n        def g_term(n, count):\n            if n<=3:\n                return count*n\n            else:\n                return count*g_term(n-1, count+1)\n        if k<1:\n            return partsum\n        return partsum+total_sum(k-1, g_term(n, 0))\n    return total_sum(3, 0)\n        \n\n\n","after":null,"SubmissionTime":"2016-02-12T13:22:21.215093","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 13:22:43.617421","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def total_sum(k, partsum):\n        def g_term(n, count):\n            if n<=3:\n                return count*n\n            else:\n                return count*g_term(n-1, count+1)\n        if k<1:\n            return partsum\n        return partsum+total_sum(k-1, g_term(n, 1))\n    return total_sum(3, 0)\n        \n\n\n","after":null,"SubmissionTime":"2016-02-12T13:22:43.617421","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":384,"date":"2016-02-12 13:23:22.106798","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"\"\"G(3) + 2 G(2) + 3 G(1) + 4 G(0)\"\"\"\n    i = 1\n    if n <= 3:\n        return n\n    else:\n        i += 1\n        return (i) * g(n-1) + (i+1) * g(n-2)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:23:22.106798","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":383,"date":"2016-02-12 13:23:22.106798","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"\"\"G(3) + 2 G(2) + 3 G(1) + 4 G(0)\"\"\"\n    i = 1\n    if n <= 3:\n        return n\n    else:\n        i += 1\n        return (i) * g(n-1) + (i+1) * g(n-2)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:23:22.106798","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 13:26:45.238131","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def total_sum(n, k, partsum):\n        def g_term(n, count):\n            if n<=3:\n                return count*n\n            else:\n                return count*g_term(n-1, count+1)\n        if k<1:\n            return partsum\n        return partsum+total_sum(k-1, g_term(n-1, 1))\n    return total_sum(n, 3, 0)\n        \n\n\n","after":null,"SubmissionTime":"2016-02-12T13:26:45.238131","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 13:26:58.632318","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def total_sum(n, k, partsum):\n        def g_term(n, count):\n            if n<=3:\n                return count*n\n            else:\n                return count*g_term(n-1, count+1)\n        if k<1:\n            return partsum\n        return partsum+total_sum(n-1, k-1, g_term(n-1, 1))\n    return total_sum(n, 3, 0)\n        \n\n\n","after":null,"SubmissionTime":"2016-02-12T13:26:58.632318","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":383,"date":"2016-02-12 13:27:14.804869","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"\"\"G(3) + 2 G(2) + 3 G(1) + 4 G(0)\"\"\"\n    i = 0\n    if n <= 3:\n        return n\n    else:\n        i += 1\n        return (i) * g(n-1) + (i+1) * g(n-2)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:27:14.804869","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":384,"date":"2016-02-12 13:27:14.804869","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"\"\"G(3) + 2 G(2) + 3 G(1) + 4 G(0)\"\"\"\n    i = 0\n    if n <= 3:\n        return n\n    else:\n        i += 1\n        return (i) * g(n-1) + (i+1) * g(n-2)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:27:14.804869","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":383,"date":"2016-02-12 13:29:11.985348","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"\"\"G(3) + 2 G(2) + 3 G(1) + 4 G(0)\"\"\"\n    i = 0\n    if n == 1:\n        return n\n    else:\n        i += 1\n        return (i) * g(n-1) + (i+1) * g(n-2)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:29:11.985348","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":384,"date":"2016-02-12 13:29:11.985348","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"\"\"G(3) + 2 G(2) + 3 G(1) + 4 G(0)\"\"\"\n    i = 0\n    if n == 1:\n        return n\n    else:\n        i += 1\n        return (i) * g(n-1) + (i+1) * g(n-2)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:29:11.985348","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":384,"date":"2016-02-12 13:29:24.236990","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"\"\"G(3) + 2 G(2) + 3 G(1) + 4 G(0)\"\"\"\n    i = 0\n    if n <= 3:\n        return n\n    else:\n        i += 1\n        return (i) * g(n-1) + (i+1) * g(n-2)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:29:24.23699","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":383,"date":"2016-02-12 13:29:24.236990","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"\"\"G(3) + 2 G(2) + 3 G(1) + 4 G(0)\"\"\"\n    i = 0\n    if n <= 3:\n        return n\n    else:\n        i += 1\n        return (i) * g(n-1) + (i+1) * g(n-2)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:29:24.23699","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 13:31:29.589523","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def totalsum(n, k):\n        def g_term(n, count):\n            if n<=3:\n                return count*n\n            else:\n                return count*g_term(n-1, count+1)\n        if k>3:\n            return partsum \n        return g_term(n, 1) + totalsum(n-1, k+1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:31:29.589523","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 13:31:48.007931","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def totalsum(n, k):\n        def g_term(n, count):\n            if n<=3:\n                return count*n\n            else:\n                return count*g_term(n-1, count+1)\n        if k>3:\n            return partsum \n        return g_term(n, 1) + totalsum(n-1, k+1)\n    return totalsum(n, 1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:31:48.007931","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 13:37:00.394510","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def g_term(n):\n        if n<=3:\n            return n\n        else:\n            return g_term(n-1)\n    return g_term(n-1) + 2*g_term(n-2) +3*g_term(n-3)\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:37:00.39451","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-12 13:39:13.996622","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    def g_term(n):\n        if n<=3:\n            return n\n        else:\n            return g_term(n-1)\n    if n<=3:\n        return n\n    return g_term(n-1) + 2*g_term(n-2) +3*g_term(n-3)\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:39:13.996622","SynthesizedAfter":"\r\ndef g(n):\r\n    def g_term(n):\r\n        if n<=3:\r\n            return n\r\n        else:\r\n            return g(n-1)\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g_term(n-2)+3*g_term(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":383,"date":"2016-02-12 13:40:16.228430","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    #G(4) = G(3) + 2 G(2) + 3 G(1) + 4 G(0)\n\n    i = 0\n    if n == 0:\n        return n\n    else:\n        i += 1\n        return (i) * g(n-1) + (i+1) * g(n-2)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:40:16.22843","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":384,"date":"2016-02-12 13:40:16.228430","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    #G(4) = G(3) + 2 G(2) + 3 G(1) + 4 G(0)\n\n    i = 0\n    if n == 0:\n        return n\n    else:\n        i += 1\n        return (i) * g(n-1) + (i+1) * g(n-2)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:40:16.22843","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":383,"date":"2016-02-12 13:42:25.060151","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    #G(4) = G(3) + 2 G(2) + 3 G(1) + 4 G(0)\n\n    def helper(i):\n        if n <= 0:\n            return 0\n        else:\n            return (i) * g(n-1) + (i+1) * g(n-2)\n    return helper(1)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:42:25.060151","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":384,"date":"2016-02-12 13:42:25.060151","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    #G(4) = G(3) + 2 G(2) + 3 G(1) + 4 G(0)\n\n    def helper(i):\n        if n <= 0:\n            return 0\n        else:\n            return (i) * g(n-1) + (i+1) * g(n-2)\n    return helper(1)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:42:25.060151","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":383,"date":"2016-02-12 13:43:21.984705","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    #G(4) = G(3) + 2 G(2) + 3 G(1) + 4 G(0)\n\n    def helper(i):\n        if n <= 0:\n            return 0\n        if n == 1:\n            return 1\n        else:\n            return (i) * g(n-1) + (i+1) * g(n-2)\n    return helper(1)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:43:21.984705","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":384,"date":"2016-02-12 13:43:21.984705","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    #G(4) = G(3) + 2 G(2) + 3 G(1) + 4 G(0)\n\n    def helper(i):\n        if n <= 0:\n            return 0\n        if n == 1:\n            return 1\n        else:\n            return (i) * g(n-1) + (i+1) * g(n-2)\n    return helper(1)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:43:21.984705","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":383,"date":"2016-02-12 13:46:27.902660","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    #G(4) = G(3) + 2 G(2) + 3 G(1) + 4 G(0)\n\n    def helper(i, n):\n        if n <= 0:\n            return 0\n        if n == 1:\n            return 1\n        else:\n            return helper(i+1, n-1) * i\n    return helper(1, n)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:46:27.90266","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":384,"date":"2016-02-12 13:46:27.902660","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    #G(4) = G(3) + 2 G(2) + 3 G(1) + 4 G(0)\n\n    def helper(i, n):\n        if n <= 0:\n            return 0\n        if n == 1:\n            return 1\n        else:\n            return helper(i+1, n-1) * i\n    return helper(1, n)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:46:27.90266","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":383,"date":"2016-02-12 13:48:44.533875","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    #G(4) = G(3) + 2 G(2) + 3 G(1) + 4 G(0)\n\n    def helper(i, n):\n        if n <= 0:\n            return 0\n        if n == 1 or n == 2:\n            return n\n        else:\n            return helper(i+1, n-1) * i\n    return helper(1, n)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:48:44.533875","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":384,"date":"2016-02-12 13:48:44.533875","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    #G(4) = G(3) + 2 G(2) + 3 G(1) + 4 G(0)\n\n    def helper(i, n):\n        if n <= 0:\n            return 0\n        if n == 1 or n == 2:\n            return n\n        else:\n            return helper(i+1, n-1) * i\n    return helper(1, n)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:48:44.533875","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":383,"date":"2016-02-12 13:48:44.533875","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    #G(4) = G(3) + 2 G(2) + 3 G(1) + 4 G(0)\n\n    def helper(i, n):\n        if n <= 0:\n            return 0\n        if n == 1 or n == 2:\n            return n\n        else:\n            return helper(i+1, n-1) * i\n    return helper(1, n)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:48:44.533875","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":384,"date":"2016-02-12 13:48:44.533875","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    #G(4) = G(3) + 2 G(2) + 3 G(1) + 4 G(0)\n\n    def helper(i, n):\n        if n <= 0:\n            return 0\n        if n == 1 or n == 2:\n            return n\n        else:\n            return helper(i+1, n-1) * i\n    return helper(1, n)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:48:44.533875","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":717,"date":"2016-02-12 13:50:09.558389","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return n + g(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:50:09.558389","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":384,"date":"2016-02-12 13:51:05.622001","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    #G(4) = G(3) + 2 G(2) + 3 G(1) + 4 G(0)\n\n    def helper(i, n):\n        if n <= 0:\n            return 0\n        if n == 2:\n            return n * i + n-1 * i+1\n        else:\n            return helper(i+1, n-1) * i\n    return helper(1, n)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:51:05.622001","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":383,"date":"2016-02-12 13:51:05.622001","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    #G(4) = G(3) + 2 G(2) + 3 G(1) + 4 G(0)\n\n    def helper(i, n):\n        if n <= 0:\n            return 0\n        if n == 2:\n            return n * i + n-1 * i+1\n        else:\n            return helper(i+1, n-1) * i\n    return helper(1, n)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:51:05.622001","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":383,"date":"2016-02-12 13:51:18.290912","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    #G(4) = G(3) + 2 G(2) + 3 G(1) + 4 G(0)\n\n    def helper(i, n):\n        if n <= 0:\n            return 0\n        if n <= 2:\n            return n * i + n-1 * i+1\n        else:\n            return helper(i+1, n-1) * i\n    return helper(1, n)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:51:18.290912","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":384,"date":"2016-02-12 13:51:18.290912","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    #G(4) = G(3) + 2 G(2) + 3 G(1) + 4 G(0)\n\n    def helper(i, n):\n        if n <= 0:\n            return 0\n        if n <= 2:\n            return n * i + n-1 * i+1\n        else:\n            return helper(i+1, n-1) * i\n    return helper(1, n)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:51:18.290912","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":717,"date":"2016-02-12 13:52:02.990380","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return n * g(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:52:02.99038","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return 1*g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":384,"date":"2016-02-12 13:52:35.637694","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    #G(4) = G(3) + 2 G(2) + 3 G(1) + 4 G(0)\n\n    def helper(i, n):\n        if n <= 0:\n            return 0\n        if n <= 2:\n            return (n*i) + ((n-1) * (i+1))\n        else:\n            return helper(i+1, n-1) * i\n    return helper(1, n)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:52:35.637694","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":383,"date":"2016-02-12 13:52:35.637694","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    #G(4) = G(3) + 2 G(2) + 3 G(1) + 4 G(0)\n\n    def helper(i, n):\n        if n <= 0:\n            return 0\n        if n <= 2:\n            return (n*i) + ((n-1) * (i+1))\n        else:\n            return helper(i+1, n-1) * i\n    return helper(1, n)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:52:35.637694","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":717,"date":"2016-02-12 13:52:36.446543","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return n-1 + g(n-2)\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:52:36.446543","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":717,"date":"2016-02-12 13:52:46.414157","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return n-1 + g(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:52:46.414157","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":717,"date":"2016-02-12 13:53:41.582222","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return n-2  * g(n-3)\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:53:41.582222","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":106,"date":"2016-02-12 13:54:22.679638","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return n + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-12T13:54:22.679638","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":717,"date":"2016-02-12 13:54:23.990566","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return n  + 2* g(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:54:23.990566","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":717,"date":"2016-02-12 13:55:04.011017","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return n  + 3* g(n-3)\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:55:04.011017","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":106,"date":"2016-02-12 13:55:11.622312","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return 1+2+n + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-12T13:55:11.622312","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":717,"date":"2016-02-12 13:56:09.146325","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return n-1  + 2* g(n-2)\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:56:09.146325","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":384,"date":"2016-02-12 13:56:17.524160","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    #G(4) = G(3) + 2 G(2) + 3 G(1) + 4 G(0)\n\n    if n < 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:56:17.52416","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":383,"date":"2016-02-12 13:56:17.524160","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    #G(4) = G(3) + 2 G(2) + 3 G(1) + 4 G(0)\n\n    if n < 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:56:17.52416","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":106,"date":"2016-02-12 13:57:58.188140","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        x = 1\n        return x*g(n-1)+(x+1)*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-12T13:57:58.18814","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":717,"date":"2016-02-12 13:58:13.369442","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return n-1 + 2* g(n-2)\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:58:13.369442","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":106,"date":"2016-02-12 13:58:18.807509","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        x = 1\n        return x*g(n-1)+(x+1)*g(n-2)\n\n","after":null,"SubmissionTime":"2016-02-12T13:58:18.807509","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":717,"date":"2016-02-12 13:58:24.921992","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return n+ 2* g(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:58:24.921992","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":717,"date":"2016-02-12 14:01:32.058375","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return 2*n-2 + 3* g(n-3)\n\n\n","after":null,"SubmissionTime":"2016-02-12T14:01:32.058375","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":717,"date":"2016-02-12 14:02:22.767730","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return n-2 + 3* g(n-3)\n\n\n","after":null,"SubmissionTime":"2016-02-12T14:02:22.76773","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":717,"date":"2016-02-12 14:02:49.514999","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return n + 2* g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-12T14:02:49.514999","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":717,"date":"2016-02-12 14:07:44.626031","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return n + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-12T14:07:44.626031","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":106,"date":"2016-02-12 14:08:49.322771","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2)+g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-12T14:08:49.322771","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":717,"date":"2016-02-12 14:09:02.840435","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return n + 2* g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-12T14:09:02.840435","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":717,"date":"2016-02-12 14:10:17.057444","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return 2*(n-1) + 3* g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-12T14:10:17.057444","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":717,"date":"2016-02-12 14:10:38.093547","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return n + 2* g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-12T14:10:38.093547","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":327,"date":"2016-02-12 14:25:52.294493","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return G(n-1) + 2*G(n-2) + 3*G(n-3)\n        \n","after":null,"SubmissionTime":"2016-02-12T14:25:52.294493","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":947,"date":"2016-02-12 14:47:29.641472","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        x = n - 1\n        return g(x) * (n-x)\n\n","after":null,"SubmissionTime":"2016-02-12T14:47:29.641472","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":947,"date":"2016-02-12 14:49:23.345377","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) * (n - (n -1) )\n\n","after":null,"SubmissionTime":"2016-02-12T14:49:23.345377","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":333,"date":"2016-02-12 15:04:12.188769","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n \n    else:\n        return G(n-1) + 2*G(n-2) + G (n-3)\n\n","after":null,"SubmissionTime":"2016-02-12T15:04:12.188769","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":367,"date":"2016-02-12 15:04:34.259062","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return 0\n\n","after":null,"SubmissionTime":"2016-02-12T15:04:34.259062","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":333,"date":"2016-02-12 15:04:58.114223","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n \n    else:\n        return g(n-1) + 2*g(n-2) + g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-12T15:04:58.114223","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":1,"Id":0,"studentId":1020,"date":"2016-02-12 15:23:27.560305","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-12T15:23:27.560305","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1020,"date":"2016-02-12 15:28:51.122576","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    G = G(n - 1) + 2*G(n -2) + 3*G(n - 3)\n\n    if n > 3:\n        return G\n\n","after":null,"SubmissionTime":"2016-02-12T15:28:51.122576","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1020,"date":"2016-02-12 15:41:43.448640","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    return G(n - 1) + 2*G(n -2) + 3*G(n - 3)\n   \n\n","after":null,"SubmissionTime":"2016-02-12T15:41:43.44864","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":716,"date":"2016-02-12 15:51:15.419329","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n\n    return n + (n-1)*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-12T15:51:15.419329","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":716,"date":"2016-02-12 15:53:31.208988","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n\n    return n + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-12T15:53:31.208988","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":63,"date":"2016-02-12 16:46:08.951826","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        return G(n-1) + 2 * G(n-2) + 3 * G(n-3)\n\n","after":null,"SubmissionTime":"2016-02-12T16:46:08.951826","SynthesizedAfter":"\r\ndef g(n):\r\n    if n==1:\r\n        return 1\r\n    elif n==2:\r\n        return 2\r\n    elif n==3:\r\n        return 3\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":843,"date":"2016-02-12 17:18:48.507688","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    if n>3:\n        return g(n-1) + g(n-2) + g(n-3)\n","after":null,"SubmissionTime":"2016-02-12T17:18:48.507688","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    if n>3:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":712,"date":"2016-02-12 17:35:42.330262","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n \n    def helper(fk2,fk1,fk,k,n):\n        if n==k:\n            return (1*fk) + (2*fk1)+ (3*fk2)\n        else:\n            return helper(fk1,(fk2+fk1),(fk1+fk),k+1,n)\n\n    if n<=3:\n        return n\n    else:\n        return helper(1,2,3,4,n)     \n\n\n","after":null,"SubmissionTime":"2016-02-12T17:35:42.330262","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":712,"date":"2016-02-12 17:37:00.139297","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n \n    def helper(fk2,fk1,fk,k,n):\n        if n==k:\n            return (1*fk) + (2*fk1)+ (3*fk2)\n        else:\n            return helper(fk1,(fk2+fk1),(fk1+fk),k+1,n)\n\n    if n<=3:\n        return n\n    else:\n        return helper(1,2,3,10,n)     \n\n\n","after":null,"SubmissionTime":"2016-02-12T17:37:00.139297","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":712,"date":"2016-02-12 17:37:47.390330","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n \n    def helper(fk2,fk1,fk,k,n):\n        if n==k:\n            return (1*fk) + (2*fk1)+ (3*fk2)\n        else:\n            return helper(fk1,(fk2+fk1),(fk1+fk),k+1,n)\n\n    if n<=3:\n        return n\n    else:\n        return helper(1,2,3,4,n)     \n\n\n","after":null,"SubmissionTime":"2016-02-12T17:37:47.39033","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":712,"date":"2016-02-12 17:42:28.857892","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n \n    def helper(fk2,fk1,fk,k,n):\n        if n==k:\n            return (1*fk) + (2*fk1) + (3*fk2)\n        else:\n            return helper(fk1,(fk2+fk1),(fk1+fk),k+1,n)\n\n    if n<=3:\n        return n\n    else:\n        return helper(1,2,3,3,n)     \n\n\n","after":null,"SubmissionTime":"2016-02-12T17:42:28.857892","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":712,"date":"2016-02-12 17:42:28.857892","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n \n    def helper(fk2,fk1,fk,k,n):\n        if n==k:\n            return (1*fk) + (2*fk1) + (3*fk2)\n        else:\n            return helper(fk1,(fk2+fk1),(fk1+fk),k+1,n)\n\n    if n<=3:\n        return n\n    else:\n        return helper(1,2,3,3,n)     \n\n\n","after":null,"SubmissionTime":"2016-02-12T17:42:28.857892","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":712,"date":"2016-02-12 17:43:30.003659","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n \n    def helper(fk2,fk1,fk,k,n):\n        if n==k:\n            return (1*fk) + (2*fk1) + (3*fk2)\n        else:\n            return helper(fk1,(fk2+fk1),(fk1+fk),k+1,n)\n\n    # if n<=3:\n    #     return n\n    # else:\n        return helper(1,2,3,3,n)     \n\n\n","after":null,"SubmissionTime":"2016-02-12T17:43:30.003659","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":311,"date":"2016-02-12 17:45:07.093522","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-12T17:45:07.093522","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":311,"date":"2016-02-12 17:45:41.727838","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-12T17:45:41.727838","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":311,"date":"2016-02-12 17:46:51.917650","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n > 0:\n        if n <= 3:\n            return n\n        else:\n            g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-12T17:46:51.91765","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":281,"date":"2016-02-12 18:07:11.509140","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n\n","after":null,"SubmissionTime":"2016-02-12T18:07:11.50914","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":281,"date":"2016-02-12 18:07:11.509140","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n\n","after":null,"SubmissionTime":"2016-02-12T18:07:11.50914","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":281,"date":"2016-02-12 18:09:11.738611","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n\n    if n > 3:\n        return n*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-12T18:09:11.738611","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    if n>3:\r\n        return 1*g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":816,"date":"2016-02-12 18:43:44.171349","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    for x in range(1,n+1):\n        if n<= 3:\n            return n\n        else:\n            x*g(n-x)\n\n","after":null,"SubmissionTime":"2016-02-12T18:43:44.171349","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":816,"date":"2016-02-12 18:58:00.638346","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total = 0\n    if n <= 3:\n        return n\n    for x in range(n+1):\n        if x <= 3:\n            total += x\n        else:\n            x*g(n-x)\n\n","after":null,"SubmissionTime":"2016-02-12T18:58:00.638346","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":641,"date":"2016-02-12 19:23:43.623503","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <=3:\n        return n\n    else:\n        i = 0\n        return g(n - (i + 1))\n\n","after":null,"SubmissionTime":"2016-02-12T19:23:43.623503","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":641,"date":"2016-02-12 19:27:13.607513","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <=3:\n        return n\n    else:\n        i = 0\n        return mul()((g(n - (i + 1)) + (i + 2)), (g(n - (i + 1)) + (i + 2)))\n\n","after":null,"SubmissionTime":"2016-02-12T19:27:13.607513","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":79,"date":"2016-02-12 19:58:55.330251","diff":null,"before":"def g(x):\n            return x\n        return g\n    k = 1\n    func = f\n    while k < n:\n        func = compose1(f, func)\n        k += 1\n    return func\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n    \n    \n\n\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    return n\n\n","after":null,"SubmissionTime":"2016-02-12T19:58:55.330251","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":79,"date":"2016-02-12 20:03:01.573614","diff":null,"before":"def g(x):\n            return x\n        return g\n    k = 1\n    func = f\n    while k < n:\n        func = compose1(f, func)\n        k += 1\n    return func\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n    \n    \n\n\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k, x = 1, 1\n    if n <= 3:\n        return g\n    else:\n        return k * g(n -1)\n        k += 1\n\n","after":null,"SubmissionTime":"2016-02-12T20:03:01.573614","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":79,"date":"2016-02-12 20:03:13.901832","diff":null,"before":"def g(x):\n            return x\n        return g\n    k = 1\n    func = f\n    while k < n:\n        func = compose1(f, func)\n        k += 1\n    return func\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n    \n    \n\n\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k, x = 1, 1\n    if n <= 3:\n        return g(n)\n    else:\n        return k * g(n -1)\n        k += 1\n\n","after":null,"SubmissionTime":"2016-02-12T20:03:13.901832","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":79,"date":"2016-02-12 20:03:30.465547","diff":null,"before":"def g(x):\n            return x\n        return g\n    k = 1\n    func = f\n    while k < n:\n        func = compose1(f, func)\n        k += 1\n    return func\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n    \n    \n\n\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k, x = 1, 1\n    if n <= 3:\n        return n\n    else:\n        return k * g(n -1)\n        k += 1\n\n","after":null,"SubmissionTime":"2016-02-12T20:03:30.465547","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":79,"date":"2016-02-12 20:04:33.240400","diff":null,"before":"def g(x):\n            return x\n        return g\n    k = 1\n    func = f\n    while k < n:\n        func = compose1(f, func)\n        k += 1\n    return func\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n    \n    \n\n\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k, x = 1, 1\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) * k\n        k += 1\n\n","after":null,"SubmissionTime":"2016-02-12T20:04:33.2404","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":79,"date":"2016-02-12 20:10:32.252444","diff":null,"before":"def g(x):\n            return x\n        return g\n    k = 1\n    func = f\n    while k < n:\n        func = compose1(f, func)\n        k += 1\n    return func\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n    \n    \n\n\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        n -= 1\n        k = 1\n        g = g(n) * k\n        k += 1\n    return g(n)\n\n","after":null,"SubmissionTime":"2016-02-12T20:10:32.252444","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":79,"date":"2016-02-12 20:11:15.962536","diff":null,"before":"def g(x):\n            return x\n        return g\n    k = 1\n    func = f\n    while k < n:\n        func = compose1(f, func)\n        k += 1\n    return func\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n    \n    \n\n\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        n -= 1\n        k = 1\n    return g(n) * k\n\n","after":null,"SubmissionTime":"2016-02-12T20:11:15.962536","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":79,"date":"2016-02-12 20:13:32.440890","diff":null,"before":"def g(x):\n            return x\n        return g\n    k = 1\n    func = f\n    while k < n:\n        func = compose1(f, func)\n        k += 1\n    return func\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n    \n    \n\n\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        x, k = x - 1, k + 1\n        return g(x) * k\n\n","after":null,"SubmissionTime":"2016-02-12T20:13:32.44089","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":79,"date":"2016-02-12 20:14:00.373740","diff":null,"before":"def g(x):\n            return x\n        return g\n    k = 1\n    func = f\n    while k < n:\n        func = compose1(f, func)\n        k += 1\n    return func\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n    \n    \n\n\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x = 1\n    if n <= 3:\n        return n\n    else:\n        x, k = x - 1, k + 1\n        return g(x) * k\n\n","after":null,"SubmissionTime":"2016-02-12T20:14:00.37374","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":79,"date":"2016-02-12 20:14:07.648148","diff":null,"before":"def g(x):\n            return x\n        return g\n    k = 1\n    func = f\n    while k < n:\n        func = compose1(f, func)\n        k += 1\n    return func\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n    \n    \n\n\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x = 1\n    k = 1\n    if n <= 3:\n        return n\n    else:\n        x, k = x - 1, k + 1\n        return g(x) * k\n\n","after":null,"SubmissionTime":"2016-02-12T20:14:07.648148","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":79,"date":"2016-02-12 20:14:29.815588","diff":null,"before":"def g(x):\n            return x\n        return g\n    k = 1\n    func = f\n    while k < n:\n        func = compose1(f, func)\n        k += 1\n    return func\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n    \n    \n\n\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x = 1\n    k = 1\n    if n <= 3:\n        return n\n    else:\n        x, k = n - 1, k + 1\n        return g(x) * k\n\n","after":null,"SubmissionTime":"2016-02-12T20:14:29.815588","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":79,"date":"2016-02-12 20:15:33.144301","diff":null,"before":"def g(x):\n            return x\n        return g\n    k = 1\n    func = f\n    while k < n:\n        func = compose1(f, func)\n        k += 1\n    return func\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n    \n    \n\n\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x = 2\n    k = 1\n    if n <= 3:\n        return n\n    else:\n        x, k = x - 1, k + 1\n        return g(x) * k\n\n","after":null,"SubmissionTime":"2016-02-12T20:15:33.144301","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":79,"date":"2016-02-12 20:15:59.258512","diff":null,"before":"def g(x):\n            return x\n        return g\n    k = 1\n    func = f\n    while k < n:\n        func = compose1(f, func)\n        k += 1\n    return func\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n    \n    \n\n\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x = 2\n    k = 1\n    if n <= 3:\n        return n\n    else:\n        x = x - 1\n        return g(x) * (k + 1)\n\n","after":null,"SubmissionTime":"2016-02-12T20:15:59.258512","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":79,"date":"2016-02-12 20:17:27.749752","diff":null,"before":"def g(x):\n            return x\n        return g\n    k = 1\n    func = f\n    while k < n:\n        func = compose1(f, func)\n        k += 1\n    return func\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n    \n    \n\n\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x = 1\n    k = 1\n    if n <= 3:\n        return n\n    else:\n        g = g(x) * k\n        x, k = x - 1, k - 1\n        return g\n\n","after":null,"SubmissionTime":"2016-02-12T20:17:27.749752","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":79,"date":"2016-02-12 20:18:14.510088","diff":null,"before":"def g(x):\n            return x\n        return g\n    k = 1\n    func = f\n    while k < n:\n        func = compose1(f, func)\n        k += 1\n    return func\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n    \n    \n\n\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x = 1\n    k = 1\n    if n <= 3:\n        return n\n    else:\n        n = x\n        x, k = x - 1, k - 1\n        return g(n)\n\n","after":null,"SubmissionTime":"2016-02-12T20:18:14.510088","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":79,"date":"2016-02-12 20:18:36.179442","diff":null,"before":"def g(x):\n            return x\n        return g\n    k = 1\n    func = f\n    while k < n:\n        func = compose1(f, func)\n        k += 1\n    return func\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n    \n    \n\n\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x = 1\n    k = 1\n    if n <= 3:\n        return n\n    else:\n        n = x\n        x, k = x - 1, k - 1\n        return g(n) * k\n\n","after":null,"SubmissionTime":"2016-02-12T20:18:36.179442","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":79,"date":"2016-02-12 20:18:46.449321","diff":null,"before":"def g(x):\n            return x\n        return g\n    k = 1\n    func = f\n    while k < n:\n        func = compose1(f, func)\n        k += 1\n    return func\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n    \n    \n\n\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x = 2\n    k = 1\n    if n <= 3:\n        return n\n    else:\n        n = x\n        x, k = x - 1, k - 1\n        return g(n) * k\n\n","after":null,"SubmissionTime":"2016-02-12T20:18:46.449321","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":79,"date":"2016-02-12 20:25:19.338254","diff":null,"before":"def g(x):\n            return x\n        return g\n    k = 1\n    func = f\n    while k < n:\n        func = compose1(f, func)\n        k += 1\n    return func\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n    \n    \n\n\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k = 1\n    if n <= 3:\n        return n\n    else:\n        x = n\n        x, k = x - 1, k + 1\n    return g(n) * k\n\n","after":null,"SubmissionTime":"2016-02-12T20:25:19.338254","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":79,"date":"2016-02-12 20:25:36.159823","diff":null,"before":"def g(x):\n            return x\n        return g\n    k = 1\n    func = f\n    while k < n:\n        func = compose1(f, func)\n        k += 1\n    return func\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n    \n    \n\n\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k = 1\n    if n <= 3:\n        return n\n    else:\n        x = n\n        x, k = x - 1, k + 1\n    return g(x) * k\n\n","after":null,"SubmissionTime":"2016-02-12T20:25:36.159823","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":79,"date":"2016-02-12 20:32:56.393185","diff":null,"before":"def g(x):\n            return x\n        return g\n    k = 1\n    func = f\n    while k < n:\n        func = compose1(f, func)\n        k += 1\n    return func\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n    \n    \n\n\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k = 1\n    if n <= 3:\n        return n\n    else:\n        x, k = n - 1, 1\n        g = sum(g(x) * k)\n        x, k = x - 1, k + 1\n    return g\n\n","after":null,"SubmissionTime":"2016-02-12T20:32:56.393185","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":79,"date":"2016-02-12 20:39:46.942753","diff":null,"before":"def g(x):\n            return x\n        return g\n    k = 1\n    func = f\n    while k < n:\n        func = compose1(f, func)\n        k += 1\n    return func\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n    \n    \n\n\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(n):\n        if n <= 3:\n            return n\n        else:\n            return G(n - 1) + 2 * G(n - 2) + 3 * G(n -3) \n\n","after":null,"SubmissionTime":"2016-02-12T20:39:46.942753","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":612,"date":"2016-02-12 21:00:29.433475","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-12T21:00:29.433475","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":816,"date":"2016-02-12 21:15:07.468272","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-12T21:15:07.468272","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":816,"date":"2016-02-12 21:16:08.895055","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3 and n > 0:\n        return n\n    else: \n        g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-12T21:16:08.895055","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":816,"date":"2016-02-12 21:16:45.819621","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3 and n > 0:\n        return n + (n-1)\n    else: \n        g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-12T21:16:45.819621","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":429,"date":"2016-02-12 22:52:53.746630","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def helper_function(i, n):\n            if n - i > 0:\n                return i*helper_function(i + 1,)\n    return helper_function(1, n)\n\n","after":null,"SubmissionTime":"2016-02-12T22:52:53.74663","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":429,"date":"2016-02-12 22:53:06.479048","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def helper_function(i, n):\n            if n - i > 0:\n                return i*helper_function(i + 1, n)\n    return helper_function(1, n)\n\n","after":null,"SubmissionTime":"2016-02-12T22:53:06.479048","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1027,"date":"2016-02-12 23:08:06.196944","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if(n<=3):\n        return n\n\n    def g_help(n, i):\n        if(i==3):\n            return G(n-3)\n\n","after":null,"SubmissionTime":"2016-02-12T23:08:06.196944","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":429,"date":"2016-02-12 23:09:40.630406","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper_function(i, n):\n            \n                return i*helper_function(i + 1, n)\n    return helper_function(1, n)\n\n","after":null,"SubmissionTime":"2016-02-12T23:09:40.630406","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1027,"date":"2016-02-12 23:10:35.980862","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n<= 3:\n        return n\n    else:\n        return g(n-1) + g(n-2)\n\n","after":null,"SubmissionTime":"2016-02-12T23:10:35.980862","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":716,"date":"2016-02-12 23:59:24.923136","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    return add(g(n-1),2*g(n-2),3*g(n-3))\n\n","after":null,"SubmissionTime":"2016-02-12T23:59:24.923136","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":290,"date":"2016-02-13 08:54:24.886013","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return identity(n)\n    return g(n)*g(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-13T08:54:24.886013","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":290,"date":"2016-02-13 08:54:24.886013","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return identity(n)\n    return g(n)*g(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-13T08:54:24.886013","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":290,"date":"2016-02-13 08:55:03.206478","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return identity(n)\n    return g(n-1)*g(n)\n\n\n","after":null,"SubmissionTime":"2016-02-13T08:55:03.206478","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":290,"date":"2016-02-13 09:00:38.921457","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return identity(n)\n\n    return g(n) + g(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-13T09:00:38.921457","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":985,"date":"2016-02-13 10:24:35.671743","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n > 3:\n        return g(n - 1) + 2 * g(n - 2) + g(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-13T10:24:35.671743","SynthesizedAfter":"\r\ndef g(n):\r\n    if n==1:\r\n        return 1\r\n    if n==2:\r\n        return 2\r\n    if n==3:\r\n        return 3\r\n    if n>3:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":290,"date":"2016-02-13 11:28:07.966804","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    while n > 2:\n        return\n    if n <= 3:\n        return identity(n)\n    return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T11:28:07.966804","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":931,"date":"2016-02-13 11:30:32.456874","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return g(n-1) + 2*G(n-2) + 3*G(n-3)\n        n-=1\n\n\n","after":null,"SubmissionTime":"2016-02-13T11:30:32.456874","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)\r\n        n -= 1","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":541,"date":"2016-02-13 12:40:43.248466","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n\n","after":null,"SubmissionTime":"2016-02-13T12:40:43.248466","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":656,"date":"2016-02-13 12:41:35.565295","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(i, total):\n        if n <= 3:\n            return n\n        elif i == 3:\n            return total \n        else:\n            total = total + i*(n-1)\n            return counter(i +1, total)\n    return counter(1, 0)\n\n","after":null,"SubmissionTime":"2016-02-13T12:41:35.565295","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":656,"date":"2016-02-13 12:42:10.634894","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(i, total):\n        if n <= 3:\n            return n\n        elif i == 3:\n            return total \n        else:\n            total = total + i*(n-1)\n            return counter(i +1, total)\n    return counter(1, 1)\n\n","after":null,"SubmissionTime":"2016-02-13T12:42:10.634894","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":656,"date":"2016-02-13 12:51:58.282583","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(i, total):\n        if n <= 3:\n            return n\n        elif i == 3:\n            return total \n        else:\n            total = total + i*(n-i)\n            return counter(i + 1, total)\n    return counter(1, 0)\n\n","after":null,"SubmissionTime":"2016-02-13T12:51:58.282583","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":656,"date":"2016-02-13 12:53:09.721486","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(i, total):\n        if n <= 3:\n            return n\n        elif i == n:\n            return total \n        else:\n            total = total + i*(n-i)\n            return counter(i + 1, total)\n    return counter(1, 0)\n\n","after":null,"SubmissionTime":"2016-02-13T12:53:09.721486","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":656,"date":"2016-02-13 12:55:20.877474","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(i, total):\n        if n <= 3:\n            return n\n        elif i == n:\n            return total \n        else:\n            total = total + i*(n-i)\n            return counter(i + 1, total)\n    return counter(1, 1)\n\n","after":null,"SubmissionTime":"2016-02-13T12:55:20.877474","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":656,"date":"2016-02-13 12:55:30.156660","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(i, total):\n        if n <= 3:\n            return n\n        elif i == n:\n            return total \n        else:\n            total = total + i*(n-i)\n            return counter(i + 1, total)\n    return counter(1, 0)\n\n","after":null,"SubmissionTime":"2016-02-13T12:55:30.15666","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":4,"date":"2016-02-13 13:32:38.795433","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n    \treturn n\n    else:\n    \treturn n * g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-13T13:32:38.795433","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return 1*g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":4,"date":"2016-02-13 13:34:15.561692","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n    \treturn n\n    else:\n    \treturn n * g(n - 2)\n\n","after":null,"SubmissionTime":"2016-02-13T13:34:15.561692","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":4,"date":"2016-02-13 13:34:27.798286","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n    \treturn n\n    else:\n    \treturn n * g(n)\n\n","after":null,"SubmissionTime":"2016-02-13T13:34:27.798286","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":822,"date":"2016-02-13 13:34:34.688330","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x = 0\n    if x == n:\n        return g(n)\n    g(x+1)\n\n","after":null,"SubmissionTime":"2016-02-13T13:34:34.68833","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":4,"date":"2016-02-13 13:34:37.941802","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n    \treturn n\n    else:\n    \treturn n * g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-13T13:34:37.941802","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":822,"date":"2016-02-13 13:36:51.959620","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    if n == 0:\n        return g(n)\n    g(n-1)\n    return g(n)\n\n","after":null,"SubmissionTime":"2016-02-13T13:36:51.95962","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":4,"date":"2016-02-13 13:37:43.749594","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n    \treturn n\n    else:\n    \treturn n * g(g(n - 1))\n\n","after":null,"SubmissionTime":"2016-02-13T13:37:43.749594","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":4,"date":"2016-02-13 13:39:11.822076","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n    \treturn n\n    else:\n    \treturn n * g(n - n)\n\n","after":null,"SubmissionTime":"2016-02-13T13:39:11.822076","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":4,"date":"2016-02-13 13:41:04.945631","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    d = 0\n    if n <= 3:\n    \treturn n\n    else:\n    \td += 1\n    \treturn d * g(n - d)\n\n","after":null,"SubmissionTime":"2016-02-13T13:41:04.945631","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":822,"date":"2016-02-13 13:43:12.835193","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    if n <=3:\n        return n\n    else: \n        (g(n-1)+2)*(g(n-2)+3)*(g(n-3))\n\n","after":null,"SubmissionTime":"2016-02-13T13:43:12.835193","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":822,"date":"2016-02-13 13:43:24.032303","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    if n <=3:\n        return n\n    else: \n        return (g(n-1)+2)*(g(n-2)+3)*(g(n-3))\n\n","after":null,"SubmissionTime":"2016-02-13T13:43:24.032303","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":4,"date":"2016-02-13 13:44:39.634821","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(j):\n    \tif n <= 3:\n    \t\treturn n\n    \telse:\n    \t\treturn j * g(n - j)* helper(j + 1)\n    return helper(1)\n\n","after":null,"SubmissionTime":"2016-02-13T13:44:39.634821","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":4,"date":"2016-02-13 13:45:26.225094","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(j):\n    \tif n <= 3:\n    \t\treturn n\n    \telif j == n:\n    \t\treturn 0\n    \telse:\n    \t\treturn j * g(n - j)* helper(j + 1)\n    return helper(1)\n\n","after":null,"SubmissionTime":"2016-02-13T13:45:26.225094","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":4,"date":"2016-02-13 13:48:18.959936","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(j):\n    \tif n <= 3:\n    \t\treturn n\n    \telse:\n    \t\tg(n-1) + 2*g(n-2) + 3*g(n-3)\n    return helper(1)\n\n","after":null,"SubmissionTime":"2016-02-13T13:48:18.959936","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":76,"date":"2016-02-13 14:00:49.246640","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i, total = 1, 0\n    if n <= 3:\n        return n\n    def ghelper(n,i):\n        if i < n:\n            total += i * g(n-i)\n            i += 1\n        else:\n            return total\n    return ghelper(n,i)\n\n","after":null,"SubmissionTime":"2016-02-13T14:00:49.24664","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":76,"date":"2016-02-13 14:01:17.137407","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 1\n    if n <= 3:\n        return n\n    def ghelper(n,i):\n        total = 0\n        if i < n:\n            total += i * g(n-i)\n            i += 1\n        else:\n            return total\n    return ghelper(n,i)\n\n","after":null,"SubmissionTime":"2016-02-13T14:01:17.137407","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":76,"date":"2016-02-13 14:01:42.429198","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 1\n    if n <= 3:\n        return n\n    def ghelper(n,i):\n        total = 0\n        if i < n:\n            total += i * g(n-i)\n        else:\n            return total\n    return ghelper(n,i)\n\n","after":null,"SubmissionTime":"2016-02-13T14:01:42.429198","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 14:08:06.037109","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(n):\n        if n <= 3:\n            return n\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T14:08:06.037109","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 14:08:25.682823","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    \n\n\n","after":null,"SubmissionTime":"2016-02-13T14:08:25.682823","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":656,"date":"2016-02-13 14:13:44.960822","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(i, total):\n        if n <= 3:\n            return n\n        elif i == 3:\n            return total \n        else:\n            total = total + i*(n-i)\n            return counter(i + 1, total)\n    return counter(1, 0)\n\n","after":null,"SubmissionTime":"2016-02-13T14:13:44.960822","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 14:18:04.736058","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(x, y):\n        if y <= 3:\n            return y\n        return x * G(y-1)\n    return G(1, n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T14:18:04.736058","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 14:18:33.634108","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(x, y):\n        if y <= 3:\n            return y\n        return x * G(x+1, y-1)\n    return G(1, n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T14:18:33.634108","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":637,"date":"2016-02-13 14:19:35.246512","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k = n\n    if n <= 3:\n        return n\n    elif k == (n - 3):\n        return 3 * (n - 3)\n    elif k > 3:\n        return g(k-1) + 2 * g(k-2)\n\n","after":null,"SubmissionTime":"2016-02-13T14:19:35.246512","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":656,"date":"2016-02-13 14:20:51.749931","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(i, total):\n        if n <= 3:\n            return n\n        elif i == 3:\n            return total \n        else:\n            total = total + i*g(n-i)\n            return counter(i + 1, total)\n    return counter(1, 0)\n\n","after":null,"SubmissionTime":"2016-02-13T14:20:51.749931","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 14:31:42.695037","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if y <= 3:\n        return y\n    def G(x, y):\n        return x * y + G(x+1, y-1)\n    return G(1, n-1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T14:31:42.695037","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 14:31:56.167481","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        return x * y + G(x+1, y-1)\n    return G(1, n-1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T14:31:56.167481","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 14:32:12.737630","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        if x == n:\n            return\n        return x * y + G(x+1, y-1)\n    return G(1, n-1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T14:32:12.73763","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 14:36:46.980310","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        if x == n:\n            return n\n        return x * y + G(x+1, y-1)\n    return G(1, n-1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T14:36:46.98031","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 14:36:53.150104","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        if x == n:\n            return 1\n        return x * y + G(x+1, y-1)\n    return G(1, n-1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T14:36:53.150104","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 14:36:58.811570","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        if x == n:\n            return 0\n        return x * y + G(x+1, y-1)\n    return G(1, n-1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T14:36:58.81157","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 14:37:12.264507","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        if x == n:\n            return 0\n        return x * y + G(x+1, y-1)\n    return G(0, n-1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T14:37:12.264507","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 14:37:24.326131","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        if x == n:\n            return 0\n        return x * y + G(x+1, y-1)\n    return G(0, n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T14:37:24.326131","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 14:37:28.667432","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        if x == n:\n            return 1\n        return x * y + G(x+1, y-1)\n    return G(0, n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T14:37:28.667432","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":551,"date":"2016-02-13 14:41:05.136183","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def G_helper(n, i):\n        if n <= 3:\n            return n\n        if n > 3:\n            if i == n:\n                return\n            else:\n                return G_helper(n-1, n-1) + 2 * G_helper(n-2, n-1) + 3 * G_helper(n-3, n-1)\n    return G_helper(n, n)\n\n\n","after":null,"SubmissionTime":"2016-02-13T14:41:05.136183","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":67,"date":"2016-02-13 14:45:47.224817","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    return g(n-1) + g(n-2) + 3*g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-13T14:45:47.224817","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 14:54:39.162969","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        if x == n:\n            return 0\n        else:\n            return x * y + G(x+1, y-1)\n    return G(0, n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T14:54:39.162969","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 14:59:31.931549","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        if x == n:\n            return 0\n\n        return G(x+1, y-1) + G(x+2, y-2)\n    return G(0, n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T14:59:31.931549","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 15:00:09.992383","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        if x == n:\n            return 0\n        return x * y + G(x+1, y-1) + G(x+2, y-2)\n    return G(0, n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:00:09.992383","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 15:00:18.344629","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        if x == n:\n            return 0\n        # return x * y + G(x+1, y-1) + G(x+2, y-2)\n    return G(0, n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:00:18.344629","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 15:00:18.344629","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        if x == n:\n            return 0\n        # return x * y + G(x+1, y-1) + G(x+2, y-2)\n    return G(0, n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:00:18.344629","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 15:00:35.983861","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        if x == n:\n            return 0\n    return G(0, n)\n\n        # return x * y + G(x+1, y-1) + G(x+2, y-2)\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:00:35.983861","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 15:00:47.433095","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        if x == n:\n            return 0\n        return x * y + G(x+1, y-1)\n    return G(0, n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:00:47.433095","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-13 15:01:27.063496","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 1:\n        return n\n    else:\n        return g(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:01:27.063496","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 15:02:44.507561","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(x, y):\n        if y <= 3:\n            return y\n        if x == n:\n            return 0\n        return x * y + G(x+1, y-1) + G(x+2, y-2)\n    return G(0, n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:02:44.507561","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":648,"date":"2016-02-13 15:03:23.949613","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    counter += 1\n    if n == 0:\n        return 1\n    elif n <= 3:\n        return n\n    else:\n        return counter * g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-13T15:03:23.949613","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 15:03:59.517490","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(x, y):\n        if y <= 3:\n            return y + G(x+1, y-1)\n        if x == n:\n            return 0\n        return x * y + G(x+1, y-1) + G(x+2, y-2)\n    return G(0, n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:03:59.51749","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 15:04:14.418917","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(x, y):\n        if x == n:\n            return 0\n        if y <= 3:\n            return y + G(x+1, y-1)\n        return x * y + G(x+1, y-1) + G(x+2, y-2)\n    return G(0, n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:04:14.418917","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 15:05:01.908368","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(x, y):\n        if x == n:\n            return 0\n        elif y <= 3:\n            return y+ G(x+1, y-1)\n        return x * y + G(x+1, y-1) + G(x+2, y-2)\n    return G(0, n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:05:01.908368","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 15:05:30.699923","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(x, y):\n        if x == n:\n            return 0\n        return x * y + G(x+1, y-1)\n    return G(0, n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:05:30.699923","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 15:12:30.542801","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        if x == n:\n            return 0\n        return x * y + G(x+1, y-1)\n    return G(0, n) + G(0, n-1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:12:30.542801","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 15:12:55.259321","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(x, y):\n        if y <= 3:\n            return y\n        if x == n:\n            return 0\n        return x * y + G(x+1, y-1)\n    return G(0, n) + G(0, n-1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:12:55.259321","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 15:13:24.219092","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        if y <= 3:\n            return y\n        if x == n:\n            return 0\n        return x * y + G(x+1, y-1)\n    return G(0, n) + G(0, n-1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:13:24.219092","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 15:14:06.891622","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        # if y <= 3:\n        #     return y\n        if x == n:\n            return 0\n        return x * y + G(x+1, y-1)\n    return G(0, n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:14:06.891622","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 15:14:14.570054","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        if y <= 3:\n            return y\n        if x == n:\n            return 0\n        return x * y + G(x+1, y-1)\n    return G(0, n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:14:14.570054","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 15:14:32.847297","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        if x == n:\n            return 0\n        elif y <= 3:\n            return y\n        return x * y + G(x+1, y-1)\n    return G(0, n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:14:32.847297","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 15:14:45.404208","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        if x == n:\n            return 0\n        return x * y + G(x+1, y-1)\n    return G(0, n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:14:45.404208","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 15:14:53.234625","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        if x == n:\n            return 0\n        return x * y + G(x+1, y-1)\n    return G(0, n) + (0, n-1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:14:53.234625","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 15:15:03.914324","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        if x == n:\n            return 0\n        return x * y + G(x+1, y-1)\n    return G(0, n) + G(0, n-1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:15:03.914324","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 15:18:02.036473","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        if x == n:\n            return 0\n        if y <= 3:\n            return 0\n        return x * y + G(x+1, y-1)\n    return G(0, n) + G(0, n-1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:18:02.036473","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 15:18:47.532158","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        if x == n:\n            return 0\n        return x * y + G(x+1, y-1)\n    return G(0, n) + G(0, n-1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:18:47.532158","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-13 15:20:32.152497","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2(g-2) + 3(g-3)\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:20:32.152497","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":428,"date":"2016-02-13 15:20:47.096426","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n","after":null,"SubmissionTime":"2016-02-13T15:20:47.096426","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-13 15:20:52.096956","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2(n-2) + 3(n-3)\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:20:52.096956","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":428,"date":"2016-02-13 15:21:13.471860","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n","after":null,"SubmissionTime":"2016-02-13T15:21:13.47186","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":87,"date":"2016-02-13 15:24:40.693899","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(x):\n        if n <= 3:\n            return n\n        elif n > 3:\n            return g(n-1)(x) + x+1 * g(n-2)(x) + x+2 * g(n-3)(x)\n    return helper(1)\n\n","after":null,"SubmissionTime":"2016-02-13T15:24:40.693899","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 15:25:02.671783","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        if x == n:\n            return 0\n        if n > 3:\n            return x * y + G(x+1, y-1)\n        return x * y + G(x+1, y-1)\n    return G(0, n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:25:02.671783","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 15:26:18.175883","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        if x == n:\n            return 0\n        return x * y + G(x+1, y-1) + G(x+2, y-2)\n    return G(0, n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:26:18.175883","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 15:27:20.913655","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        if x >= n:\n            return 0\n        return x * y + G(x+1, y-1) + G(x+2, y-2)\n    return G(0, n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:27:20.913655","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 15:29:03.481992","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        if x >= n:\n            return 0\n        return x * y + G(x+1, y-1)\n    return G(0, n) - g(n-1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:29:03.481992","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 15:29:08.456701","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        if x >= n:\n            return 0\n        return x * y + G(x+1, y-1)\n    return G(0, n) + g(n-1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:29:08.456701","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 15:29:25.409670","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(x, y):\n        if n <= 3:\n            return n\n        if x >= n:\n            return 0\n        return x * y + G(x+1, y-1)\n    return G(0, n) + g(n-1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:29:25.40967","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 15:30:38.685437","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        if x >= n:\n            return 0\n        return x * y + G(x+1, y-1)\n    if n == 4:\n        return G(0, n)\n    return G(0, n) + g(n-1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:30:38.685437","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    def G(x, y):\r\n        if x>=n:\r\n            return 0\r\n        return x*y+G(x+1, y-1)\r\n    if n==4:\r\n        return G(0, n)\r\n    return G(0, n)+g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 15:30:58.423908","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        if x >= n:\n            return 0\n        return x * y + G(x+1, y-1)\n    if n == 4:\n        return G(0, n-1)\n    return G(0, n) + g(n-1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:30:58.423908","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":420,"date":"2016-02-13 15:33:47.965619","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    if n>3:\n        return (n-1) + 2*(n-2) + 3*(n-3)\n\n","after":null,"SubmissionTime":"2016-02-13T15:33:47.965619","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":420,"date":"2016-02-13 15:35:57.992577","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    if n>3:\n        i=1\n        return i*(n-i)\n\n","after":null,"SubmissionTime":"2016-02-13T15:35:57.992577","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":420,"date":"2016-02-13 15:38:01.557289","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(i):\n        if n<=3:\n            return n\n        if n>3:\n            i=1\n            return i*(n-i) \n    return G(1)\n\n","after":null,"SubmissionTime":"2016-02-13T15:38:01.557289","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":420,"date":"2016-02-13 15:38:42.276221","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(i):\n        if n<=3:\n            return n\n        if n>3:\n            return i*(n-i) + G(i+1)\n    return G(1)\n\n","after":null,"SubmissionTime":"2016-02-13T15:38:42.276221","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":420,"date":"2016-02-13 15:39:15.875030","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(i):\n        if n>3:\n            return i*(n-i) + G(i+1)\n        if n<=3:\n            return n\n    return G(1)\n\n","after":null,"SubmissionTime":"2016-02-13T15:39:15.87503","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":420,"date":"2016-02-13 15:39:35.493235","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(i):\n        if n<=3:\n            return n\n        else:\n            return i*(n-i) + G(i+1)\n    return G(1)\n\n","after":null,"SubmissionTime":"2016-02-13T15:39:35.493235","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":420,"date":"2016-02-13 15:41:08.460742","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n >= 3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-13T15:41:08.460742","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 15:45:38.709009","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        if x >= n:\n            return 0\n        return x * y + G(x+1, y-1)\n    return G(0, n) + G(1, n -1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:45:38.709009","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 15:45:51.939852","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        if x >= n:\n            return 0\n        return x * y + G(x+1, y-1)\n    return G(0, n) + G(0, n -1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:45:51.939852","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 15:55:09.417333","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        if x >= n:\n            return 0\n        return x * y + G(x+1, y-1)\n    return G(0, n-1) + G(0, n-2)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:55:09.417333","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 15:56:12.856324","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        if x >= n:\n            return 0\n        return G(x+1, y-1) + G(x+1, y-2)\n    return G(-1, n+1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:56:12.856324","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 15:56:27.359790","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        if x >= n:\n            return 0\n        return G(x+1, y-1) + G(x+2, y-2)\n    return G(-1, n+1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:56:27.35979","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 15:56:46.097001","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        if x == n:\n            return 0\n        return G(x+1, y-1) + G(x+2, y-2)\n    return G(-1, n+1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:56:46.097001","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 15:57:56.095394","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        if x >= n:\n            return 0\n        return G(x+1, y-1) + G(x+1, y-2)\n    return G(-1, n+1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:57:56.095394","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 15:58:23.194515","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        if x >= n:\n            return 0\n        return G(x+1, y-1) + G(x+1, y-2)\n    return G(0, n+1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:58:23.194515","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 15:58:36.579624","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        if x >= n:\n            return 0\n        return G(x+1, y-1) + G(x+1, y-2)\n    return G(-1, n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:58:36.579624","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 15:59:39.062779","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        if x >= n:\n            return 0\n        return x * y + G(x+1, y-1) + G(x+1, y-2)\n    return G(-1, n-1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:59:39.062779","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 15:59:48.632235","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        if x >= n:\n            return 0\n        return x * y + G(x+1, y-1) + G(x+2, y-2)\n    return G(-1, n-1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:59:48.632235","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 16:00:43.040977","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        if x >= n:\n            return 0\n        return x * y + G(x+1, y-1) + G(x+2, y-2)\n    return G(-1, n+1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:00:43.040977","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":833,"date":"2016-02-13 16:05:21.521280","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return n if n<=3 else g(n)+n*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-13T16:05:21.52128","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 16:05:25.623465","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(x, y):\n        if y <= 3:\n            return y\n        if x >= n:\n            return 0\n        return x * y + G(x+1, y-1) + G(x+2, y-2)\n    return G(0, n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:05:25.623465","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":833,"date":"2016-02-13 16:06:12.826893","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return n if n<=3 else n+n*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-13T16:06:12.826893","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 16:06:21.127050","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(x, y):\n        if y <= 3:\n            return y\n        elif x >= n:\n            return 0\n        return x * y + G(x+1, y-1) + G(x+2, y-2)\n    return G(0, n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:06:21.12705","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":833,"date":"2016-02-13 16:10:36.145794","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def h(x):\n        if x <=3:\n            return x\n        else:\n            return (n-x+1)*h(x-1)\n    return h(n)\n\n","after":null,"SubmissionTime":"2016-02-13T16:10:36.145794","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":833,"date":"2016-02-13 16:11:09.414961","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def h(x):\n        if x <=3:\n            return x\n        else:\n            return x+(n-x+1)*h(x-1)\n    return h(n)\n\n","after":null,"SubmissionTime":"2016-02-13T16:11:09.414961","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":833,"date":"2016-02-13 16:12:35.569083","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def h(x):\n        count = 0\n        if x <=3:\n            return x\n        else:\n            return x+(x-count)*h(x-1)\n    return h(n)\n\n","after":null,"SubmissionTime":"2016-02-13T16:12:35.569083","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":833,"date":"2016-02-13 16:12:42.701419","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def h(x):\n        count = 1\n        if x <=3:\n            return x\n        else:\n            return x+(x-count)*h(x-1)\n    return h(n)\n\n","after":null,"SubmissionTime":"2016-02-13T16:12:42.701419","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 16:16:17.591601","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(x, y):\n        if y <= 3:\n            return y\n        elif x >= n:\n            return 0\n        return x * y + G(x+1, y-1) + G(x+2, y-2)\n    return G(0, n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:16:17.591601","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 16:17:00.239945","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(x, y):\n        if x >= n:\n            return 0\n        return x * y + G(x+1, y-1) + G(x+2, y-2)\n    return G(0, n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:17:00.239945","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":953,"date":"2016-02-13 16:28:43.095902","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <=3 :\n        return n\n    return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-13T16:28:43.095902","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":833,"date":"2016-02-13 16:32:12.075369","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def h(x):\n        \n        if x <=0:\n            return x\n        else:\n            return x+(n-x+1*h(x-1))\n    \n\n\n    if n<=3:\n        return n\n    else:\n        return h(n)\n    \n","after":null,"SubmissionTime":"2016-02-13T16:32:12.075369","SynthesizedAfter":"\r\ndef g(n):\r\n    def h(x):\r\n        if x<=0:\r\n            return x\r\n        else:\r\n            return x+(n-x+1*h(x-1))\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-3)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":833,"date":"2016-02-13 16:32:31.809629","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def h(x):\n        \n        if x <=0:\n            return x\n        else:\n            return x+(n-x+1)*h(x-1)\n    \n\n\n    if n<=3:\n        return n\n    else:\n        return h(n)\n    \n","after":null,"SubmissionTime":"2016-02-13T16:32:31.809629","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 16:34:33.678562","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    if n <= 3:\n        return n\n    return n + g(n-1)\n    # def G(x, y):\n    #     if x >= n:\n    #         return 0\n    #     return x * y + G(x+1, y-1)\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:34:33.678562","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":833,"date":"2016-02-13 16:35:36.991755","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def h(x):\n        count = 1\n        if x <=0:\n            return x\n        else:\n            return x+(count)*h(x-count)\n    \n\n\n    if n<=3:\n        return n\n    else:\n        return h(n)\n    \n","after":null,"SubmissionTime":"2016-02-13T16:35:36.991755","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 16:35:59.370947","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    if n <= 3:\n        return n\n    return n + g(n-1) + g(n-2)\n    # def G(x, y):\n    #     if x >= n:\n    #         return 0\n    #     return x * y + G(x+1, y-1)\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:35:59.370947","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":833,"date":"2016-02-13 16:37:02.360879","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def h(x):\n        nonlocal count\n        if x <=0:\n            return x\n        else:\n            count+=1\n            return x+(count)*h(x-count)\n    count = 0\n\n\n    if n<=3:\n        return n\n    else:\n        return h(n)\n    \n","after":null,"SubmissionTime":"2016-02-13T16:37:02.360879","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 16:38:31.887883","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    if n <= 3:\n        return n\n    return g(n-1) + g(n-2)\n        # def G(x, y):\n    #     if x >= n:\n    #         return 0\n    #     return x * y + G(x+1, y-1)\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:38:31.887883","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 16:40:58.565966","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    if n <= 3:\n        return n\n    return g(n-1) + g(n-2) + g(n-3)\n        # def G(x, y):\n    #     if x >= n:\n    #         return 0\n    #     return x * y + G(x+1, y-1)\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:40:58.565966","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 16:41:04.489704","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    if n <= 3:\n        return n\n    return n + g(n-1) + g(n-2) + g(n-3)\n        # def G(x, y):\n    #     if x >= n:\n    #         return 0\n    #     return x * y + G(x+1, y-1)\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:41:04.489704","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 16:41:33.505917","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    if n <= 3:\n        return n\n    return n + g(n-1) + g(n-2) + g(n-3)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:41:33.505917","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 16:42:16.548397","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    if n <= 3:\n        return n\n    return n + g(n-1) + g(n-2) + g(n-3) + g(n-4)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:42:16.548397","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":506,"date":"2016-02-13 16:42:34.772737","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    if n <= 3:\n        return n\n    return g(n-1) + g(n-2) + g(n-3)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:42:34.772737","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":667,"date":"2016-02-13 16:49:05.003455","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1)  * g(n - 2) \n\n","after":null,"SubmissionTime":"2016-02-13T16:49:05.003455","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+(2*g(n-2))+(3*g(n-3))","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(ParenthesisExpressionNode, SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))))), SingleChild(ConstNode(ParenthesisExpressionNode, SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":667,"date":"2016-02-13 16:51:13.163964","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return (g(n - 1) + 2)  * (g(n - 2) + 3) * g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-13T16:51:13.163964","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":196,"date":"2016-02-13 19:09:09.915738","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def counter(i):\n        if i == 4:\n            return 1\n        return g(n-i) + ((i+1)*g(n-(i+1)))\n    counter(1)\n\n\n","after":null,"SubmissionTime":"2016-02-13T19:09:09.915738","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":317,"date":"2016-02-13 19:14:49.753829","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return g(n)\n    return g(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-13T19:14:49.753829","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":196,"date":"2016-02-13 19:16:04.484212","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def counter(i):\n        if i == 4:\n            return 1\n        return g(n-i) + ((i+1)*g(n-(i+1)))\n    return counter(1)\n\n\n","after":null,"SubmissionTime":"2016-02-13T19:16:04.484212","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":565,"date":"2016-02-13 19:29:04.055697","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 * G(n-2) + 3 * g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-13T19:29:04.055697","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":687,"date":"2016-02-13 20:52:42.552118","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n \n    if n <= 3:\n        return n\n    else:\n        return helper(n - 1) + 2 * helper(n - 2) + 3 * helper(n - 3)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T20:52:42.552118","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":779,"date":"2016-02-13 21:07:10.305171","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return (n-1)+2*(n-2)+3*(n-3)\n\n","after":null,"SubmissionTime":"2016-02-13T21:07:10.305171","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":197,"date":"2016-02-13 21:13:25.764598","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return (n-1) + 2*(n-2) + 3*(n-3)\n","after":null,"SubmissionTime":"2016-02-13T21:13:25.764598","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":779,"date":"2016-02-13 21:15:15.631798","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return G(n) \n    else:\n        return (n-1)+2*(n-2)+3*(n-3) + G(n-1)\n\n","after":null,"SubmissionTime":"2016-02-13T21:15:15.631798","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":779,"date":"2016-02-13 21:21:12.912154","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n \n    else:\n        return (n-1)+2*(n-2)+3*(n-3) + (n+1) \n\n","after":null,"SubmissionTime":"2016-02-13T21:21:12.912154","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":611,"date":"2016-02-13 21:30:30.762185","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n    \treturn n\n    else:\n    \treturn n*g(n-1)\n","after":null,"SubmissionTime":"2016-02-13T21:30:30.762185","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return 1*g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":869,"date":"2016-02-13 21:41:21.184780","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-13T21:41:21.18478","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":867,"date":"2016-02-13 22:08:01.314794","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        i = 0\n        x = 1\n        while i != 3:\n            return x * g(n - 1)\n            i += 1\n            x += 1\n\n","after":null,"SubmissionTime":"2016-02-13T22:08:01.314794","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":859,"date":"2016-02-13 22:43:25.349770","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <=3:\n        return n\n    else:\n        g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-13T22:43:25.34977","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":104,"date":"2016-02-13 22:48:06.886988","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n","after":null,"SubmissionTime":"2016-02-13T22:48:06.886988","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":104,"date":"2016-02-13 22:50:41.088670","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3 (g-3)\n","after":null,"SubmissionTime":"2016-02-13T22:50:41.08867","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":104,"date":"2016-02-13 22:50:57.380671","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3*(g-3)\n","after":null,"SubmissionTime":"2016-02-13T22:50:57.380671","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":104,"date":"2016-02-13 22:51:17.048133","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 * (g(n-2)) + 3*((g-3))\n","after":null,"SubmissionTime":"2016-02-13T22:51:17.048133","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":104,"date":"2016-02-13 22:52:33.706839","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) \n","after":null,"SubmissionTime":"2016-02-13T22:52:33.706839","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":104,"date":"2016-02-13 22:56:57.896485","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + (2 *(g(n-2))) + 3((3 * g(n-2)))\n","after":null,"SubmissionTime":"2016-02-13T22:56:57.896485","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":104,"date":"2016-02-13 23:00:15.799062","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    sum_g = 0\n    i = 0\n    if n <= 3:\n        return n\n    else:\n        i += 1\n        sum_g = sum_g +  i * g(n-i)\n        return sum_g\n","after":null,"SubmissionTime":"2016-02-13T23:00:15.799062","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":208,"date":"2016-02-13 23:00:29.602965","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-13T23:00:29.602965","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":208,"date":"2016-02-13 23:00:54.654672","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n < 3:\n        return n\n    else: \n        return g(n - 1) + (2 * g(n - 2)) + (3 * g(n - 3))\n\n","after":null,"SubmissionTime":"2016-02-13T23:00:54.654672","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+(2*g(n-2))+(3*g(n-3))","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":104,"date":"2016-02-13 23:01:13.233536","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    sum_g = 0\n    i = 0\n    if n <=3:\n        return n\n    else:\n        i += 1\n        sum_g = sum_g +  i * g(n-i)\n        return sum_g\n","after":null,"SubmissionTime":"2016-02-13T23:01:13.233536","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":104,"date":"2016-02-13 23:01:25.644488","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    sum_g = 0\n    i = 0\n    if n <=3:\n        return n\n    else:\n        i += 1\n        sum_g = sum_g +  i * g(n-i)\n    return sum_g\n","after":null,"SubmissionTime":"2016-02-13T23:01:25.644488","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":104,"date":"2016-02-13 23:02:00.783731","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    sum_g = 0\n    i = 0\n    if n <=3:\n        return n\n    else:\n        i += 1\n        sum_g = sum_g +  i * g(n-i) \n    return sum_g\n","after":null,"SubmissionTime":"2016-02-13T23:02:00.783731","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 23:08:18.563931","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def helper(n):\n        if n <= 3:\n            return n\n        else:\n            return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n    return helper(n)\n\n\n","after":null,"SubmissionTime":"2016-02-13T23:08:18.563931","SynthesizedAfter":"\r\ndef g(n):\r\n    def helper(n):\r\n        if n<=3:\r\n            return n\r\n        else:\r\n            return g(n-1)+2*g(n-2)+3*g(n-3)\r\n    return helper(n)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 23:09:06.795885","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def helper(n):\n        if n <= 3:\n            return n\n        else:\n            return (n - 1) + 2 * (n - 2) + 3 * (n - 3)\n    return helper(n)\n\n\n","after":null,"SubmissionTime":"2016-02-13T23:09:06.795885","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1018,"date":"2016-02-14 00:37:51.561526","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=1:\n        return n\n    def num(a):\n        if a==1:\n            return answer\n        else: \n            answer+=a*g(n-a)\n            return num(a-1)\n    return num(a=n)\n        \n    \n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-14T00:37:51.561526","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1018,"date":"2016-02-14 00:39:18.359520","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    def num(a,answer=1):\n        if a==1:\n            return answer-1\n        else: \n            answer+=a*g(n-a)\n            return num(a-1)\n    return num(a=n)\n        \n    \n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-14T00:39:18.35952","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1018,"date":"2016-02-14 00:41:02.299288","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    def num(a,answer=1):\n        if a==1:\n            return answer-1\n        else: \n            answer+=a*g(n-a)\n            return num(a-1,answer)\n    return num(a=n)\n        \n    \n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-14T00:41:02.299288","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1018,"date":"2016-02-14 00:41:46.000695","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    def num(a,answer=1):\n        if a<1:\n            return answer-1\n        else: \n            answer+=a*g(n-a)\n            return num(a-1,answer)\n    return num(a=n)\n        \n    \n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-14T00:41:46.000695","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1018,"date":"2016-02-14 00:45:30.451159","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    def num(a,answer=1):\n        if a<=1:\n            return answer-1\n        else: \n            answer+=a*g(n-a)\n            return num(a-1,answer)\n    return num(a=n)\n        \n    \n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-14T00:45:30.451159","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1018,"date":"2016-02-14 00:47:31.075655","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    def num(a,answer=1):\n        if a<1:\n            return answer-1\n        else: \n            answer+=a*g(n-a)\n            return num(a-1,answer)\n    return num(a=n)\n        \n    \n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-14T00:47:31.075655","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":438,"date":"2016-02-14 01:08:14.961365","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    stop = n - 3\n    if n <= 3:\n        return n\n    else: \n        return (n - 1) + g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-14T01:08:14.961365","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":724,"date":"2016-02-14 01:20:59.628821","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        a= 1\n        return n + (a+1)* g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-14T01:20:59.628821","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":724,"date":"2016-02-14 01:22:37.873040","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        a= n-1\n        return n + (n-a)* g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-14T01:22:37.87304","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":724,"date":"2016-02-14 01:29:26.341533","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(x):\n        if n <= 3:\n            return n\n        else:\n            x=+ 1\n        return n + x* g(n-1)\n    return helper(x)\n\n","after":null,"SubmissionTime":"2016-02-14T01:29:26.341533","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":724,"date":"2016-02-14 01:29:47.781670","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(x):\n        if n <= 3:\n            return n\n        else:\n            x=+ 1\n        return n + x* g(n-1)\n    return helper\n\n","after":null,"SubmissionTime":"2016-02-14T01:29:47.78167","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":724,"date":"2016-02-14 01:51:43.606993","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x=0\n    def x():\n        return x+1\n    if n <= 3:\n        return n\n    elif n>3:\n        return n + x* g(n-1)\n    else:\n        x +=1\n        return x \n\n\n","after":null,"SubmissionTime":"2016-02-14T01:51:43.606993","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":724,"date":"2016-02-14 01:52:26.615900","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x=1\n    if n <= 3:\n        return n\n    elif n>3:\n        return n + x* g(n-1)\n    x +=1\n       \n\n\n","after":null,"SubmissionTime":"2016-02-14T01:52:26.6159","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":724,"date":"2016-02-14 01:52:55.605743","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x=1\n    if n <= 3:\n        return n\n    elif n>3:\n        x +=1\n        return n + x* g(n-1)\n    \n       \n\n\n","after":null,"SubmissionTime":"2016-02-14T01:52:55.605743","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":839,"date":"2016-02-14 09:42:27.048319","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k = 1\n    if  n == 0:\n        return 1\n    else:\n        return g(n - 1) + (k + 1) * g(n - 2)\n        k += 1\n        n -= 1\n\n\n","after":null,"SubmissionTime":"2016-02-14T09:42:27.048319","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":439,"date":"2016-02-14 10:11:41.086572","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    tot = 1 + 2 + 3\n    if n == 0:\n    \treturn identity(n)\n    else: \n    \ttot += g(n - 1)\n    \treturn tot \n\n","after":null,"SubmissionTime":"2016-02-14T10:11:41.086572","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":439,"date":"2016-02-14 10:12:21.993279","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    tot = 1 + 2 + 3\n    if n <= 3:\n    \treturn identity(n)\n    else: \n    \ttot += g(n - 1)\n    \treturn tot \n\n","after":null,"SubmissionTime":"2016-02-14T10:12:21.993279","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":439,"date":"2016-02-14 10:13:19.516184","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    tot = 7\n    if n <= 3:\n    \treturn identity(n)\n    else: \n    \ttot += g(n - 1)\n    \treturn tot \n\n","after":null,"SubmissionTime":"2016-02-14T10:13:19.516184","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":439,"date":"2016-02-14 10:16:33.839229","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    tot = 6\n    if n <= 3:\n    \treturn identity(n)\n    else: \n    \ttot += accumulate(add, 0, n, g(n - 1))\n    \treturn tot \n\n","after":null,"SubmissionTime":"2016-02-14T10:16:33.839229","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":439,"date":"2016-02-14 10:18:58.331198","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    tot = 6\n    if n <= 3:\n    \treturn identity(n)\n    \ttot += n\n    else: \n    \ttot += g(n - 1)\n    \treturn tot \n\n","after":null,"SubmissionTime":"2016-02-14T10:18:58.331198","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":439,"date":"2016-02-14 10:28:48.367102","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    tot = 6\n    if n <= 3:\n        return identity(n)\n        tot =+ n \n    else:\n        tot += g(n - 1)\n        return tot \n\n\n #    tot = 6\n #    if n <=3:\n #    \treturn identity(n)\n #    tot += n \n\t# else:\n\t# \ttot += g(n - 1)\n\t# \treturn tot \n\n","after":null,"SubmissionTime":"2016-02-14T10:28:48.367102","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-14 11:23:23.880755","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def helper(x):\n            if x >= 3:\n                return x \n            else:\n                return x * g(n - x) + helper(x+1)\n    return helper(1)\n\n\n\n\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n    \"\"\"\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-14T11:23:23.880755","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1054,"date":"2016-02-14 11:34:26.628160","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        while n > 3:\n            result *= g(n-1)\n        return result\n\n","after":null,"SubmissionTime":"2016-02-14T11:34:26.62816","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1054,"date":"2016-02-14 11:34:45.873579","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    result = 1\n    if n <= 3:\n        return n\n    else:\n        while n > 3:\n            result *= g(n-1)\n        return result\n\n","after":null,"SubmissionTime":"2016-02-14T11:34:45.873579","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1054,"date":"2016-02-14 11:35:58.948173","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        result = n* g(n-1)\n        return result\n\n","after":null,"SubmissionTime":"2016-02-14T11:35:58.948173","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1054,"date":"2016-02-14 11:36:32.322413","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    if n > 3:\n        return n* g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-14T11:36:32.322413","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    if n>3:\r\n        return 1*g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":1054,"date":"2016-02-14 11:37:38.325602","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    if n > 3:\n        return g(n-1)*g(n-2)*g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-14T11:37:38.325602","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1026,"date":"2016-02-14 12:03:06.447558","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        a = 0\n        b = 0\n        c = 0\n        a + (2*b) + (3*c)\n\n        \n\n","after":null,"SubmissionTime":"2016-02-14T12:03:06.447558","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":50,"date":"2016-02-14 12:04:45.855961","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-14T12:04:45.855961","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":142,"date":"2016-02-14 12:17:08.179897","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        total+=g(n-1) + 2*g(n-2) + 3*g(n-3)\n        return total\n\n","after":null,"SubmissionTime":"2016-02-14T12:17:08.179897","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":984,"date":"2016-02-14 12:46:00.741357","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    s>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return g(n-1)+2*g(n-2)+3*g(n-3)\n\n\n\n","after":null,"SubmissionTime":"2016-02-14T12:46:00.741357","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":2,"Id":0,"studentId":439,"date":"2016-02-14 12:50:28.050289","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    tot = 6\n    if n <= 3:\n        return identity(n)\n        tot =+ n \n    else:\n        tot += g(n - 1)\n        return tot \n\n","after":null,"SubmissionTime":"2016-02-14T12:50:28.050289","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":825,"date":"2016-02-14 13:01:16.720944","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n >= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-14T13:01:16.720944","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":439,"date":"2016-02-14 13:03:41.989614","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    tot = 6\n    if n <= 4:\n        return identity(n)\n        tot =+ n \n    else:\n        tot += g(n - 1)\n        return tot \n\n","after":null,"SubmissionTime":"2016-02-14T13:03:41.989614","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":439,"date":"2016-02-14 13:03:58.963230","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    tot = 6\n    if n <= 3:\n        return identity(n)\n        tot =+ n \n    else:\n        tot += g(n - 1)\n        return tot \n\n","after":null,"SubmissionTime":"2016-02-14T13:03:58.96323","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":439,"date":"2016-02-14 13:07:57.703760","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    tot = 6\n    i = 0\n    if n <= 3:\n        return identity(n)\n        tot =+ n \n    elif i <= 3 and n <= 3:\n        tot += g(n - 1)\n        i += 1\n        return tot \n\n","after":null,"SubmissionTime":"2016-02-14T13:07:57.70376","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":439,"date":"2016-02-14 13:09:08.199239","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    tot = 6\n    i = 1\n    if n <= 3:\n        return identity(n)\n        tot =+ n \n    elif i <= 3 and n <= 3:\n        tot += g(n - 1) + i\n        i += 1\n        return tot \n\n","after":null,"SubmissionTime":"2016-02-14T13:09:08.199239","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":439,"date":"2016-02-14 13:10:43.260128","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    tot = 0\n    i = 1\n    if n <= 3:\n        return identity(n)\n        tot =+ n \n    elif i <= 3 and n <= 3:\n        tot += g(n - 1) + i\n        i += 1\n        return tot \n\n","after":null,"SubmissionTime":"2016-02-14T13:10:43.260128","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":839,"date":"2016-02-14 13:15:44.745556","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    '''k = 1\n    if  n == 0:\n        return 1\n    else:\n        return g(n - 1) + (k + 1) * g(n - 2)\n        k += 1\n        n -= 1'''\n\n\n","after":null,"SubmissionTime":"2016-02-14T13:15:44.745556","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":589,"date":"2016-02-14 13:42:12.770187","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k=1\n    if n <= 3:\n        return n\n    else:\n        k = k+1\n        return g(n-1) * k\n\n","after":null,"SubmissionTime":"2016-02-14T13:42:12.770187","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":589,"date":"2016-02-14 13:43:03.693037","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k=1\n    if n <= 3:\n        return n\n    else:\n        k = k+1\n        return g(n)*k+g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-14T13:43:03.693037","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":589,"date":"2016-02-14 13:43:27.445489","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k=1\n    if n <= 3:\n        return n\n    else:\n        k = k+1\n        return n*k+g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-14T13:43:27.445489","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":589,"date":"2016-02-14 13:44:00.479358","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k=1\n    if n <= 3:\n        return n\n    else:\n        k = k+1\n        return 1*k+g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-14T13:44:00.479358","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":589,"date":"2016-02-14 13:44:42.640804","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k=0\n    if n <= 3:\n        return n\n    else:\n        k = k+1\n        return n*k+g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-14T13:44:42.640804","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":589,"date":"2016-02-14 13:47:13.760754","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k=1\n    if n < 3:\n        return n\n    else:\n        k = k+1\n        return n*k+g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-14T13:47:13.760754","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":589,"date":"2016-02-14 13:48:18.465579","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k=1\n    if n <= 3:\n        return n\n    else:\n        k = k+1\n        return n*k+g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-14T13:48:18.465579","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":779,"date":"2016-02-14 13:48:20.940537","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n \n    else:\n        return (n-1)+2*(n-2)+3*(n-3) + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-14T13:48:20.940537","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":589,"date":"2016-02-14 13:50:00.920298","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k=1\n    if n <= 3:\n        return n\n    else:\n        k = k+1\n        return g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-14T13:50:00.920298","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":589,"date":"2016-02-14 13:51:56.382341","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k=0\n    if n <= 3:\n        return n\n    else:\n        k = k+1\n        return n*k + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-14T13:51:56.382341","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":589,"date":"2016-02-14 13:53:38.747847","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k=1\n    if n <= 3:\n        return n\n    else:\n        k = k+1\n        return n*k + g(n-1)*k\n\n","after":null,"SubmissionTime":"2016-02-14T13:53:38.747847","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":589,"date":"2016-02-14 13:53:57.682667","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k=1\n    if n <= 3:\n        return n\n    else:\n        k = k+1\n        return n*(k-1) + g(n-1)*k\n\n","after":null,"SubmissionTime":"2016-02-14T13:53:57.682667","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":589,"date":"2016-02-14 13:54:19.313205","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k=1\n    if n <= 3:\n        return n\n    else:\n        k = k+1\n        return n*(k-1) + g(n-1)*(k-1)\n\n","after":null,"SubmissionTime":"2016-02-14T13:54:19.313205","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":589,"date":"2016-02-14 13:54:42.039390","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k=1\n    if n <= 3:\n        return n\n    else:\n        k = k+1\n        return n*(k-1) + g(n-1)*(k+1)\n        \n\n","after":null,"SubmissionTime":"2016-02-14T13:54:42.03939","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":589,"date":"2016-02-14 13:55:39.838732","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k=2\n    if n <= 3:\n        return n\n    else:\n        k = k+1\n        return n*k + g(n-1)*k\n\n\n","after":null,"SubmissionTime":"2016-02-14T13:55:39.838732","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":589,"date":"2016-02-14 13:56:20.749867","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k=1\n    if n <= 3:\n        return n\n    else:\n        k = k+2\n        return n*k + g(n-1)*k\n\n\n","after":null,"SubmissionTime":"2016-02-14T13:56:20.749867","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-14 13:57:57.710107","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def helper(x):\n            if x >= 3:\n                return x \n            else:\n                return n * g(n - x) + helper(x+1)\n    return helper(1)\n\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n    \"\"\"\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-14T13:57:57.710107","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-14 13:58:57.582365","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def bigger_than_three(x):\n            if x >= 3:\n                return x \n            else:\n                return x * (n - x) + helper(x+1)\n    return bigger_than_three(1)\n\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n    \"\"\"\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-14T13:58:57.582365","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-14 13:59:15.121791","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def bigger_than_three(x):\n            if x >= 3:\n                return x \n            else:\n                return x * (n - x) + bigger_than_three(x+1)\n    return bigger_than_three(1)\n\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n    \"\"\"\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-14T13:59:15.121791","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-14 13:59:43.190603","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def bigger_than_three(x):\n            if x >= 3:\n                return x \n            else:\n                return x * ((n - x) + bigger_than_three(x+1))\n    return bigger_than_three(1)\n\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n    \"\"\"\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-14T13:59:43.190603","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-14 14:00:20.154474","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def bigger_than_three(x):\n            if x >= 3:\n                return x \n            else:\n                return x * g(n - x) + bigger_than_three(x+1)\n    return bigger_than_three(1)\n\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n    \"\"\"\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-14T14:00:20.154474","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-14 14:00:59.918232","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def bigger_than_three(x):\n            if x >= 4:\n                return x \n            else:\n                return x * g(n - x) + bigger_than_three(x+1)\n    return bigger_than_three(1)\n\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n    \"\"\"\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-14T14:00:59.918232","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-14 14:01:09.119884","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def bigger_than_three(x):\n            if x > 3:\n                return x \n            else:\n                return x * g(n - x) + bigger_than_three(x+1)\n    return bigger_than_three(1)\n\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n    \"\"\"\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-14T14:01:09.119884","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":589,"date":"2016-02-14 14:01:13.203253","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k=1\n    if n <= 3:\n        return n\n    else:\n        k = k+1\n        return g(n-1)*(k)\n\n\n","after":null,"SubmissionTime":"2016-02-14T14:01:13.203253","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-14 14:01:54.264173","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def bigger_than_three(x):\n            if x >= 3:\n                return n \n            else:\n                return x * g(n - x) + bigger_than_three(x+1)\n    return bigger_than_three(1)\n\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n    \"\"\"\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-14T14:01:54.264173","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":589,"date":"2016-02-14 14:01:58.635306","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k=1\n    if n <= 3:\n        return n\n    else:\n        k = k+1\n        return g(n-1)*(k-n)\n\n\n","after":null,"SubmissionTime":"2016-02-14T14:01:58.635306","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-14 14:02:09.311639","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def bigger_than_three(x):\n            if x >= 3:\n                return n \n            else:\n                return n * g(n - x) + bigger_than_three(x+1)\n    return bigger_than_three(1)\n\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n    \"\"\"\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-14T14:02:09.311639","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-14 14:02:32.872540","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def bigger_than_three(x):\n            if x > 3:\n                return n \n            else:\n                return x * g(n - x) + bigger_than_three(x+1)\n    return bigger_than_three(1)\n\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n    \"\"\"\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-14T14:02:32.87254","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-14 14:02:45.293033","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def bigger_than_three(x):\n            if x > 2:\n                return n \n            else:\n                return x * g(n - x) + bigger_than_three(x+1)\n    return bigger_than_three(1)\n\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n    \"\"\"\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-14T14:02:45.293033","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-14 14:02:57.021514","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def bigger_than_three(x):\n            if x >= 3:\n                return n-1 \n            else:\n                return x * g(n - x) + bigger_than_three(x+1)\n    return bigger_than_three(1)\n\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n    \"\"\"\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-14T14:02:57.021514","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-14 14:03:14.654293","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def bigger_than_three(x):\n            if x >= 3:\n                return n*x \n            else:\n                return x * g(n - x) + bigger_than_three(x+1)\n    return bigger_than_three(1)\n\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n    \"\"\"\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-14T14:03:14.654293","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":589,"date":"2016-02-14 14:03:31.822925","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k=1\n    if n <= 3:\n        return n\n    else:\n        k = k+1\n        return g(n-1) + g(n-2)\n\n\n","after":null,"SubmissionTime":"2016-02-14T14:03:31.822925","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":589,"date":"2016-02-14 14:04:04.176138","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k=1\n    if n <= 3:\n        return n\n    else:\n        k = k+1\n        return g(n-1)*k + g(n-2)*k\n\n\n","after":null,"SubmissionTime":"2016-02-14T14:04:04.176138","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-14 14:04:31.258274","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def bigger_than_three(x):\n            if x >= 3:\n                return n + x \n            else:\n                return x * g(n - x) + bigger_than_three(x+1)\n    return bigger_than_three(1)\n\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n    \"\"\"\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-14T14:04:31.258274","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-14 14:05:09.265114","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def bigger_than_three(x):\n            if x >= 3:\n                return n  \n            else:\n                return x * (n - x) + bigger_than_three(x+1)\n    return bigger_than_three(1)\n\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n    \"\"\"\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-14T14:05:09.265114","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":589,"date":"2016-02-14 14:06:28.498137","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k=1\n    if n <= 3:\n        return n\n    else:\n        k = k+1\n        return g(n-1)*k + g(n-2)*k + g(n-3)*k\n\n\n","after":null,"SubmissionTime":"2016-02-14T14:06:28.498137","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":589,"date":"2016-02-14 14:06:28.498137","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k=1\n    if n <= 3:\n        return n\n    else:\n        k = k+1\n        return g(n-1)*k + g(n-2)*k + g(n-3)*k\n\n\n","after":null,"SubmissionTime":"2016-02-14T14:06:28.498137","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":589,"date":"2016-02-14 14:06:47.368795","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k=1\n    if n <= 3:\n        return n\n    else:\n        k = k+1\n        return g(n-1) + g(n-2)*k + g(n-3)*k\n\n\n","after":null,"SubmissionTime":"2016-02-14T14:06:47.368795","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":861,"date":"2016-02-14 14:07:11.636442","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    def function(n):\n        if n==1:\n            return\n        x=1\n        x+=1\n        return (n-1+x)*function(n-1)\n    return function(n)\n","after":null,"SubmissionTime":"2016-02-14T14:07:11.636442","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":589,"date":"2016-02-14 14:07:17.697723","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    if n <= 3:\n        return n\n    else:\n       \n        return g(n-1) + g(n-2) + g(n-3)\n\n\n","after":null,"SubmissionTime":"2016-02-14T14:07:17.697723","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":861,"date":"2016-02-14 14:07:34.345655","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    def function(n):\n        if n==1:\n            return 1\n        x=1\n        x+=1\n        return (n-1+x)*function(n-1)\n    return function(n)\n","after":null,"SubmissionTime":"2016-02-14T14:07:34.345655","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":861,"date":"2016-02-14 14:12:27.107293","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x=1\n    if n<=3:\n        return n\n    def function(n):\n        if n==1:\n            return 1\n        x+=1\n        return (n-1+x)*function(n-1)\n    return function(n)\n","after":null,"SubmissionTime":"2016-02-14T14:12:27.107293","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":999,"date":"2016-02-14 14:14:12.852618","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if i <= n:\n        return g(n-1) \n\n\n","after":null,"SubmissionTime":"2016-02-14T14:14:12.852618","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":999,"date":"2016-02-14 14:15:19.247327","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 1\n    if i <= n:\n        i + 1\n    return g(i)\n\n\n","after":null,"SubmissionTime":"2016-02-14T14:15:19.247327","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":466,"date":"2016-02-14 14:15:25.686052","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 1\n    if n <= 3:\n        return n\n    else:\n        return (i) * g(n - i) + (i+1) * g(n - i + 1)\n\n","after":null,"SubmissionTime":"2016-02-14T14:15:25.686052","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":466,"date":"2016-02-14 14:15:25.686052","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 1\n    if n <= 3:\n        return n\n    else:\n        return (i) * g(n - i) + (i+1) * g(n - i + 1)\n\n","after":null,"SubmissionTime":"2016-02-14T14:15:25.686052","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":999,"date":"2016-02-14 14:15:44.961051","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 1\n    if i <= n:\n        return g(i+1)\n\n\n","after":null,"SubmissionTime":"2016-02-14T14:15:44.961051","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":999,"date":"2016-02-14 14:16:01.888997","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 1\n    if i <= n:\n        return g(i+1)\n    return g(i)\n\n\n","after":null,"SubmissionTime":"2016-02-14T14:16:01.888997","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":466,"date":"2016-02-14 14:16:06.082090","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return n + 1\n\n","after":null,"SubmissionTime":"2016-02-14T14:16:06.08209","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":999,"date":"2016-02-14 14:16:12.875332","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 1\n    if i <= n:\n        return g(i+1)\n    return i\n\n\n","after":null,"SubmissionTime":"2016-02-14T14:16:12.875332","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":999,"date":"2016-02-14 14:17:29.859293","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 1\n    if n <= i:\n        return n\n    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-14T14:17:29.859293","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":999,"date":"2016-02-14 14:17:47.075092","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 1\n    if i <= n:\n        return n\n    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-14T14:17:47.075092","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1022,"date":"2016-02-14 14:20:06.916197","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(a):\n        if a <= 3:\n            return G(n)\n        else:\n            if a == n:\n                return g(1)\n            else:\n                return mul((G(n-a) + (a+1)), g(n-1))\n    return helper(n)\n\n","after":null,"SubmissionTime":"2016-02-14T14:20:06.916197","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1022,"date":"2016-02-14 14:20:52.165871","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(a):\n        if a <= 3:\n            return g(n)\n        else:\n            if a == n:\n                return g(1)\n            else:\n                return mul((g(n-a) + (a+1)), g(n-1))\n    return helper(n)\n\n","after":null,"SubmissionTime":"2016-02-14T14:20:52.165871","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1022,"date":"2016-02-14 14:21:09.364471","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(a):\n        if a <= 3:\n            return g(a)\n        else:\n            if a == n:\n                return g(1)\n            else:\n                return mul((g(n-a) + (a+1)), g(n-1))\n    return helper(n)\n\n","after":null,"SubmissionTime":"2016-02-14T14:21:09.364471","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":950,"date":"2016-02-14 14:21:22.866702","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(n, i):\n        if n <= 3:\n            return n\n        else:\n            i += 1\n            return add(i * g(n - 1), (i + 1) * g(n - 2))\n\n    return counter(n, 0) \n\n","after":null,"SubmissionTime":"2016-02-14T14:21:22.866702","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":861,"date":"2016-02-14 14:21:39.629795","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x=1\n    if n<=3:\n        return n\n    def function(n,x):\n        if n==1:\n            return 1\n        x+=1\n        return (n-1+x)*function(n-1)\n    return function(n,x)\n","after":null,"SubmissionTime":"2016-02-14T14:21:39.629795","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":861,"date":"2016-02-14 14:22:11.285320","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x=2\n    if n<=3:\n        return n\n    def function(n,x):\n        if n==1:\n            return 1\n        return (n-1+x)*function(n-1,x+1)\n    return function(n,x)\n","after":null,"SubmissionTime":"2016-02-14T14:22:11.28532","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":999,"date":"2016-02-14 14:22:14.759692","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-14T14:22:14.759692","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":999,"date":"2016-02-14 14:23:02.732177","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 5\n    if n<= 5:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-14T14:23:02.732177","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":999,"date":"2016-02-14 14:24:07.870610","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 2\n    if n<= i:\n        return n\n    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-14T14:24:07.87061","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":861,"date":"2016-02-14 14:25:14.918257","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x=1\n    if n<=3:\n        return n\n    def function(n,x):\n        if n==1:\n            return 1\n        return (n-1+x)*function(n-1,x+1)\n    return function(n,x)\n","after":null,"SubmissionTime":"2016-02-14T14:25:14.918257","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":861,"date":"2016-02-14 14:28:11.374628","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x=2\n    if n<=3:\n        return n\n    def function(n,x):\n        if n==1:\n            return 1\n        return (n-1+x)*function(n-1,x+1)\n    return function(n,x)\n","after":null,"SubmissionTime":"2016-02-14T14:28:11.374628","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":861,"date":"2016-02-14 14:28:42.260765","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x=2\n    if n<=3:\n        return n\n    n+=1\n    def function(n,x):\n        if n==1:\n            return 1\n        return (n-1+x)*function(n-1,x+1)\n    return function(n,x)\n","after":null,"SubmissionTime":"2016-02-14T14:28:42.260765","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":861,"date":"2016-02-14 14:28:48.887732","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x=0\n    if n<=3:\n        return n\n    def function(n,x):\n        if n==1:\n            return 1\n        return (n-1+x)*function(n-1,x+1)\n    return function(n,x)\n","after":null,"SubmissionTime":"2016-02-14T14:28:48.887732","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":861,"date":"2016-02-14 14:31:07.339152","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x=2\n    if n<=3:\n        return n\n    n-=1\n    def function(n,x):\n        if n==1:\n            return 1\n        return (n-1+x)*function(n-1,x+1)\n    return function(n,x)\n","after":null,"SubmissionTime":"2016-02-14T14:31:07.339152","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":141,"date":"2016-02-14 14:33:45.910778","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return g(n-1)*1 + g(n-2)*2 + g(n-3)*2\n\n","after":null,"SubmissionTime":"2016-02-14T14:33:45.910778","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":861,"date":"2016-02-14 14:34:14.888770","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x=2\n    if n<=3:\n        return n\n    def function(n,x):\n        if n==2:\n            return 1\n        return (n-1+x)*function(n-1,x+1)\n    return function(n,x)\n","after":null,"SubmissionTime":"2016-02-14T14:34:14.88877","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":861,"date":"2016-02-14 14:35:06.400525","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x=2\n    if n<=3:\n        return n\n    def function(n,x):\n        if n==1:\n            return 1\n        return (n-1+x)*function(n-1,x+1)\n    return function(n,x)\n","after":null,"SubmissionTime":"2016-02-14T14:35:06.400525","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":861,"date":"2016-02-14 14:36:10.620249","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x=2\n    if n<=3:\n        return n\n    def function(n,x):\n        if n==2:\n            return 1\n        return (n-1+x)*function(n-1,x+1)\n    return function(n,x)\n","after":null,"SubmissionTime":"2016-02-14T14:36:10.620249","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":987,"date":"2016-02-14 14:46:00.938797","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n > 0:\n        return g(n) + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-14T14:46:00.938797","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":987,"date":"2016-02-14 14:47:00.956487","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    while n > 0:\n        return g(n) + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-14T14:47:00.956487","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":987,"date":"2016-02-14 14:49:17.768828","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    while n > 0:\n        if n <= 3:\n            return n\n        elif n >3:\n            return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-14T14:49:17.768828","SynthesizedAfter":"\r\ndef g(n):\r\n    while n>0:\r\n        if n<=3:\r\n            return n\r\n        elif n>3:\r\n            return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":861,"date":"2016-02-14 14:50:31.726184","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if x <=3:\n        return n \n    else:\n        def G(n):\n            def another(x):\n                if n==1:\n                    return 1\n                else:\n                    return x\n            return n+another(x+1)\n        return G(n-1)\n\n\n\n\n    \"\"\"x=2\n    if n<=3:\n        return n\n    def function(n,x):\n        if n==2:\n            return 1\n        return (n-1+x)*function(n-1,x+1)\n    return function(n,x)\"\"\"\n\n","after":null,"SubmissionTime":"2016-02-14T14:50:31.726184","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":861,"date":"2016-02-14 14:50:48.169929","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <=3:\n        return n \n    else:\n        def G(n):\n            def another(x):\n                if n==1:\n                    return 1\n                else:\n                    return x\n            return n+another(x+1)\n        return G(n-1)\n\n\n\n\n    \"\"\"x=2\n    if n<=3:\n        return n\n    def function(n,x):\n        if n==2:\n            return 1\n        return (n-1+x)*function(n-1,x+1)\n    return function(n,x)\"\"\"\n\n","after":null,"SubmissionTime":"2016-02-14T14:50:48.169929","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":950,"date":"2016-02-14 14:52:26.122279","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(n, i):\n        if n <= 3:\n            return n\n        else:\n            i += 1\n            return accumulate(add, 0, n, lambda n: i * g(n - 1))\n\n    return counter(n, 0) \n\n\n","after":null,"SubmissionTime":"2016-02-14T14:52:26.122279","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":950,"date":"2016-02-14 14:54:20.706271","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(n, i):\n        if n <= 3:\n            return n\n        else:\n            i += 1\n            return accumulate(add, 0, n, lambda n: i * g(n - i))\n\n    return counter(n, 0) \n\n\n","after":null,"SubmissionTime":"2016-02-14T14:54:20.706271","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":950,"date":"2016-02-14 14:55:08.264221","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(n, i):\n        if n <= 3:\n            return n\n        else:\n            i += 1\n            return i * g(n - 1)\n\n    return counter(n, 0) \n\n# accumulate(add, 0, n, lambda n: i * g(n - 1))\n\n","after":null,"SubmissionTime":"2016-02-14T14:55:08.264221","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":950,"date":"2016-02-14 14:57:18.373300","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(n, i):\n        if n <= 3:\n            return n\n        else:\n            i += 1\n            return add(0, i * g(n - 1))\n\n\n    # accumulate(add, 0, n, lambda n: i * g(n - 1))\n\n    return counter(n, 0) \n\n\n","after":null,"SubmissionTime":"2016-02-14T14:57:18.3733","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1022,"date":"2016-02-14 15:02:06.179747","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(a):\n        if n <= 3:\n            return n\n        else:\n            return mul(g(n - a) + (a + 1), g(n - (a+1)) + (a + 2))\n    return helper(n)\n\n","after":null,"SubmissionTime":"2016-02-14T15:02:06.179747","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1022,"date":"2016-02-14 15:05:49.936365","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(a):\n        if n <= 3:\n            return n\n        else:\n            return mul(g(n - a) + (a + 1), g(n - (a+1)) + (a + 2))\n    return helper(1)\n\n","after":null,"SubmissionTime":"2016-02-14T15:05:49.936365","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":1022,"date":"2016-02-14 15:06:38.724334","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(a):\n        if a == n and n <= 3:\n            return n\n        else:\n            return mul(g(n - a) + (a + 1), g(n - (a+1)) + (a + 2))\n    return helper(1)\n\n","after":null,"SubmissionTime":"2016-02-14T15:06:38.724334","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1022,"date":"2016-02-14 15:07:01.666024","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(a):\n        if a <= 3:\n            return n\n        else:\n            return mul(g(n - a) + (a + 1), g(n - (a+1)) + (a + 2))\n    return helper(n)\n\n","after":null,"SubmissionTime":"2016-02-14T15:07:01.666024","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":223,"date":"2016-02-14 15:09:29.985471","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n \n    else:\n        return G(n - 1) + 2 * G(n-2)\n\n    #G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n","after":null,"SubmissionTime":"2016-02-14T15:09:29.985471","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":223,"date":"2016-02-14 15:09:53.465056","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n \n    else:\n        return g(n - 1) + 2 * g(n-2)\n\n    #G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n","after":null,"SubmissionTime":"2016-02-14T15:09:53.465056","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":950,"date":"2016-02-14 15:14:35.928557","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(n, i):\n        if n <= 3:\n            return n\n        else:\n            i += 1\n            return (i * g(n - 1)) + (i * g(n -2))\n\n    return counter(n, 0) \n\n# accumulate(add, 0, n, lambda n: i * g(n - 1)) \n\n","after":null,"SubmissionTime":"2016-02-14T15:14:35.928557","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":950,"date":"2016-02-14 15:17:13.647271","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(n, i):\n        \n        def term2(n):\n            i += 1\n            return i * g(n - 1)\n        \n        if n <= 3:\n            return n\n        else:\n            i += 1\n            return accumulate(add, 0, n, term2) \n\n    return counter(n, 0) \n\n","after":null,"SubmissionTime":"2016-02-14T15:17:13.647271","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":950,"date":"2016-02-14 15:17:33.468550","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(n, i):\n        \n        def term2(n, i):\n            i += 1\n            return i * g(n - 1)\n        \n        if n <= 3:\n            return n\n        else:\n            i += 1\n            return accumulate(add, 0, n, term2) \n\n    return counter(n, 0) \n\n","after":null,"SubmissionTime":"2016-02-14T15:17:33.46855","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":103,"date":"2016-02-14 15:17:45.493833","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k=1\n    def G(n, k):\n        if n<=3:\n            return n\n        else:\n            n+=k*(n-k)\n            return G(n, k+1)\n    return G(n, k)\n\n","after":null,"SubmissionTime":"2016-02-14T15:17:45.493833","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":103,"date":"2016-02-14 15:18:04.117430","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k=1\n    def G(n, k):\n        if n<=3:\n            return n\n        else:\n            n+=k*(n)\n            return G(n-1, k)\n    return G(n, k)\n\n","after":null,"SubmissionTime":"2016-02-14T15:18:04.11743","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":103,"date":"2016-02-14 15:18:24.195843","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k=1\n    def G(n, k):\n        if n<=3:\n            return n\n        else:\n            n+=k*(n)\n            return G(n-1, k+1)\n    return G(n, k)\n\n","after":null,"SubmissionTime":"2016-02-14T15:18:24.195843","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":950,"date":"2016-02-14 15:18:57.775602","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(n, i):\n        \n        def term2(n, i):\n            i += 1\n            return i * g(n - 1)\n        \n        if n <= 3:\n            return n\n        else:\n            return accumulate(add, 0, n, term2(n, i)) \n\n    return counter(n, 0) \n\n","after":null,"SubmissionTime":"2016-02-14T15:18:57.775602","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":6,"date":"2016-02-14 15:21:40.022434","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    minusnum=1\n    addnum=2   \n    def secondcase(n, minusnum, addnum):\n        if n<=3:\n            return n\n        elif minusnum==3:\n            return secondcase(n-minusnum, minusnum+1, 0)\n        elif minusnum>3:\n            return 1\n        else:\n            return (secondcase(n-minusnum, minusnum, 0)+ addnum)*secondcase(n-(minusnum+1), minusnum+1, addnum+1)\n    return secondcase(n, minusnum, addnum)\n\n","after":null,"SubmissionTime":"2016-02-14T15:21:40.022434","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":950,"date":"2016-02-14 15:22:11.180321","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(n, i):\n        \n        def term2(n):\n            i += 1\n            return i * g(n - 1)\n        \n        if n <= 3:\n            return n\n        else:\n            return accumulate(add, 0, n, term2) \n\n    return counter(n, 0) \n\n","after":null,"SubmissionTime":"2016-02-14T15:22:11.180321","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":103,"date":"2016-02-14 15:23:10.240220","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k=1\n    total=0\n    n-=1\n    def G(n, k, total):\n        if n==3:\n            return n\n        else:\n            return G(n-1, k+1, total=total+k*n)\n    return G(n, k, total)\n\n","after":null,"SubmissionTime":"2016-02-14T15:23:10.24022","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":103,"date":"2016-02-14 15:23:27.183801","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k=1\n    total=0\n    n-=1\n    def G(n, k, total):\n        if n<=3:\n            return n\n        else:\n            return G(n-1, k+1, total=total+k*n)\n    return G(n, k, total)\n\n","after":null,"SubmissionTime":"2016-02-14T15:23:27.183801","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":950,"date":"2016-02-14 15:23:31.464601","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(n, i):\n        \n        def counter(i):\n            i += 1\n            return i\n            \n        if n <= 3:\n            return n\n        else:\n            return accumulate(add, 0, n, lambda n: counter() * g(n - 1)) \n\n    return counter(n, 0) \n\n","after":null,"SubmissionTime":"2016-02-14T15:23:31.464601","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":103,"date":"2016-02-14 15:23:46.959702","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k=0\n    total=0\n    n=1\n    def G(n, k, total):\n        if n<=3:\n            return n\n        else:\n            return G(n-1, k+1, total=total+k*n)\n    return G(n, k, total)\n\n","after":null,"SubmissionTime":"2016-02-14T15:23:46.959702","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":103,"date":"2016-02-14 15:23:57.343506","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k=0\n    total=0\n    def G(n, k, total):\n        if n<=3:\n            return n\n        else:\n            return G(n-1, k+1, total=total+k*n)\n    return G(n, k, total)\n\n","after":null,"SubmissionTime":"2016-02-14T15:23:57.343506","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":950,"date":"2016-02-14 15:24:08.093851","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(n, i):\n        \n        def counter2(i):\n            i += 1\n            return i\n\n        if n <= 3:\n            return n\n        else:\n            return accumulate(add, 0, n, lambda n: counter2(i) * g(n - 1)) \n\n    return counter(n, 0) \n\n","after":null,"SubmissionTime":"2016-02-14T15:24:08.093851","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":950,"date":"2016-02-14 15:26:31.368843","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(n, i):\n        \n        def counter2(i):\n            if i == n:\n                return n\n            else:\n                i += 1\n                return i\n\n        if n <= 3:\n            return n\n        else:\n            return accumulate(add, 0, n, lambda n: counter2(i) * g(n - 1)) \n\n    return counter(n, 0) \n\n","after":null,"SubmissionTime":"2016-02-14T15:26:31.368843","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":103,"date":"2016-02-14 15:27:10.950998","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k=1\n    total=0\n    def G(n, k, total):\n        if n==0:\n            return total\n        else:\n            return G(n-1, k+1, total=total+k*n)\n    if n<=3:\n        return n\n    else:\n        return G(n, k, total)\n\n","after":null,"SubmissionTime":"2016-02-14T15:27:10.950998","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":950,"date":"2016-02-14 15:27:58.261977","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(n):\n        \n        def counter2(i):\n            if i == n:\n                return n\n            else:\n                return counter2(i + 1)\n\n        if n <= 3:\n            return n\n        else:\n            return accumulate(add, 0, n, lambda n: counter2(0) * g(n - 1)) \n\n    return counter(n) \n\n","after":null,"SubmissionTime":"2016-02-14T15:27:58.261977","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":103,"date":"2016-02-14 15:28:16.994038","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k=1\n    total=0\n    x=n-1\n    def G(x, k, total):\n        if x==0:\n            return total\n        else:\n            return G(x-1, k+1, total=total+k*x)\n    if n<=3:\n        return n\n    else:\n        return G(n, k, total)\n\n","after":null,"SubmissionTime":"2016-02-14T15:28:16.994038","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":103,"date":"2016-02-14 15:28:37.765457","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k=1\n    total=0\n    x=n-1\n    def G(x, k, total):\n        if x==0:\n            return total\n        else:\n            return G(x-1, k+1, total=total+k*x)\n    if n<=3:\n        return n\n    else:\n        return G(x, k, total)\n\n","after":null,"SubmissionTime":"2016-02-14T15:28:37.765457","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":6,"date":"2016-02-14 15:28:52.826349","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    minusnum=1\n    addnum=2   \n    def secondcase(n, minusnum, addnum):\n        if n<=3:\n            return n\n        elif minusnum==3:\n            return secondcase(n-minusnum, minusnum+1, 0)\n        elif minusnum>3:\n            return 1\n        else:\n            return (secondcase(n-minusnum, minusnum+1, 0)+ addnum)*secondcase(n-(minusnum+1), minusnum+2, addnum+1)\n    return secondcase(n, minusnum, addnum)\n\n","after":null,"SubmissionTime":"2016-02-14T15:28:52.826349","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":6,"date":"2016-02-14 15:29:17.183687","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    minusnum=1\n    addnum=2   \n    def secondcase(n, minusnum, addnum):\n        if n<=3:\n            return n\n        elif minusnum==3:\n            return secondcase(n-minusnum, minusnum+1, 0)\n        elif minusnum>3:\n            return 1\n        else:\n            return (secondcase(n-minusnum, minusnum, 0)+ addnum)*secondcase(n-(minusnum+1), minusnum+2, addnum+1)\n    return secondcase(n, minusnum, addnum)\n\n","after":null,"SubmissionTime":"2016-02-14T15:29:17.183687","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":6,"date":"2016-02-14 15:29:37.275887","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    minusnum=1\n    addnum=2   \n    def secondcase(n, minusnum, addnum):\n        if n<=3:\n            return n\n        elif minusnum==3:\n            return secondcase(n-minusnum, minusnum+1, 0)\n        elif minusnum>3:\n            return 1\n        else:\n            return (secondcase(n-minusnum, minusnum, addnum)+ addnum)*secondcase(n-(minusnum+1), minusnum+2, addnum+1)\n    return secondcase(n, minusnum, addnum)\n\n","after":null,"SubmissionTime":"2016-02-14T15:29:37.275887","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":6,"date":"2016-02-14 15:29:56.857690","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    minusnum=1\n    addnum=2   \n    def secondcase(n, minusnum, addnum):\n        if n<=3:\n            return n\n        elif minusnum==3:\n            return secondcase(n-minusnum, minusnum+1, 0)\n        elif minusnum>3:\n            return 1\n        else:\n            return (secondcase(n-minusnum, minusnum, addnum)+ addnum)*secondcase(n-(minusnum+1), minusnum+1, addnum+1)\n    return secondcase(n, minusnum, addnum)\n\n","after":null,"SubmissionTime":"2016-02-14T15:29:56.85769","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":103,"date":"2016-02-14 15:30:27.437440","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    return g(n-1)+2*g(n-2)+3*g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-14T15:30:27.43744","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":6,"date":"2016-02-14 15:30:55.500141","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    minusnum=1\n    addnum=2   \n    def secondcase(n, minusnum, addnum):\n        if n<=3:\n            return n\n        elif minusnum==3:\n            return secondcase(n-minusnum, minusnum+1, addnum)\n        elif minusnum>3:\n            return 1\n        else:\n            return (secondcase(n-minusnum, minusnum, addnum)+ addnum)*secondcase(n-(minusnum+1), minusnum+1, addnum+1)\n    return secondcase(n, minusnum, addnum)\n\n","after":null,"SubmissionTime":"2016-02-14T15:30:55.500141","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":152,"date":"2016-02-14 15:36:53.101495","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    n = 1\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) * (n+1)\n\n","after":null,"SubmissionTime":"2016-02-14T15:36:53.101495","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1,"date":"2016-02-14 15:37:11.934849","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    if n <= 3:\n    \treturn n\n    else:\n    \treturn g(n-1) + 2* g * (n-2) + 3 * g * (n-3)\n\n\n","after":null,"SubmissionTime":"2016-02-14T15:37:11.934849","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":152,"date":"2016-02-14 15:37:22.988328","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x = 1\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) * (x+1)\n\n","after":null,"SubmissionTime":"2016-02-14T15:37:22.988328","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":152,"date":"2016-02-14 15:37:47.613750","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x = 1\n    if n <= 3:\n        return n\n    else:\n        return n * g(n-1) * (x+1)\n\n","after":null,"SubmissionTime":"2016-02-14T15:37:47.61375","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":152,"date":"2016-02-14 15:38:09.600300","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x = 1\n    if n <= 3:\n        return 1\n    else:\n        return n * g(n-1) * (x+1)\n\n","after":null,"SubmissionTime":"2016-02-14T15:38:09.6003","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":152,"date":"2016-02-14 15:43:52.411136","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x = 1\n    if n <= 3:\n        return n\n    else:\n        return n + g(n-1) * (x+1)\n\n","after":null,"SubmissionTime":"2016-02-14T15:43:52.411136","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":152,"date":"2016-02-14 15:44:51.683430","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x = 1\n    if n <= 3:\n        return n\n    else:\n        return n + g(n-1) * (x-1)\n\n","after":null,"SubmissionTime":"2016-02-14T15:44:51.68343","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":152,"date":"2016-02-14 15:45:02.014325","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x = 1\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) * (x-1)\n\n","after":null,"SubmissionTime":"2016-02-14T15:45:02.014325","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":439,"date":"2016-02-14 15:45:58.136781","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    count = 1\n    if n <= 3:\n        return identity(n)\n    else:\n        return g(n - 1) * count\n        count += 1 \n      \n\n","after":null,"SubmissionTime":"2016-02-14T15:45:58.136781","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":724,"date":"2016-02-14 15:46:12.859042","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x=1\n    if n <= 3:\n        return n\n    elif n>3:\n        x +=1\n        return n + (x+1)* g(n-1)+ (x+1)*g(n-2)\n    \n       \n\n\n","after":null,"SubmissionTime":"2016-02-14T15:46:12.859042","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":152,"date":"2016-02-14 15:46:46.101497","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x = 0\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) * (x+1)\n\n","after":null,"SubmissionTime":"2016-02-14T15:46:46.101497","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":152,"date":"2016-02-14 15:46:58.041751","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x = 0\n    if n <= 3:\n        return n\n    else:\n        return n + (g(n-1) * (x+1))\n\n","after":null,"SubmissionTime":"2016-02-14T15:46:58.041751","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":724,"date":"2016-02-14 15:47:24.652345","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x=1\n    if n <= 3:\n        return n\n    elif n==4:\n        return n + (x+1)* g(n-1)\n    elif n==5:\n        x +=1\n        return n + (x+1)* g(n-1)+ (x+1)*g(n-2)\n    \n       \n\n\n","after":null,"SubmissionTime":"2016-02-14T15:47:24.652345","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":724,"date":"2016-02-14 15:47:43.425571","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x=1\n    if n <= 3:\n        return n\n    elif n==4:\n        return n + (x+1)* g(n-1)\n    elif n==5:\n        x +=1\n        return n + (x+1)* g(n-1)+ (x+2)*g(n-2)\n    \n       \n\n\n","after":null,"SubmissionTime":"2016-02-14T15:47:43.425571","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":439,"date":"2016-02-14 15:48:58.570706","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    count = 1\n    if n <= 3:\n        return identity(n)\n    else:\n        tot +=  g(n - 1) * count\n        count += 1 \n    return tot\n      \n\n","after":null,"SubmissionTime":"2016-02-14T15:48:58.570706","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":724,"date":"2016-02-14 15:49:49.608582","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x=1\n    if n <= 3:\n        return n\n    elif n<=4:\n        return n + (x+1)* g(n-1)\n    elif n>=5:\n        x +=1\n        return n + (x+1)* g(n-1)+ (x+2)*g(n-2)\n    \n       \n\n\n","after":null,"SubmissionTime":"2016-02-14T15:49:49.608582","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":724,"date":"2016-02-14 15:50:18.782535","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x=1\n    if n <= 3:\n        return n\n    elif n<=4:\n        return n + (x+1)* g(n-1)\n    elif n>=5:\n        x +=1\n        return n + (x+1)* (n-1)+ (x+2)*g(n-2)\n    \n       \n\n\n","after":null,"SubmissionTime":"2016-02-14T15:50:18.782535","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":439,"date":"2016-02-14 15:50:19.937928","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    count = 1\n    if n <= 3:\n        return identity(n)\n        tot += n \n    else:\n        tot +=  g(n - 1) * count\n        count += 1 \n    return tot\n      \n\n","after":null,"SubmissionTime":"2016-02-14T15:50:19.937928","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":336,"date":"2016-02-14 15:56:35.063618","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-14T15:56:35.063618","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":922,"date":"2016-02-14 16:06:22.033533","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    #elif n == 4:\n        #return g(n-1) + 2*g(n-2) + 3*g(n-3)\n    else:\n        return g(n-1) + n*g(n)\n\n","after":null,"SubmissionTime":"2016-02-14T16:06:22.033533","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":922,"date":"2016-02-14 16:07:17.567151","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    #elif n == 4:\n        #return g(n-1) + 2*g(n-2) + 3*g(n-3)\n    else:\n        return n*g(n-1) + n*g(n-2)\n\n","after":null,"SubmissionTime":"2016-02-14T16:07:17.567151","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":922,"date":"2016-02-14 16:10:20.743130","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    #elif n == 4:\n        #return g(n-1) + 2*g(n-2) + 3*g(n-3)\n    else:\n        return dummy*g(n) + (dummy + 1)*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-14T16:10:20.74313","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":374,"date":"2016-02-14 16:11:48.798833","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return n + g(n-1) + (n-1)\n        n -= 1\n\n","after":null,"SubmissionTime":"2016-02-14T16:11:48.798833","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":439,"date":"2016-02-14 16:13:30.499322","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return z(n - 1) + 2 * z(n - 2) + 3 * z(n - 3)\n\n#     tot = 0\n#     count = 1\n#     if n <= 3:\n#         return identity(n)\n#         tot += n\n#     elif:\n#         tot += g(n - 1) * counter\n#         return tot\n\n\n#     def counter:\n#         if count <= n - 1:\n#             return count += 1 \n      \n\n","after":null,"SubmissionTime":"2016-02-14T16:13:30.499322","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":374,"date":"2016-02-14 16:15:15.529372","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return G(n-1) + (n-2)\n        n -= 1\n\n","after":null,"SubmissionTime":"2016-02-14T16:15:15.529372","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":374,"date":"2016-02-14 16:15:21.476625","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + (n-2)\n        n -= 1\n\n","after":null,"SubmissionTime":"2016-02-14T16:15:21.476625","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":895,"date":"2016-02-14 16:21:11.038837","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return n+g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-14T16:21:11.038837","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":922,"date":"2016-02-14 16:22:34.004201","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    elif n == 4:\n        return 1*g(n-1) + 2*g(n-2) + 3*g(n-3) + 4*g(n-4)\n    else:\n        return (dummy)*g(n-dummy)\n\n","after":null,"SubmissionTime":"2016-02-14T16:22:34.004201","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":112,"date":"2016-02-14 16:22:42.137196","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + n\n\n","after":null,"SubmissionTime":"2016-02-14T16:22:42.137196","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":908,"date":"2016-02-14 16:22:44.252879","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-14T16:22:44.252879","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":398,"date":"2016-02-14 16:22:49.313691","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        return g(n-1) + g(n-2) + g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-14T16:22:49.313691","SynthesizedAfter":"\r\ndef g(n):\r\n    if n==1:\r\n        return 1\r\n    elif n==2:\r\n        return 2\r\n    elif n==3:\r\n        return 3\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":922,"date":"2016-02-14 16:22:51.113683","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    #elif n == 4:\n        #return 1*g(n-1) + 2*g(n-2) + 3*g(n-3) + 4*g(n-4)\n    else:\n        return (dummy)*g(n-dummy)\n\n","after":null,"SubmissionTime":"2016-02-14T16:22:51.113683","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":112,"date":"2016-02-14 16:22:54.948596","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n < 3:\n        return n\n    else:\n        return g(n-1) + n\n\n","after":null,"SubmissionTime":"2016-02-14T16:22:54.948596","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":112,"date":"2016-02-14 16:23:06.322305","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + n\n\n","after":null,"SubmissionTime":"2016-02-14T16:23:06.322305","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":112,"date":"2016-02-14 16:24:33.156214","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1)*n + n\n\n","after":null,"SubmissionTime":"2016-02-14T16:24:33.156214","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":895,"date":"2016-02-14 16:29:52.155377","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return n*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-14T16:29:52.155377","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return 1*g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":922,"date":"2016-02-14 16:33:14.028835","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    elif n == 4:\n        return 1*g(n-1) + 2*g(n-2) + 3*g(n-3) + 4*g(n-4)\n    #else:\n        #return (dummy)*g(n-dummy) + (dummy+1)*g((n-2)\n\n","after":null,"SubmissionTime":"2016-02-14T16:33:14.028835","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":340,"date":"2016-02-14 16:36:31.709706","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return 1\n    else:\n        return n*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-14T16:36:31.709706","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":340,"date":"2016-02-14 16:37:37.962568","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        return n*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-14T16:37:37.962568","SynthesizedAfter":"\r\ndef g(n):\r\n    if n==1:\r\n        return 1\r\n    elif n==2:\r\n        return 2\r\n    elif n==3:\r\n        return 3\r\n    else:\r\n        return 1*g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":541,"date":"2016-02-14 16:43:25.379569","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n >= 3:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n    else:\n        return n\n\n\n","after":null,"SubmissionTime":"2016-02-14T16:43:25.379569","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":340,"date":"2016-02-14 16:43:40.835762","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return n + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-14T16:43:40.835762","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":340,"date":"2016-02-14 16:43:53.389631","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return n*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-14T16:43:53.389631","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":340,"date":"2016-02-14 16:45:34.326823","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return n*g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-14T16:45:34.326823","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":296,"date":"2016-02-14 16:49:39.819899","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n in (1, 2, 3):\n        return n\n    return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-14T16:49:39.819899","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":248,"date":"2016-02-14 16:53:33.289659","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n < 3:\n        return n\n    return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-14T16:53:33.289659","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":248,"date":"2016-02-14 16:54:20.139237","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n < 3:\n        return n\n    return g(n-1) + (2 * g(n-2)) + (3 * g(n-3))\n\n","after":null,"SubmissionTime":"2016-02-14T16:54:20.139237","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":412,"date":"2016-02-14 17:11:26.958525","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    def recursion(x, b):\n        if x == n:\n            return n\n        elif b <= 3:\n            return b + recusrion(x+1, b-1)\n        else:\n            return x * recusrion(x+1, b-1)\n\n\n","after":null,"SubmissionTime":"2016-02-14T17:11:26.958525","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":412,"date":"2016-02-14 17:14:01.608808","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    def recursion(x, b):\n        if x == n+1:\n            return n\n        elif b <= 3:\n            return b + recusrion(x+1, b-1)\n        else:\n            return x * recusrion(x+1, b-1)\n    return recursion(1, n)\n\n\n","after":null,"SubmissionTime":"2016-02-14T17:14:01.608808","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":412,"date":"2016-02-14 17:14:23.122676","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    def rec(x, b):\n        if x == n+1:\n            return n\n        elif b <= 3:\n            return b + recusrion(x+1, b-1)\n        else:\n            return x * recusrion(x+1, b-1)\n    return rec(1, n)\n\n\n","after":null,"SubmissionTime":"2016-02-14T17:14:23.122676","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":844,"date":"2016-02-14 17:31:03.054153","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    return identity(n)\n\n","after":null,"SubmissionTime":"2016-02-14T17:31:03.054153","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":483,"date":"2016-02-14 17:34:03.244376","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-14T17:34:03.244376","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":844,"date":"2016-02-14 17:34:33.112406","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        a = b\n        b = c\n        c = ((a * 3) + (b + 2) + c)\n        return c\n\n","after":null,"SubmissionTime":"2016-02-14T17:34:33.112406","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":844,"date":"2016-02-14 17:34:53.853696","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    a = b\n    b = c\n    c = ((a * 3) + (b + 2) + c)\n    if n <= 3:\n        return n\n    else: \n        return c\n\n","after":null,"SubmissionTime":"2016-02-14T17:34:53.853696","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":844,"date":"2016-02-14 17:35:17.895579","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    a, b, c = 1, 2, 3\n    a = b\n    b = c\n    c = ((a * 3) + (b + 2) + c)\n    if n <= 3:\n        return n\n    else: \n        return c\n\n","after":null,"SubmissionTime":"2016-02-14T17:35:17.895579","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":844,"date":"2016-02-14 17:37:04.629361","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    a = 1\n    b = 2\n    c = 3\n    if n > 3: \n        a = b\n        b = c\n        c = ((a * 3) + (b + 2) + c)\n    return c\n\n","after":null,"SubmissionTime":"2016-02-14T17:37:04.629361","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":844,"date":"2016-02-14 17:37:04.629361","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    a = 1\n    b = 2\n    c = 3\n    if n > 3: \n        a = b\n        b = c\n        c = ((a * 3) + (b + 2) + c)\n    return c\n\n","after":null,"SubmissionTime":"2016-02-14T17:37:04.629361","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":844,"date":"2016-02-14 17:39:34.759283","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    a = 1\n    b = 2\n    c = 3\n    while n > 3: \n        a = b\n        b = c\n        c = ((a * 3) + (b + 2) + c)\n    return c\n\n","after":null,"SubmissionTime":"2016-02-14T17:39:34.759283","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":844,"date":"2016-02-14 17:39:49.143326","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    a = 1\n    b = 2\n    c = 3\n    while n > 3: \n        a = b\n        b = c\n        c = ((a * 3) + (b + 2) + c)\n        n = n - 1\n    return c\n\n","after":null,"SubmissionTime":"2016-02-14T17:39:49.143326","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":844,"date":"2016-02-14 17:40:00.375260","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    a = 0\n    b = 1\n    c = 2\n    while n > 3: \n        a = b\n        b = c\n        c = ((a * 3) + (b + 2) + c)\n        n = n - 1\n    return c\n\n","after":null,"SubmissionTime":"2016-02-14T17:40:00.37526","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":844,"date":"2016-02-14 17:40:08.193672","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    a = 1\n    b = 2\n    c = 3\n    while n > 3: \n        a = b\n        b = c\n        c = ((a * 3) + (b + 2) + c)\n        n = n - 1\n    return c\n\n","after":null,"SubmissionTime":"2016-02-14T17:40:08.193672","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1051,"date":"2016-02-14 18:10:58.583255","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n >= 3:\n        return n\n    if n > 3:\n        return g(n-1)+2*g(n-2)+3*g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-14T18:10:58.583255","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":233,"date":"2016-02-14 18:14:24.637872","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def recursive_helper(i):\n        if n <= 3:\n            return n\n        else:\n            return g(recursive_helper(n - 1)) + 2 * g(recursive_helper(n - 2)) + 3 * g(recursive_helper(n - 3))\n    return recursive_helper(n)\n\n","after":null,"SubmissionTime":"2016-02-14T18:14:24.637872","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1004,"date":"2016-02-14 18:20:06.480937","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if (n <= 3):\n        return n\n    return g(n-1) * n-1\n\n","after":null,"SubmissionTime":"2016-02-14T18:20:06.480937","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":582,"date":"2016-02-14 18:41:00.737042","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n","after":null,"SubmissionTime":"2016-02-14T18:41:00.737042","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":265,"date":"2016-02-14 18:41:23.954401","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    else:\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-14T18:41:23.954401","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":1023,"date":"2016-02-14 18:51:33.347090","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<= 3:\n        return n\n    else:\n        return G(n-1) +2*G(n-2) +3*G(n-3)\n\n","after":null,"SubmissionTime":"2016-02-14T18:51:33.34709","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":933,"date":"2016-02-14 19:41:18.072048","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(n):\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)    \n    if n <= 3:\n        return n\n    else:\n        return G(n)\n\n\n","after":null,"SubmissionTime":"2016-02-14T19:41:18.072048","SynthesizedAfter":"\r\ndef g(n):\r\n    def G(n):\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return G(n)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":933,"date":"2016-02-14 19:49:29.224953","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(n):\n        n -= 1\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n    if n <= 3:\n        return n\n    else:\n        return G(n)\n\n","after":null,"SubmissionTime":"2016-02-14T19:49:29.224953","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":933,"date":"2016-02-14 19:54:08.216717","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    #def G(n):\n    #    n -= 1\n    #    return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n    if n <= 3:\n        return n\n    else:\n        return (G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)) + (G(n - 2) + 2 * G(n - 3) + 3 * G(n - 4))\n\n","after":null,"SubmissionTime":"2016-02-14T19:54:08.216717","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":933,"date":"2016-02-14 19:56:05.952882","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(n):\n        if n <= 3:\n            return n\n        else:\n            return (G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)) + (G(n - 2) + 2 * G(n - 3) + 3 * G(n - 4))\n\n","after":null,"SubmissionTime":"2016-02-14T19:56:05.952882","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":933,"date":"2016-02-14 19:56:05.952882","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(n):\n        if n <= 3:\n            return n\n        else:\n            return (G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)) + (G(n - 2) + 2 * G(n - 3) + 3 * G(n - 4))\n\n","after":null,"SubmissionTime":"2016-02-14T19:56:05.952882","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":933,"date":"2016-02-14 19:56:55.590028","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(n):\n        return (G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)) + (G(n - 2) + 2 * G(n - 3) + 3 * G(n - 4))\n\n","after":null,"SubmissionTime":"2016-02-14T19:56:55.590028","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":975,"date":"2016-02-14 19:58:29.137402","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if(n <=3):\n        return n\n    else:\n        nextterm = (n-1) * g(n-1)\n        return (n) * g(n) + (n-1) * g(n-1)\n\n\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-14T19:58:29.137402","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":933,"date":"2016-02-14 20:00:48.203244","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(n):\n        return (G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)) #+ (G(n - 2) + 2 * G(n - 3) + 3 * G(n - 4))\n    return G(n) \n\n","after":null,"SubmissionTime":"2016-02-14T20:00:48.203244","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":933,"date":"2016-02-14 20:05:47.625520","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def G(n):\n        return (G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)) + (G(n - 2) + 2 * G(n - 3) + 3 * G(n - 4)) + (G(n - 3) + 2 * G(n - 4) + 3 * G(n - 5))\n    return G(n)\n\n","after":null,"SubmissionTime":"2016-02-14T20:05:47.62552","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":975,"date":"2016-02-14 20:14:44.459687","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if(n <=3):\n        return n\n    else:\n\n        return (n) * G(n) + g(n-1)\n\n\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-14T20:14:44.459687","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":975,"date":"2016-02-14 20:15:23.467461","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if(n <=3):\n        return n\n    else:\n\n        return (n) + g(n-1)\n\n\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-14T20:15:23.467461","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":975,"date":"2016-02-14 20:16:44.339281","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if(n <=3):\n        return n\n    else:\n\n        return (n)* g(n-1)\n\n\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-14T20:16:44.339281","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":975,"date":"2016-02-14 20:22:50.254352","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if(n <=3):\n        return n\n    else:\n\n        return (n)* g(n) + (n-1) * g(n-1)\n\n\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-14T20:22:50.254352","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":975,"date":"2016-02-14 20:23:43.541035","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if(n <=3):\n        return n\n    else:\n\n        return (n-1)* g(n-1) \n\n\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-14T20:23:43.541035","SynthesizedAfter":"\r\ndef g(n):\r\n    if (n<=3):\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":975,"date":"2016-02-14 20:29:16.275638","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if(n <=3):\n        return n\n    else:\n\n        return (n)* g(n-1) \n\n\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-14T20:29:16.275638","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":722,"date":"2016-02-14 20:44:51.588276","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    counter = 1\n    total = 0\n    def incorporate_counter(n, counter):\n            total = counter*g(n-counter)\n            counter += 1\n            return total + g(n-1)\n    if n > 3 and counter <= n-3:\n        return incorporate_counter(n, counter)\n\n","after":null,"SubmissionTime":"2016-02-14T20:44:51.588276","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":859,"date":"2016-02-14 20:45:09.926312","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <=3:\n        return n\n    else:\n        g(n-1) * g(n-2) * g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-14T20:45:09.926312","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":859,"date":"2016-02-14 20:46:02.869964","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 0:\n        return\n    elif n <= 3:\n        return n\n    else:\n        g(n-1) * g(n-2) * g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-14T20:46:02.869964","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":859,"date":"2016-02-14 20:46:52.026418","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 0:\n        return\n    elif n <= 3 and n > 0:\n        return n\n    else:\n        g(n-1) * g(n-2) * g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-14T20:46:52.026418","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":859,"date":"2016-02-14 20:50:28.856341","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 0:\n        return\n    elif n <= 3 and n > 0:\n        return n\n    else:\n        g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-14T20:50:28.856341","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":722,"date":"2016-02-14 20:51:07.775074","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    counter = 1\n    total = 0\n    def incorporate_counter(n, counter):\n        if n <= 3 or n > 3 and counter >= n-3:\n            return total + n\n        total += counter*g(n-counter)\n        counter += 1\n        if n>3:\n            return total + incorporate_counter(n, counter)\n    return incorporate_counter(n, counter)\n\n","after":null,"SubmissionTime":"2016-02-14T20:51:07.775074","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":722,"date":"2016-02-14 20:52:39.492858","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    counter = 1\n    total = 0\n    def incorporate_variables(n, counter, total):\n        if n <= 3 or n > 3 and counter >= n-3:\n            return total + n\n        total += counter*g(n-counter)\n        counter += 1\n        if n>3:\n            return total + incorporate_variables(n, counter, total)\n    return incorporate_variables(n, counter, total)\n\n","after":null,"SubmissionTime":"2016-02-14T20:52:39.492858","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":722,"date":"2016-02-14 20:54:54.268882","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    counter = 1\n    total = 0\n    def incorporate_variables(n, counter, total):\n        if n <= 3 or n > 3 and counter >= n-3:\n            return total + n\n        total += counter*g(n-counter)\n        counter += 1\n        if n>3:\n            return total + incorporate_variables(n-1, counter, total)\n    return incorporate_variables(n, counter, total)\n\n","after":null,"SubmissionTime":"2016-02-14T20:54:54.268882","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":722,"date":"2016-02-14 20:58:26.179668","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    counter = 1\n    total = 0\n    k = n\n    def incorporate_variables(n, counter, total, k):\n        if n <= 3 or n > 3 and counter >= k-3:\n            return total + n\n        total += counter*g(n-counter)\n        counter += 1\n        if n>3:\n            return total + incorporate_variables(n-1, counter, total, k)\n    return incorporate_variables(n, counter, total)\n\n","after":null,"SubmissionTime":"2016-02-14T20:58:26.179668","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":722,"date":"2016-02-14 20:58:43.395936","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    counter = 1\n    total = 0\n    k = n\n    def incorporate_variables(n, counter, total, k):\n        if n <= 3 or n > 3 and counter >= k-3:\n            return total + n\n        total += counter*g(n-counter)\n        counter += 1\n        if n>3:\n            return total + incorporate_variables(n-1, counter, total, k)\n    return incorporate_variables(n, counter, total, k)\n\n","after":null,"SubmissionTime":"2016-02-14T20:58:43.395936","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":722,"date":"2016-02-14 21:00:17.940177","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    counter = 1\n    total = 0\n    k = n\n    def incorporate_variables(n, counter, total, k):\n        if n <= 3 or n > 3 and counter >= n-3:\n            return total + k\n        total += counter*g(k-counter)\n        counter += 1\n        if n>3:\n            return total + incorporate_variables(n, counter, total, k-1)\n    return incorporate_variables(n, counter, total, k)\n\n","after":null,"SubmissionTime":"2016-02-14T21:00:17.940177","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":722,"date":"2016-02-14 21:00:51.488184","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    counter = 1\n    total = 0\n    k = n\n    def incorporate_variables(n, counter, total, k):\n        if n <= 3 or n > 3 and counter > n-3:\n            return total + k\n        total += counter*g(k-counter)\n        counter += 1\n        if n>3:\n            return total + incorporate_variables(n, counter, total, k-1)\n    return incorporate_variables(n, counter, total, k)\n\n","after":null,"SubmissionTime":"2016-02-14T21:00:51.488184","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":722,"date":"2016-02-14 21:02:58.720446","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    counter = 1\n    total = 0\n    k = n\n    def incorporate_variables(n, counter, total, k):\n        if k <= 3 or n > 3 and counter > n-3:\n            return total + k\n        total += counter*g(k-counter)\n        counter += 1\n        if n>3:\n            return total + incorporate_variables(n, counter, total, k-1)\n    return incorporate_variables(n, counter, total, k)\n\n","after":null,"SubmissionTime":"2016-02-14T21:02:58.720446","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":722,"date":"2016-02-14 21:03:44.900734","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    counter = 1\n    total = 0\n    k = n\n    def incorporate_variables(n, counter, total, k):\n        if k <= 3:\n            return total + k\n        total += counter*g(k-counter)\n        counter += 1\n        if n>3:\n            return total + incorporate_variables(n, counter, total, k-1)\n    return incorporate_variables(n, counter, total, k)\n\n","after":null,"SubmissionTime":"2016-02-14T21:03:44.900734","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":722,"date":"2016-02-14 21:04:09.397864","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    counter = 1\n    total = 0\n    k = n\n    def incorporate_variables(n, counter, total, k):\n        if k <= 3:\n            return total + k\n        total += counter*g(k-counter)\n        counter += 1\n        if k>3:\n            return total + incorporate_variables(n, counter, total, k-1)\n    return incorporate_variables(n, counter, total, k)\n\n","after":null,"SubmissionTime":"2016-02-14T21:04:09.397864","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":648,"date":"2016-02-14 21:19:12.528988","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 0\n    def count_up(x):\n        i += 1\n        return i*x\n\n    if n == 0:\n        return 1\n    elif n <= 3:\n        return n\n    else:\n        return accumulate(mul, 1, n, count_up)\n\n","after":null,"SubmissionTime":"2016-02-14T21:19:12.528988","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":722,"date":"2016-02-14 21:34:01.941032","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    counter = 0\n    total = 0\n    k = n\n    def incorporate_variables(n, counter, total, k):\n        if n <= 3 and n >= 0:\n            return n\n        counter += 1\n        total += counter*g(k-1)\n        if k == 3:\n            return total + (counter+1)*g(k-1) + (counter+2)*g(k-2)\n        if k > 3:\n            return total + incorporate_variables(n, counter, total, k-1)\n    return incorporate_variables(n, counter, total, k)\n\n","after":null,"SubmissionTime":"2016-02-14T21:34:01.941032","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":722,"date":"2016-02-14 21:36:20.169773","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    counter = 0\n    total = 0\n    k = n\n    def incorporate_variables(n, counter, total, k):\n        if n <= 3:\n            return n\n        counter += 1\n        total += counter*g(k-1)\n        if k == 3:\n            return total + (counter+1)*g(k-1) + (counter+2)*g(k-2)\n        if k > 3:\n            return total + incorporate_variables(n, counter, total, k-1)\n    return incorporate_variables(n, counter, total, k)\n\n","after":null,"SubmissionTime":"2016-02-14T21:36:20.169773","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":781,"date":"2016-02-14 21:36:44.513127","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n\n    def g_helper(i):\n        if n-i<=2:\n            return n\n        elif n-i>2:\n            if i<=n:\n                return i*g_helper(n-i) + (i+1)*g_helper(n-(i+1))\n    return g_helper(1)\n\n","after":null,"SubmissionTime":"2016-02-14T21:36:44.513127","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":722,"date":"2016-02-14 21:38:29.673132","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    counter = 0\n    total = 0\n    k = n\n    def incorporate_variables(n, counter, total, k):\n        if n <= 3:\n            return n\n        counter += 1\n        total += counter*incorporate_variables(k-1, counter, total, k)\n        if k == 3:\n            return total + (counter+1)*g(k-1) + (counter+2)*g(k-2)\n        if k > 3:\n            return total + incorporate_variables(n, counter, total, k-1)\n    return incorporate_variables(n, counter, total, k)\n\n","after":null,"SubmissionTime":"2016-02-14T21:38:29.673132","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":651,"date":"2016-02-14 21:39:14.350860","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 3+g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-14T21:39:14.35086","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":722,"date":"2016-02-14 21:41:40.685285","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    counter = 0\n    total = 0\n    k = n\n    def incorporate_variables(n, counter, total, k):\n        if n <= 3:\n            return n\n        counter += 1\n        total += counter*incorporate_variables(k-1, counter, total, k)\n        if k == 3:\n            return total + (counter+1)*incorporate_variables(k-1, counter, total, k-1) + (counter+2)*incorporate_variables(k-2, counter, total, k)\n        if k > 3:\n            return total + incorporate_variables(n, counter, total, k-1)\n    return incorporate_variables(n, counter, total, k)\n\n","after":null,"SubmissionTime":"2016-02-14T21:41:40.685285","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":722,"date":"2016-02-14 21:43:40.478340","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    counter = 0\n    total = 0\n    k = n\n    def incorporate_variables(n, counter, total, k):\n        if n <= 3:\n            return n\n        counter += 1\n        total += counter*incorporate_variables(n, counter, total, k-1)\n        if k == 3:\n            return total + (counter+1)*incorporate_variables(k-1, counter, total, k-1) + (counter+2)*incorporate_variables(k-2, counter, total, k)\n        if k > 3:\n            return total + incorporate_variables(n, counter, total, k-1)\n    return incorporate_variables(n, counter, total, k)\n\n","after":null,"SubmissionTime":"2016-02-14T21:43:40.47834","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":429,"date":"2016-02-14 21:53:14.907956","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1)\n\n\n","after":null,"SubmissionTime":"2016-02-14T21:53:14.907956","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":429,"date":"2016-02-14 21:55:16.432120","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - i) + i*g(n - (i + 1))\n\n\n","after":null,"SubmissionTime":"2016-02-14T21:55:16.43212","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":429,"date":"2016-02-14 21:55:16.432120","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - i) + i*g(n - (i + 1))\n\n\n","after":null,"SubmissionTime":"2016-02-14T21:55:16.43212","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":496,"date":"2016-02-14 21:57:09.473815","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    counter = 0\n    if n <= 3:\n        return n\n    else:\n        counter += 1\n        return counter * g(n-1)\n\n        g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-14T21:57:09.473815","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":429,"date":"2016-02-14 21:57:47.351369","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def helper_function(i, n):\n            if i == n:\n                return 0\n            else:\n                return i*(n - i) + helper_function(i + 1, n)\n            return helper_function(1, n)\n\n\n","after":null,"SubmissionTime":"2016-02-14T21:57:47.351369","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":429,"date":"2016-02-14 21:58:19.095869","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def helper_function(i, n):\n            if i == n:\n                return 0\n            else:\n                return i*(n - i) + helper_function(i + 1, n)\n        return helper_function(1, n)\n\n\n","after":null,"SubmissionTime":"2016-02-14T21:58:19.095869","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":496,"date":"2016-02-14 21:58:40.824794","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    counter = 0\n    if n <= 3:\n        return n\n    else:\n        counter += 1\n        counter * g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-14T21:58:40.824794","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":429,"date":"2016-02-14 21:59:35.100924","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper_function(i, n):\n        if (n - i) <= 3:\n            return (n - i)\n        else:\n            return i*(n - i) + helper_function(i + 1, n)\n    return helper_function(1, n)\n\n\n","after":null,"SubmissionTime":"2016-02-14T21:59:35.100924","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":429,"date":"2016-02-14 22:02:04.660313","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def helper_function(i, n):\n            if i == n:\n                return 0\n            if (n - i) <= 3:\n                return (n - i)\n            else:\n                return i*(n - i) + helper_function(i + 1, n)\n        return helper_function(1, n)\n\n\n","after":null,"SubmissionTime":"2016-02-14T22:02:04.660313","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":221,"date":"2016-02-14 22:04:21.295785","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n>=3:\n        return n\n    else:\n        g(n-1) + 2 * g(n-2) * g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-14T22:04:21.295785","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":722,"date":"2016-02-14 22:04:35.191234","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    counter = 1\n    total = 0\n    k = n\n    def add_var(n, counter, total, k):\n        if n <= 3:\n            return n\n        if k == 3:\n            return total + counter*2 + (counter+1)\n        if k > 3:\n            total += add_var(n, counter, total, k-1)\n            return total + add_var(n, counter+1, total, k-1)\n    return add_var(n, counter, total, k)\n\n\n\n\n    counter = 0\n    total = 0\n    k = n\n    def incorporate_variables(n, counter, total, k):\n        if n <= 3:\n            return n\n        counter += 1\n        total += counter*incorporate_variables(n, counter, total, k-1)\n        if k <= 3: \n            total += (counter+1)*incorporate_variables(n, counter, total, k-1) + (counter+2)*incorporate_variables(n, counter, total, k-2)\n        if k == 3:\n            return total + (counter+1)*incorporate_variables(n, counter, total, k-1) + (counter+2)*incorporate_variables(n, counter, total, k-2)\n        if k > 3:\n            return total + incorporate_variables(n, counter, total, k-1)\n    return incorporate_variables(n, counter, total, k)\n\n","after":null,"SubmissionTime":"2016-02-14T22:04:35.191234","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":852,"date":"2016-02-14 22:05:48.751861","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i=n-3\n    if(n<=3):\n        return n\n    return g(n-1)*(i+1)\n\n","after":null,"SubmissionTime":"2016-02-14T22:05:48.751861","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":852,"date":"2016-02-14 22:06:20.120893","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i=n-3\n    value=1\n    if(n<=3):\n        return n\n    return value+g(n-1)*(i+1)\n\n","after":null,"SubmissionTime":"2016-02-14T22:06:20.120893","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":852,"date":"2016-02-14 22:06:50.939988","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i=n-3\n    if(n<=3):\n        return n\n    return g(n-1)*(i+1)\n\n","after":null,"SubmissionTime":"2016-02-14T22:06:50.939988","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":221,"date":"2016-02-14 22:06:59.548373","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n>=3:\n        return n\n    else:\n        g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-14T22:06:59.548373","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":722,"date":"2016-02-14 22:07:03.379487","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    counter = 1\n    total = 0\n    k = n\n    def add_var(n, counter, total, k):\n        if n <= 3:\n            return n\n        if k == 3:\n            return total + counter*2 + (counter+1)\n        if k > 3:\n            total += add_var(n, counter, total, k-1)\n            return total + counter*add_var(n-1, counter+1, total, k-1)\n    return add_var(n, counter, total, k)\n\n\n\n\n    counter = 0\n    total = 0\n    k = n\n    def incorporate_variables(n, counter, total, k):\n        if n <= 3:\n            return n\n        counter += 1\n        total += counter*incorporate_variables(n, counter, total, k-1)\n        if k <= 3: \n            total += (counter+1)*incorporate_variables(n, counter, total, k-1) + (counter+2)*incorporate_variables(n, counter, total, k-2)\n        if k == 3:\n            return total + (counter+1)*incorporate_variables(n, counter, total, k-1) + (counter+2)*incorporate_variables(n, counter, total, k-2)\n        if k > 3:\n            return total + incorporate_variables(n, counter, total, k-1)\n    return incorporate_variables(n, counter, total, k)\n\n","after":null,"SubmissionTime":"2016-02-14T22:07:03.379487","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":421,"date":"2016-02-14 22:07:06.831109","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    def recursiveG(x):\n        if x <= 3:\n            return 3\n        return recursiveG(x-1) + 2*recursiveG(x-2) + 3*recursiveG(x-3)\n    return recursiveG(n)\n\n","after":null,"SubmissionTime":"2016-02-14T22:07:06.831109","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":221,"date":"2016-02-14 22:07:39.873168","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n>=3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-14T22:07:39.873168","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":421,"date":"2016-02-14 22:08:12.753014","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return n(x-1) + 2*g(n-2) + 3*g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-14T22:08:12.753014","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":421,"date":"2016-02-14 22:08:23.235484","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return n(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-14T22:08:23.235484","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":722,"date":"2016-02-14 22:09:28.116980","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    counter = 1\n    total = 0\n    k = n\n    def add_var(n, counter, total, k):\n        if n <= 3:\n            return n\n        if k == 3:\n            return total + counter*2 + (counter+1)\n        if k > 3:\n            total += counter*add_var(n, counter, total, k-1)\n            return total\n    return add_var(n, counter, total, k)\n\n\n\n\n    counter = 0\n    total = 0\n    k = n\n    def incorporate_variables(n, counter, total, k):\n        if n <= 3:\n            return n\n        counter += 1\n        total += counter*incorporate_variables(n, counter, total, k-1)\n        if k <= 3: \n            total += (counter+1)*incorporate_variables(n, counter, total, k-1) + (counter+2)*incorporate_variables(n, counter, total, k-2)\n        if k == 3:\n            return total + (counter+1)*incorporate_variables(n, counter, total, k-1) + (counter+2)*incorporate_variables(n, counter, total, k-2)\n        if k > 3:\n            return total + incorporate_variables(n, counter, total, k-1)\n    return incorporate_variables(n, counter, total, k)\n\n","after":null,"SubmissionTime":"2016-02-14T22:09:28.11698","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":852,"date":"2016-02-14 22:09:29.453488","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if(n<=3):\n        return n\n    return g(n-1)*(i+1)\n\n","after":null,"SubmissionTime":"2016-02-14T22:09:29.453488","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":852,"date":"2016-02-14 22:09:59.981501","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if(n<=3):\n        return n\n    return g(n-1)*(n)\n\n","after":null,"SubmissionTime":"2016-02-14T22:09:59.981501","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":722,"date":"2016-02-14 22:10:15.041530","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    counter = 1\n    total = 0\n    k = n\n    def add_var(n, counter, total, k):\n        if n <= 3:\n            return n\n        if k == 3:\n            return total + counter*2 + (counter+1)\n        if k > 3:\n            total += counter*add_var(n, counter+1, total, k-1)\n            return total\n    return add_var(n, counter, total, k)\n\n\n\n\n    counter = 0\n    total = 0\n    k = n\n    def incorporate_variables(n, counter, total, k):\n        if n <= 3:\n            return n\n        counter += 1\n        total += counter*incorporate_variables(n, counter, total, k-1)\n        if k <= 3: \n            total += (counter+1)*incorporate_variables(n, counter, total, k-1) + (counter+2)*incorporate_variables(n, counter, total, k-2)\n        if k == 3:\n            return total + (counter+1)*incorporate_variables(n, counter, total, k-1) + (counter+2)*incorporate_variables(n, counter, total, k-2)\n        if k > 3:\n            return total + incorporate_variables(n, counter, total, k-1)\n    return incorporate_variables(n, counter, total, k)\n\n","after":null,"SubmissionTime":"2016-02-14T22:10:15.04153","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":722,"date":"2016-02-14 22:11:42.292103","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    counter = 0\n    total = 0\n    k = n\n    def add_var(n, counter, total, k):\n        if n <= 3:\n            return n\n        if k == 3:\n            return total + (counter+1)*2 + (counter+2)\n        if k > 3:\n            total += (counter+1)*add_var(n, counter+1, total, k-1)\n            return total\n    return add_var(n, counter, total, k)\n\n\n\n\n    counter = 0\n    total = 0\n    k = n\n    def incorporate_variables(n, counter, total, k):\n        if n <= 3:\n            return n\n        counter += 1\n        total += counter*incorporate_variables(n, counter, total, k-1)\n        if k <= 3: \n            total += (counter+1)*incorporate_variables(n, counter, total, k-1) + (counter+2)*incorporate_variables(n, counter, total, k-2)\n        if k == 3:\n            return total + (counter+1)*incorporate_variables(n, counter, total, k-1) + (counter+2)*incorporate_variables(n, counter, total, k-2)\n        if k > 3:\n            return total + incorporate_variables(n, counter, total, k-1)\n    return incorporate_variables(n, counter, total, k)\n\n","after":null,"SubmissionTime":"2016-02-14T22:11:42.292103","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":852,"date":"2016-02-14 22:12:26.597499","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def counter(i):\n        return i+1\n    if(n<=3):\n        return n\n    return g(n-1)*(counter(1))\n\n","after":null,"SubmissionTime":"2016-02-14T22:12:26.597499","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":852,"date":"2016-02-14 22:12:35.058477","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def counter(i):\n        return counter(i+1)\n    if(n<=3):\n        return n\n    return g(n-1)*(counter(1))\n\n","after":null,"SubmissionTime":"2016-02-14T22:12:35.058477","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":429,"date":"2016-02-14 22:13:35.756823","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper_function(i, n):\n        if i == n:\n            return 0\n        else:\n            return i*(n - i) + helper_function(i + 1, n)\n    return helper_function(1, n)\n\n\n","after":null,"SubmissionTime":"2016-02-14T22:13:35.756823","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":852,"date":"2016-02-14 22:17:41.094865","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def counter(i):\n        if(n<=3):\n            return n\n        else:\n            return g(n-1)*(counter(i+1))\n    return counter(1)\n\n","after":null,"SubmissionTime":"2016-02-14T22:17:41.094865","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":852,"date":"2016-02-14 22:18:33.126009","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def counter(i):\n        if(n<=3):\n            return n\n        return g(n-1)*(counter(i+1))\n    return counter(1)\n\n","after":null,"SubmissionTime":"2016-02-14T22:18:33.126009","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":429,"date":"2016-02-14 22:20:07.104986","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        g(n-1) + 2*g(n-2) + 3*(n-3)\n\n\n","after":null,"SubmissionTime":"2016-02-14T22:20:07.104986","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":902,"date":"2016-02-14 22:20:29.641701","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    def g_helper(a,i):\n        if a == 1:\n            return i*a\n        if a <= 3:\n            return i*a + g_helper(a-1,i+1)\n        return i*g_helper(a-1,i+1)\n    return g_helper(n,1)\n\n","after":null,"SubmissionTime":"2016-02-14T22:20:29.641701","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":753,"date":"2016-02-14 22:21:26.581225","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    else:\n        return G(n)*G(n-1)\n\n","after":null,"SubmissionTime":"2016-02-14T22:21:26.581225","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":753,"date":"2016-02-14 22:21:40.334171","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    else:\n        return g(n)*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-14T22:21:40.334171","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":753,"date":"2016-02-14 22:21:58.384359","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    else:\n        return n*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-14T22:21:58.384359","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return 1*g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":902,"date":"2016-02-14 22:22:21.155858","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    def g_helper(a,i):\n        if a == 1:\n            return i*a\n        if a <= 3:\n            return i*a + g_helper(a-1,i+1)\n        return g_helper(a-1,i+1)\n    return g_helper(n,0)\n\n","after":null,"SubmissionTime":"2016-02-14T22:22:21.155858","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":753,"date":"2016-02-14 22:23:32.497774","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==1:\n        return 1\n    elif n<=3:\n        return n\n    else:\n        return g(n)*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-14T22:23:32.497774","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":753,"date":"2016-02-14 22:23:40.773347","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==1:\n        return 1\n    elif n<=3:\n        return n\n    else:\n        return n*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-14T22:23:40.773347","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":753,"date":"2016-02-14 22:24:04.255383","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==1:\n        return 1\n    elif n<=3:\n        return n\n    else:\n        return n*g(n-2)\n\n","after":null,"SubmissionTime":"2016-02-14T22:24:04.255383","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":753,"date":"2016-02-14 22:24:17.763161","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==1:\n        return 1\n    elif n<=3:\n        return n\n    else:\n        return (n-1)*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-14T22:24:17.763161","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":753,"date":"2016-02-14 22:24:29.638876","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==1:\n        return 1\n    elif n<=3:\n        return n\n    else:\n        return (n-2)*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-14T22:24:29.638876","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":753,"date":"2016-02-14 22:24:37.301929","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==1:\n        return 1\n    elif n<=3:\n        return n\n    else:\n        return (n*n)*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-14T22:24:37.301929","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":753,"date":"2016-02-14 22:24:56.947872","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==1:\n        return 1\n    elif n<=3:\n        return n\n    else:\n        return (n-3)*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-14T22:24:56.947872","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":753,"date":"2016-02-14 22:25:07.481558","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==1:\n        return 1\n    elif n<=3:\n        return n\n    else:\n        return g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-14T22:25:07.481558","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":753,"date":"2016-02-14 22:25:13.753698","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==1:\n        return 1\n    elif n<=3:\n        return n\n    else:\n        return g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-14T22:25:13.753698","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":753,"date":"2016-02-14 22:25:33.956594","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==1:\n        return 1\n    elif n<=3:\n        return n\n    else:\n        return g(g(n-1))\n\n","after":null,"SubmissionTime":"2016-02-14T22:25:33.956594","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":753,"date":"2016-02-14 22:25:53.838014","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==1:\n        return 1\n    elif n<=3:\n        return n\n    else:\n        return g(g(n-1)-1)\n\n","after":null,"SubmissionTime":"2016-02-14T22:25:53.838014","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":753,"date":"2016-02-14 22:26:05.202794","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==1:\n        return 1\n    elif n<=3:\n        return n\n    else:\n        return g(g(n-1)*n)\n\n","after":null,"SubmissionTime":"2016-02-14T22:26:05.202794","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":753,"date":"2016-02-14 22:26:19.569413","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==1:\n        return 1\n    elif n<=3:\n        return n\n    else:\n        return g(g(n-1)*(n-1))\n\n","after":null,"SubmissionTime":"2016-02-14T22:26:19.569413","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":107,"date":"2016-02-14 22:43:05.555229","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + g(n-2) + g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-14T22:43:05.555229","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":107,"date":"2016-02-14 22:43:38.849855","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) * g(n-2) * g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-14T22:43:38.849855","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":120,"date":"2016-02-14 22:47:28.391796","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    result = G(n)\n    if n <= 3:\n        result = n\n    else:\n        result = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n    return g(n)\n\n","after":null,"SubmissionTime":"2016-02-14T22:47:28.391796","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":120,"date":"2016-02-14 22:48:59.646965","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        result = n\n    else:\n        result = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n    return g(n)\n\n","after":null,"SubmissionTime":"2016-02-14T22:48:59.646965","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":120,"date":"2016-02-14 22:49:36.217655","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        result = n\n    else:\n        result = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n        return result\n    return g(n)\n\n\n","after":null,"SubmissionTime":"2016-02-14T22:49:36.217655","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":449,"date":"2016-02-14 22:54:41.903846","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(x,y):\n        if x == 0:\n            return 0\n        y += 1\n        return (y*x) + helper(x-1,y)\n    return helper(n-1,0)\n\n","after":null,"SubmissionTime":"2016-02-14T22:54:41.903846","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":962,"date":"2016-02-14 23:10:22.562711","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(n):\n        if n <= 3:\n            return n\n        else:\n            return (G(n-1)+2)*(G(n-2)+3)*G(n-3)\n    return G(n) + g(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-14T23:10:22.562711","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":962,"date":"2016-02-14 23:11:19.946546","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(n):\n        if n <= 3:\n            return n\n        else:\n            return (G(n-1)+2)*(G(n-2)+3)*G(n-3)\n    G(n)\n    return G(n) + g(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-14T23:11:19.946546","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":120,"date":"2016-02-14 23:16:02.232942","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        result = n\n        return result\n    else:\n        result = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n        return result\n    return g(n)\n\n\n","after":null,"SubmissionTime":"2016-02-14T23:16:02.232942","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        result = n\r\n        return result\r\n    else:\r\n        result = g(n-1)+2*g(n-2)+3*g(n-3)\r\n        return result\r\n    return g(n)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":962,"date":"2016-02-14 23:29:29.977890","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return (g(n-1)+2)*(g(n-2)+3)*g(n-3)\n\n\n","after":null,"SubmissionTime":"2016-02-14T23:29:29.97789","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":962,"date":"2016-02-14 23:31:37.434074","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return (g(n-1)+2)*(g(n-2)+3)*g(n-3)\n\n\n","after":null,"SubmissionTime":"2016-02-14T23:31:37.434074","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":330,"date":"2016-02-14 23:44:26.329039","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-14T23:44:26.329039","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":219,"date":"2016-02-14 23:52:00.463374","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3: \n        return n \n    else: \n        return the_g(n-1) + 2 * the_g(n-2) + 3 * the_g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-14T23:52:00.463374","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":1,"Id":0,"studentId":206,"date":"2016-02-15 00:27:06.965668","diff":null,"before":"def g(x):\n        nonlocal n\n        while n > 0:\n            x = f(x)\n            n -= 1\n        return x\n    return g\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if g <= 3:\n        return n\n    else:\n        return g(n-1) + n\n\n","after":null,"SubmissionTime":"2016-02-15T00:27:06.965668","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":206,"date":"2016-02-15 00:27:20.604864","diff":null,"before":"def g(x):\n        nonlocal n\n        while n > 0:\n            x = f(x)\n            n -= 1\n        return x\n    return g\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + n\n\n","after":null,"SubmissionTime":"2016-02-15T00:27:20.604864","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":206,"date":"2016-02-15 00:27:39.422638","diff":null,"before":"def g(x):\n        nonlocal n\n        while n > 0:\n            x = f(x)\n            n -= 1\n        return x\n    return g\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T00:27:39.422638","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":206,"date":"2016-02-15 00:31:23.986100","diff":null,"before":"def g(x):\n        nonlocal n\n        while n > 0:\n            x = f(x)\n            n -= 1\n        return x\n    return g\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n) + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T00:31:23.9861","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":206,"date":"2016-02-15 00:33:00.273212","diff":null,"before":"def g(x):\n        nonlocal n\n        while n > 0:\n            x = f(x)\n            n -= 1\n        return x\n    return g\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T00:33:00.273212","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":206,"date":"2016-02-15 00:33:15.818098","diff":null,"before":"def g(x):\n        nonlocal n\n        while n > 0:\n            x = f(x)\n            n -= 1\n        return x\n    return g\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + n\n\n","after":null,"SubmissionTime":"2016-02-15T00:33:15.818098","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":206,"date":"2016-02-15 00:34:02.729178","diff":null,"before":"def g(x):\n        nonlocal n\n        while n > 0:\n            x = f(x)\n            n -= 1\n        return x\n    return g\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return n * g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T00:34:02.729178","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":206,"date":"2016-02-15 00:35:32.281215","diff":null,"before":"def g(x):\n        nonlocal n\n        while n > 0:\n            x = f(x)\n            n -= 1\n        return x\n    return g\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return n * (g(n-1) + n)\n\n","after":null,"SubmissionTime":"2016-02-15T00:35:32.281215","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":242,"date":"2016-02-15 00:56:58.143332","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return 0\n    if n <= 3:\n        return n\n    else:\n        return G(n-1) + 2 + G(n-2) + 3 * G(n-3)\n\n","after":null,"SubmissionTime":"2016-02-15T00:56:58.143332","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":242,"date":"2016-02-15 00:57:21.252891","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return 0\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 + g(n-2) + 3 * g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-15T00:57:21.252891","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":242,"date":"2016-02-15 00:57:35.464300","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return 1\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 + g(n-2) + 3 * g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-15T00:57:35.4643","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":242,"date":"2016-02-15 00:57:55.150568","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 + g(n-2) + 3 * g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-15T00:57:55.150568","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":937,"date":"2016-02-15 01:07:13.246927","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n) + n * g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-15T01:07:13.246927","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":937,"date":"2016-02-15 01:08:55.868037","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return n + (n-3) * g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-15T01:08:55.868037","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":937,"date":"2016-02-15 01:09:06.890946","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n) + (n-3) * g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-15T01:09:06.890946","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":937,"date":"2016-02-15 01:10:02.393123","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + (n-3) * g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-15T01:10:02.393123","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":629,"date":"2016-02-15 01:11:45.913575","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n==(1,2,3):\n        return n\n    else: \n        return g(n-1)+2*g(n-2)+3*g(n-3)\n","after":null,"SubmissionTime":"2016-02-15T01:11:45.913575","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":937,"date":"2016-02-15 01:11:58.643671","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return (n-3) + (n-3) * g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-15T01:11:58.643671","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":629,"date":"2016-02-15 01:12:11.665067","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n==(1 or 2 or 3):\n        return n\n    else: \n        return g(n-1)+2*g(n-2)+3*g(n-3)\n","after":null,"SubmissionTime":"2016-02-15T01:12:11.665067","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":937,"date":"2016-02-15 01:12:52.227420","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 3:\n        return 3\n    elif n == 2:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return (n-3) + (n-3) * g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-15T01:12:52.22742","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":129,"date":"2016-02-15 01:14:19.521773","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    return g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T01:14:19.521773","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":118,"date":"2016-02-15 02:07:24.880678","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    if n > 3:\n        total = combiner(total, g(n-1))\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T02:07:24.880678","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":118,"date":"2016-02-15 02:30:10.282836","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    k = 1\n    while k < n:\n        total = total + k*(g(n-k))\n        k +=1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-15T02:30:10.282836","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":118,"date":"2016-02-15 02:33:28.680530","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    k = 1\n    total = 0\n    while k < n:\n        total = total + k*(g(n-k))\n        k +=1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-15T02:33:28.68053","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":550,"date":"2016-02-15 03:30:18.064621","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def g_recursive(n):\n        if n == 0:\n            return 0\n        if n <= 3:\n            return n\n        else:\n            return g_recursive(n - 1) + 2 * g_recursive(n - 2) + 3 * g_recursive(n - 3)\n\n    \n\n","after":null,"SubmissionTime":"2016-02-15T03:30:18.064621","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":550,"date":"2016-02-15 03:30:39.089289","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def g_recursive(n):\n        if n == 0:\n            return 0\n        if n <= 3:\n            return n\n        else:\n            return g_recursive(n - 1) + 2 * g_recursive(n - 2) + 3 * g_recursive(n - 3)\n    return g_recursive\n\n    \n\n","after":null,"SubmissionTime":"2016-02-15T03:30:39.089289","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":550,"date":"2016-02-15 03:33:09.167884","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def g_recursive(n):\n        if n <= 0:\n            return 0\n        if n <= 3:\n            return n\n        else:\n            return g_recursive(n - 1) + 2 * g_recursive(n - 2) + 3 * g_recursive(n - 3)\n    return g_recursive\n\n    \n\n","after":null,"SubmissionTime":"2016-02-15T03:33:09.167884","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":937,"date":"2016-02-15 07:25:00.547969","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n < 3:\n        return 3\n    elif n == 2:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return (n-3) * g(n-3) + (n-2) * g(n-2) + (n - 1) * g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T07:25:00.547969","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":937,"date":"2016-02-15 07:25:50.905203","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n < 3:\n        return 3\n    elif n == 2:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return (n-3) * g(n-3) + (n-2) * g(n-2) + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T07:25:50.905203","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":937,"date":"2016-02-15 07:26:20.578779","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n < 3:\n        return 3\n    elif n == 2:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return 3* g(n-3) + 2 * g(n-2) + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T07:26:20.578779","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":937,"date":"2016-02-15 07:27:13.225171","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n < 3:\n        return 3\n    elif n == 2:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return g(n-1) + (2 * g(n-2)) + (3* g(n-3))\n\n","after":null,"SubmissionTime":"2016-02-15T07:27:13.225171","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":129,"date":"2016-02-15 07:50:09.649274","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    x=0\n    return (x+1)*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T07:50:09.649274","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":129,"date":"2016-02-15 07:54:32.947810","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    return (+1)*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T07:54:32.94781","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":129,"date":"2016-02-15 07:55:58.435534","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x=0\n    def helper(n):\n        if n<=3:\n            return n\n        return (x+1)*g(n-1)\n    return helper \n\n","after":null,"SubmissionTime":"2016-02-15T07:55:58.435534","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":669,"date":"2016-02-15 09:45:15.931750","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    if n > 3:\n        return g(n-1) + 2 * G(n-2) + 3 * G(n-3)\n\n\n","after":null,"SubmissionTime":"2016-02-15T09:45:15.93175","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    if n>3:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":669,"date":"2016-02-15 09:45:54.248783","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    if n > 3:\n        return g(n-1) + 2 * G(n-2) + 3 * g(n-3)\n\n\n","after":null,"SubmissionTime":"2016-02-15T09:45:54.248783","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":949,"date":"2016-02-15 09:55:44.085500","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n \n    else:\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n\n","after":null,"SubmissionTime":"2016-02-15T09:55:44.0855","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":243,"date":"2016-02-15 10:13:53.752603","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        h=1\n        return h*(n-h) + g(h+1)\n\n","after":null,"SubmissionTime":"2016-02-15T10:13:53.752603","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":172,"date":"2016-02-15 10:21:32.819369","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    x, y, z = 1, 2, 3\n    while n > 3:\n        x, y, z = y, z, z + 2*y + 3*x\n        n -= 1\n    return z\n\n","after":null,"SubmissionTime":"2016-02-15T10:21:32.819369","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    x, y, z = 1, 2, 3\r\n    while n>3:\r\n        x, y, z = y, z, z+2*y+3*x\r\n        n -= 1\r\n    return z","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    )), Selected(\\x => Match(x, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":118,"date":"2016-02-15 10:28:12.778875","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    def helper(k):\n        if k == n:\n            return k*(g(n-k))\n        total = total + k*(g(n-k))\n        k +=1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-15T10:28:12.778875","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":118,"date":"2016-02-15 10:28:37.671462","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    def helper(k):\n        total = 0\n        if k == n:\n            return k*(g(n-k))\n        total = total + k*(g(n-k))\n        k +=1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-15T10:28:37.671462","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":243,"date":"2016-02-15 10:39:38.605095","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n\n    def g_helper(k):\n        if k>=n:\n            return 1\n        else:\n            return g_helper(k+1)\n    return k(n-1) + g_helper(k+1)*(n-(k+1))\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T10:39:38.605095","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":243,"date":"2016-02-15 10:40:27.221201","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n\n    def g_helper(k):\n        if k>=n:\n            return 1\n        else:\n            return g_helper(k+1)\n    return (n-g_helper(1)) + g_helper(2)*(n-g_helper(2))\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T10:40:27.221201","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":118,"date":"2016-02-15 10:48:00.688933","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    total = 0\n    def helper(k):\n        if k == n:\n            return k*(g(n-k))\n        total = total + k*(g(n-k))\n        k +=1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-15T10:48:00.688933","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":43,"date":"2016-02-15 10:58:35.395179","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n \n    return n * g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T10:58:35.395179","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":43,"date":"2016-02-15 11:00:11.555592","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n \n    return (n - 1) *(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T11:00:11.555592","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":43,"date":"2016-02-15 11:00:24.312474","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n \n    return (n - 1) * g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T11:00:24.312474","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":43,"date":"2016-02-15 11:02:54.204094","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n \n    return (n - 1) + (n - 1) * g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T11:02:54.204094","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":43,"date":"2016-02-15 11:03:51.725681","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n \n    return (n - 1)* g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T11:03:51.725681","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":43,"date":"2016-02-15 11:04:12.448687","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n \n    return 1 + (n - 1)* g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T11:04:12.448687","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":43,"date":"2016-02-15 11:05:08.245059","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n \n    return g(n - 1) * n \n\n","after":null,"SubmissionTime":"2016-02-15T11:05:08.245059","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":149,"date":"2016-02-15 11:36:02.865303","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total=0\n    a=1\n    if n <=3:\n        return n\n    def g_help(a,n):\n        if n >=1:\n            total+=a*n\n            return g_help(a+1,n-1)\n        return total\n    return g_help \n        \n\n","after":null,"SubmissionTime":"2016-02-15T11:36:02.865303","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":149,"date":"2016-02-15 11:36:02.865303","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total=0\n    a=1\n    if n <=3:\n        return n\n    def g_help(a,n):\n        if n >=1:\n            total+=a*n\n            return g_help(a+1,n-1)\n        return total\n    return g_help \n        \n\n","after":null,"SubmissionTime":"2016-02-15T11:36:02.865303","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":149,"date":"2016-02-15 11:37:57.326430","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total=0\n    a=1\n    if n <=3:\n        return n\n    def g_help(a,n):\n        if n >=1:\n            total+=a*n\n            return g_help(a+1,n-1)\n        return total\n    return g_help(a,n) \n        \n\n","after":null,"SubmissionTime":"2016-02-15T11:37:57.32643","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":149,"date":"2016-02-15 11:40:33.613947","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    a=1\n    if n <=3:\n        return n\n    def g_help(a,n):\n        if n >=1:\n            return a*n+g_help(a+1,n-1)\n        return total\n    return g_help(a,n) \n        \n\n","after":null,"SubmissionTime":"2016-02-15T11:40:33.613947","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":149,"date":"2016-02-15 11:41:15.016772","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    a=1\n    if n <=3:\n        return n\n    def g_help(a,n):\n        if n >=1:\n            return a*n+g_help(a+1,n-1)\n        return 0\n    return g_help(a,n) \n        \n\n","after":null,"SubmissionTime":"2016-02-15T11:41:15.016772","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":377,"date":"2016-02-15 11:42:27.733972","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-15T11:42:27.733972","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":149,"date":"2016-02-15 11:42:32.203777","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    a=1\n    if n <=3:\n        return n\n    def g_help(a,n):\n        if n >=1:\n            return a*n+g_help(a+1,n-1)\n        return 0\n    return g_help(a,n-1) \n        \n\n","after":null,"SubmissionTime":"2016-02-15T11:42:32.203777","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":359,"date":"2016-02-15 11:44:48.415429","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    return n if n <= 3 else g(n -1) * g(n-2) * g(n-3)\n","after":null,"SubmissionTime":"2016-02-15T11:44:48.415429","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":243,"date":"2016-02-15 11:56:30.131723","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n\n    def g_helper(k):\n        if k>=n:\n            return 1\n        else:\n            return k*(n-k)\n    return g_helper(n-1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T11:56:30.131723","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":243,"date":"2016-02-15 11:56:50.548058","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n\n    def g_helper(k):\n        if k>=n:\n            return 1\n        else:\n            return k*(n-k)\n    return g_helper(n) + g_helper(n-1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T11:56:50.548058","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":243,"date":"2016-02-15 12:00:58.663661","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n\n    def g_helper(k):\n        if k>=n:\n            return 1\n        else:\n            return k*(n-k) + g_helper(k-1)\n    return g_helper(n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T12:00:58.663661","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    def g_helper(k):\r\n        if k>=n:\r\n            return g(n-1)+2*g(n-2)+3*g(n-3)\r\n        else:\r\n            return k*(n-k)+g_helper(k-1)\r\n    return g_helper(n)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":243,"date":"2016-02-15 12:01:16.557817","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n\n    def g_helper(k):\n        if k>=n:\n            return 1\n        else:\n            k=n-1\n            return k*(n-k) + g_helper(k-1)\n    return g_helper(n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T12:01:16.557817","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1000,"date":"2016-02-15 12:08:33.298333","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    i = 1\n    return i*g(n) + (i+1)*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T12:08:33.298333","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1000,"date":"2016-02-15 12:09:41.011372","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    i = 0\n    return i*g(n) + (i+1)*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T12:09:41.011372","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1000,"date":"2016-02-15 12:10:47.661270","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return n + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T12:10:47.66127","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":1000,"date":"2016-02-15 12:12:26.010538","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    i = 0\n    return i*n + (i+1)*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T12:12:26.010538","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1000,"date":"2016-02-15 12:13:40.577370","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 0\n    if n <= 3:\n        return n\n    return i*n + (i+1)*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T12:13:40.57737","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":149,"date":"2016-02-15 12:14:39.105063","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <=3:\n        return n\n    return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3) \n        \n\n","after":null,"SubmissionTime":"2016-02-15T12:14:39.105063","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":1000,"date":"2016-02-15 12:16:23.327954","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    if n <= 3:\n        return n\n    def counter(i):\n        return i*g(n-1)\n        i += 1\n    return counter(1)\n\n","after":null,"SubmissionTime":"2016-02-15T12:16:23.327954","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1000,"date":"2016-02-15 12:18:54.193821","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    if n <= 3:\n        return n\n    def counter(i):\n        subtotal += i*g(n-1)\n        return subtotal\n        i += 1\n    return counter(1)\n\n","after":null,"SubmissionTime":"2016-02-15T12:18:54.193821","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":237,"date":"2016-02-15 12:21:30.893722","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g_iter(n - 1) + 2 * g_iter(n-2) + 3 * g_iter(n-3)\n\n","after":null,"SubmissionTime":"2016-02-15T12:21:30.893722","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":1000,"date":"2016-02-15 12:23:02.408363","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x = 0\n    def counter(i):\n        if n <= 3:\n            return n\n        else:\n            x += i*g(n-1)\n            i += 1\n    return counter(1)\n\n","after":null,"SubmissionTime":"2016-02-15T12:23:02.408363","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1000,"date":"2016-02-15 12:23:38.419992","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    def counter(i):\n        x = 0\n        if n <= 3:\n            return n\n        else:\n            x += i*g(n-1)\n            i += 1\n    return counter(1)\n\n","after":null,"SubmissionTime":"2016-02-15T12:23:38.419992","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":782,"date":"2016-02-15 12:24:18.477880","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    else:\n        i=1\n        k=n-1\n        total=0\n        while i<=n:\n            total=total+g(n-i)+k\n            i=i+1\n            if k<=n:\n                k=k+1\n            else:\n                k=0\n        return total\n\n","after":null,"SubmissionTime":"2016-02-15T12:24:18.47788","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":510,"date":"2016-02-15 12:25:34.819312","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return g(n)\n    else:\n        return g(n-1) + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T12:25:34.819312","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":510,"date":"2016-02-15 12:25:59.081466","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + n-1\n\n","after":null,"SubmissionTime":"2016-02-15T12:25:59.081466","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":782,"date":"2016-02-15 12:26:04.559335","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    else:\n        i=1\n        k=n-1\n        total=0\n        while i<=n:\n            total=total*g(n-i)+k\n            i=i+1\n            if k<=n:\n                k=k+1\n            else:\n                k=0\n        return total\n\n","after":null,"SubmissionTime":"2016-02-15T12:26:04.559335","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":782,"date":"2016-02-15 12:26:14.853172","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    else:\n        i=1\n        k=n-1\n        total=1\n        while i<=n:\n            total=total*g(n-i)+k\n            i=i+1\n            if k<=n:\n                k=k+1\n            else:\n                k=0\n        return total\n\n","after":null,"SubmissionTime":"2016-02-15T12:26:14.853172","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":510,"date":"2016-02-15 12:26:42.709391","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + n*(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T12:26:42.709391","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":510,"date":"2016-02-15 12:27:22.575977","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + (n-2)*(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T12:27:22.575977","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":510,"date":"2016-02-15 12:27:33.163723","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + (n-1)*(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T12:27:33.163723","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":510,"date":"2016-02-15 12:27:58.860787","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2*(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T12:27:58.860787","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":510,"date":"2016-02-15 12:28:08.490585","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2*(n)\n\n","after":null,"SubmissionTime":"2016-02-15T12:28:08.490585","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1000,"date":"2016-02-15 12:28:42.794619","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    def counter(i):\n        x = 0\n        if n <= 3:\n            return n\n        else:\n            i*n + g(n-1)\n            i += 1\n    return counter(1)\n\n","after":null,"SubmissionTime":"2016-02-15T12:28:42.794619","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1000,"date":"2016-02-15 12:29:00.972830","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    def counter(i):\n        if n <= 3:\n            return n\n        else:\n            i*n + g(n-1)\n            i += 1\n    return counter(1)\n\n","after":null,"SubmissionTime":"2016-02-15T12:29:00.97283","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":510,"date":"2016-02-15 12:29:23.681488","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + (n-1)*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T12:29:23.681488","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":510,"date":"2016-02-15 12:29:31.923417","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + (n)*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T12:29:31.923417","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":510,"date":"2016-02-15 12:29:40.461493","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + (n-2)*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T12:29:40.461493","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":510,"date":"2016-02-15 12:29:49.770587","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + (n-2)*g(n-2)\n\n","after":null,"SubmissionTime":"2016-02-15T12:29:49.770587","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":510,"date":"2016-02-15 12:29:55.915991","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + (n-2)*g(n)\n\n","after":null,"SubmissionTime":"2016-02-15T12:29:55.915991","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":782,"date":"2016-02-15 12:30:11.507540","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    else:\n        i=1\n        k=2\n        total=1\n        while i<=n:\n            total=total*g(n-i)+k\n            i=i+1\n            if k<=3:\n                k=k+1\n            else:\n                k=0\n        return total\n\n","after":null,"SubmissionTime":"2016-02-15T12:30:11.50754","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1000,"date":"2016-02-15 12:30:46.860823","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    def counter(i):\n        if n <= 3:\n            return n\n        else:\n            return i*n + g(n-1)\n            i += 1\n    return counter(0)\n\n","after":null,"SubmissionTime":"2016-02-15T12:30:46.860823","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1000,"date":"2016-02-15 12:31:12.992341","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    def counter(i):\n        if n <= 3:\n            return n\n        else:\n            i += 1\n            return i*n + g(n-1)        \n    return counter(0)\n\n","after":null,"SubmissionTime":"2016-02-15T12:31:12.992341","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1000,"date":"2016-02-15 12:31:55.137900","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    def counter(i):\n        if n <= 3:\n            return n\n        else:\n            return i*n + (i+1)*g(n-1)        \n    return counter(0)\n\n","after":null,"SubmissionTime":"2016-02-15T12:31:55.1379","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":510,"date":"2016-02-15 12:32:12.756728","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + n\n\n","after":null,"SubmissionTime":"2016-02-15T12:32:12.756728","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1000,"date":"2016-02-15 12:32:15.441318","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    def counter(i):\n        if n <= 3:\n            return n\n        else:\n            return i*n + g(n-1)\n            i += 1        \n    return counter(0)\n\n","after":null,"SubmissionTime":"2016-02-15T12:32:15.441318","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":510,"date":"2016-02-15 12:32:35.071455","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2*n\n\n","after":null,"SubmissionTime":"2016-02-15T12:32:35.071455","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":510,"date":"2016-02-15 12:33:01.862302","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return (n-1)*n\n    else:\n        return g(n-1) + n\n\n","after":null,"SubmissionTime":"2016-02-15T12:33:01.862302","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1000,"date":"2016-02-15 12:34:34.815587","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    def counter(i):\n        if n == 0:\n            return \n        else:\n            if n <= 3:\n                return n\n            return i*n + g(n-1)\n            i += 1        \n    return counter(0)\n\n","after":null,"SubmissionTime":"2016-02-15T12:34:34.815587","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1000,"date":"2016-02-15 12:35:29.893102","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    def counter(i):\n        if n == 0:\n            return \n        else:\n            if n <= 3:\n                return i*n\n            return i*n + g(n-1)\n            i += 1        \n    return counter(0)\n\n","after":null,"SubmissionTime":"2016-02-15T12:35:29.893102","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":43,"date":"2016-02-15 12:38:26.323438","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n \n    else:\n        n -= 1\n    return n * g(n) + g(n- 1) \n\n","after":null,"SubmissionTime":"2016-02-15T12:38:26.323438","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":43,"date":"2016-02-15 12:38:44.860947","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n \n    else:\n        n -= 1\n    return n * g(n - 1) + g(n - 1) \n\n","after":null,"SubmissionTime":"2016-02-15T12:38:44.860947","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":43,"date":"2016-02-15 12:38:59.372819","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n \n    else:\n        n -= 1\n    return n * g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T12:38:59.372819","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":43,"date":"2016-02-15 12:40:32.071172","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x = 0\n    if n <= 3:\n        return n \n    else:\n        x += 1\n    return x * g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T12:40:32.071172","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":43,"date":"2016-02-15 12:41:56.130296","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x = 0\n    if n <= 3:\n        return n \n    else:\n        while x <= n:\n            x += 1\n            return x * g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T12:41:56.130296","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":43,"date":"2016-02-15 12:44:34.524103","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    a = 0\n    if a == 0:\n        x = 0\n        a += 1\n    if n <= 3:\n        return n \n    while x <= n:\n        x += 1\n    return x * g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T12:44:34.524103","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":43,"date":"2016-02-15 12:45:07.832531","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    a = 0\n    if a == 0:\n        x = 0\n        a += 1\n    if n <= 3:\n        return n \n    while x < n:\n        x += 1\n    return x * g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T12:45:07.832531","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":43,"date":"2016-02-15 12:45:59.391816","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    a = 0\n    if a == 0:\n        x = 0\n        a += 1\n    if n <= 3:\n        return n \n    if x < n:\n        x += 1\n    return x * g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T12:45:59.391816","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":43,"date":"2016-02-15 12:46:40.198819","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    a = 0\n    if a == 0:\n        x = 0\n        a += 1\n    if n <= 3:\n        return n \n    while x < n:\n        x += 1\n        print (x)\n    return x * g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T12:46:40.198819","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":43,"date":"2016-02-15 12:50:01.990216","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    a = 0\n    if a == 0:\n        x = 0\n        a += 1\n    if n <= 3:\n        return n \n    if x < n:\n        x += 1\n        print (x)\n    return x * g(n - 1) + g(n - 2)\n\n","after":null,"SubmissionTime":"2016-02-15T12:50:01.990216","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":43,"date":"2016-02-15 12:52:02.340129","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n \n    # if x < n:\n    #     x += 1\n    #     print (x)\n    return x * g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T12:52:02.340129","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-15 12:53:42.228612","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    adder = 0\n    if n <= 3:\n        return identity(n)\n    else:\n        return g(n) + (adder + 1) * g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T12:53:42.228612","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-15 12:54:11.417275","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    adder = 0\n    if n <= 3:\n        return identity(n)\n    else:\n        return g(n) + g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T12:54:11.417275","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-15 12:54:45.810857","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    adder = 0\n    if n <= 3:\n        return identity(n)\n    else:\n        return (adder + 1) * g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T12:54:45.810857","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-15 12:55:02.498463","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    adder = 0\n    if n <= 3:\n        return n\n    else:\n        return (adder + 1) * g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T12:55:02.498463","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-15 12:56:42.764359","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    adder = 0\n    if n <= 3:\n        return n\n    else:\n        return n + g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T12:56:42.764359","SynthesizedAfter":"\r\ndef g(n):\r\n    adder = 0\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast)))))))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":602,"date":"2016-02-15 12:57:00.545220","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return ((n-1) + 2) * g(n-2) + 1 *g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-15T12:57:00.54522","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":1000,"date":"2016-02-15 12:57:01.534079","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    def counter(i):\n        if n == 0:\n            return \n        else:\n            if n <= 3:\n                return n + g(n-1)\n            return i*n + g(n-1)\n            i += 1        \n    return counter(0)\n\n","after":null,"SubmissionTime":"2016-02-15T12:57:01.534079","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-15 12:57:01.554415","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    adder = 0\n    if n <= 3:\n        return n\n    else:\n        return n + (adder + 1) * g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T12:57:01.554415","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-15 12:57:27.684523","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    adder = 0\n    if n <= 3:\n        return n\n    else:\n        return n + increment(adder) * g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T12:57:27.684523","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":602,"date":"2016-02-15 12:57:39.092358","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return ((n-1) + 2) * (g(n-2) + 1) *g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-15T12:57:39.092358","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1000,"date":"2016-02-15 12:58:02.608662","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    def counter(i):\n        if n == 0:\n            return \n        else:\n            if n <= 3:\n                return i*n + g(n-1)\n            return i*n + g(n-1)\n            i += 1        \n    return counter(1)\n\n","after":null,"SubmissionTime":"2016-02-15T12:58:02.608662","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1000,"date":"2016-02-15 12:58:22.134496","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    def counter(i):\n        if n == 0:\n            return \n        else:\n            if n <= 3:\n                return n + g(n-1)\n            return i*n + g(n-1)\n            i += 1        \n    return counter(1)\n\n","after":null,"SubmissionTime":"2016-02-15T12:58:22.134496","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-15 12:58:29.758528","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return n + 2 * g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T12:58:29.758528","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":602,"date":"2016-02-15 12:58:37.267188","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return (g(n-1) + 2) * (g(n-2) + 3) * g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-15T12:58:37.267188","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1000,"date":"2016-02-15 12:59:02.978223","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    def counter(i):\n        if n == 0:\n            return \n        if n <= 3:\n            return n\n        return i*n + g(n-1)\n        i += 1        \n    return counter(1)\n\n","after":null,"SubmissionTime":"2016-02-15T12:59:02.978223","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":602,"date":"2016-02-15 12:59:09.823645","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return ((n-1) + 2) * ((n-2) + 3) * (n-3)\n\n","after":null,"SubmissionTime":"2016-02-15T12:59:09.823645","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-15 12:59:44.595202","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    adder = n\n    if n <= 3:\n        return n\n    else:\n        return n + (adder - (n - 1)) * g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T12:59:44.595202","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-15 13:00:11.624221","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    adder = n\n    if n <= 3:\n        return n\n    else:\n        return n + (adder - n) * g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T13:00:11.624221","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":875,"date":"2016-02-15 13:00:13.616503","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return 12\n\n","after":null,"SubmissionTime":"2016-02-15T13:00:13.616503","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":602,"date":"2016-02-15 13:00:27.286999","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return (n-1) + (2 * (n-2)) + (3 * (n-3))\n\n","after":null,"SubmissionTime":"2016-02-15T13:00:27.286999","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-15 13:00:32.288544","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    adder = n\n    if n <= 3:\n        return n\n    else:\n        return n + (adder - n - 2) * g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T13:00:32.288544","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-15 13:00:46.990177","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    adder = n\n    if n <= 3:\n        return n\n    else:\n        return n + (adder - n - 1) * g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T13:00:46.990177","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-15 13:00:57.995231","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    adder = n\n    if n <= 3:\n        return n\n    else:\n        return n + (adder - n + 1) * g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T13:00:57.995231","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":43,"date":"2016-02-15 13:01:56.863960","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    a = n \n    if n <= 3:\n        return n \n\n    # if x < n:\n    #     x += 1\n    #     print (x)\n    return n * g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T13:01:56.86396","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-15 13:02:18.108992","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    adder = n\n    if n <= 3:\n        return n\n    else:\n        recurse = (adder - n - 1)\n        return n + g(recurse)\n\n","after":null,"SubmissionTime":"2016-02-15T13:02:18.108992","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":43,"date":"2016-02-15 13:02:20.990103","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    a = n \n    if n <= 3:\n        return n \n\n    # if x < n:\n    #     x += 1\n    #     print (x)\n    return g(n - 1) * n \n\n","after":null,"SubmissionTime":"2016-02-15T13:02:20.990103","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-15 13:02:30.252528","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    adder = n\n    if n <= 3:\n        return n\n    else:\n        recurse = (adder - n)\n        return n + g(recurse)\n\n","after":null,"SubmissionTime":"2016-02-15T13:02:30.252528","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":602,"date":"2016-02-15 13:03:14.417030","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return (n-1) + (2 * g(n-2)) + (3 * g(n-3))\n\n","after":null,"SubmissionTime":"2016-02-15T13:03:14.41703","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":43,"date":"2016-02-15 13:04:16.959260","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    a = n \n    if n <= 3:\n        return n \n\n    # if x < n:\n    #     x += 1\n    #     print (x)\n    return n * g(n - (n - 1))\n\n","after":null,"SubmissionTime":"2016-02-15T13:04:16.95926","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":43,"date":"2016-02-15 13:05:04.573724","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    a = n \n    if n <= 3:\n        return n \n\n    # if x < n:\n    #     x += 1\n    #     print (x)\n    return (n - 1) * g(n - (n - 1))\n\n","after":null,"SubmissionTime":"2016-02-15T13:05:04.573724","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":43,"date":"2016-02-15 13:06:41.107519","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    a = n \n    if n <= 3:\n        return n \n\n    if x < n:\n        x += 1\n        print (x)\n    return  (n - (n - 1)) * g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T13:06:41.107519","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":43,"date":"2016-02-15 13:06:41.107519","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    a = n \n    if n <= 3:\n        return n \n\n    if x < n:\n        x += 1\n        print (x)\n    return  (n - (n - 1)) * g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T13:06:41.107519","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":43,"date":"2016-02-15 13:06:52.661776","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    a = n \n    if n <= 3:\n        return n \n\n    # if x < n:\n        # x += 1\n        # print (x)\n    return  (n - (n - 1)) * g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T13:06:52.661776","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":875,"date":"2016-02-15 13:07:55.332410","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return mul(g(n-1) + 1)\n\n","after":null,"SubmissionTime":"2016-02-15T13:07:55.33241","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":875,"date":"2016-02-15 13:08:53.736247","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return mul(g(n-1), 1)\n\n","after":null,"SubmissionTime":"2016-02-15T13:08:53.736247","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":875,"date":"2016-02-15 13:09:12.909971","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return mul(1, g(n-1))\n\n","after":null,"SubmissionTime":"2016-02-15T13:09:12.909971","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":43,"date":"2016-02-15 13:10:52.082225","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    counter = 0\n    if n > 3:\n        return (counter + 1) * g(n - 1)\n    if n <= 3:\n        return n \n\n    # if x < n:\n        # x += 1\n        # print (x)\n    return  (n - (n - 1)) * g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T13:10:52.082225","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":437,"date":"2016-02-15 13:12:01.547263","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if(n<4):\n        return n\n    return n*g(n-1)+2*g(n-2)+3*g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-15T13:12:01.547263","SynthesizedAfter":"\r\ndef g(n):\r\n    if (n<4):\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":34,"date":"2016-02-15 13:12:59.920986","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return G(n)\n    else:\n        return g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T13:12:59.920986","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1000,"date":"2016-02-15 13:16:43.494389","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    def counter(i):\n        if n == 0:\n            return \n            if n <= 3:\n                return n + g(n-1)\n            else:\n                return i*n + g(n-1)\n        i += 1        \n    return counter(1)\n\n","after":null,"SubmissionTime":"2016-02-15T13:16:43.494389","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":875,"date":"2016-02-15 13:17:06.313347","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return mul(n, g(n-1))\n\n","after":null,"SubmissionTime":"2016-02-15T13:17:06.313347","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-15 13:17:17.099411","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return n + g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T13:17:17.099411","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":34,"date":"2016-02-15 13:17:18.442797","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    if n <= 3:\n        return n\n    else:\n        return n * g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T13:17:18.442797","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return 1*g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":1000,"date":"2016-02-15 13:17:18.654706","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    def counter(i):\n        if n == 0:\n            return\n        else: \n            if n <= 3:\n                return n + g(n-1)\n            else:\n                return i*n + g(n-1)\n        i += 1        \n    return counter(1)\n\n","after":null,"SubmissionTime":"2016-02-15T13:17:18.654706","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":875,"date":"2016-02-15 13:17:23.554530","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return add(mul(n, g(n-1)))\n\n","after":null,"SubmissionTime":"2016-02-15T13:17:23.55453","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":875,"date":"2016-02-15 13:17:33.762725","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return add(n, mul(n, g(n-1)))\n\n","after":null,"SubmissionTime":"2016-02-15T13:17:33.762725","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":875,"date":"2016-02-15 13:17:33.762725","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return add(n, mul(n, g(n-1)))\n\n","after":null,"SubmissionTime":"2016-02-15T13:17:33.762725","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":875,"date":"2016-02-15 13:17:39.990428","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return add(n-1, mul(n, g(n-1)))\n\n","after":null,"SubmissionTime":"2016-02-15T13:17:39.990428","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":964,"date":"2016-02-15 13:18:05.244830","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return G(n-1) + 2*G(n-2) + 3*G(n-3)\n\n","after":null,"SubmissionTime":"2016-02-15T13:18:05.24483","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":34,"date":"2016-02-15 13:18:05.660688","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    if n <= 3:\n        return n\n    else:\n        return n-1 * g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T13:18:05.660688","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1068,"date":"2016-02-15 13:18:41.217528","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        i = 3\n        j = 0\n        return add((n-1), g(n-1))\n\n","after":null,"SubmissionTime":"2016-02-15T13:18:41.217528","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":200,"date":"2016-02-15 13:18:45.428694","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n < 3:\n        return n\n    else:\n        return G(g(n-1))\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:18:45.428694","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1000,"date":"2016-02-15 13:20:15.480932","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    def counter(i):\n        if n == 0:\n            return 0\n        else: \n            if n <= 3:\n                return n + g(n-1)\n            else:\n                return i*n + g(n-1)\n        i += 1        \n    return counter(1)\n\n","after":null,"SubmissionTime":"2016-02-15T13:20:15.480932","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":200,"date":"2016-02-15 13:20:25.850418","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n < 3:\n        return n\n    else:\n        return G(g(n-1)) + g(n-2)*G(g(n-2)) + g(n-3)*G(g(n-3)) \n\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:20:25.850418","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":200,"date":"2016-02-15 13:21:21.708918","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(n):\n        if n < 3:\n            return n\n        else:\n            return G(g(n-1)) + g(n-2)*G(g(n-2)) + g(n-3)*G(g(n-3)) \n\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:21:21.708918","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-15 13:21:47.766943","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def multiply(x):\n        if n < 3:\n            return n\n        else:\n            return x * n + multiply(x - 1) * g(n - 1)\n    return multiply(1)\n\n","after":null,"SubmissionTime":"2016-02-15T13:21:47.766943","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-15 13:22:09.504181","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def multiply(x):\n        if n < 3:\n            return n\n        else:\n            return x * n + (x - 1) * g(n - 1)\n    return multiply(1)\n\n","after":null,"SubmissionTime":"2016-02-15T13:22:09.504181","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1000,"date":"2016-02-15 13:22:16.044666","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    def counter(i):\n        if n == 0:\n            return 0\n        else: \n            if n <= 3:\n                return n\n            else:\n                return i*n + g(n-1)\n        i += 1        \n    return counter(1)\n\n","after":null,"SubmissionTime":"2016-02-15T13:22:16.044666","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-15 13:22:34.969056","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def multiply(x):\n        if n < 3:\n            return n\n        else:\n            return x * n + (x + 1) * g(n - 1)\n    return multiply(1)\n\n","after":null,"SubmissionTime":"2016-02-15T13:22:34.969056","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":200,"date":"2016-02-15 13:22:48.478000","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(x):\n        if x < 3:\n            return n\n        else:\n            return G(g(x-1)) + g(x-2)*G(g(x-2)) + g(x-3)*G(g(x-3)) \n    return G(n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:22:48.478","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-15 13:22:54.264769","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def multiply(x):\n        if n < 3:\n            return n\n        else:\n            return x * n + (x + 1) * g(n - 1)\n    return multiply(2)\n\n","after":null,"SubmissionTime":"2016-02-15T13:22:54.264769","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":200,"date":"2016-02-15 13:23:08.807322","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(x):\n        if x < 3:\n            return x\n        else:\n            return G(g(x-1)) + g(x-2)*G(g(x-2)) + g(x-3)*G(g(x-3)) \n    return G(n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:23:08.807322","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":318,"date":"2016-02-15 13:23:18.267695","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if x <= 3:\n        return x\n    else:\n        return g(x-1) + 2 * g(x-2) + 3 * g(x-3)\n\n","after":null,"SubmissionTime":"2016-02-15T13:23:18.267695","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-15 13:23:34.814578","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def multiply(x):\n        if n < 3:\n            return n\n        else:\n            return n + (x + 1) * g(n - 1)\n    return multiply(2)\n\n","after":null,"SubmissionTime":"2016-02-15T13:23:34.814578","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-15 13:23:59.443844","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def multiply(x):\n        if n <= 3:\n            return n\n        else:\n            return n + (x + 1) * g(n - 1)\n    return multiply(2)\n\n","after":null,"SubmissionTime":"2016-02-15T13:23:59.443844","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-15 13:24:10.519893","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def multiply(x):\n        if n <= 3:\n            return n\n        else:\n            return n + (x + 1) * g(n - 1)\n    return multiply(1)\n\n","after":null,"SubmissionTime":"2016-02-15T13:24:10.519893","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":875,"date":"2016-02-15 13:25:05.357435","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        # return add(n-1, mul(n, g(n-1)))\n        return mul(n, g(n-1))\n\n","after":null,"SubmissionTime":"2016-02-15T13:25:05.357435","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-15 13:25:56.924854","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def multiply(x):\n        if n <= 3:\n            return n\n        else:\n            return n + (x + 1) * g(n - 1)\n    if n >= 4:\n        return multiply(1)\n    else:\n        return multiply(1) - 3\n\n","after":null,"SubmissionTime":"2016-02-15T13:25:56.924854","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":200,"date":"2016-02-15 13:28:02.411497","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(x,k):\n        if k == 3:\n            return k\n        if x < 3:\n            return x\n        else:\n            return G(g(x-1)) * (k + 1)\n    return G(n, 0)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:28:02.411497","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":200,"date":"2016-02-15 13:28:27.658633","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(x,k):\n        if k == 3:\n            return k\n        if x < 3:\n            return x\n        else:\n            return G(g(x-1), k) * (k + 1)\n    return G(n, 0)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:28:27.658633","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":200,"date":"2016-02-15 13:28:47.560049","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(x,k):\n        if k == 3:\n            return \n        if x < 3:\n            return x\n        else:\n            return G(g(x-1), k) * (k + 1)\n    return G(n, 0)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:28:47.560049","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":200,"date":"2016-02-15 13:29:06.907192","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(x,k):\n        if x < 3:\n            return x\n        else:\n            return G(g(x-1), k) * (k + 1)\n    return G(n, 0)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:29:06.907192","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":34,"date":"2016-02-15 13:29:50.949384","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    if n <= 3:\n        return n\n    else:\n        return g(n) + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T13:29:50.949384","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":200,"date":"2016-02-15 13:29:53.174360","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(x,k):\n        if x <= 3:\n            return x\n        else:\n            return G(g(x-1), k) * (k + 1)\n    return G(n, 0)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:29:53.17436","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":200,"date":"2016-02-15 13:30:29.432152","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(x,k):\n        if x < 3:\n            return x\n        else:\n            return G(g(x-1), k) * (k + 1)\n    return G(n, 0)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:30:29.432152","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":34,"date":"2016-02-15 13:30:48.999324","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    if n == 1:\n        return 1\n    else:\n        return g(n) + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T13:30:48.999324","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":200,"date":"2016-02-15 13:31:08.716097","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(x,k):\n        if x < 3:\n            return x\n        else:\n            return G(g(x-k), k) * (k + 1)\n    return G(n, 0)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:31:08.716097","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":200,"date":"2016-02-15 13:31:37.667765","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(x,k):\n        if x < 3:\n            return x\n        if k == 3:\n            return\n        else:\n            return G(g(x-k), k) * (k + 1)\n    return G(n, 0)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:31:37.667765","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":200,"date":"2016-02-15 13:31:50.805328","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(x,k):\n        if x < 3:\n            return \n        else:\n            return G(g(x-k), k) * (k + 1)\n    return G(n, 0)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:31:50.805328","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":200,"date":"2016-02-15 13:32:12.173021","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(x,k):\n        if x < 3:\n            return x\n        else:\n            return G(g(x-k), k) * (k + 1)\n    return G(n, 0)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:32:12.173021","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-15 13:32:13.907384","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def multiply(x):\n        total = x\n        if x == total:\n            return total\n        else:\n            return 2 + multiply(x + 1)\n    if n <= 3:\n        return n\n    else:\n        return n + multiply(2) * g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T13:32:13.907384","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":200,"date":"2016-02-15 13:32:27.259112","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(x,k):\n        if x <= 3:\n            return x\n        else:\n            return G(g(x-k), k) * (k + 1)\n    return G(n, 0)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:32:27.259112","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":200,"date":"2016-02-15 13:33:18.033025","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(x,k):\n        if x < 3:\n            return x\n        if k == 3:\n            return\n        else:\n            return G(g(x-k), k) * (k + 1)\n    return G(n, 0)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:33:18.033025","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-15 13:33:36.335402","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def multiply(x):\n        total = x\n        if x == total:\n            return total\n        else:\n            return 2 + multiply(x + 1)\n    if n <= 3:\n        return n\n    else:\n        return multiply(1) * n + g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T13:33:36.335402","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":200,"date":"2016-02-15 13:33:38.731287","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(x,k):\n        if x <= 3:\n            return x\n        if k == 3:\n            return\n        else:\n            return G(g(x-k), k) * (k + 1)\n    return G(n, 0)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:33:38.731287","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-15 13:33:47.922483","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def multiply(x):\n        total = x\n        if x == total:\n            return total\n        else:\n            return 2 + multiply(x + 1)\n    if n <= 3:\n        return n\n    else:\n        return multiply(2) * n + g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T13:33:47.922483","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":200,"date":"2016-02-15 13:34:15.919680","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(x,k):\n        if x < 4:\n            return x\n        if k == 3:\n            return\n        else:\n            return G(g(x-k), k) * (k + 1)\n    return G(n, 0)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:34:15.91968","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-15 13:34:16.631134","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def multiply(x):\n        total = x\n        if x == total:\n            return total\n        else:\n            return 2 + multiply(x + 1)\n    if n <= 3:\n        return n\n    else:\n        return n + multiply(2) * g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T13:34:16.631134","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":200,"date":"2016-02-15 13:35:10.794290","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(x,k):\n        if x < 3:\n            return x\n        else:\n            return G(g(x-k), k) * (k + 1)\n    return G(n, 0)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:35:10.79429","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":200,"date":"2016-02-15 13:35:33.196744","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(x,k):\n        if x < 3:\n            return x\n        if x == 3:\n            return x\n        else:\n            return G(g(x-k), k) * (k + 1)\n    return G(n, 0)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:35:33.196744","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-15 13:35:41.592228","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def elevate(x):\n        if n <= 3:\n            return n\n        else:\n            x=x+1\n            return x * G(n-1)\n\n    return elevate(0)\n\n","after":null,"SubmissionTime":"2016-02-15T13:35:41.592228","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":200,"date":"2016-02-15 13:36:18.513518","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(x,k):\n        if x < 3:\n            return x\n        if k == 3:\n            return k\n        else:\n            return G(g(x-k), k) * (k + 1)\n    return G(n, 0)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:36:18.513518","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-15 13:36:22.118260","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def elevate(x):\n        if n <= 3:\n            return n\n        else:\n            x=x+1\n            return x * g(n-1)\n\n    return elevate\n\n","after":null,"SubmissionTime":"2016-02-15T13:36:22.11826","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1000,"date":"2016-02-15 13:37:10.124463","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    def counter(i):\n        if n == 0:\n            return 0\n        else: \n            if n <= 3:\n                return n\n            else:\n                return i*(n-1) + g(n-2)\n        i += 1        \n    return counter(1)\n\n","after":null,"SubmissionTime":"2016-02-15T13:37:10.124463","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":200,"date":"2016-02-15 13:37:11.769802","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(x,k):\n        if x < 3:\n            return x\n        if k == 3:\n            return k\n        else:\n            return G((x-k), k) * G(x, k + 1)\n    return G(n, 0)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:37:11.769802","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":200,"date":"2016-02-15 13:37:26.520251","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(x,k):\n        if x <= 3:\n            return x\n        if k == 3:\n            return \n        else:\n            return G((x-k), k) * G(x, k + 1)\n    return G(n, 0)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:37:26.520251","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1000,"date":"2016-02-15 13:37:34.252379","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    def counter(i):\n        if n == 0:\n            return 0\n        else: \n            if n <= 3:\n                return n\n            else:\n                return i*(n-1) + g(n-2)\n            i += 1        \n    return counter(1)\n\n","after":null,"SubmissionTime":"2016-02-15T13:37:34.252379","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1000,"date":"2016-02-15 13:38:11.270671","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    def counter(i):\n        if n == 0:\n            return 0\n        else: \n            if n <= 3:\n                return n\n            else:\n                return i*n + (i+1)*g(n-1)\n            i += 1        \n    return counter(1)\n\n","after":null,"SubmissionTime":"2016-02-15T13:38:11.270671","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":34,"date":"2016-02-15 13:38:44.825377","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    elif n > 3: \n        return g(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:38:44.825377","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1000,"date":"2016-02-15 13:38:57.129877","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    def counter(i):\n        if n == 0:\n            return 0\n        else: \n            if n <= 3:\n                return n\n            else:\n                return i*n + (i+1)*g(n-1)\n            i += 1        \n    return counter(0)\n\n","after":null,"SubmissionTime":"2016-02-15T13:38:57.129877","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":200,"date":"2016-02-15 13:39:24.725052","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(x,k):\n        if x <= 3:\n            return x\n        if k == 3:\n            return \n        else:\n            return G((x-k), k) * G(x, k + 1)\n    return G(n, 1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:39:24.725052","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":34,"date":"2016-02-15 13:39:25.901854","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    elif n > 3: \n        return g(n) + g(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:39:25.901854","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1000,"date":"2016-02-15 13:40:59.405108","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    def counter(i, n):\n        if n == 0:\n            return 0\n        else: \n            if n <= 3:\n                return n\n            else:\n                return i*n + (i+1)*g(n-1)\n            i += 1        \n    return counter(0)\n\n","after":null,"SubmissionTime":"2016-02-15T13:40:59.405108","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1000,"date":"2016-02-15 13:41:35.010854","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    def counter(i):\n        if i == n:\n            return \n        if n == 0:\n            return 0\n        else: \n            if n <= 3:\n                return n\n            else:\n                return i*n + (i+1)*g(n-1)\n            i += 1        \n    return counter(0)\n\n","after":null,"SubmissionTime":"2016-02-15T13:41:35.010854","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":34,"date":"2016-02-15 13:41:37.069846","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    elif n > 3: \n        return g(n-1) + g(n-2)\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:41:37.069846","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":200,"date":"2016-02-15 13:41:53.233550","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(x,k):\n        if x <= 3:\n            return x\n        if k == 3:\n            return \n        else:\n            return G((x-k), k) * G(x, (k + 1))\n    return G(n, 1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:41:53.23355","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":34,"date":"2016-02-15 13:41:54.315284","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    elif n > 3: \n        return g(n-1) + g(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:41:54.315284","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":34,"date":"2016-02-15 13:42:11.426753","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    elif n > 3: \n        return g(n-1) + g(n)\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:42:11.426753","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":34,"date":"2016-02-15 13:42:30.343958","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    elif n > 3: \n        return g(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:42:30.343958","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":875,"date":"2016-02-15 13:42:41.608186","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        # return add(n-1, mul(n, g(n-1)))\n        return print (g(n-1) + 2 * g(n-2) + 3 * g(n-3))\n\n","after":null,"SubmissionTime":"2016-02-15T13:42:41.608186","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":875,"date":"2016-02-15 13:42:49.027558","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        # return add(n-1, mul(n, g(n-1)))\n        print (g(n-1) + 2 * g(n-2) + 3 * g(n-3))\n\n","after":null,"SubmissionTime":"2016-02-15T13:42:49.027558","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-15 13:43:10.064079","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    if n <= 3:\n        return n\n    else:\n        x=x+1\n        return x * (n-1) + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T13:43:10.064079","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":34,"date":"2016-02-15 13:43:38.066592","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    elif n > 3:\n        n = g(n-1) \n        return n + g(n)\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:43:38.066592","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-15 13:44:21.568000","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    return n + g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T13:44:21.568","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":34,"date":"2016-02-15 13:44:55.599100","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    elif n > 3:\n        n = g(n) \n        return n + g(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:44:55.5991","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":34,"date":"2016-02-15 13:45:26.907422","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    elif n > 3:\n        n = g(n-1) \n        return n + g(n-2)\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:45:26.907422","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-15 13:46:09.814010","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n < 3:\n        return n\n    else:\n        return n + g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T13:46:09.81401","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":875,"date":"2016-02-15 13:46:13.372764","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return add(n, mul(n, g(n-1)))\n        # return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-15T13:46:13.372764","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-15 13:46:18.243282","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def bigger_than_three(x):\n            #if x >= 3:\n            #    return n  \n            #else:\n            return x * g(n - x) + bigger_than_three(x+1)\n    return bigger_than_three(1)\n\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n    \"\"\"\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-15T13:46:18.243282","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-15 13:46:24.905746","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return n + g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T13:46:24.905746","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-15 13:46:34.959328","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x = 0\n    def elevate(n):\n        if n <= 3:\n            return n\n        else:\n            x=x+1\n        return x * (n-1) + elevate(n-1)\n    return elevate\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:46:34.959328","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-15 13:47:15.250733","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def bigger_than_three(x):\n            if x >= 3:\n                return None  \n            else:\n                return x * g(n - x) + bigger_than_three(x+1)\n    return bigger_than_three(1)\n\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n    \"\"\"\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-15T13:47:15.250733","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-15 13:47:26.149030","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def bigger_than_three(x):\n            if x >= 3:\n                return   \n            else:\n                return x * g(n - x) + bigger_than_three(x+1)\n    return bigger_than_three(1)\n\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n    \"\"\"\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-15T13:47:26.14903","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-15 13:47:34.611603","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return n + 2 * g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T13:47:34.611603","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-15 13:47:36.186655","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def bigger_than_three(x):\n            if x >= 3:\n                return 1  \n            else:\n                return x * g(n - x) + bigger_than_three(x+1)\n    return bigger_than_three(1)\n\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n    \"\"\"\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-15T13:47:36.186655","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-15 13:47:46.488076","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def bigger_than_three(x):\n            if x >= 3:\n                return n  \n            else:\n                return x * g(n - x) + bigger_than_three(x+1)\n    return bigger_than_three(1)\n\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n    \"\"\"\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-15T13:47:46.488076","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-15 13:47:53.076376","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x = 0\n    def elevate(n):\n        if n <= 3:\n            return n\n        else:\n            x=x+1\n        return x * (n-1) + elevate(n-1)\n    return elevate(n)\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:47:53.076376","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-15 13:47:56.990351","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def bigger_than_three(x):\n            if x >= 3:\n                return x  \n            else:\n                return x * g(n - x) + bigger_than_three(x+1)\n    return bigger_than_three(1)\n\n\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            x += 1\n            return mul(x, g(n - x)) + (x+1)   #return mul(n, ((n-count_up(x+1) +count_up(x+1)))) \n    return count_up(0)\n    \"\"\"\n    \"\"\"\n    def count_up(x):\n        if n <= 3:\n            return n\n        else:\n            return count_up(x+1) * g(n-1) # g(n - count_up(x+1)) \n    return count_up(0)\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-15T13:47:56.990351","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-15 13:48:20.876385","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x == 0\n    def elevate(n):\n        if n <= 3:\n            return n\n        else:\n            x=x+1\n        return x * (n-1) + elevate(n-1)\n    return elevate(n)\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:48:20.876385","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":236,"date":"2016-02-15 13:50:30.114885","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-15T13:50:30.114885","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":1000,"date":"2016-02-15 13:53:03.702017","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    def counter(i):\n        if i == 3:\n            return \n        else: \n            if n <= 3:\n                return n\n            else:\n                return i*n + g(n-1)\n            i += 1        \n    return counter(0)\n\n","after":null,"SubmissionTime":"2016-02-15T13:53:03.702017","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":34,"date":"2016-02-15 13:53:04.832337","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2)\n        \n\n\n","after":null,"SubmissionTime":"2016-02-15T13:53:04.832337","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":243,"date":"2016-02-15 13:54:09.481171","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n\n    def g_helper(k):\n        if k>0:\n            return 1\n        else:\n            k=n-1\n            return k*(n-k) + g_helper(k-1)\n    return g_helper(n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:54:09.481171","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":34,"date":"2016-02-15 13:54:16.855438","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        n-=1\n        return g(n) + g(n-1)\n        \n\n\n","after":null,"SubmissionTime":"2016-02-15T13:54:16.855438","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":243,"date":"2016-02-15 13:54:27.356485","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n\n    def g_helper(k):\n            k=n-1\n            return k*(n-k) + g_helper(k-1)\n    return g_helper(n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:54:27.356485","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":34,"date":"2016-02-15 13:54:37.049296","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        n-=1\n        return g(n) + g(n-2)\n        \n\n\n","after":null,"SubmissionTime":"2016-02-15T13:54:37.049296","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":34,"date":"2016-02-15 13:54:50.684482","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        n-=1\n        return g(n) + g(n)\n        \n\n\n","after":null,"SubmissionTime":"2016-02-15T13:54:50.684482","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-15 13:54:57.915320","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def bigger_than_three(x):\n            if x >= 3:\n                return x  \n            else:\n                return x * g(n - x) + bigger_than_three(x+1)\n    return bigger_than_three(1)\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:54:57.91532","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":243,"date":"2016-02-15 13:55:04.525084","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n\n    def g_helper(k):\n        if k>n:\n            return 1\n        else:\n            k=n-1\n            return k*(n-k) + g_helper(k-1)\n    return g_helper(n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:55:04.525084","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":243,"date":"2016-02-15 13:56:02.262157","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n\n    def g_helper(k):\n        if k>=n:\n            return 1\n        else:\n            k=n-1\n            return k*(n-k) + g_helper(k-1)\n    return g_helper(n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:56:02.262157","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":243,"date":"2016-02-15 13:56:36.748999","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n\n    def g_helper(k):\n        if k>=n:\n            return 0\n        else:\n            k=n-1\n            return k*(n-k) + g_helper(k-1)\n    return g_helper(n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:56:36.748999","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":243,"date":"2016-02-15 13:57:10.165021","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n\n    def g_helper(k):\n        k=n-1\n        if k>=n:\n            return 0\n        else:\n            return k*(n-k) + g_helper(k-1)\n    return g_helper(n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:57:10.165021","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":34,"date":"2016-02-15 13:57:43.774493","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n \n    else:\n        k = n -1\n        return g(n-1) + g(k -1)\n        \n\n\n","after":null,"SubmissionTime":"2016-02-15T13:57:43.774493","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-15 13:58:04.477270","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def elevate(n, x):\n        return x * (n-1) + elevate(n-1, x+1)\n    return elevate(n, 1)\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:58:04.47727","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-15 13:58:28.214861","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n        def elevate(n, x):\n            return x * (n-1) + elevate(n-1, x+1)\n    return elevate(n, 1)\n\n\n","after":null,"SubmissionTime":"2016-02-15T13:58:28.214861","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-15 14:00:20.643712","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n        def elevate(n, x):\n            return x * (n-1) + elevate(n-1, x+1)\n    else:\n        return elevate(n, 1)\n\n\n","after":null,"SubmissionTime":"2016-02-15T14:00:20.643712","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":34,"date":"2016-02-15 14:00:58.708441","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    else:\n        return G(g(n-1))\n        \n\n\n","after":null,"SubmissionTime":"2016-02-15T14:00:58.708441","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-15 14:01:29.834970","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    n = y\n    if n <= 3:\n        return n\n        def elevate(y, x):\n            return x * (y-1) + elevate(y-1, x+1)\n    else:\n        return elevate(y, 1)\n\n\n","after":null,"SubmissionTime":"2016-02-15T14:01:29.83497","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-15 14:01:39.229790","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    n == y\n    if n <= 3:\n        return n\n        def elevate(y, x):\n            return x * (y-1) + elevate(y-1, x+1)\n    else:\n        return elevate(y, 1)\n\n\n","after":null,"SubmissionTime":"2016-02-15T14:01:39.22979","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-15 14:01:58.629302","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    y == n\n    if n <= 3:\n        return n\n        def elevate(y, x):\n            return x * (y-1) + elevate(y-1, x+1)\n    else:\n        return elevate(y, 1)\n\n\n","after":null,"SubmissionTime":"2016-02-15T14:01:58.629302","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":696,"date":"2016-02-15 14:02:05.058622","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return g(n) + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T14:02:05.058622","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-15 14:02:05.755208","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    y = n\n    if n <= 3:\n        return n\n        def elevate(y, x):\n            return x * (y-1) + elevate(y-1, x+1)\n    else:\n        return elevate(y, 1)\n\n\n","after":null,"SubmissionTime":"2016-02-15T14:02:05.755208","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-15 14:02:17.447917","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    y = n\n    if n <= 3:\n        return n\n        def elevate(y, x):\n            return x * (y-1) + elevate(y-1, x+1)\n    else:\n        return elevate(0, 1)\n\n\n","after":null,"SubmissionTime":"2016-02-15T14:02:17.447917","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":696,"date":"2016-02-15 14:02:36.254979","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return n + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T14:02:36.254979","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-15 14:02:50.365652","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    y = n\n    if n <= 3:\n        return n\n        def elevate(y, x):\n            return x * (y-1) + elevate(y-1, x+1)\n    else:\n        return elevate(y, 1)\n\n\n","after":null,"SubmissionTime":"2016-02-15T14:02:50.365652","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":696,"date":"2016-02-15 14:03:00.599716","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return n + (n-1) + (n-2)\n\n","after":null,"SubmissionTime":"2016-02-15T14:03:00.599716","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":696,"date":"2016-02-15 14:03:15.623085","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return n + (n-1) + (n-2) + (n-3)\n\n","after":null,"SubmissionTime":"2016-02-15T14:03:15.623085","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-15 14:03:16.955392","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x):\n        start = x - 2\n        if start == 1:\n            return 1\n        else:\n            return n + coefficient_func(x - start) * g(n - 1)\n    if n >= 3:\n        return n\n    else:\n        return coefficient_func(n)\n\n","after":null,"SubmissionTime":"2016-02-15T14:03:16.955392","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-15 14:03:59.027166","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    if n <= 3:\n        return n\n    else:\n        return elevate(n, 1)\n        def elevate(n, x):\n            return x * (n-1) + elevate(n-1, x+1)\n   \n\n\n","after":null,"SubmissionTime":"2016-02-15T14:03:59.027166","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-15 14:04:01.366036","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x):\n        if start == 1:\n            return 1\n        else:\n            return n + coefficient_func(x + 1) * g(n - 1)\n    if n >= 3:\n        return n\n    else:\n        return coefficient_func(n)\n\n","after":null,"SubmissionTime":"2016-02-15T14:04:01.366036","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-15 14:04:25.475391","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x):\n        if x == 1:\n            return 1\n        else:\n            return n + coefficient_func(x - 1) * g(n - 1)\n    if n >= 3:\n        return n\n    else:\n        return coefficient_func(n)\n\n","after":null,"SubmissionTime":"2016-02-15T14:04:25.475391","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-15 14:04:41.771219","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x):\n        if x == 1:\n            return 1\n        else:\n            return n + coefficient_func(x - 1) * g(n - 1)\n    if n <= 3:\n        return n\n    else:\n        return coefficient_func(n)\n\n","after":null,"SubmissionTime":"2016-02-15T14:04:41.771219","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-15 14:04:51.808540","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def elevate(n, x):\n        return x * (n-1) + elevate(n-1, x+1)\n   \n    if n <= 3:\n        return n\n    else:\n        return elevate(n, 1)\n        def elevate(n, x):\n            return x * (n-1) + elevate(n-1, x+1)\n   \n\n\n","after":null,"SubmissionTime":"2016-02-15T14:04:51.80854","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-15 14:05:07.509625","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def elevate(n, x):\n        return x * (n-1) + elevate(n-1, x+1)\n   \n    if n <= 3:\n        return n\n    else:\n        return elevate(n, 1)   \n\n\n","after":null,"SubmissionTime":"2016-02-15T14:05:07.509625","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-15 14:06:10.384933","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def elevate(n, x):\n        if n > 0:\n            return x * (n-1) + elevate(n-1, x+1)\n   \n    if n <= 3:\n        return n\n    else:\n        return elevate(n, 1)   \n\n\n","after":null,"SubmissionTime":"2016-02-15T14:06:10.384933","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":34,"date":"2016-02-15 14:06:26.341860","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return G(n)\n    else:\n        return g(n-1) + G(n-1)\n        \n\n\n","after":null,"SubmissionTime":"2016-02-15T14:06:26.34186","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-15 14:06:27.636831","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x):\n        if x == 1:\n            return 1\n        else:\n            return n + coefficient_func(x - 1) * g(n - 1)\n    if n <= 3:\n        return n\n    else:\n        return coefficient_func(n - 2)\n\n","after":null,"SubmissionTime":"2016-02-15T14:06:27.636831","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":243,"date":"2016-02-15 14:06:31.167222","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n\n    def g_helper(k):\n        k=k-1\n        if k>=n:\n            return 0\n        else:\n            return k*(n-k) + g_helper(k-1)\n    return g_helper(n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T14:06:31.167222","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-15 14:06:42.103990","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x):\n        if x == 1:\n            return 1\n        else:\n            return n + coefficient_func(x - 1) * g(n - 1)\n    if n <= 3:\n        return n\n    else:\n        return coefficient_func(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T14:06:42.10399","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":243,"date":"2016-02-15 14:06:54.050014","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n\n    def g_helper(k):\n        if k>=n:\n            return 0\n        else:\n            return k*(n-k) + g_helper(k-1)\n    return g_helper(n-1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T14:06:54.050014","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":696,"date":"2016-02-15 14:08:09.645625","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return n*n + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T14:08:09.645625","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1068,"date":"2016-02-15 14:09:34.353270","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    if n < 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-15T14:09:34.35327","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":1068,"date":"2016-02-15 14:09:54.467800","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    if n < 3:\n        return n\n    else:\n        return g(n-1) + (2 * g(n-2)) + (3 * g(n-3))\n\n","after":null,"SubmissionTime":"2016-02-15T14:09:54.4678","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":696,"date":"2016-02-15 14:10:08.328402","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def func_g(n, x):\n        x+=1\n        if n <= 3:\n            return n\n        return n*x + g(n-1)\n    return func_g(n, 0)\n\n","after":null,"SubmissionTime":"2016-02-15T14:10:08.328402","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":696,"date":"2016-02-15 14:10:30.340398","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def func_g(n, x):\n        x+=1\n        if n <= 3:\n            return n\n        return n*x + x*g(n-1)\n    return func_g(n, 0)\n\n","after":null,"SubmissionTime":"2016-02-15T14:10:30.340398","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":243,"date":"2016-02-15 14:12:37.780260","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n\n    def g_helper(k):\n        if k==0:\n            return 0\n        else:\n            return k*(n-k) + g_helper(k-1)\n    return g_helper(n-1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T14:12:37.78026","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":696,"date":"2016-02-15 14:13:46.819044","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def func_g(n, x):\n        x+=1\n        if n <= 3:\n            return n\n        return n*x + (x+1)*g(n-1)\n    return func_g(n, 0)\n\n","after":null,"SubmissionTime":"2016-02-15T14:13:46.819044","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":345,"date":"2016-02-15 14:16:31.046962","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-15T14:16:31.046962","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":696,"date":"2016-02-15 14:16:58.746998","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def func_g(n, x):\n        x+=1\n        if n <= 3:\n            return n\n        return n-1*x + (x+1)*(n-2) + (x+2)*(n-3)\n    return func_g(n, 0)\n\n","after":null,"SubmissionTime":"2016-02-15T14:16:58.746998","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":602,"date":"2016-02-15 14:17:04.434882","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return (n-1) + (2 * g(n-1)) + (3 * g(n-2))\n\n","after":null,"SubmissionTime":"2016-02-15T14:17:04.434882","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-15 14:17:37.969140","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    return lambda x:x\n\n","after":null,"SubmissionTime":"2016-02-15T14:17:37.96914","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-15 14:17:37.969140","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    return lambda x:x\n\n","after":null,"SubmissionTime":"2016-02-15T14:17:37.96914","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":696,"date":"2016-02-15 14:19:50.715514","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def func_g(n, x):\n        x+=2\n        if n <= 3:\n            return n\n        return x*func_g(n-1) + (x+1)*func_g(n-2)\n    return func_g(n, 0)\n\n","after":null,"SubmissionTime":"2016-02-15T14:19:50.715514","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":696,"date":"2016-02-15 14:20:25.957842","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def func_g(n, x):\n        x+=2\n        if n <= 3:\n            return n\n        return x*g(n-1) + (x+1)*g(n-2)\n    return func_g(n, 0)\n\n","after":null,"SubmissionTime":"2016-02-15T14:20:25.957842","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":696,"date":"2016-02-15 14:21:13.149411","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def func_g(n, x):\n        x+=1\n        if n <= 3:\n            return n\n        return x*g(n-1) + (x+1)*g(n-2)\n    return func_g(n, 0)\n\n","after":null,"SubmissionTime":"2016-02-15T14:21:13.149411","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-15 14:22:33.013943","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def elevate(n, x):\n        if n == 1:\n            return x\n        else:\n            return x * (n-1) + elevate(n-1, x+1)\n    if n <= 3:\n        return n\n    else:\n        return elevate(n, 1)   \n\n\n","after":null,"SubmissionTime":"2016-02-15T14:22:33.013943","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-15 14:22:56.410893","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def elevate(n, x):\n        if n == 1:\n            return 0\n        else:\n            return x * (n-1) + elevate(n-1, x+1)\n    if n <= 3:\n        return n\n    else:\n        return elevate(n, 1)   \n\n\n","after":null,"SubmissionTime":"2016-02-15T14:22:56.410893","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-15 14:25:30.322287","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def elevate(n, x):\n        if n == 1:\n            return 0\n        else:\n            return x * n + elevate(n-1, x+1)\n    if n <= 3:\n        return n\n    else:\n        return elevate(n-1, 1)   \n\n\n","after":null,"SubmissionTime":"2016-02-15T14:25:30.322287","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-15 14:25:49.718572","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def elevate(n, x):\n        if n == 1:\n            return 0\n        else:\n            return x * n-1 + elevate(n-1, x+1)\n    if n <= 3:\n        return n\n    else:\n        return elevate(n-1, 1)   \n\n\n","after":null,"SubmissionTime":"2016-02-15T14:25:49.718572","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-15 14:27:01.866620","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def elevate(n, x):\n        if n == 1:\n            return x\n        else:\n            return x * n + elevate(n-1, x+1)\n    if n <= 3:\n        return n\n    else:\n        return elevate(n-1, 1)   \n\n\n","after":null,"SubmissionTime":"2016-02-15T14:27:01.86662","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-15 14:33:43.052101","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    #if n == 5:\n    #    return 22\n    else:\n        def bigger_than_three(x):\n            if x >= 3:\n                return 1 #x  \n            else:\n                return (x * g(n-x)) + (bigger_than_three(x+1) * g(n-x)) \n                #return x * g(n - x) + bigger_than_three(x+1)\n    return bigger_than_three(1)\n\n\n","after":null,"SubmissionTime":"2016-02-15T14:33:43.052101","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-15 14:34:10.155315","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    #if n == 5:\n    #    return 22\n    else:\n        def bigger_than_three(x):\n            if x >= 3:\n                return 1 #x  \n            else:\n                return (x * (n-x)) + (bigger_than_three(x+1) * (n-x)) \n                #return x * g(n - x) + bigger_than_three(x+1)\n    return bigger_than_three(1)\n\n\n","after":null,"SubmissionTime":"2016-02-15T14:34:10.155315","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-15 14:34:33.408609","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    #if n == 5:\n    #    return 22\n    else:\n        def bigger_than_three(x):\n            if x > 3:\n                return 1 #x  \n            else:\n                return (x * g(n-x)) + (bigger_than_three(x+1) * g(n-x)) \n                #return x * g(n - x) + bigger_than_three(x+1)\n    return bigger_than_three(1)\n\n\n","after":null,"SubmissionTime":"2016-02-15T14:34:33.408609","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-15 14:34:46.539952","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    #if n == 5:\n    #    return 22\n    else:\n        def bigger_than_three(x):\n            if x > 2:\n                return 1 #x  \n            else:\n                return (x * g(n-x)) + (bigger_than_three(x+1) * g(n-x)) \n                #return x * g(n - x) + bigger_than_three(x+1)\n    return bigger_than_three(1)\n\n\n","after":null,"SubmissionTime":"2016-02-15T14:34:46.539952","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-15 14:34:56.724712","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return g(n)    \n\n","after":null,"SubmissionTime":"2016-02-15T14:34:56.724712","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-15 14:34:56.866630","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    #if n == 5:\n    #    return 22\n    else:\n        def bigger_than_three(x):\n            if x > 1:\n                return 1 #x  \n            else:\n                return (x * g(n-x)) + (bigger_than_three(x+1) * g(n-x)) \n                #return x * g(n - x) + bigger_than_three(x+1)\n    return bigger_than_three(1)\n\n\n","after":null,"SubmissionTime":"2016-02-15T14:34:56.86663","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-15 14:35:25.142271","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    return g(n)    \n\n","after":null,"SubmissionTime":"2016-02-15T14:35:25.142271","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-15 14:36:18.322836","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    G(n) = n,                                       if n <= 3\n    G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    #if n == 5:\n    #    return 22\n    else:\n        def bigger_than_three(x):\n            if x >= 3:\n                return 1 #x  \n            else:\n                return (G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3))\n                #return (x * g(n-x)) + (bigger_than_three(x+1) * g(n-x)) \n                #return x * g(n - x) + bigger_than_three(x+1)\n    return bigger_than_three(1)\n\n\n","after":null,"SubmissionTime":"2016-02-15T14:36:18.322836","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        def bigger_than_three(x):\r\n            if x>=3:\r\n                return 1\r\n            else:\r\n                return (g(n-1)+2*g(n-2)+3*g(n-3))\r\n    return bigger_than_three(1)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":34,"date":"2016-02-15 14:38:37.239586","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        k = 2\n        return g(n-1) + k*g(n-k)\n        \n\n\n","after":null,"SubmissionTime":"2016-02-15T14:38:37.239586","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":34,"date":"2016-02-15 14:51:39.333028","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2)\n        \n\n\n","after":null,"SubmissionTime":"2016-02-15T14:51:39.333028","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":34,"date":"2016-02-15 14:51:56.089797","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + n\n        \n\n\n","after":null,"SubmissionTime":"2016-02-15T14:51:56.089797","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-15 14:52:54.448918","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <=3:\n        return n\n    else:\n        G(n)    \n    return g(n)    \n\n","after":null,"SubmissionTime":"2016-02-15T14:52:54.448918","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":34,"date":"2016-02-15 14:54:28.372907","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + (n-1) + n\n        \n\n\n","after":null,"SubmissionTime":"2016-02-15T14:54:28.372907","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":34,"date":"2016-02-15 14:54:43.286825","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + n\n        \n\n\n","after":null,"SubmissionTime":"2016-02-15T14:54:43.286825","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":34,"date":"2016-02-15 14:55:05.024515","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + (n-1)\n        \n\n\n","after":null,"SubmissionTime":"2016-02-15T14:55:05.024515","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":34,"date":"2016-02-15 14:55:31.279208","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + (n-1) + (n-2)\n        \n\n\n","after":null,"SubmissionTime":"2016-02-15T14:55:31.279208","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":34,"date":"2016-02-15 14:55:46.265420","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + n\n        \n\n\n","after":null,"SubmissionTime":"2016-02-15T14:55:46.26542","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-15 14:56:56.797364","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <=3:\n        return n\n    else:    \n        return g(n)    \n\n","after":null,"SubmissionTime":"2016-02-15T14:56:56.797364","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-3)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))), InOrderSort(ast))))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":1062,"date":"2016-02-15 15:02:29.984893","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return n + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T15:02:29.984893","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast)))))))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":1062,"date":"2016-02-15 15:03:04.230705","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return n + n * g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T15:03:04.230705","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1062,"date":"2016-02-15 15:03:29.103153","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return n + (n-1) * g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T15:03:29.103153","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1062,"date":"2016-02-15 15:06:57.506259","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    else:\n        return n * g(n) + (n-1)*g(n-1) \n\n","after":null,"SubmissionTime":"2016-02-15T15:06:57.506259","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1062,"date":"2016-02-15 15:07:19.483500","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    if n== 2:\n        return 2\n    if n== 3 :\n        return 3\n    else:\n        return n * g(n) + (n-1)*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T15:07:19.4835","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":1035,"date":"2016-02-15 15:08:05.860057","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-15T15:08:05.860057","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1062,"date":"2016-02-15 15:09:55.942493","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + n*g(n)\n\n","after":null,"SubmissionTime":"2016-02-15T15:09:55.942493","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1062,"date":"2016-02-15 15:10:49.562409","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + (n-1)*g(n)\n\n","after":null,"SubmissionTime":"2016-02-15T15:10:49.562409","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1062,"date":"2016-02-15 15:11:04.093062","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    else:\n        return g(n-1) + (n-1)*g(n)\n\n","after":null,"SubmissionTime":"2016-02-15T15:11:04.093062","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1062,"date":"2016-02-15 15:11:27.225836","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 3\n    else:\n        return g(n-1) + (n-1)*g(n)\n\n","after":null,"SubmissionTime":"2016-02-15T15:11:27.225836","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":26,"date":"2016-02-15 15:11:27.716957","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return n+g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T15:11:27.716957","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast)))))))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":1062,"date":"2016-02-15 15:12:18.005031","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 3\n    else:\n        return g(n-1) + (n-1)*n\n\n","after":null,"SubmissionTime":"2016-02-15T15:12:18.005031","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1062,"date":"2016-02-15 15:12:18.005031","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 3\n    else:\n        return g(n-1) + (n-1)*n\n\n","after":null,"SubmissionTime":"2016-02-15T15:12:18.005031","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":26,"date":"2016-02-15 15:12:47.376787","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return n+g(n-1)+(2*g(n-2))+(3*g(n-3))\n\n","after":null,"SubmissionTime":"2016-02-15T15:12:47.376787","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1062,"date":"2016-02-15 15:15:55.341148","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + (n-1)*n\n\n","after":null,"SubmissionTime":"2016-02-15T15:15:55.341148","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1062,"date":"2016-02-15 15:19:20.335358","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    a = 1\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + a*(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T15:19:20.335358","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1062,"date":"2016-02-15 15:19:48.220219","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + (n-1)*(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T15:19:48.220219","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1062,"date":"2016-02-15 15:20:53.939957","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + (n-1)*(n-(n-1))\n\n","after":null,"SubmissionTime":"2016-02-15T15:20:53.939957","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":200,"date":"2016-02-15 15:28:24.929051","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(x,k):\n        if x <= 3:\n            return x\n        if k == 3:\n            return \n        return G(x-k, k) * G(x, k+1)\n    return G(n, 1)\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T15:28:24.929051","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":23,"date":"2016-02-15 15:29:04.454123","diff":null,"before":"def g(n):\n\t\"\"\"Return the value of G(n), computed recursively.\n\n\t>>> g(1)\n\t1\n\t>>> g(2)\n\t2\n\t>>> g(3)\n\t3\n\t>>> g(4)\n\t10\n\t>>> g(5)\n\t22\n\t>>> from construct_check import check\n\t>>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n\tTrue\n\t\"\"\"\n\tp = 4\n\tif p % 2 == 1:\n\t\tp = 1\n\tif n <= 3:\n\t\treturn n\n\telse:\n\t\treturn g(p-1((n-1)))\n\n","after":null,"SubmissionTime":"2016-02-15T15:29:04.454123","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":23,"date":"2016-02-15 15:33:42.894333","diff":null,"before":"def g(n):\n\t\"\"\"Return the value of G(n), computed recursively.\n\n\t>>> g(1)\n\t1\n\t>>> g(2)\n\t2\n\t>>> g(3)\n\t3\n\t>>> g(4)\n\t10\n\t>>> g(5)\n\t22\n\t>>> from construct_check import check\n\t>>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n\tTrue\n\t\"\"\"\n\n\tif n <= 3:\n\t\treturn n\n\telse:\n\t\treturn g(n-1) + 2*g(n-2) + 3*g(n-2)\n\n","after":null,"SubmissionTime":"2016-02-15T15:33:42.894333","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":200,"date":"2016-02-15 15:34:57.533395","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(x,k):\n        if x <= 3:\n            return x\n        if k == 3:\n            return \n        return G(x, k) * G(x, k)\n    return g(G(n,0)) + g(G(n-k, k+1))\n        \n    \n\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T15:34:57.533395","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":200,"date":"2016-02-15 15:35:13.088640","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(x,k):\n        if x <= 3:\n            return x\n        if k == 3:\n            return \n        else:\n            return G(x, k) * G(x, k)\n    return g(G(n,0)) + g(G(n-k, k+1))\n        \n    \n\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T15:35:13.08864","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":627,"date":"2016-02-15 15:49:07.547954","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    return n if n <=3 else n + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T15:49:07.547954","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":627,"date":"2016-02-15 15:50:07.739863","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    return n if n <=3 else n + g(n+1)\n\n","after":null,"SubmissionTime":"2016-02-15T15:50:07.739863","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":906,"date":"2016-02-15 15:59:02.078464","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def nest(i):\n        return i * g(n-i) * nest(i+1)\n    \n    if n <= 3:\n        return n\n    else:\n        return nest(1)\n        \n","after":null,"SubmissionTime":"2016-02-15T15:59:02.078464","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":906,"date":"2016-02-15 16:00:04.646403","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def nest(i):\n        return i * g(n-i) + nest(i+1)\n\n    if n <= 3:\n        return n\n    else:\n        return nest(1)\n\n","after":null,"SubmissionTime":"2016-02-15T16:00:04.646403","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":906,"date":"2016-02-15 16:00:40.505542","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def nest(i):\n        if n <= 3:\n            return n\n        return i * g(n-i) + nest(i+1)\n\n    return nest(1)\n\n","after":null,"SubmissionTime":"2016-02-15T16:00:40.505542","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":906,"date":"2016-02-15 16:00:40.505542","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def nest(i):\n        if n <= 3:\n            return n\n        return i * g(n-i) + nest(i+1)\n\n    return nest(1)\n\n","after":null,"SubmissionTime":"2016-02-15T16:00:40.505542","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-15 16:03:06.774615","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    def elevator(x, n):\n        x += 1\n        if n == 1:\n            return x \n        else:\n            return x*g(n-1) + g(n-1)\n\n    return elevator(0, n)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:03:06.774615","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":906,"date":"2016-02-15 16:03:08.526053","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def nest(i):\n        if(n == i):\n            return 1\n        return i * g(n-i) + nest(i+1)\n\n    if n <= 3:\n        return n\n    else:\n        return nest(1)\n\n","after":null,"SubmissionTime":"2016-02-15T16:03:08.526053","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":906,"date":"2016-02-15 16:03:13.695553","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def nest(i):\n        if(n == i):\n            return 0\n        return i * g(n-i) + nest(i+1)\n\n    if n <= 3:\n        return n\n    else:\n        return nest(1)\n\n","after":null,"SubmissionTime":"2016-02-15T16:03:13.695553","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":906,"date":"2016-02-15 16:04:59.935511","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def nest(i):\n        if n == i:\n            return 0\n        return i * g(n-i) + nest(i+1)\n\n    if n <= 3:\n        return n\n    else:\n        return nest(1)\n\n","after":null,"SubmissionTime":"2016-02-15T16:04:59.935511","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":906,"date":"2016-02-15 16:05:47.254050","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def nest(i):\n        if n <= 3:\n            return n\n        return i * g(n-i) + nest(i+1)\n\n    if n <= 3:\n        return n\n    else:\n        return nest(1)\n\n","after":null,"SubmissionTime":"2016-02-15T16:05:47.25405","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":906,"date":"2016-02-15 16:05:55.742246","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def nest(i):\n        return i * g(n-i) + nest(i+1)\n\n    if n <= 3:\n        return n\n    else:\n        return nest(1)\n\n","after":null,"SubmissionTime":"2016-02-15T16:05:55.742246","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":906,"date":"2016-02-15 16:06:34.894929","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def nest(i):\n        if i > n:\n            return 0\n        return i * g(n-i) + nest(i+1)\n\n    if n <= 3:\n        return n\n    else:\n        return nest(1)\n\n","after":null,"SubmissionTime":"2016-02-15T16:06:34.894929","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":906,"date":"2016-02-15 16:06:40.391563","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def nest(i):\n        if i > n:\n            return 1\n        return i * g(n-i) + nest(i+1)\n\n    if n <= 3:\n        return n\n    else:\n        return nest(1)\n\n","after":null,"SubmissionTime":"2016-02-15T16:06:40.391563","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":906,"date":"2016-02-15 16:06:45.037021","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def nest(i):\n        if i > n:\n            return 0\n        return i * g(n-i) + nest(i+1)\n\n    if n <= 3:\n        return n\n    else:\n        return nest(1)\n\n","after":null,"SubmissionTime":"2016-02-15T16:06:45.037021","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-15 16:11:51.957471","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def elevator(x, n):\n        x += 1\n        if n == 1:                      #stay in elevator\n            return x \n        else:\n            return x*elevator(n-1) + elevator(n-1)     #need it to do this except for 3\n\n    return elevator(0, n)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:11:51.957471","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-15 16:12:43.153885","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def elevator(x, n):\n        if n == 1:                      #stay in elevator\n            return x \n        else:\n            return x*elevator(x+1, n-1) + elevator(x+1, n-1)     #need it to do this except for 3\n\n    return elevator(0, n)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:12:43.153885","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-15 16:13:57.186971","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def elevator(x, n):\n        x += 1\n        if n == 1:                      #stay in elevator\n            return x \n        else:\n            return x*elevator(x, n-1) + elevator(x, n-1)     #need it to do this except for 3\n\n    return elevator(0, n)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:13:57.186971","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":466,"date":"2016-02-15 16:14:25.125765","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        x = 3\n        total = 0\n        while x > 0:\n            total += x * g(n-x)\n            x -= 1\n        return total\n\n","after":null,"SubmissionTime":"2016-02-15T16:14:25.125765","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        x = 3\r\n        total = 0\r\n        while x>0:\r\n            total += x*g(n-x)\r\n            x -= 1\r\n        return total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    )), Selected(\\x => Match(x, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-15 16:17:54.378359","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def elevator(x, n):\n        x += 1\n        if n == 1:                      #stay in elevator\n            return x \n\n        else:\n            return x*g(n-1) + g(n-1)     #need it to do this except for 3\n\n    return elevator(0, n)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:17:54.378359","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-15 16:20:27.616397","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    def elevator(x, n):\n        x += 1\n        if n == 1:                      #stay in elevator\n            return x \n        if n == 3:\n            return (x*g(n-1)-1) + g(n-1)\n        else:\n            return x*g(n-1) + g(n-1)     #need it to do this except for 3\n\n    return elevator(0, n)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:20:27.616397","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":466,"date":"2016-02-15 16:21:01.654112","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x = 4\n    if n <= 3:\n        return n\n    else:\n        return (x-1) * g(n-x-1)\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:21:01.654112","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":466,"date":"2016-02-15 16:21:22.953197","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x = 3\n    if n <= 3:\n        return n\n    else:\n        return (x) * g(n-x)\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:21:22.953197","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":466,"date":"2016-02-15 16:23:03.633798","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x = 3\n    if n <= 3:\n        return n\n    return x*g(n-x)\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:23:03.633798","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":466,"date":"2016-02-15 16:23:03.633798","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x = 3\n    if n <= 3:\n        return n\n    return x*g(n-x)\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:23:03.633798","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":466,"date":"2016-02-15 16:23:03.633798","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x = 3\n    if n <= 3:\n        return n\n    return x*g(n-x)\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:23:03.633798","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":466,"date":"2016-02-15 16:23:24.637117","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x = 3\n    if n <= 3:\n        return n\n    else:\n        return x * g(n-x)\n    g(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:23:24.637117","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":466,"date":"2016-02-15 16:23:36.594245","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x = 3\n    if n <= 3:\n        return n\n    else:\n        x * g(n-x)\n    return g(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:23:36.594245","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":466,"date":"2016-02-15 16:24:05.436151","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x = 3\n    if n <= 3:\n        return n\n    else:\n        x * g(n - x)\n    g(n - 1)\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:24:05.436151","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":466,"date":"2016-02-15 16:24:18.124885","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x = 3\n    if n <= 3:\n        return n\n    else:\n        x * g(n - x)\n    return g(n - 1)\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:24:18.124885","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":466,"date":"2016-02-15 16:24:32.270429","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x = 3\n    if n <= 3:\n        return n\n    else:\n        x * g(n - x)\n        print ('check')\n    return g(n - 1)\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:24:32.270429","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":466,"date":"2016-02-15 16:24:32.270429","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x = 3\n    if n <= 3:\n        return n\n    else:\n        x * g(n - x)\n        print ('check')\n    return g(n - 1)\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:24:32.270429","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":466,"date":"2016-02-15 16:24:50.489096","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x = 3\n    if n <= 3:\n        return n\n    else:\n        x * g(n - x)\n        print ('check')\n    g(n - 1)\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:24:50.489096","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":627,"date":"2016-02-15 16:26:15.184651","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    return n if n <=3 else n + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T16:26:15.184651","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-15 16:26:20.640792","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    def elevator(x, n):\n        x += 1\n        if n == 1:                      #stay in elevator\n            return x \n        if n == 3:\n            return (x*g(n-1)-1) + g(n-1)\n        else:\n            return x*g(n-1) + (x+1)*g(n-2)     #need it to do this except for 3\n\n    return elevator(0, n)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:26:20.640792","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-15 16:29:26.207408","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    def elevator(x, n):\n        if n == 1:                      #stay in elevator\n            return x \n        if n == 3:\n            return (x*g(n-1)-1) + g(n-1)\n        else:\n            return x*g(n-1) + elevator(x+1, n-1)     #need it to do this except for 3\n\n    return elevator(0, n)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:29:26.207408","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-15 16:29:51.529730","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    def elevator(x, n):\n        x=x+1\n        if n == 1:                      #stay in elevator\n            return x \n        if n == 3:\n            return (x*g(n-1)-1) + g(n-1)\n        else:\n            return x*g(n-1) + elevator(x, n-1)     #need it to do this except for 3\n\n    return elevator(0, n)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:29:51.52973","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":466,"date":"2016-02-15 16:30:59.524543","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x = 3\n    if n <= 3:\n        return n\n    else:\n        return n * g(n - x)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:30:59.524543","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":466,"date":"2016-02-15 16:30:59.524543","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x = 3\n    if n <= 3:\n        return n\n    else:\n        return n * g(n - x)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:30:59.524543","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":490,"date":"2016-02-15 16:31:38.679027","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def computer(n, x):\n        if n <= 3:\n            return n\n        else:\n            return x*computer(n -1, x+1) + x*computer(n-1, x+1)\n\n    return computer(n, 1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:31:38.679027","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":466,"date":"2016-02-15 16:32:12.105658","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    x = 4\n    if n <= 3:\n        return n\n    else:\n        return n * g(n - x - 1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:32:12.105658","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-15 16:32:18.818868","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    def elevator(x, n):\n        if n == 1:                      #stay in elevator\n            return x \n        x=x+1\n        if n == 3:\n            return (x*g(n-1)-1) + g(n-1)\n        else:\n            return x*g(n-1) + elevator(x, n-1)     #need it to do this except for 3\n\n    return elevator(0, n)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:32:18.818868","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":466,"date":"2016-02-15 16:33:51.139740","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return (n) * g(n - x - 1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:33:51.13974","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":466,"date":"2016-02-15 16:33:58.218292","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return (n) * g(n - 1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:33:58.218292","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":466,"date":"2016-02-15 16:34:05.849007","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return (n - 1) * g(n - 1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:34:05.849007","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":466,"date":"2016-02-15 16:34:05.849007","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return (n - 1) * g(n - 1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:34:05.849007","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":466,"date":"2016-02-15 16:34:21.804554","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return (n - 2) * g(n - 2)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:34:21.804554","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":466,"date":"2016-02-15 16:35:21.831163","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        x = 4\n        return (n) * g(n - 2)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:35:21.831163","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":466,"date":"2016-02-15 16:35:34.110492","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        x = 4\n        return (n - 1) * g(n - 2)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:35:34.110492","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":466,"date":"2016-02-15 16:40:56.799872","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        n -= 1\n        return (n - 2) * g(n - (n - 3))\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:40:56.799872","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":490,"date":"2016-02-15 16:41:26.536640","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    def computer(n, x):\n        if n == 0:\n            return 0\n        return x*g(n-1) + computer(n-1, x+1)\n    return computer(n, 1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:41:26.53664","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-15 16:47:27.525904","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    def elevator(x, n):\n        if n == 1:\n            return x\n\n        else:\n            return x*elevator(x+1, n-1)     #need it to do this except for 3\n\n    return elevator(1, n)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:47:27.525904","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":502,"date":"2016-02-15 17:03:24.578991","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total, k = 0, 1\n    if n <= 3:\n        return n\n    else:\n        total, k = total + k * g(n-k), k + 1\n            \n\n\n\n","after":null,"SubmissionTime":"2016-02-15T17:03:24.578991","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":502,"date":"2016-02-15 17:04:57.497733","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total, k = 0, 1\n    if n <= 3:\n        return n\n    else:\n        total, k = g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) , k + 1\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T17:04:57.497733","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-15 17:18:17.682981","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n\n    y == n\n    x + y == n\n\n    if n >= 3:\n        return x\n    else:\n        return (x+1)*g(y-1)\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T17:18:17.682981","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":1021,"date":"2016-02-15 17:21:54.962620","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    sum = 0\n    values = [1,2,3]\n    if n <= 3:\n        return values [n-1]\n    while n>3:\n        sum = values[-1] + 2 * values[-2] + 3 * values[-3]\n        values = [values[-2], values [-1], sum]\n        n = n-1\n    return sum\n\n","after":null,"SubmissionTime":"2016-02-15T17:21:54.96262","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":1021,"date":"2016-02-15 17:22:11.293283","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    sum = 0\n    values = [1,2,3]\n    if n <= 3:\n        return values [n-1]\n    if n>3:\n        sum = values[-1] + 2 * values[-2] + 3 * values[-3]\n        values = [values[-2], values [-1], sum]\n        n = n-1\n    return sum\n\n","after":null,"SubmissionTime":"2016-02-15T17:22:11.293283","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":833,"date":"2016-02-15 17:22:43.798154","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def h(x):\n        nonlocal count\n        if x <=0:\n            return x\n        else:\n            count+=1\n            return (count)*h(x-count)\n    count = 0\n\n\n    if n<=3:\n        return n\n    else:\n        return h(n)\n    \n","after":null,"SubmissionTime":"2016-02-15T17:22:43.798154","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":1021,"date":"2016-02-15 17:22:49.244044","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    sum = 0\n    values = [1,2,3]\n    if n <= 3:\n        return values[n-1]\n    if n>3:\n        sum = values[-1] + 2 * values[-2] + 3 * values[-3]\n        values = [values[-2], values [-1], sum]\n        n = n-1\n    return sum\n\n","after":null,"SubmissionTime":"2016-02-15T17:22:49.244044","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":1021,"date":"2016-02-15 17:23:38.366077","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    sum = 0\n    values = [1,2,3]\n    if n <= 3:\n        return values[n-1]\n    if n>3:\n        sum = values[-1] + 2 * values[-2] + 3 * values[-3]\n        values = [values[-2], values [-1], sum]\n        n -= 1\n    return sum\n\n","after":null,"SubmissionTime":"2016-02-15T17:23:38.366077","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":1021,"date":"2016-02-15 17:24:04.269760","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    sum = 0\n    values = [1,2,3]\n    if n <= 3:\n        return values[n-1]\n    if n>3:\n        sum = values[-1] + 2 * values[-2] + 3 * values[-3]\n        values = [values[-2], values[-1], sum]\n        n -= 1\n    return sum\n\n","after":null,"SubmissionTime":"2016-02-15T17:24:04.26976","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":833,"date":"2016-02-15 17:35:25.539917","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def h(k,n):\n        if k == n:\n            return 1\n        else:\n            return k*h(k+1,n)\n\n    if n <= 3:\n        return n\n    else:\n        return h(1,n)\n        \n \n","after":null,"SubmissionTime":"2016-02-15T17:35:25.539917","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":470,"date":"2016-02-15 17:50:17.611488","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def add_function(n):\n        if n <= 3:\n            return n\n        else:\n            return n+g(n-1)\n\n    return add_function(n)\n\n","after":null,"SubmissionTime":"2016-02-15T17:50:17.611488","SynthesizedAfter":"\r\ndef g(n):\r\n    def add_function(n):\r\n        if n<=3:\r\n            return n\r\n        else:\r\n            return g(n-1)+2*g(n-2)+3*g(n-3)\r\n    return add_function(n)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast)))))))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":470,"date":"2016-02-15 17:51:47.826464","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"\"\"def add_function(n):\n        if n <= 3:\n            return n\n        else:\n            return n+g(n-1)\n\n    return add_function(n)\"\"\"\n\n    def add_function(n):\n        if n >= 3:\n            return n+g(n-1)\n        else:\n            return n\n\n    return add_function(n)\n\n\n","after":null,"SubmissionTime":"2016-02-15T17:51:47.826464","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":470,"date":"2016-02-15 17:52:20.554185","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"\"\"def add_function(n):\n        if n <= 3:\n            return n\n        else:\n            return n+g(n-1)\n\n    return add_function(n)\"\"\"\n\n    def add_function(n):\n        if n > 3:\n            return n+g(n-1)\n        else:\n            return n\n\n    return add_function(n)\n\n\n","after":null,"SubmissionTime":"2016-02-15T17:52:20.554185","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":470,"date":"2016-02-15 18:00:35.798769","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    \"\"\"def add_function(n):\n        if n > 3:\n            return n+g(n-1) + 3 \n        else:\n            return n\n\n    return add_function(n)  #problem- stopping when n<3\"\"\"\n\n\n    def add_function(n):\n        if n > 3:\n            return g(n-1) + 3 + 2\n        else:\n            return n\n\n    return add_function(n)\n\n\n","after":null,"SubmissionTime":"2016-02-15T18:00:35.798769","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":762,"date":"2016-02-15 18:26:36.759594","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return g(g(n-1) + n)\n\n","after":null,"SubmissionTime":"2016-02-15T18:26:36.759594","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":100,"date":"2016-02-15 18:31:33.190103","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n * g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T18:31:33.190103","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":100,"date":"2016-02-15 18:31:50.954863","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 0:\n        return n\n    else:\n        return n * g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T18:31:50.954863","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":100,"date":"2016-02-15 18:32:11.995110","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return n\n    else:\n        return n * g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T18:32:11.99511","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":636,"date":"2016-02-15 18:33:12.406169","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(n):\n        if n<=3:\n            return n\n        if n>3:\n            return G(n-1) + 2*G(n-2) + 3*G(n-3)\n    return G\n\n","after":null,"SubmissionTime":"2016-02-15T18:33:12.406169","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":636,"date":"2016-02-15 18:35:10.692067","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(n):\n        if n==1:\n            return 1\n        if n<=3:\n            return n\n        if n>3:\n            return G(n-1) + 2*G(n-2) + 3*G(n-3)\n    return G\n\n","after":null,"SubmissionTime":"2016-02-15T18:35:10.692067","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":893,"date":"2016-02-15 18:58:58.140960","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    #if n <= 3:\n     #   return n\n    #else: \n     #   while n <= n:\n      #      return factorial(n) + \n    if n <= 3:\n        return n\n    else:\n        total, k = 1, 2\n        while k <= n:\n            total = total * (factorial(n) + k), k + 1\n        return total \n\n","after":null,"SubmissionTime":"2016-02-15T18:58:58.14096","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":893,"date":"2016-02-15 18:59:36.796387","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    #if n <= 3:\n     #   return n\n    #else: \n     #   while n <= n:\n      #      return factorial(n) + \n    if n <= 3:\n        return n\n    else:\n        total, k = 1, 2\n        while k < n:\n            total = total * (factorial(n) + k), k + 1\n        return total \n\n","after":null,"SubmissionTime":"2016-02-15T18:59:36.796387","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":893,"date":"2016-02-15 19:00:01.490333","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    #if n <= 3:\n     #   return n\n    #else: \n     #   while n <= n:\n      #      return factorial(n) + \n    if n <= 3:\n        return n\n    else:\n        total, k = 1, 2\n        while k < n:\n            total = total * (factorial(g(n)) + k), k + 1\n        return total \n\n","after":null,"SubmissionTime":"2016-02-15T19:00:01.490333","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":893,"date":"2016-02-15 19:00:15.052610","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    #if n <= 3:\n     #   return n\n    #else: \n     #   while n <= n:\n      #      return factorial(n) + \n    if n <= 3:\n        return n\n    else:\n        total, k = 1, 2\n        while k <= n:\n            total = total * (factorial(g(n)) + k), k + 1\n        return total \n\n","after":null,"SubmissionTime":"2016-02-15T19:00:15.05261","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":893,"date":"2016-02-15 19:00:39.045304","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    #if n <= 3:\n     #   return n\n    #else: \n     #   while n <= n:\n      #      return factorial(n) + \n    if n <= 3:\n        return n\n    else:\n        total, k = 1, 2\n        while k <= n:\n            total = total * (g(n-1) + k), k + 1\n        return total \n\n","after":null,"SubmissionTime":"2016-02-15T19:00:39.045304","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":893,"date":"2016-02-15 19:00:51.633602","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    #if n <= 3:\n     #   return n\n    #else: \n     #   while n <= n:\n      #      return factorial(n) + \n    if n <= 3:\n        return n\n    else:\n        total, k = 1, 2\n        while k <= n:\n            total = total * g(n-1) + k, k + 1\n        return total \n\n","after":null,"SubmissionTime":"2016-02-15T19:00:51.633602","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":507,"date":"2016-02-15 19:11:09.898766","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n       return n\n    print (n-1)\n    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-15T19:11:09.898766","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    print(n-1)\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":1,"Id":0,"studentId":292,"date":"2016-02-15 19:29:05.552274","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    l=[n]\n    [print (n) for n in l if n <=3]\n    [ (g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)) for n in l if n>3]\n\n\n","after":null,"SubmissionTime":"2016-02-15T19:29:05.552274","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":604,"date":"2016-02-15 19:33:44.318760","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    x=1\n    def gre3(n, x):\n        if n<=3:\n            return n\n        x+1\n        return gre3(n-1)+x*gre3(n-2)\n\n","after":null,"SubmissionTime":"2016-02-15T19:33:44.31876","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":604,"date":"2016-02-15 19:33:58.770470","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    x=1\n    def gre3(n, x):\n        if n<=3:\n            return n\n        x+1\n        return gre3(n-1)+x*gre3(n-2)\n    return gre3\n","after":null,"SubmissionTime":"2016-02-15T19:33:58.77047","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":604,"date":"2016-02-15 19:34:14.743684","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    x=1\n    def gre3(n, x):\n        if n<=3:\n            return n\n        x+1\n        return gre3(n-1)+x*gre3(n-2)\n    return gre3(n, x)\n","after":null,"SubmissionTime":"2016-02-15T19:34:14.743684","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":604,"date":"2016-02-15 19:35:05.518603","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    x=1\n    def gre3(n):\n        if n<=3:\n            return n\n        x+1\n        return gre3(n-1)+x*gre3(n-2)\n    return gre3(n)\n\n","after":null,"SubmissionTime":"2016-02-15T19:35:05.518603","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":604,"date":"2016-02-15 19:35:54.294524","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    x=0\n    def gre3(n):\n        if n<=3:\n            return n\n        x+1\n        return x*gre3(n-1)\n    return gre3(n)\n\n","after":null,"SubmissionTime":"2016-02-15T19:35:54.294524","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":889,"date":"2016-02-15 19:37:28.680753","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-15T19:37:28.680753","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":604,"date":"2016-02-15 19:38:22.265446","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    x=0\n    def gre3(n):\n        if n<=3:\n            return n\n        x+1\n        return x*gre3(n-1)+ x*gre3(n-2)+x*gre3(n-3)\n    return gre3(n)\n\n","after":null,"SubmissionTime":"2016-02-15T19:38:22.265446","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":604,"date":"2016-02-15 19:38:22.265446","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    x=0\n    def gre3(n):\n        if n<=3:\n            return n\n        x+1\n        return x*gre3(n-1)+ x*gre3(n-2)+x*gre3(n-3)\n    return gre3(n)\n\n","after":null,"SubmissionTime":"2016-02-15T19:38:22.265446","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":604,"date":"2016-02-15 19:39:08.875216","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    x=0\n    if n<=3:\n        return n\n    x+1\n    return x*g(n-1)+ x*g(n-2)+x*g(n-3)\n\n\n","after":null,"SubmissionTime":"2016-02-15T19:39:08.875216","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":542,"date":"2016-02-15 19:42:59.156363","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-15T19:42:59.156363","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":1048,"date":"2016-02-15 19:52:36.666840","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    if n > 3:\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n    \n\n","after":null,"SubmissionTime":"2016-02-15T19:52:36.66684","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    if n>3:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-15 20:00:19.408352","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    def elevator(x):                        #does not work for less than 3\n        x += 1\n        if n < 4:\n            return n*x \n        else:\n            return x*g(n-1) + g(n-1)\n    return elevator\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T20:00:19.408352","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-15 20:00:37.690175","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    def elevator(x):                        #does not work for less than 3\n        x += 1\n        if n < 4:\n            return n*x \n        else:\n            return x*g(n-1) + g(n-1)\n    return elevator(0)\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T20:00:37.690175","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-15 20:02:22.889674","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    def elevator(x):                        #does not work for less than 3\n        x += 1\n        if n < 4:\n            return n*x \n        else:\n            return x*g(n-1) + g(n-1)\n    return elevator()\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T20:02:22.889674","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-15 20:02:31.510634","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    def elevator(x):                        #does not work for less than 3\n        x += 1\n        if n < 4:\n            return n*x \n        else:\n            return x*g(n-1) + g(n-1)\n    return elevator\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T20:02:31.510634","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":740,"date":"2016-02-15 20:25:28.729380","diff":null,"before":"def g(x):\n        if n == 0:\n            return x\n        if n == 1:\n            return f(x)\n        else:\n            return f(g(n - 1))(x)\n    return g(n)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return (n - 3) * G(n - (n - 3))\n\n","after":null,"SubmissionTime":"2016-02-15T20:25:28.72938","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":740,"date":"2016-02-15 20:27:27.599188","diff":null,"before":"def g(x):\n        if n == 0:\n            return x\n        if n == 1:\n            return f(x)\n        else:\n            return f(g(n - 1))(x)\n    return g(n)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return (n - 3) * g(n - (n - 3))\n\n","after":null,"SubmissionTime":"2016-02-15T20:27:27.599188","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":273,"date":"2016-02-15 20:28:10.966283","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if(n == 0):\n        return 0\n    return 1 + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T20:28:10.966283","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":273,"date":"2016-02-15 20:29:43.422958","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if(n <= 3):\n        return n\n    return n * g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T20:29:43.422958","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":273,"date":"2016-02-15 20:30:09.135410","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if(n <= 3):\n        return n\n    return n * g(n) + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T20:30:09.13541","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":273,"date":"2016-02-15 20:30:36.643017","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if(n <= 3):\n        return n\n    return g(n-1) + (n * g(n))\n\n","after":null,"SubmissionTime":"2016-02-15T20:30:36.643017","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":273,"date":"2016-02-15 20:31:08.861549","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if(n <= 3):\n        return n\n    return g(n-1)*n\n\n","after":null,"SubmissionTime":"2016-02-15T20:31:08.861549","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":273,"date":"2016-02-15 20:31:45.282742","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if(n <= 3):\n        return n\n    return g(n-1)*(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T20:31:45.282742","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":273,"date":"2016-02-15 20:31:58.358265","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if(n <= 3):\n        return n\n    return g(n-1)*(n)\n\n","after":null,"SubmissionTime":"2016-02-15T20:31:58.358265","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":740,"date":"2016-02-15 20:35:27.685897","diff":null,"before":"def g(x):\n        if n == 0:\n            return x\n        if n == 1:\n            return f(x)\n        else:\n            return f(g(n - 1))(x)\n    return g(n)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def G(n):\n            (n - 1) + 2 * (n - 2) + 3 * (n - 3)\n            return G(n - 1)\n        return G(n)\n\n","after":null,"SubmissionTime":"2016-02-15T20:35:27.685897","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":740,"date":"2016-02-15 20:36:00.165727","diff":null,"before":"def g(x):\n        if n == 0:\n            return x\n        if n == 1:\n            return f(x)\n        else:\n            return f(g(n - 1))(x)\n    return g(n)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def G(n):\n            (n - 1) + 2 * (n - 2) + 3 * (n - 3)\n            return G(n - 1)\n        return G\n\n","after":null,"SubmissionTime":"2016-02-15T20:36:00.165727","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":740,"date":"2016-02-15 20:36:42.288425","diff":null,"before":"def g(x):\n        if n == 0:\n            return x\n        if n == 1:\n            return f(x)\n        else:\n            return f(g(n - 1))(x)\n    return g(n)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def G(x):\n            (x - 1) + 2 * (x - 2) + 3 * (x - 3)\n            return G(x - 1)\n        return G(n)\n\n","after":null,"SubmissionTime":"2016-02-15T20:36:42.288425","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":740,"date":"2016-02-15 20:47:44.784204","diff":null,"before":"def g(x):\n        if n == 0:\n            return x\n        if n == 1:\n            return f(x)\n        else:\n            return f(g(n - 1))(x)\n    return g(n)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def G(x):\n            (x - 1) + 2 * (x - 2) + 3 * (x - 3)\n            return G(x)\n        return G(n)\n\n","after":null,"SubmissionTime":"2016-02-15T20:47:44.784204","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":740,"date":"2016-02-15 20:48:05.375815","diff":null,"before":"def g(x):\n        if n == 0:\n            return x\n        if n == 1:\n            return f(x)\n        else:\n            return f(g(n - 1))(x)\n    return g(n)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def G(x):\n            (x - 1) + 2 * (x - 2) + 3 * (x - 3)\n            return G(x) + G(x - 1)\n        return G(n)\n\n","after":null,"SubmissionTime":"2016-02-15T20:48:05.375815","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":740,"date":"2016-02-15 20:53:07.126558","diff":null,"before":"def g(x):\n        if n == 0:\n            return x\n        if n == 1:\n            return f(x)\n        else:\n            return f(g(n - 1))(x)\n    return g(n)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def G(x):\n            (x - 1) + 2 * (x - 2) + 3 * (x - 3)\n        return G(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T20:53:07.126558","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":740,"date":"2016-02-15 20:54:33.575276","diff":null,"before":"def g(x):\n        if n == 0:\n            return x\n        if n == 1:\n            return f(x)\n        else:\n            return f(g(n - 1))(x)\n    return g(n)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def G(x):\n            return (x - 1) + 2 * (x - 2) + 3 * (x - 3)\n        return G(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T20:54:33.575276","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":740,"date":"2016-02-15 20:55:35.688119","diff":null,"before":"def g(x):\n        if n == 0:\n            return x\n        if n == 1:\n            return f(x)\n        else:\n            return f(g(n - 1))(x)\n    return g(n)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        def G(x):\n            (x - 1) + 2 * (x - 2) + 3 * (x - 3)\n            return G(x - 1)\n        return G(n)\n\n","after":null,"SubmissionTime":"2016-02-15T20:55:35.688119","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":740,"date":"2016-02-15 20:56:53.204072","diff":null,"before":"def g(x):\n        if n == 0:\n            return x\n        if n == 1:\n            return f(x)\n        else:\n            return f(g(n - 1))(x)\n    return g(n)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def G(x):\n            (x - 1) + 2 * (x - 2) + 3 * (x - 3)\n    if n <= 3:\n        return n\n    elif n == 4:\n        return G(4)\n    else:\n        return G(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T20:56:53.204072","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":740,"date":"2016-02-15 20:57:15.220384","diff":null,"before":"def g(x):\n        if n == 0:\n            return x\n        if n == 1:\n            return f(x)\n        else:\n            return f(g(n - 1))(x)\n    return g(n)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def G(x):\n            return (x - 1) + 2 * (x - 2) + 3 * (x - 3)\n    if n <= 3:\n        return n\n    elif n == 4:\n        return G(4)\n    else:\n        return G(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T20:57:15.220384","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":740,"date":"2016-02-15 20:57:15.220384","diff":null,"before":"def g(x):\n        if n == 0:\n            return x\n        if n == 1:\n            return f(x)\n        else:\n            return f(g(n - 1))(x)\n    return g(n)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def G(x):\n            return (x - 1) + 2 * (x - 2) + 3 * (x - 3)\n    if n <= 3:\n        return n\n    elif n == 4:\n        return G(4)\n    else:\n        return G(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T20:57:15.220384","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":740,"date":"2016-02-15 20:57:33.783347","diff":null,"before":"def g(x):\n        if n == 0:\n            return x\n        if n == 1:\n            return f(x)\n        else:\n            return f(g(n - 1))(x)\n    return g(n)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def G(x):\n            return (x - 1) + 2 * (x - 2) + 3 * (x - 3)\n    if n <= 3:\n        return n\n    elif n == 4:\n        return G(4)\n    else:\n        return G(n - 1) + G(n)\n\n","after":null,"SubmissionTime":"2016-02-15T20:57:33.783347","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1001,"date":"2016-02-15 21:04:16.389647","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    step= 0\n    for n in range (0, 3):\n        return n\n    while n > 3:\n        step += 1\n        total += step* g(n-1)\n        return total\n\n","after":null,"SubmissionTime":"2016-02-15T21:04:16.389647","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1001,"date":"2016-02-15 21:04:51.123138","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    step= 0\n    i = n\n    for i in range (0, 3):\n        return i\n    while n > 3:\n        step += 1\n        total += step* g(n-1)\n        return total\n\n","after":null,"SubmissionTime":"2016-02-15T21:04:51.123138","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":870,"date":"2016-02-15 21:06:45.738409","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    if n <= 3:\n        return n\n    else:\n        n = g(n - 1) + n\n\n","after":null,"SubmissionTime":"2016-02-15T21:06:45.738409","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1001,"date":"2016-02-15 21:06:54.834784","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    step= 0\n    i = n\n    if n <=3:\n        return i\n    while n > 3:\n        step += 1\n        total += step* g(n-1)\n        return total\n\n","after":null,"SubmissionTime":"2016-02-15T21:06:54.834784","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":870,"date":"2016-02-15 21:07:13.778940","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    if n <= 3:\n        return n\n    else:\n        n += g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T21:07:13.77894","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1001,"date":"2016-02-15 21:07:24.735769","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    step= 0\n    i = n\n    if n <=3:\n        return i\n    while n > 3:\n        step += 1\n        total += step*G(n-1)\n        return total\n\n","after":null,"SubmissionTime":"2016-02-15T21:07:24.735769","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":870,"date":"2016-02-15 21:07:40.333849","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    if n <= 3:\n        return n\n    else:\n        n = n + g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-15T21:07:40.333849","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1001,"date":"2016-02-15 21:07:48.137980","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    step= 0\n    total = 0\n    \n    i = n\n    if n <=3:\n        return i\n    while n > 3:\n        step += 1\n        total += step*G(n-1)\n        return total\n\n","after":null,"SubmissionTime":"2016-02-15T21:07:48.13798","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1001,"date":"2016-02-15 21:08:37.930882","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    step= 0\n    total = 0\n\n    i = n\n    if n <=3:\n        return i\n    while n > 3:\n        step += 1\n        total += step*(g(n-1))\n        return total\n\n","after":null,"SubmissionTime":"2016-02-15T21:08:37.930882","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1001,"date":"2016-02-15 21:13:19.469840","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    step= 0\n    total = 0\n\n    \n    while n > 3:\n        step += 1\n        total += step*(g(n-1))\n        return total\n    \n    if n <=3:\n        return i\n\n","after":null,"SubmissionTime":"2016-02-15T21:13:19.46984","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1001,"date":"2016-02-15 21:21:35.474018","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    for i in range(1,3):\n        return i\n    return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n    \"\"\"step= 0\n    total = 0\n\n    \n    while n > 3:\n        step += 1\n        total += step*(g(n-1))\n        return total\n\n    if n <=3:\n        return i\"\"\"\n\n","after":null,"SubmissionTime":"2016-02-15T21:21:35.474018","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1001,"date":"2016-02-15 21:21:46.709995","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i=n\n    \n    for i in range(1,3):\n        return i\n    return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n    \"\"\"step= 0\n    total = 0\n\n    \n    while n > 3:\n        step += 1\n        total += step*(g(n-1))\n        return total\n\n    if n <=3:\n        return i\"\"\"\n\n","after":null,"SubmissionTime":"2016-02-15T21:21:46.709995","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1001,"date":"2016-02-15 21:22:11.417110","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n\n    for n in range(1,3):\n        return n\n    return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n    \"\"\"step= 0\n    total = 0\n\n    \n    while n > 3:\n        step += 1\n        total += step*(g(n-1))\n        return total\n\n    if n <=3:\n        return i\"\"\"\n\n","after":null,"SubmissionTime":"2016-02-15T21:22:11.41711","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":642,"date":"2016-02-15 21:22:40.085892","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if g<=3:\n        return n\n    else:\n        return g(n-1)+2*g(n-2)+3*g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-15T21:22:40.085892","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":1001,"date":"2016-02-15 21:22:49.054117","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n\n    while n <= 3:\n        return n\n    return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n    \"\"\"step= 0\n    total = 0\n\n    \n    while n > 3:\n        step += 1\n        total += step*(g(n-1))\n        return total\n\n    if n <=3:\n        return i\"\"\"\n\n","after":null,"SubmissionTime":"2016-02-15T21:22:49.054117","SynthesizedAfter":"\r\ndef g(n):\r\n    while n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":789,"date":"2016-02-15 21:25:03.590392","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n in range(4):\n        return n\n    else:\n        return g(n-1) + 2(g(n-2)) + 3(g(n-3))\n\n\n","after":null,"SubmissionTime":"2016-02-15T21:25:03.590392","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":789,"date":"2016-02-15 21:26:09.358699","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    new = (1,2,3)\n    if n in new:\n        return n\n    return g(n-1) + 2(g(n-2)) + 3(g(n-3))\n\n\n","after":null,"SubmissionTime":"2016-02-15T21:26:09.358699","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":866,"date":"2016-02-15 21:31:32.774017","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return G(n-1) + 2*G(n-2) + 3*G(n-3)\n\n","after":null,"SubmissionTime":"2016-02-15T21:31:32.774017","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":642,"date":"2016-02-15 21:31:55.485252","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return g(n-1)*n\n\n","after":null,"SubmissionTime":"2016-02-15T21:31:55.485252","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":590,"date":"2016-02-15 21:42:46.165608","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def G(n):\n        if n <= 3:\n            return n\n        else:\n            print (n)\n            return G(n-1) + 2 * G(n-2) + 3 * G(n-3)\n\n    return G(n)\n\n","after":null,"SubmissionTime":"2016-02-15T21:42:46.165608","SynthesizedAfter":"\r\ndef g(n):\r\n    def G(n):\r\n        if n<=3:\r\n            return n\r\n        else:\r\n            print(n)\r\n            return g(n-1)+2*G(n-2)+3*G(n-3)\r\n    return G(n)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":2,"Id":0,"studentId":859,"date":"2016-02-15 21:56:26.937561","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 0:\n        return\n    elif n <= 3 and n > 0:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-15T21:56:26.937561","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":200,"date":"2016-02-15 22:02:30.321980","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(x,k):\n        if x <= 3:\n            return x\n        if k == 3:\n            return \n        a = G(x, k) * G(x, k)\n    return G(n-k,k+1) + a\n    return G(n, 0)\n\n","after":null,"SubmissionTime":"2016-02-15T22:02:30.32198","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":200,"date":"2016-02-15 22:06:02.896697","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n    \n\n","after":null,"SubmissionTime":"2016-02-15T22:06:02.896697","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":576,"date":"2016-02-15 22:07:45.788609","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T22:07:45.788609","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":857,"date":"2016-02-15 22:19:49.857427","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-15T22:19:49.857427","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":857,"date":"2016-02-15 22:20:32.294183","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n    \treturn n\n    else:\n    \tG(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n    \n\n\n\n","after":null,"SubmissionTime":"2016-02-15T22:20:32.294183","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":857,"date":"2016-02-15 22:20:53.889979","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n    \treturn n\n    else:\n    \tg(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T22:20:53.889979","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":540,"date":"2016-02-15 22:30:22.338590","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        if n == 1:\n            return n\n        else:\n            n + g(n-1)\n    else:\n        return g(n) + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T22:30:22.33859","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":540,"date":"2016-02-15 22:32:19.057423","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n) + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T22:32:19.057423","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":695,"date":"2016-02-15 22:41:48.295433","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return n * g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T22:41:48.295433","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":695,"date":"2016-02-15 22:45:35.888526","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return g(n-1) + g(n-2)\n\n","after":null,"SubmissionTime":"2016-02-15T22:45:35.888526","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":800,"date":"2016-02-15 22:51:00.383104","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n < 3:\n        return n\n    elif n > 3:\n        return G(n-1) + 2*G(n-2) + 3*G(n-3)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T22:51:00.383104","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":800,"date":"2016-02-15 22:51:25.195085","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    elif n > 3:\n        return G(n-1) + 2*G(n-2) + 3*G(n-3)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T22:51:25.195085","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    elif n>3:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":695,"date":"2016-02-15 22:51:54.720578","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return 2 * g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T22:51:54.720578","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":492,"date":"2016-02-15 22:56:25.284789","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return G(n-1) + 2*G(n-2) + 3*G(n-3)\n\n","after":null,"SubmissionTime":"2016-02-15T22:56:25.284789","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":640,"date":"2016-02-15 23:00:06.872872","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-15T23:00:06.872872","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":540,"date":"2016-02-15 23:02:08.971509","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n > 3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-15T23:02:08.971509","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":484,"date":"2016-02-15 23:19:07.458638","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if g<=3:\n        return g\n    else:\n        return add(n*g(n),(n-1)*g(n-1))\n\n\n","after":null,"SubmissionTime":"2016-02-15T23:19:07.458638","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":484,"date":"2016-02-15 23:24:45.567897","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if g<=3:\n        return g\n    else:\n        return g(g-1*(g-1))\n\n\n","after":null,"SubmissionTime":"2016-02-15T23:24:45.567897","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":484,"date":"2016-02-15 23:25:00.803246","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return g(g-1*(g-1))\n\n\n","after":null,"SubmissionTime":"2016-02-15T23:25:00.803246","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":740,"date":"2016-02-15 23:25:07.935060","diff":null,"before":"def g(x):\n        if n == 0:\n            return x\n        if n == 1:\n            return f(x)\n        else:\n            return f(g(n - 1))(x)\n    return g(n)\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    elif n == 4:\n        return G(4)\n    else:\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n -3)\n\n","after":null,"SubmissionTime":"2016-02-15T23:25:07.93506","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":484,"date":"2016-02-15 23:26:58.578070","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return g((n - 1) + 2 * (n - 2) + 3 * (n - 3))\n\n\n","after":null,"SubmissionTime":"2016-02-15T23:26:58.57807","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))), 1), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))), 1), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Target(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))))), InOrderSort(ast))))))))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":659,"date":"2016-02-15 23:53:16.563468","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    else:\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-15T23:53:16.563468","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":778,"date":"2016-02-16 00:19:54.017692","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-16T00:19:54.017692","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":53,"date":"2016-02-16 00:22:12.243398","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        total = g(n-1) + 2*g(n-2) + 3*g(n-3)\n        return total-1\n\n","after":null,"SubmissionTime":"2016-02-16T00:22:12.243398","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":607,"date":"2016-02-16 00:22:22.379202","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + g(n - 2) + 3 * g(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-16T00:22:22.379202","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":652,"date":"2016-02-16 00:27:06.342545","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(n):\n        if n <= 3:\n            return n\n        else:\n            return G(n-1)+2*(G(n-2))+3(G(n-3))\n    return G\n\n\n\n","after":null,"SubmissionTime":"2016-02-16T00:27:06.342545","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":652,"date":"2016-02-16 00:27:52.766637","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(n):\n        if n <= 3:\n            return n\n        else:\n            return G(n-1)+2*(G(n-2))+3(G(n-3))\n\n    return G(n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-16T00:27:52.766637","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":923,"date":"2016-02-16 00:52:00.247118","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    elif n > 3:\n        return G(n-1) + 2 * G(n-2) + 3 * G(n-3)\n\n","after":null,"SubmissionTime":"2016-02-16T00:52:00.247118","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    elif n>3:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":494,"date":"2016-02-16 01:01:47.009586","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return accumulate(add, 0, n, G)\n\n","after":null,"SubmissionTime":"2016-02-16T01:01:47.009586","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":158,"date":"2016-02-16 01:27:55.039364","diff":null,"before":"def g(x):\n        i = 1\n        while i <= n:\n            x, i = f(x), i + 1\n        return x\n    return g\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return g(n-1) + 2*g(n-2) + 3*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T01:27:55.039364","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":725,"date":"2016-02-16 01:42:56.726428","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return G(n-1) + 2 * G(n-2) + 3 * G(n - 3)\n","after":null,"SubmissionTime":"2016-02-16T01:42:56.726428","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":725,"date":"2016-02-16 01:43:22.574026","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        x = G(n-1) + 2 * G(n-2) + 3 * G(n - 3)\n        return x\n","after":null,"SubmissionTime":"2016-02-16T01:43:22.574026","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":732,"date":"2016-02-16 02:42:06.911934","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def track(i):\n        if n <= 3:\n            return n\n        else:\n            return i*g(n-i) + (i-1)*g(n-i-1)\n    return trakc(1)\n\n","after":null,"SubmissionTime":"2016-02-16T02:42:06.911934","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":732,"date":"2016-02-16 02:42:16.281470","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def track(i):\n        if n <= 3:\n            return n\n        else:\n            return i*g(n-i) + (i-1)*g(n-i-1)\n    return track(1)\n\n","after":null,"SubmissionTime":"2016-02-16T02:42:16.28147","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":732,"date":"2016-02-16 02:43:15.022830","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def track(i):\n        if n <= 3:\n            return n\n        else:\n            return i*g(n-i) + (i-1)*g(n-i-1)\n    return track(3)\n\n","after":null,"SubmissionTime":"2016-02-16T02:43:15.02283","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":369,"date":"2016-02-16 07:38:44.096564","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if g <= 3:\n        return g \n    return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-16T07:38:44.096564","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":369,"date":"2016-02-16 07:39:05.857821","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if g <= 3:\n        return n \n    return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-16T07:39:05.857821","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":43,"date":"2016-02-16 08:17:57.866454","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    # counter = 0\n    # if n > 3:\n    #     return (counter + 1) * g(n - 1)\n    x = 0\n    x += 1 \n    if n <= 3:\n        return n\n    return  x * g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-16T08:17:57.866454","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":43,"date":"2016-02-16 08:18:31.012281","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    # counter = 0\n    # if n > 3:\n    #     return (counter + 1) * g(n - 1)\n    x = 0\n    x += 1 \n    # print (x)\n    if n <= 3:\n        return n\n    print (x)\n    return  x * g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-16T08:18:31.012281","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":457,"date":"2016-02-16 09:22:24.358988","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    if n <= 3:\n        return n\n    else:\n        return g(n-3) + 10\n\n","after":null,"SubmissionTime":"2016-02-16T09:22:24.358988","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":457,"date":"2016-02-16 09:23:03.448112","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    if n <= 3:\n        return n\n    if n == 4:\n        return 10\n    else:\n        return g(n-3) + 10\n\n","after":null,"SubmissionTime":"2016-02-16T09:23:03.448112","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":701,"date":"2016-02-16 09:59:42.330632","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n >=3:\n        return n\n    return g(n-1)+2*g(n-2)+3*g(n-3)\n","after":null,"SubmissionTime":"2016-02-16T09:59:42.330632","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":163,"date":"2016-02-16 10:16:56.311284","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-16T10:16:56.311284","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":470,"date":"2016-02-16 10:17:28.752777","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    \"\"\"def add_function(n):\n        if n > 3:\n            return n+g(n-1) + 3 \n        else:\n            return n\n\n    return add_function(n)  #problem- stopping when n<3\"\"\"\n\n\n    def add_function(n):\n        if n > 3:\n            return g(n-1) + n-1\n        else:\n            return n\n\n    return add_function(n)\n\n\n","after":null,"SubmissionTime":"2016-02-16T10:17:28.752777","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":470,"date":"2016-02-16 10:17:49.899211","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    \"\"\"def add_function(n):\n        if n > 3:\n            return n+g(n-1) + 3 \n        else:\n            return n\n\n    return add_function(n)  #problem- stopping when n<3\"\"\"\n\n\n    def add_function(n):\n        if n > 3:\n            return g(n-1) + n\n        else:\n            return n\n\n    return add_function(n)\n\n\n","after":null,"SubmissionTime":"2016-02-16T10:17:49.899211","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":470,"date":"2016-02-16 10:18:01.564984","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    \"\"\"def add_function(n):\n        if n > 3:\n            return n+g(n-1) + 3 \n        else:\n            return n\n\n    return add_function(n)  #problem- stopping when n<3\"\"\"\n\n\n    def add_function(n):\n        if n > 3:\n            return g(n-1) + n+1\n        else:\n            return n\n\n    return add_function(n)\n\n\n","after":null,"SubmissionTime":"2016-02-16T10:18:01.564984","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":470,"date":"2016-02-16 10:18:19.141382","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    \"\"\"def add_function(n):\n        if n > 3:\n            return n+g(n-1) + 3 \n        else:\n            return n\n\n    return add_function(n)  #problem- stopping when n<3\"\"\"\n\n\n    def add_function(n):\n        if n > 3:\n            return g(n-1) + (n + 1)\n        else:\n            return n\n\n    return add_function(n)\n\n\n","after":null,"SubmissionTime":"2016-02-16T10:18:19.141382","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":850,"date":"2016-02-16 10:30:52.755350","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n#G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + g(n -2) + g(n - 3)\n    \n\n\n","after":null,"SubmissionTime":"2016-02-16T10:30:52.75535","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":850,"date":"2016-02-16 10:31:36.496294","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n#G(n) = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n > 3\n    if n <= 3:\n        return n\n    if n > 3:\n        return g(n - 1) + g(n - 2) + g(n - 3)\n    \n\n\n","after":null,"SubmissionTime":"2016-02-16T10:31:36.496294","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":445,"date":"2016-02-16 10:38:02.416787","diff":null,"before":"def g(n):\n\t\"\"\"Return the value of G(n), computed recursively.\n\n\t>>> g(1)\n\t1\n\t>>> g(2)\n\t2\n\t>>> g(3)\n\t3\n\t>>> g(4)\n\t10\n\t>>> g(5)\n\t22\n\t>>> from construct_check import check\n\t>>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n\tTrue\n\t\"\"\"\n\tif n <= 3:\n\t\treturn n\n\telse:\n\t\treturn g(n-1) + 2(g(n-2)) + 3(g(n-3))\n\n","after":null,"SubmissionTime":"2016-02-16T10:38:02.416787","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+(2*g(n-2))+(3*g(n-3))","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ParenthesisExpressionNode, SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))), 1), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ParenthesisExpressionNode, SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))), InOrderSort(ast))))))))))))","failed":null},{"ErrorFlag":2,"Id":0,"studentId":627,"date":"2016-02-16 10:40:24.181908","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    return n if n <= 3 else lambda x: g(n-1) \n\n","after":null,"SubmissionTime":"2016-02-16T10:40:24.181908","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":916,"date":"2016-02-16 10:49:10.203394","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return n*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T10:49:10.203394","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return 1*g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":244,"date":"2016-02-16 10:56:58.900183","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total=1\n    coefficient=1\n    def totaler_3(n,coefficient,total):\n        if n>3:\n            return totaler_3(n-1,coefficient+1,total*g(n))\n        else:\n            return total\n\n    if n<=3:\n        return n\n    else:\n        return totaler_3(n,coefficient,total)\n\n","after":null,"SubmissionTime":"2016-02-16T10:56:58.900183","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":244,"date":"2016-02-16 11:00:14.939637","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total=1\n    coefficient=1\n    def totaler_3(n,coefficient,total):\n        if n==3:\n            return totaler_3(n-1,coefficient+1,total*g(n))\n        else:\n            return total\n    if n<=3:\n        return n\n    else:\n        return totaler_3(n,coefficient,total)\n\n","after":null,"SubmissionTime":"2016-02-16T11:00:14.939637","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":244,"date":"2016-02-16 11:01:55.612052","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total=1\n    coefficient=1\n    def totaler_3(n,coefficient,total):\n        if n==3:\n            return totaler_3(n-1,coefficient+1,coefficient*total*g(n))\n        else:\n            return total\n    if n<=3:\n        return n\n    else:\n        return totaler_3(n,coefficient,total)\n\n","after":null,"SubmissionTime":"2016-02-16T11:01:55.612052","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":244,"date":"2016-02-16 11:03:03.267396","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total=1\n    coefficient=1\n    def totaler_3(n,coefficient,total):\n        if n==3:\n            return totaler_3(n-1,coefficient+1,coefficient*total*g(n-1))\n        else:\n            return total\n    if n<=3:\n        return n\n    else:\n        return totaler_3(n,coefficient,total)\n\n","after":null,"SubmissionTime":"2016-02-16T11:03:03.267396","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":244,"date":"2016-02-16 11:03:15.117358","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total=1\n    coefficient=1\n    def totaler_3(n,coefficient,total):\n        if n>3:\n            return totaler_3(n-1,coefficient+1,coefficient*total*g(n-1))\n        else:\n            return total\n    if n<=3:\n        return n\n    else:\n        return totaler_3(n,coefficient,total)\n\n","after":null,"SubmissionTime":"2016-02-16T11:03:15.117358","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":244,"date":"2016-02-16 11:08:38.594465","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total=1\n    coefficient=1\n    runs=n-3\n    def totaler_3(n,coefficient,total,runs):\n        if runs>0:\n            return totaler_3(n-1,coefficient+1,coefficient*total*g(n-1),runs-1)\n        else:\n            return total\n    if n<=3:\n        return n\n    else:\n        return totaler_3(n,coefficient,total)\n\n","after":null,"SubmissionTime":"2016-02-16T11:08:38.594465","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":244,"date":"2016-02-16 11:08:53.209176","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total=1\n    coefficient=1\n    runs=n-3\n    def totaler_3(n,coefficient,total,runs):\n        if runs>0:\n            return totaler_3(n-1,coefficient+1,coefficient*total*g(n-1),runs-1)\n        else:\n            return total\n    if n<=3:\n        return n\n    else:\n        return totaler_3(n,coefficient,total,runs)\n\n","after":null,"SubmissionTime":"2016-02-16T11:08:53.209176","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":244,"date":"2016-02-16 11:09:39.726479","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total=1\n    coefficient=1\n    runs=n-3\n    def totaler_3(n,coefficient,total,runs):\n        if runs>0:\n            return totaler_3(n-1,coefficient+1,coefficient*total*g(n-1),runs-1)\n        else:\n            return total\n    if n<=3:\n        return n\n    else:\n        return totaler_3(n,coefficient,total,runs)*3\n\n","after":null,"SubmissionTime":"2016-02-16T11:09:39.726479","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":244,"date":"2016-02-16 11:10:28.074330","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total=1\n    coefficient=1\n    runs=n-3\n    def totaler_3(n,coefficient,total,runs):\n        if runs>0:\n            return totaler_3(n-1,coefficient+1,coefficient*g(n-1)+total,runs-1)\n        else:\n            return total\n    if n<=3:\n        return n\n    else:\n        return totaler_3(n,coefficient,total,runs)*3\n\n","after":null,"SubmissionTime":"2016-02-16T11:10:28.07433","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":244,"date":"2016-02-16 11:12:11.667198","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total=1\n    coefficient=1\n    runs=n-3\n    def totaler_3(n,coefficient,total,runs):\n        if runs>0:\n            return totaler_3(n-1,coefficient+1,coefficient*g(n-1)+total,runs-1)\n        else:\n            return total\n    if n<=3:\n        return n\n    else:\n        return totaler_3(n,coefficient,total,runs)+3*(runs+1)\n\n","after":null,"SubmissionTime":"2016-02-16T11:12:11.667198","SynthesizedAfter":"\r\ndef g(n):\r\n    total = 1\r\n    coefficient = 1\r\n    runs = n-3\r\n    def totaler_3(n, coefficient, total, runs):\r\n        if runs>0:\r\n            return totaler_3(n-3, coefficient+1, coefficient*g(n-1)+total, runs-1)\r\n        else:\r\n            return total\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return totaler_3(n, coefficient, total, runs)+3*(runs+1)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":605,"date":"2016-02-16 12:15:01.313542","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n    \treturn n\n    return g(n-1) * g(n-2) * g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-16T12:15:01.313542","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))))))), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":278,"date":"2016-02-16 12:22:06.203235","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-16T12:22:06.203235","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":549,"date":"2016-02-16 12:23:09.687840","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1)*g(n-2)*g(n-3)\n","after":null,"SubmissionTime":"2016-02-16T12:23:09.68784","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))))))), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":627,"date":"2016-02-16 12:30:04.058240","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return lambda x: x\n    return lambda x: g(g(n-1) (x))\n  \n","after":null,"SubmissionTime":"2016-02-16T12:30:04.05824","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":627,"date":"2016-02-16 12:30:33.659867","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return lambda x: n\n    return lambda x: g(n-1) \n  \n","after":null,"SubmissionTime":"2016-02-16T12:30:33.659867","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":627,"date":"2016-02-16 12:32:48.237338","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return 6*n -14\n  \n","after":null,"SubmissionTime":"2016-02-16T12:32:48.237338","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":320,"date":"2016-02-16 12:37:35.028628","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n\ndef G(n):\n    if n <= 3:\n        return n\n    else:\n        return G(n-1) + 2*G(n-2) + 3*G(n-3)\n\n\n","after":null,"SubmissionTime":"2016-02-16T12:37:35.028628","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":320,"date":"2016-02-16 12:38:22.582009","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n   \n\n\ndef G(n):\n    if n <= 3:\n        return n\n    else:\n        return G(n-1) + 2*G(n-2) + 3*G(n-3)\n\n\n","after":null,"SubmissionTime":"2016-02-16T12:38:22.582009","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":320,"date":"2016-02-16 12:38:34.385568","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n   \n\n\n    def G(n):\n        if n <= 3:\n            return n\n        else:\n            return G(n-1) + 2*G(n-2) + 3*G(n-3)\n\n\n","after":null,"SubmissionTime":"2016-02-16T12:38:34.385568","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":786,"date":"2016-02-16 12:52:56.160362","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        result1 = n\n        return result1\n    else:\n        result2 = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n        return result2\n\n\n\n","after":null,"SubmissionTime":"2016-02-16T12:52:56.160362","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        result1 = n\r\n        return result1\r\n    else:\r\n        result2 = g(n-1)+2*g(n-2)+3*g(n-3)\r\n        return result2","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":786,"date":"2016-02-16 12:54:33.288293","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(n):\n        return n\n    if n <= 3:\n        result1 = n\n        return result1\n    else:\n        result2 = G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n        return result2\n\n\n\n","after":null,"SubmissionTime":"2016-02-16T12:54:33.288293","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":425,"date":"2016-02-16 12:58:21.086223","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def identity(n): \n        return n\n    def other_cases(n): \n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n    if n <= 3:\n        return identity\n    if n > 3: \n        return other_cases\n\n\n","after":null,"SubmissionTime":"2016-02-16T12:58:21.086223","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":425,"date":"2016-02-16 12:59:05.896241","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def identity(n): \n        return n\n    def other_cases(n): \n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n    if n <= 3:\n        return identity(n)\n    if n > 3: \n        return other_cases(n)\n\n\n","after":null,"SubmissionTime":"2016-02-16T12:59:05.896241","SynthesizedAfter":"\r\ndef g(n):\r\n    def identity(n):\r\n        return n\r\n    def other_cases(n):\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)\r\n    if n<=3:\r\n        return identity(n)\r\n    if n>3:\r\n        return other_cases(n)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":802,"date":"2016-02-16 13:16:49.977054","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return g(n)\n    else:\n        return g(n-1)+2 * g(n-2)+3 * g(n-3)\n    \n\n\n","after":null,"SubmissionTime":"2016-02-16T13:16:49.977054","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":945,"date":"2016-02-16 13:32:11.621988","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n > 4:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-16T13:32:11.621988","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":470,"date":"2016-02-16 14:09:25.231739","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    \"\"\"def add_function(n):\n        if n > 3:\n            return n+g(n-1) + 3 \n        else:\n            return n\n\n    return add_function(n)  #problem- stopping when n<3\"\"\"\n\n\n    def add_function(n):\n        if n > 3:\n            return g(n-1) + 2\n        else:\n            return n\n\n    return add_function(n)\n\n\n","after":null,"SubmissionTime":"2016-02-16T14:09:25.231739","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":424,"date":"2016-02-16 14:10:23.951254","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n >= 0 and n<=3:\n        return n\n    else:\n        return n-1 * g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T14:10:23.951254","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":470,"date":"2016-02-16 14:13:12.531591","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    \"\"\"def add_function(n):\n        if n > 3:\n            return n+g(n-1) + 3 \n        else:\n            return n\n\n    return add_function(n)  #problem- stopping when n<3\"\"\"\n\n\n    def add_function(n):\n        if n > 3:\n            return g(n-1) + 5\n        else:\n            return n\n\n    return add_function(n)\n\n\n","after":null,"SubmissionTime":"2016-02-16T14:13:12.531591","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":787,"date":"2016-02-16 14:13:40.527570","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    #if n<=3:\n        #return n\n    #else:\n        #return g(n-1)+2*g(n-2)+3*g(n-3)\n\n    if n>=3:\n        return g(n-1)+2*g(n-2)+3*g(n-3)\n    else:\n        return n\n\n","after":null,"SubmissionTime":"2016-02-16T14:13:40.52757","SynthesizedAfter":"\r\ndef g(n):\r\n    if n>3:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)\r\n    else:\r\n        return n","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-GreaterThan, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-GreaterThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":470,"date":"2016-02-16 14:14:15.522349","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    \"\"\"def add_function(n):\n        if n > 3:\n            return n+g(n-1) + 3 \n        else:\n            return n\n\n    return add_function(n)  #problem- stopping when n<3\"\"\"\n\n\n    def add_function(n):\n        if n > 3:\n            return g(n) * g(n-1) \n        else:\n            return n\n\n    return add_function(n)\n\n\n","after":null,"SubmissionTime":"2016-02-16T14:14:15.522349","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":470,"date":"2016-02-16 14:14:41.319055","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    \"\"\"def add_function(n):\n        if n > 3:\n            return n+g(n-1) + 3 \n        else:\n            return n\n\n    return add_function(n)  #problem- stopping when n<3\"\"\"\n\n\n    def add_function(n):\n        if n > 3:\n            return g(n-1) \n        else:\n            return n\n\n    return add_function(n)\n\n\n","after":null,"SubmissionTime":"2016-02-16T14:14:41.319055","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":732,"date":"2016-02-16 14:14:59.633755","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def track(i):\n        if n <= 3:\n            return n\n        else:\n            return i*track(n-i) + (i-1)*track(n-i-1)\n    return track(3)\n\n","after":null,"SubmissionTime":"2016-02-16T14:14:59.633755","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":732,"date":"2016-02-16 14:15:23.778136","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def track(i):\n        if n <= 0:\n            return\n        elif n <= 3:\n            return n\n        else:\n            return i*track(n-i) + (i-1)*track(n-i-1)\n    return track(3)\n\n","after":null,"SubmissionTime":"2016-02-16T14:15:23.778136","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":470,"date":"2016-02-16 14:15:29.386686","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    \"\"\"def add_function(n):\n        if n > 3:\n            return n+g(n-1) + 3 \n        else:\n            return n\n\n    return add_function(n)  #problem- stopping when n<3\"\"\"\n\n\n    def add_function(n):\n        if n > 3:\n            return g(n-1) + 3\n        else:\n            return n\n\n    return add_function(n)\n\n\n","after":null,"SubmissionTime":"2016-02-16T14:15:29.386686","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":470,"date":"2016-02-16 14:15:46.779636","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n\n    \"\"\"def add_function(n):\n        if n > 3:\n            return n+g(n-1) + 3 \n        else:\n            return n\n\n    return add_function(n)  #problem- stopping when n<3\"\"\"\n\n\n    def add_function(n):\n        if n > 3:\n            return g(n-1) + 5\n        else:\n            return n\n\n    return add_function(n)\n\n\n","after":null,"SubmissionTime":"2016-02-16T14:15:46.779636","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":732,"date":"2016-02-16 14:16:52.369204","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def track(i):\n        if n == 0:\n            return\n        elif n <= 3:\n            return n\n        else:\n            return i*track(n-i) + (i-1)*track(n-i-1)\n    return track(3)\n\n","after":null,"SubmissionTime":"2016-02-16T14:16:52.369204","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":732,"date":"2016-02-16 14:19:01.632597","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def track(i):\n        if i > 0:\n            if n <= 3:\n                return n\n            else:\n                return i*track(n-i) + (i-1)*track(n-i-1)\n    return track(3)\n\n","after":null,"SubmissionTime":"2016-02-16T14:19:01.632597","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1020,"date":"2016-02-16 14:21:19.312509","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"\"\"G(n - 1) + 2*G(n -2) + 3*G(n - 3) = G(n)\n    if n == 0:\n        return 0\n    elif n <= 3:\n        return n\n    else: \n        return G(n)\"\"\"\n\n    G = G(n - 1) + 2*G(n -2) + 3*G(n - 3) \n    if n <= 3:\n        return n\n    elif n >= 3:\n        return G\n\n","after":null,"SubmissionTime":"2016-02-16T14:21:19.312509","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":732,"date":"2016-02-16 14:21:44.769928","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def track(i):\n        if i > 0:\n            if n <= 3:\n                return n\n            else:\n                return i*track(n-i)\n                i -= 1\n    return track(3)\n\n","after":null,"SubmissionTime":"2016-02-16T14:21:44.769928","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":732,"date":"2016-02-16 14:21:44.769928","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def track(i):\n        if i > 0:\n            if n <= 3:\n                return n\n            else:\n                return i*track(n-i)\n                i -= 1\n    return track(3)\n\n","after":null,"SubmissionTime":"2016-02-16T14:21:44.769928","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":732,"date":"2016-02-16 14:28:57.970706","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def track(i):\n        if i > 0:\n            if n <= 3:\n                return n\n            else:\n                return i*track(n-i) + (i-1)*track(n-i-1)\n    return track(3)\n\n","after":null,"SubmissionTime":"2016-02-16T14:28:57.970706","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1020,"date":"2016-02-16 14:29:19.498817","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"\"\"G(n - 1) + 2*G(n -2) + 3*G(n - 3) = G(n)\n    if n == 0:\n        return 0\n    elif n <= 3:\n        return n\n    else: \n        return G(n)\"\"\"\n\n    def G(n):\n        while n > 3:\n            return G(n - 1) + 2*G(n -2) + 3*G(n - 3)\n            \n    while n <= 3:\n        return n\n    else:\n        return G(n)\n\n    \"\"\"G =  \n    if n <= 3:\n        return n\n    elif n >= 3:\n        return G\"\"\"\n\n","after":null,"SubmissionTime":"2016-02-16T14:29:19.498817","SynthesizedAfter":"\r\ndef g(n):\r\n    def G(n):\r\n        while n>3:\r\n            return g(n-1)+2*g(n-2)+3*g(n-3)\r\n    while n<=3:\r\n        return n\r\n    else:\r\n        return G(n)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-16 15:07:17.434046","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x):\n        if x == 1:\n            return 1\n        else:\n            return coefficient_func(x - 1) * g(n - 1)\n    if n <= 3:\n        return n\n    else:\n        return coefficient_func(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-16T15:07:17.434046","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-16 15:07:31.488072","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x):\n        if x == 1:\n            return 1\n        else:\n            return coefficient_func(x - 1) * g(n - 1)\n    if n <= 3:\n        return n\n    else:\n        return coefficient_func(n)\n\n","after":null,"SubmissionTime":"2016-02-16T15:07:31.488072","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-16 15:07:47.676746","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x):\n        if x == 1:\n            return 1\n        else:\n            return coefficient_func(x - 1) * g(n - 1)\n    if n <= 3:\n        return n\n    else:\n        return coefficient_func(n + 1)\n\n","after":null,"SubmissionTime":"2016-02-16T15:07:47.676746","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-16 15:09:21.036513","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x):\n        if x == 1:\n            return 1\n        else:\n            return n * coefficient_func(x - 1) * g(n - 1)\n    if n <= 3:\n        return n\n    else:\n        return coefficient_func(n + 1)\n\n","after":null,"SubmissionTime":"2016-02-16T15:09:21.036513","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-16 15:09:37.819763","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x):\n        if x == 1:\n            return 1\n        else:\n            return n * coefficient_func(x - 1) + g(n - 1)\n    if n <= 3:\n        return n\n    else:\n        return coefficient_func(n)\n\n","after":null,"SubmissionTime":"2016-02-16T15:09:37.819763","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-16 15:09:47.312168","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x):\n        if x == 1:\n            return 1\n        else:\n            return n * coefficient_func(x - 1) + g(n - 1)\n    if n <= 3:\n        return n\n    else:\n        return coefficient_func(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-16T15:09:47.312168","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-16 15:09:56.261062","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x):\n        if x == 1:\n            return 1\n        else:\n            return n * coefficient_func(x - 1) + g(n - 1)\n    if n <= 3:\n        return n\n    else:\n        return coefficient_func(n - 2)\n\n","after":null,"SubmissionTime":"2016-02-16T15:09:56.261062","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-16 15:10:16.512113","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x):\n        if x == 1:\n            return 1\n        else:\n            return n + coefficient_func(x - 1) * g(n - 1)\n    if n <= 3:\n        return n\n    else:\n        return coefficient_func(n - 2)\n\n","after":null,"SubmissionTime":"2016-02-16T15:10:16.512113","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-16 15:10:30.336143","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x):\n        if x == 1:\n            return 1\n        else:\n            return n + coefficient_func(x - 1)\n    if n <= 3:\n        return n\n    else:\n        return coefficient_func(n - 2)\n\n","after":null,"SubmissionTime":"2016-02-16T15:10:30.336143","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-16 15:14:34.682691","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x):\n        if x == 1:\n            return 1\n        else:\n            return n + coefficient(x - 1) * g(n - 1)\n    if n <= 3:\n        return n\n    else:\n        return coefficient_func(n - 2)\n\n","after":null,"SubmissionTime":"2016-02-16T15:14:34.682691","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-16 15:14:44.790880","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x):\n        if x == 1:\n            return 1\n        else:\n            return n + coefficient_func(x - 1) * g(n - 1)\n    if n <= 3:\n        return n\n    else:\n        return coefficient_func(n - 2)\n\n","after":null,"SubmissionTime":"2016-02-16T15:14:44.79088","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":375,"date":"2016-02-16 15:15:08.562041","diff":null,"before":"def g(x):\n        for i in range(n):\n            x = f(x)\n        return x \n    return g\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def G(x):\n        if x > 3:\n            return x\n        if x <= 3:\n            return G(x-1) + 2 * G(x-2) + 3 * G(x-3)\n    return G(n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-16T15:15:08.562041","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-16 15:15:38.480609","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x):\n        if x == 1:\n            return 1\n        else:\n            return (n - 2) + coefficient_func(x - 1) * g(n - 1)\n    if n <= 3:\n        return n\n    else:\n        return coefficient_func(n - 2)\n\n","after":null,"SubmissionTime":"2016-02-16T15:15:38.480609","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-16 15:16:25.940414","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x):\n        if x == 1:\n            return 1\n        else:\n            return (n - 2) + coefficient_func(x - 1) * g(n - 2)\n    if n <= 3:\n        return n\n    else:\n        return coefficient_func(n - 2)\n\n","after":null,"SubmissionTime":"2016-02-16T15:16:25.940414","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-16 15:16:36.512523","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x):\n        if x == 1:\n            return 1\n        else:\n            return (n - 1) + coefficient_func(x - 1) * g(n - 2)\n    if n <= 3:\n        return n\n    else:\n        return coefficient_func(n - 2)\n\n","after":null,"SubmissionTime":"2016-02-16T15:16:36.512523","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-16 15:16:45.024768","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x):\n        if x == 1:\n            return 1\n        else:\n            return (n - 2) + coefficient_func(x - 1) * g(n - 2)\n    if n <= 3:\n        return n\n    else:\n        return coefficient_func(n - 2)\n\n","after":null,"SubmissionTime":"2016-02-16T15:16:45.024768","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-16 15:17:02.035595","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x):\n        if x == 1:\n            return 1\n        else:\n            return (n + 2) + coefficient_func(x - 1) * g(n - 2)\n    if n <= 3:\n        return n\n    else:\n        return coefficient_func(n - 2)\n\n","after":null,"SubmissionTime":"2016-02-16T15:17:02.035595","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-16 15:17:10.424750","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x):\n        if x == 1:\n            return 1\n        else:\n            return (n + 4) + coefficient_func(x - 1) * g(n - 2)\n    if n <= 3:\n        return n\n    else:\n        return coefficient_func(n - 2)\n\n","after":null,"SubmissionTime":"2016-02-16T15:17:10.42475","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":375,"date":"2016-02-16 15:24:40.820089","diff":null,"before":"def g(x):\n        for i in range(n):\n            x = f(x)\n        return x \n    return g\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if x > 3:\n        return x\n    else:\n        return g(x-1) + 2 * g(x-2) + 3 * g(x-3)\n\n\n\n","after":null,"SubmissionTime":"2016-02-16T15:24:40.820089","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":375,"date":"2016-02-16 15:25:01.676840","diff":null,"before":"def g(x):\n        for i in range(n):\n            x = f(x)\n        return x \n    return g\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n > 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n\n\n","after":null,"SubmissionTime":"2016-02-16T15:25:01.67684","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":375,"date":"2016-02-16 15:25:34.379358","diff":null,"before":"def g(x):\n        for i in range(n):\n            x = f(x)\n        return x \n    return g\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n >= 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n\n\n","after":null,"SubmissionTime":"2016-02-16T15:25:34.379358","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1020,"date":"2016-02-16 15:26:20.816482","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"\"\"G(n - 1) + 2*G(n -2) + 3*G(n - 3) = G(n)\n    if n == 0:\n        return 0\n    elif n <= 3:\n        return n\n    else: \n        return G(n)\"\"\"\n\n    while n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n            \n\"\"\"from operator import mul\n    def G(n):\n        while n > 3:\n            return G(n - 1) + 2*G(n -2) + 3*G(n - 3)\n\n    \n\n    G =  \n    if n <= 3:\n        return n\n    elif n >= 3:\n        return G\"\"\"\n\n","after":null,"SubmissionTime":"2016-02-16T15:26:20.816482","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-16 15:29:30.870701","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x):\n        if x == 1:\n            return 1\n        else:\n            return coefficient_func(x - 1) + 1\n    if n <= 3:\n        return n\n    else:\n        return n + coefficient_func(n) * g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-16T15:29:30.870701","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-16 15:30:14.134817","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x):\n        if x == 1:\n            return 1\n        else:\n            return coefficient_func(x - 1) + 1\n    if n <= 3:\n        return n\n    else:\n        return n + coefficient_func(n - 1) * g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-16T15:30:14.134817","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-16 15:30:48.136133","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x):\n        if x == 1:\n            return 1\n        else:\n            return coefficient_func(x - 1) + 1\n    if n <= 3:\n        return n\n    else:\n        return n + coefficient_func(n - 3) * g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-16T15:30:48.136133","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-16 15:30:56.715963","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x):\n        if x == 1:\n            return 1\n        else:\n            return coefficient_func(x - 1) + 1\n    if n <= 3:\n        return n\n    else:\n        return n + coefficient_func(n - 2) * g(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-16T15:30:56.715963","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-16 15:43:42.485194","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x, m):\n        if x == m:\n            return x\n        else:\n            return m + coefficient_func(x + 1) * g(m - 1)\n    if n <= 3:\n        return n\n    else:\n        return coefficient_func(1, n)\n\n","after":null,"SubmissionTime":"2016-02-16T15:43:42.485194","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-16 15:44:04.674244","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x, m):\n        if x == m:\n            return x\n        else:\n            return m + coefficient_func(x + 1, m - 1)\n    if n <= 3:\n        return n\n    else:\n        return coefficient_func(1, n)\n\n","after":null,"SubmissionTime":"2016-02-16T15:44:04.674244","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-16 15:51:32.734580","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x, m):\n        if x == m:\n            return x\n        else:\n            return m + x * coefficient_func(x + 1, m - 1)\n    if n <= 3:\n        return n\n    else:\n        return coefficient_func(1, n)\n\n","after":null,"SubmissionTime":"2016-02-16T15:51:32.73458","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-16 15:51:59.982918","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x, m):\n        if x == m - 2:\n            return x\n        else:\n            return m + x * coefficient_func(x + 1, m - 1)\n    if n <= 3:\n        return n\n    else:\n        return coefficient_func(1, n)\n\n","after":null,"SubmissionTime":"2016-02-16T15:51:59.982918","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-16 15:52:08.184421","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x, m):\n        if x == m - 3:\n            return x\n        else:\n            return m + x * coefficient_func(x + 1, m - 1)\n    if n <= 3:\n        return n\n    else:\n        return coefficient_func(1, n)\n\n","after":null,"SubmissionTime":"2016-02-16T15:52:08.184421","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-16 15:52:24.970252","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x, m):\n        if x == m - 4:\n            return x\n        else:\n            return m + x * coefficient_func(x + 1, m - 1)\n    if n <= 3:\n        return n\n    else:\n        return coefficient_func(1, n)\n\n","after":null,"SubmissionTime":"2016-02-16T15:52:24.970252","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-16 15:52:31.599940","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x, m):\n        if x == m - 3:\n            return x\n        else:\n            return m + x * coefficient_func(x + 1, m - 1)\n    if n <= 3:\n        return n\n    else:\n        return coefficient_func(1, n)\n\n","after":null,"SubmissionTime":"2016-02-16T15:52:31.59994","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-16 15:56:06.374503","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x, m):\n        maximu = m\n        if x == maximu - 2:\n            return x\n        else:\n            return m + x * coefficient_func(x + 1, m - 1)\n    if n <= 3:\n        return n\n    else:\n        return coefficient_func(1, n)\n\n","after":null,"SubmissionTime":"2016-02-16T15:56:06.374503","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-16 15:56:51.174917","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x, m):\n        maximu = m\n        if x == maximu:\n            return x\n        elif m == 3:\n            return x * m\n        else:\n            return m + x * coefficient_func(x + 1, m - 1)\n    if n <= 3:\n        return n\n    else:\n        return coefficient_func(1, n)\n\n","after":null,"SubmissionTime":"2016-02-16T15:56:51.174917","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-16 15:57:37.919860","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x, m):\n        maximu = m\n        if x == maximu:\n            return x\n        elif m == 3:\n            return (x - 1) * m\n        else:\n            return m + x * coefficient_func(x + 1, m - 1)\n    if n <= 3:\n        return n\n    else:\n        return coefficient_func(1, n)\n\n","after":null,"SubmissionTime":"2016-02-16T15:57:37.91986","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-16 15:57:48.881827","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x, m):\n        maximu = m\n        if x == maximu:\n            return x\n        elif m == 3:\n            return (x - 1) * m\n        else:\n            return m + x * coefficient_func(x + 1, m - 1)\n    if n <= 3:\n        return n\n    else:\n        return coefficient_func(2, n)\n\n","after":null,"SubmissionTime":"2016-02-16T15:57:48.881827","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-16 15:58:08.492807","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x, m):\n        maximu = m\n        if x == maximu:\n            return x\n        elif m == 3:\n            return 0\n        else:\n            return m + x * coefficient_func(x + 1, m - 1)\n    if n <= 3:\n        return n\n    else:\n        return coefficient_func(1, n)\n\n","after":null,"SubmissionTime":"2016-02-16T15:58:08.492807","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-16 15:58:15.642002","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x, m):\n        maximu = m\n        if x == maximu:\n            return x\n        elif m == 3:\n            return 0\n        else:\n            return m + x * coefficient_func(x + 1, m - 1)\n    if n <= 3:\n        return n\n    else:\n        return coefficient_func(2, n)\n\n","after":null,"SubmissionTime":"2016-02-16T15:58:15.642002","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":127,"date":"2016-02-16 16:06:06.543584","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return n + g(n - 1) + 5  \n\n","after":null,"SubmissionTime":"2016-02-16T16:06:06.543584","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":127,"date":"2016-02-16 16:07:31.553647","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return n * g(n - 1) + 5  \n\n","after":null,"SubmissionTime":"2016-02-16T16:07:31.553647","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":127,"date":"2016-02-16 16:08:38.489221","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        total = n * g(n - 1)\n        return total + 5  \n\n","after":null,"SubmissionTime":"2016-02-16T16:08:38.489221","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":127,"date":"2016-02-16 16:09:31.956556","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total = 0\n    if n <= 3:\n        return n\n    else:\n        temp = n * g(n - 1)\n        total = total + temp\n        return total + 5  \n\n","after":null,"SubmissionTime":"2016-02-16T16:09:31.956556","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":745,"date":"2016-02-16 16:10:13.270527","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-16T16:10:13.270527","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":745,"date":"2016-02-16 16:10:57.689764","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-16T16:10:57.689764","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":617,"date":"2016-02-16 16:12:45.772095","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def helper(n):\n        total = 0\n        if n == 3:\n            return total + n\n        else:\n            total = helper(n-1) + (2 * helper(n-2)) + 3(helper(n-3))\n    return helper\n\n    \"\"\"4 = 3 + 2(2) +\n    5 = 10 + 2(3) + 3(2) = 22\"\"\"\n\n\n","after":null,"SubmissionTime":"2016-02-16T16:12:45.772095","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":617,"date":"2016-02-16 16:13:08.584335","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def helper(n):\n        total = 0\n        if n == 3:\n            return total + n\n        else:\n            total = helper(n-1) + (2 * helper(n-2)) + 3(helper(n-3))\n    return helper(n)\n\n    \"\"\"4 = 3 + 2(2) +\n    5 = 10 + 2(3) + 3(2) = 22\"\"\"\n\n\n","after":null,"SubmissionTime":"2016-02-16T16:13:08.584335","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":617,"date":"2016-02-16 16:13:35.228479","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def helper(n):\n        total = 0\n        if n == 3:\n            return total + n\n        else:\n            total = helper(n-1) + (2 * helper(n-2)) + 3(helper(n-3))\n            n -= 1\n    return helper(n)\n\n    \"\"\"4 = 3 + 2(2) +\n    5 = 10 + 2(3) + 3(2) = 22\"\"\"\n\n\n","after":null,"SubmissionTime":"2016-02-16T16:13:35.228479","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":617,"date":"2016-02-16 16:14:22.197582","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def helper(n):\n        total = 0\n        if n == 3:\n            total += n\n        else:\n            total = helper(n-1) + (2 * helper(n-2)) + 3(helper(n-3))\n        return total\n    return helper(n)\n\n    \"\"\"4 = 3 + 2(2) +\n    5 = 10 + 2(3) + 3(2) = 22\"\"\"\n\n\n","after":null,"SubmissionTime":"2016-02-16T16:14:22.197582","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":127,"date":"2016-02-16 16:15:40.150328","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total = 0\n    x = 1\n    if n <= 3:\n        return n\n    else:\n        while x <= 3:\n            temp = n * g(n - x)\n            total = total + temp\n            x += 1\n        return total + 5  \n\n","after":null,"SubmissionTime":"2016-02-16T16:15:40.150328","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":127,"date":"2016-02-16 16:17:30.282827","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total = 0\n    x = 2\n    if n <= 3:\n        return n\n    else:\n        while x <= 3:\n            temp = (n-1) * g(n - x)\n            total = total + temp\n            x += 1\n        return total + 5  \n\n","after":null,"SubmissionTime":"2016-02-16T16:17:30.282827","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":127,"date":"2016-02-16 16:19:00.397306","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total = 0\n    x = 2\n    y = x \n    if n <= 3:\n        return n\n    else:\n        while x <= 3:\n            temp = ((n-1) + y)  * (g(n - x) + y)\n            total = total + temp\n            x += 1\n            y += 1\n        return total + 5  \n\n","after":null,"SubmissionTime":"2016-02-16T16:19:00.397306","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":127,"date":"2016-02-16 16:19:26.836613","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total = 0\n    x = 2\n    if n <= 3:\n        return n\n    else:\n        while x <= 3:\n            temp = ((n-1) + 2)  * (g(n - x) + 3)\n            total = total + temp\n            x += 1\n        return total + 5  \n\n","after":null,"SubmissionTime":"2016-02-16T16:19:26.836613","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":127,"date":"2016-02-16 16:19:46.155723","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total = 0\n    x = 2\n    if n <= 3:\n        return n\n    else:\n        while x <= 3:\n            temp = (n-1)   * g(n - x) \n            total = total + temp\n            x += 1\n        return total + 5\n\n","after":null,"SubmissionTime":"2016-02-16T16:19:46.155723","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":934,"date":"2016-02-16 16:39:19.982811","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    else:\n        G(n-1) + 2*G(n-2) + 3*G(n-3)\n\n\n","after":null,"SubmissionTime":"2016-02-16T16:39:19.982811","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":934,"date":"2016-02-16 16:40:24.109902","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    else:\n        g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n\n","after":null,"SubmissionTime":"2016-02-16T16:40:24.109902","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":732,"date":"2016-02-16 16:46:52.099635","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def track(i):\n        if i > 0:\n            if n <= 3:\n                return n\n            else:\n                return i*track(n-i) + (i-1)*track(n-i-1)\n    return track(3)\n\n","after":null,"SubmissionTime":"2016-02-16T16:46:52.099635","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-16 16:57:09.582955","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x, m):\n        maximu = m\n        if x == maximu:\n            return x\n        elif m == 3:\n            return x * m\n        else:\n            return m + x * coefficient_func(x + 1, m - 1)\n    if n <= 3:\n        return n\n    else:\n        return coefficient_func(1, n)\n\n","after":null,"SubmissionTime":"2016-02-16T16:57:09.582955","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":298,"date":"2016-02-16 16:57:46.706343","diff":null,"before":"def g(x):\n        i = 0\n        while i < n:\n            x = f(x)\n            k += 1\n        return x\n    return g\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if g <= 3: \n        return n\n    else: \n        return (g(n-1) + 2) * (g(n-2) + 3) * g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T16:57:46.706343","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-16 16:58:24.252792","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x, m):\n        maximu = m\n        if x == maximu:\n            return x\n        elif m == 3:\n            return x * m\n        else:\n            return m + x * coefficient_func(x + 1, m - 1)\n    if n <= 3:\n        return n\n    else:\n        return coefficient_func(2, n)\n\n","after":null,"SubmissionTime":"2016-02-16T16:58:24.252792","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":298,"date":"2016-02-16 16:58:31.525775","diff":null,"before":"def g(x):\n        i = 0\n        while i < n:\n            x = f(x)\n            k += 1\n        return x\n    return g\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3: \n        return n\n    else: \n        return (g(n-1) + 2) * (g(n-2) + 3) * g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T16:58:31.525775","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-16 16:58:38.487484","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x, m):\n        maximu = m\n        if x == maximu:\n            return x\n        elif m == 3:\n            return x * m\n        else:\n            return m + x * coefficient_func(x + 1, m - 1)\n    if n <= 3:\n        return n\n    else:\n        return coefficient_func(1, n)\n\n","after":null,"SubmissionTime":"2016-02-16T16:58:38.487484","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-16 16:59:19.778005","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x, m):\n        maximu = m\n        if x == maximu:\n            return x\n        elif m == 3:\n            return x * m\n        else:\n            return x * m + coefficient_func(x + 1, m - 1)\n    if n <= 3:\n        return n\n    else:\n        return coefficient_func(1, n)\n\n","after":null,"SubmissionTime":"2016-02-16T16:59:19.778005","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1038,"date":"2016-02-16 17:00:22.990549","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def recursion_3(n, total=0):\n        if n==0:\n            return total\n        total += n\n        return recursion_3(n-1,total)\n    def recursion_complex(n,i,total=0):\n        if n==0:\n            return total\n        total+= (i-n)*n\n        return recursion_complex(n-1,i,total)\n    if n<=3:\n        return recursion_3(n)\n    else:\n        return recursion_complex(n-1,n)\n\n","after":null,"SubmissionTime":"2016-02-16T17:00:22.990549","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":876,"date":"2016-02-16 17:00:47.135755","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <=3:\n        return n\n    else: \n        return (g(n-1))\n\n","after":null,"SubmissionTime":"2016-02-16T17:00:47.135755","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":298,"date":"2016-02-16 17:01:19.451482","diff":null,"before":"def g(x):\n        i = 0\n        while i < n:\n            x = f(x)\n            k += 1\n        return x\n    return g\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3: \n        return n\n    else: \n        return (g(n-1) + 2) + (g(n-2) + 3) + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T17:01:19.451482","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":298,"date":"2016-02-16 17:01:50.163241","diff":null,"before":"def g(x):\n        i = 0\n        while i < n:\n            x = f(x)\n            k += 1\n        return x\n    return g\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3: \n        return n\n    else: \n        return g(n-1) + 2 * g(n-2) + 3 * g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T17:01:50.163241","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":298,"date":"2016-02-16 17:02:51.342392","diff":null,"before":"def g(x):\n        i = 0\n        while i < n:\n            x = f(x)\n            k += 1\n        return x\n    return g\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3: \n        return n\n    else: \n        return g(n-1) + (2 * g(n-2)) + (3 * g(n-1))\n\n","after":null,"SubmissionTime":"2016-02-16T17:02:51.342392","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":876,"date":"2016-02-16 17:03:11.696745","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <=3:\n        return n\n    else: \n        return (g(n-1))+(g(n-2))+(g(n-1))\n\n","after":null,"SubmissionTime":"2016-02-16T17:03:11.696745","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-16 17:04:33.262621","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x, m):\n        maximu = m\n        if x == maximu:\n            return x\n        elif m == 3:\n            return 3 * (maximu - 2)\n        else:\n            return x * m + coefficient_func(x + 1, m - 1)\n    if n <= 3:\n        return n\n    else:\n        return coefficient_func(1, n)\n\n","after":null,"SubmissionTime":"2016-02-16T17:04:33.262621","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-16 17:05:26.337835","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def coefficient_func(x, m):\n        maximu = m\n        if x == maximu:\n            return x\n        elif m == 3:\n            return 3 * (maximu - 1)\n        else:\n            return x * m + coefficient_func(x + 1, m - 1)\n    if n <= 3:\n        return n\n    else:\n        return coefficient_func(1, n)\n\n","after":null,"SubmissionTime":"2016-02-16T17:05:26.337835","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":49,"date":"2016-02-16 17:09:45.638334","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def recurse(n2, count):\n        if count == 1:\n            return G(n2-3)\n        else:\n            return G(n2-1) * recurse((n2-1), (count-1))\n    if n <= 3:\n        return n\n    else:\n        return recurse(n, 3)\n\n","after":null,"SubmissionTime":"2016-02-16T17:09:45.638334","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":49,"date":"2016-02-16 17:10:21.403514","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def recurse(n2, count):\n        if count == 1:\n            return g(n2-3)\n        else:\n            return g(n2-1) * recurse((n2-1), (count-1))\n    if n <= 3:\n        return n\n    else:\n        return recurse(n, 3)\n\n","after":null,"SubmissionTime":"2016-02-16T17:10:21.403514","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":49,"date":"2016-02-16 17:11:58.824587","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def recurse(n2, count):\n        if n <= 3:\n            return n\n        elif count == 1:\n            return g(n2-3)\n        else:\n            return g(n2-1) * recurse((n2-1), (count-1))\n    if n <= 3:\n        return n\n    else:\n        return recurse(n, 3)\n\n","after":null,"SubmissionTime":"2016-02-16T17:11:58.824587","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":49,"date":"2016-02-16 17:12:24.880511","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def recurse(n2, count):\n        if n <= 3:\n            return g(n)\n        elif count == 1:\n            return g(n2-3)\n        else:\n            return g(n2-1) * recurse((n2-1), (count-1))\n    if n <= 3:\n        return n\n    else:\n        return recurse(n, 3)\n\n","after":null,"SubmissionTime":"2016-02-16T17:12:24.880511","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":49,"date":"2016-02-16 17:12:38.703580","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def recurse(n2, count):\n        if n2 <= 3:\n            return g(n)\n        elif count == 1:\n            return g(n2-3)\n        else:\n            return g(n2-1) * recurse((n2-1), (count-1))\n    if n <= 3:\n        return n\n    else:\n        return recurse(n, 3)\n\n","after":null,"SubmissionTime":"2016-02-16T17:12:38.70358","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":49,"date":"2016-02-16 17:17:28.512813","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def recurse(n2, count, const):\n        if count == 1:\n            return 3*g(n2-3)\n        else:\n            return (const * g(n2-1)) + recurse((n2-1), (count-1), (const+1))\n    if n <= 3:\n        return n\n    else:\n        return recurse(n, 3)\n\n","after":null,"SubmissionTime":"2016-02-16T17:17:28.512813","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":49,"date":"2016-02-16 17:17:51.941737","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def recurse(n2, count, const):\n        if count == 1:\n            return 3*g(n2-3)\n        else:\n            return (const * g(n2-1)) + recurse((n2-1), (count-1), (const+1))\n    if n <= 3:\n        return n\n    else:\n        return recurse(n, 3, 1)\n\n","after":null,"SubmissionTime":"2016-02-16T17:17:51.941737","SynthesizedAfter":"\r\ndef g(n):\r\n    def recurse(n2, count, const):\r\n        if count==1:\r\n            return 3*g(n-3)\r\n        else:\r\n            return (const*g(n2-1))+recurse((n2-1), (count-1), (const+1))\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return recurse(n, 3, 1)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":49,"date":"2016-02-16 17:17:51.941737","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def recurse(n2, count, const):\n        if count == 1:\n            return 3*g(n2-3)\n        else:\n            return (const * g(n2-1)) + recurse((n2-1), (count-1), (const+1))\n    if n <= 3:\n        return n\n    else:\n        return recurse(n, 3, 1)\n\n","after":null,"SubmissionTime":"2016-02-16T17:17:51.941737","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":49,"date":"2016-02-16 17:18:28.417744","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def recurse(n2, count, const):\n        if n<=3:\n            return n\n        elif count == 1:\n            return 3*g(n2-3)\n        else:\n            return (const * g(n2-1)) + recurse((n2-1), (count-1), (const+1))\n    if n <= 3:\n        return n\n    else:\n        return recurse(n, 3, 1)\n\n","after":null,"SubmissionTime":"2016-02-16T17:18:28.417744","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":49,"date":"2016-02-16 17:19:15.537111","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def recurse(n2, count, const):\n        if n2<=3:\n            return n\n        elif count == 1:\n            return 3*g(n2-3)\n        else:\n            return (const * g(n2-1)) + recurse((n2-1), (count-1), (const+1))\n    if n <= 3:\n        return n\n    else:\n        return recurse(n, 3, 1)\n\n","after":null,"SubmissionTime":"2016-02-16T17:19:15.537111","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":49,"date":"2016-02-16 17:20:35.466031","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def recurse(n2, count, const):\n        if n2<=3:\n            return n2\n        elif count == 1:\n            return 3*g(n2-3)\n        else:\n            return (const * g(n2-1)) + recurse((n2-1), (count-1), (const+1))\n    if n <= 3:\n        return n\n    else:\n        return recurse(n, 3, 1)\n\n","after":null,"SubmissionTime":"2016-02-16T17:20:35.466031","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":190,"date":"2016-02-16 17:20:44.500199","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 1:\n        return n\n    return g(n - 1) + 2 * g(n - 2) + 3\n\n","after":null,"SubmissionTime":"2016-02-16T17:20:44.500199","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":190,"date":"2016-02-16 17:20:52.413329","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 2:\n        return n\n    return g(n - 1) + 2 * g(n - 2) + 3\n\n","after":null,"SubmissionTime":"2016-02-16T17:20:52.413329","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":190,"date":"2016-02-16 17:21:00.446367","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return g(n - 1) + 2 * g(n - 2) + 3\n\n","after":null,"SubmissionTime":"2016-02-16T17:21:00.446367","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":190,"date":"2016-02-16 17:21:24.298945","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3) + 4\n\n","after":null,"SubmissionTime":"2016-02-16T17:21:24.298945","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":463,"date":"2016-02-16 17:34:12.210343","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) * g(n-3)\n\n\n","after":null,"SubmissionTime":"2016-02-16T17:34:12.210343","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":567,"date":"2016-02-16 17:49:37.872856","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-16T17:49:37.872856","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":567,"date":"2016-02-16 17:49:48.843872","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n < 3:\n        return n\n    else:\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-16T17:49:48.843872","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":567,"date":"2016-02-16 17:50:08.337900","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n < 3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-16T17:50:08.3379","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":110,"date":"2016-02-16 17:56:29.001828","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        count=0\n        while count<n:\n            total+=count*g(n-1)\n            count+=1\n        return total\n\n","after":null,"SubmissionTime":"2016-02-16T17:56:29.001828","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":617,"date":"2016-02-16 18:03:41.306710","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def helper(n):\n        total = 0\n        if n == 3:\n            total += n\n        else:\n            total = helper(n-1) + (2 * helper(n-2)) + (3 * helper(n-3))\n        return total\n    return helper(n)\n\n    \"\"\"4 = 3 + 2(2) +\n    5 = 10 + 2(3) + 3(2) = 22\"\"\"\n\n\n","after":null,"SubmissionTime":"2016-02-16T18:03:41.30671","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":688,"date":"2016-02-16 18:05:50.947169","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    elif n > 3:\n        return g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T18:05:50.947169","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":732,"date":"2016-02-16 18:06:15.172735","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def help(i):\n        if n <= 3:\n            return n\n        else:\n            return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-16T18:06:15.172735","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":688,"date":"2016-02-16 18:06:20.029832","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    elif n > 3:\n        return g(n)+g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T18:06:20.029832","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":133,"date":"2016-02-16 18:06:26.423068","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <=3:\n        return n\n    else:\n        return G(n-1)+2*G(n-2)+3*G(n-3)\n\n","after":null,"SubmissionTime":"2016-02-16T18:06:26.423068","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":688,"date":"2016-02-16 18:07:34.388086","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 0\n    if n <= 3:\n        return n\n    elif n > 3:\n        i += 1\n        return i * g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T18:07:34.388086","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":688,"date":"2016-02-16 18:09:08.908492","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 1\n    if n <= 3:\n        return n\n    elif n > 3:\n        return i * g(n-1)\n        i += 1\n\n","after":null,"SubmissionTime":"2016-02-16T18:09:08.908492","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":617,"date":"2016-02-16 18:09:39.173375","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    # def helper(n):\n    #     total = 0\n    #     if n == 3:\n    #         total += n\n    #     else:\n    #         total = helper(n-1) + (2 * helper(n-2)) + (3 * helper(n-3))\n    #     return total\n    # return helper(n)\n    if n <= 3:\n        return n\n    else:\n        return g(n - 1) + 2(g(n - 2)) + 3(g(n - 3))\n\n    \"\"\"4 = 3 + 2(2) +\n    5 = 10 + 2(3) + 3(2) = 22\"\"\"\n\n\n","after":null,"SubmissionTime":"2016-02-16T18:09:39.173375","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+(2*g(n-2))+(3*g(n-3))","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ParenthesisExpressionNode, SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2)))))))))))))), 1), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Target(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ParenthesisExpressionNode, SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3)))))))))))))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(ArgNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))))))))), InOrderSort(ast))))))))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":688,"date":"2016-02-16 18:15:08.229044","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 0\n    if n <= 3:\n        return n\n    elif n > 3:\n        i += 1\n        return i * g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T18:15:08.229044","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":688,"date":"2016-02-16 18:17:18.945520","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 0\n    if n <= 3:\n        return n + 2*g(n-1) + 3*g(n-2)\n    elif n > 3:\n        i += 1\n        return i * g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T18:17:18.94552","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":688,"date":"2016-02-16 18:19:07.583734","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 0\n    if n <= 3:\n        return n + 2 *(n-1) + 3*(n-2) \n    elif n > 3:\n        i += 1\n        return i * g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T18:19:07.583734","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":688,"date":"2016-02-16 18:20:05.170028","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 0\n    if n <= 3:\n        return n\n    elif n > 3:\n        i += 1\n        return i * g(n-1) + i *(n-1) + i*(n-2) \n\n","after":null,"SubmissionTime":"2016-02-16T18:20:05.170028","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":688,"date":"2016-02-16 18:21:16.096085","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 0\n    if n <= 3:\n        return n\n    elif n > 3:\n        i += 1\n        return i * g(n-1) + i * g(n-2) + i*g(n-3) \n\n","after":null,"SubmissionTime":"2016-02-16T18:21:16.096085","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":726,"date":"2016-02-16 18:27:18.943950","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    a, b, c = 1, 2, 3\n    for i in range(3, n):\n        a, b, c = b, c, (a * 3 + b * 2 + c)\n    return c\n\n","after":null,"SubmissionTime":"2016-02-16T18:27:18.94395","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    a, b, c = 1, 2, 3\r\n    for i in range(3, n):\r\n        a, b, c = b, c, (a*3+b*2+c)\r\n    return c","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    )), Selected(\\x => Match(x, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":726,"date":"2016-02-16 18:28:33.468183","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    a, b, c = 1, 2, 3\n    while n > 3:\n        a, b, c = b, c, c + 2 * b + 3 * a\n        n -= 1\n    return c\n\n","after":null,"SubmissionTime":"2016-02-16T18:28:33.468183","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":195,"date":"2016-02-16 18:28:48.309872","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if g <= 3:\n        return g(n)\n    else:\n        return 2 * g(n - 1) + 2\n\n","after":null,"SubmissionTime":"2016-02-16T18:28:48.309872","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":195,"date":"2016-02-16 18:29:00.492801","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if g <= 3:\n        return n\n    else:\n        return 2 * g(n - 1) + 2\n\n","after":null,"SubmissionTime":"2016-02-16T18:29:00.492801","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":195,"date":"2016-02-16 18:29:23.619743","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if g(n) <= 3:\n        return n\n    else:\n        return 2 * g(n - 1) + 2\n\n","after":null,"SubmissionTime":"2016-02-16T18:29:23.619743","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":726,"date":"2016-02-16 18:29:27.582873","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return n + f(n - 1)\n\n\n","after":null,"SubmissionTime":"2016-02-16T18:29:27.582873","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":195,"date":"2016-02-16 18:29:43.518650","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return 2 * g(n - 1) + 2\n\n","after":null,"SubmissionTime":"2016-02-16T18:29:43.51865","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":195,"date":"2016-02-16 18:29:57.541236","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return 2 * g(n - 1) + 4\n\n","after":null,"SubmissionTime":"2016-02-16T18:29:57.541236","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":195,"date":"2016-02-16 18:30:23.317435","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return 2 * g(n - 1) + 2 * n\n\n","after":null,"SubmissionTime":"2016-02-16T18:30:23.317435","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":726,"date":"2016-02-16 18:31:17.814355","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    a, b, c = 1, 2, 3\n    while n > 3:\n        a, b, c = b, c, c + 2 * b + 3 * a\n        n -= 1\n    return c\n\n\n","after":null,"SubmissionTime":"2016-02-16T18:31:17.814355","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":948,"date":"2016-02-16 18:33:55.367406","diff":null,"before":"def g(x):\n        for i in range(n):\n            x = f(x)\n        return x\n    return g\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 3*(g-3)\n\n\n","after":null,"SubmissionTime":"2016-02-16T18:33:55.367406","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":325,"date":"2016-02-16 19:14:01.100216","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T19:14:01.100216","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":325,"date":"2016-02-16 19:14:15.646360","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return n + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T19:14:15.64636","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-2)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast)))))))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":325,"date":"2016-02-16 19:14:26.866102","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return n * g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T19:14:26.866102","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":325,"date":"2016-02-16 19:15:52.073803","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return (n+1) + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T19:15:52.073803","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":325,"date":"2016-02-16 19:15:52.073803","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return (n+1) + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T19:15:52.073803","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":325,"date":"2016-02-16 19:16:01.665085","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return (n+1) * g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T19:16:01.665085","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":325,"date":"2016-02-16 19:16:17.364881","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return (n-1) * g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T19:16:17.364881","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":325,"date":"2016-02-16 19:16:27.700346","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return (n-1) + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T19:16:27.700346","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":210,"date":"2016-02-16 19:16:52.322009","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    total = 1\n    k = 1\n    i = 2\n    if n <= 3:\n        return n\n    else:\n        total *= (g(n - k) + i)\n        k += 1\n        i += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-16T19:16:52.322009","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":325,"date":"2016-02-16 19:17:53.718116","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n) + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T19:17:53.718116","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":325,"date":"2016-02-16 19:17:59.023840","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n) * g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T19:17:59.02384","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":325,"date":"2016-02-16 19:18:04.768252","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return n * g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T19:18:04.768252","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":325,"date":"2016-02-16 19:19:33.381773","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return (n-1) + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T19:19:33.381773","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":325,"date":"2016-02-16 19:19:56.373515","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return (n-1) * g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T19:19:56.373515","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":325,"date":"2016-02-16 19:20:06.809156","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return (n-1) * g(n-1) + 1\n\n","after":null,"SubmissionTime":"2016-02-16T19:20:06.809156","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":325,"date":"2016-02-16 19:20:16.729419","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return (n-1) * g(n-1) + n\n\n","after":null,"SubmissionTime":"2016-02-16T19:20:16.729419","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":325,"date":"2016-02-16 19:20:59.687391","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return (n-1) * g(n-1) + 2\n\n","after":null,"SubmissionTime":"2016-02-16T19:20:59.687391","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":325,"date":"2016-02-16 19:21:12.324300","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return (n-1) * g(n-1) + 1\n\n","after":null,"SubmissionTime":"2016-02-16T19:21:12.3243","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":325,"date":"2016-02-16 19:21:28.331991","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return (n) * g(n-1) + 1\n\n","after":null,"SubmissionTime":"2016-02-16T19:21:28.331991","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":325,"date":"2016-02-16 19:21:37.254425","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return (n+1) * g(n-1) + 1\n\n","after":null,"SubmissionTime":"2016-02-16T19:21:37.254425","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":325,"date":"2016-02-16 19:21:44.886075","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return (n-1) * g(n-1) + 1\n\n","after":null,"SubmissionTime":"2016-02-16T19:21:44.886075","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":325,"date":"2016-02-16 19:25:36.493007","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return (n) + g(n) * ((n-1) + g(n-1))\n\n","after":null,"SubmissionTime":"2016-02-16T19:25:36.493007","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":446,"date":"2016-02-16 19:25:37.102252","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3) if n > 3 else n\n\n","after":null,"SubmissionTime":"2016-02-16T19:25:37.102252","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":917,"date":"2016-02-16 19:25:45.375293","diff":null,"before":"def g(x):\n        for _ in range(1, n+1):\n            x = f(x)\n        return x\n    return g\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    while n > 3:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n    return n\n\n","after":null,"SubmissionTime":"2016-02-16T19:25:45.375293","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":325,"date":"2016-02-16 19:26:01.256564","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return n * ((n-1) + g(n-1))\n\n","after":null,"SubmissionTime":"2016-02-16T19:26:01.256564","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":358,"date":"2016-02-16 19:26:52.312607","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        if n <= 1:\n            return 1\n        else:\n            return n + g(n-1)\n    else:\n        return n(n-1) + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T19:26:52.312607","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":917,"date":"2016-02-16 19:27:37.461831","diff":null,"before":"def g(x):\n        for _ in range(1, n+1):\n            x = f(x)\n        return x\n    return g\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n    def h(x):\n        return f(g(x))\n    return h\n\ndef g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def pantry(n):\n        while n > 3:\n            return g(n-1) + 2 * g(n-2) + 3 * g(n-3)\n\n        return n\n\n    return pantry(n)\n\n","after":null,"SubmissionTime":"2016-02-16T19:27:37.461831","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":325,"date":"2016-02-16 19:27:44.012843","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-16T19:27:44.012843","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":358,"date":"2016-02-16 19:28:32.051776","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        if n == 1:\n            return 1\n        else:\n            return n + g(n-1)\n    else:\n        return n(n-1) + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T19:28:32.051776","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":358,"date":"2016-02-16 19:29:47.861794","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return n(n-1) + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T19:29:47.861794","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":358,"date":"2016-02-16 19:30:12.749590","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return n*(n-1) + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T19:30:12.74959","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":358,"date":"2016-02-16 19:30:23.012449","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return 3\n    else:\n        return n*(n-1) + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T19:30:23.012449","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":358,"date":"2016-02-16 19:30:28.683219","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return n*(n-1) + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T19:30:28.683219","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":358,"date":"2016-02-16 19:30:56.632162","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 3:\n        return n\n    else:\n        return n*(n-1) + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T19:30:56.632162","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":358,"date":"2016-02-16 19:33:41.116936","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return n*(n-1) + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T19:33:41.116936","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":655,"date":"2016-02-16 19:45:48.471414","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-16T19:45:48.471414","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":961,"date":"2016-02-16 19:48:42.282333","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    v = 0\n    s = 1\n    if n <= 3:\n        return n\n    while n > 3:\n        n -= n\n        v = v + s*g(n)\n        s += s\n        return v\n\n","after":null,"SubmissionTime":"2016-02-16T19:48:42.282333","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":547,"date":"2016-02-16 19:50:06.046225","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<= 3:\n        return(n)\n    else:\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n\n","after":null,"SubmissionTime":"2016-02-16T19:50:06.046225","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return (n)\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":406,"date":"2016-02-16 19:52:03.286725","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else: \n        return G(n-1)+2 * G(n-2)+3 *G(n-3)\n\n","after":null,"SubmissionTime":"2016-02-16T19:52:03.286725","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":1036,"date":"2016-02-16 19:56:29.543172","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return g(n) + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T19:56:29.543172","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1036,"date":"2016-02-16 19:56:47.951647","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return 0\n    return g(n) + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T19:56:47.951647","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1036,"date":"2016-02-16 19:57:01.014583","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return \n    return g(n) + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T19:57:01.014583","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1036,"date":"2016-02-16 19:57:31.890369","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    return g(n) + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T19:57:31.890369","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1036,"date":"2016-02-16 19:58:51.007376","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T19:58:51.007376","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1036,"date":"2016-02-16 20:00:18.987840","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x=2\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + x *g(n-(x+1))\n        x +=1\n\n","after":null,"SubmissionTime":"2016-02-16T20:00:18.98784","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1036,"date":"2016-02-16 20:00:51.821188","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + n *g(n-(n+1))\n\n\n","after":null,"SubmissionTime":"2016-02-16T20:00:51.821188","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1036,"date":"2016-02-16 20:01:02.695529","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    \n\n","after":null,"SubmissionTime":"2016-02-16T20:01:02.695529","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1036,"date":"2016-02-16 20:01:24.306829","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    return g(n-1)\n    \n\n","after":null,"SubmissionTime":"2016-02-16T20:01:24.306829","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-3))))))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":1036,"date":"2016-02-16 20:01:31.956123","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    return g(n+1)\n    \n\n","after":null,"SubmissionTime":"2016-02-16T20:01:31.956123","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1036,"date":"2016-02-16 20:01:41.796385","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n <= 3:\n        return n\n    return g(n-1)\n    \n\n","after":null,"SubmissionTime":"2016-02-16T20:01:41.796385","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":756,"date":"2016-02-16 20:13:05.600367","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-16T20:13:05.600367","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":504,"date":"2016-02-16 20:20:20.599261","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    answer = n\n    if n <= 3:\n        return answer\n    else:\n        counter = 1\n        answer = counter * g(n-counter)\n    return answer\n\n","after":null,"SubmissionTime":"2016-02-16T20:20:20.599261","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":504,"date":"2016-02-16 20:21:01.197592","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    answer = n\n    if n <= 3:\n        return answer\n    else:\n        counter = 1\n        answer = counter * g(n-counter)\n        couter += 1\n    return answer\n\n","after":null,"SubmissionTime":"2016-02-16T20:21:01.197592","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":504,"date":"2016-02-16 20:21:06.732935","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    answer = n\n    if n <= 3:\n        return answer\n    else:\n        counter = 1\n        answer = counter * g(n-counter)\n        counter += 1\n    return answer\n\n","after":null,"SubmissionTime":"2016-02-16T20:21:06.732935","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":504,"date":"2016-02-16 20:28:14.642387","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    answer = 0\n    counter = 1\n    if n <= 3:\n        return n\n    else:\n        while n >= counter:\n            answer = answer + (g(n-counter) * counter)\n            counter += 1\n    return answer\n\n","after":null,"SubmissionTime":"2016-02-16T20:28:14.642387","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":291,"date":"2016-02-16 20:28:17.077798","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    else:\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-16T20:28:17.077798","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":504,"date":"2016-02-16 20:28:25.550623","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    answer = 0\n    counter = 1\n    if n <= 3:\n        return n\n    else:\n        while n > counter:\n            answer = answer + (g(n-counter) * counter)\n            counter += 1\n    return answer\n\n","after":null,"SubmissionTime":"2016-02-16T20:28:25.550623","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":504,"date":"2016-02-16 20:29:42.947933","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    answer = n\n    counter = 1\n    if n <= 3:\n        return answer\n    else:\n        while n >= counter:\n            answer = (g(n-counter) * counter)\n            counter += 1\n    return answer\n\n","after":null,"SubmissionTime":"2016-02-16T20:29:42.947933","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":504,"date":"2016-02-16 20:29:49.700079","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    answer = n\n    counter = 1\n    if n <= 3:\n        return answer\n    else:\n        while n > counter:\n            answer = (g(n-counter) * counter)\n            counter += 1\n    return answer\n\n","after":null,"SubmissionTime":"2016-02-16T20:29:49.700079","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-16 20:31:23.285154","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 1\n    if n > 3: \n        while i <= 2:\n            return g(n-i) + i * g(n-2)\n    else: \n        return n\n\n\n","after":null,"SubmissionTime":"2016-02-16T20:31:23.285154","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-16 20:32:09.992213","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 1\n    if n > 3: \n        while i <= 1:\n            return g(n-i) + i * g(n-2)\n    else: \n        return n\n\n\n","after":null,"SubmissionTime":"2016-02-16T20:32:09.992213","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-16 20:32:50.274922","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 1\n    if n > 3: \n        while i <= 1:\n            return g(n-i) + i * g(n-i-1)\n            i += 1\n    else: \n        return n\n\n\n","after":null,"SubmissionTime":"2016-02-16T20:32:50.274922","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-16 20:33:07.968585","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 1\n    if n > 3: \n        while n <= 1:\n            return g(n-i) + i * g(n-i-1)\n            i += 1\n    else: \n        return n\n\n\n","after":null,"SubmissionTime":"2016-02-16T20:33:07.968585","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":909,"date":"2016-02-16 20:34:53.229007","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n > 3:\n        return g(n) + n * g(n - 1)\n\n\n","after":null,"SubmissionTime":"2016-02-16T20:34:53.229007","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":909,"date":"2016-02-16 20:35:11.919706","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n > 3:\n        return n * g(n) + n * g(n - 1)\n\n\n","after":null,"SubmissionTime":"2016-02-16T20:35:11.919706","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-16 20:38:26.060850","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 1\n    if n > 3: \n        while i <= n:\n            return g(n-1) + i * g(n-2)\n            i += 1\n    else: \n        return n\n\n\n","after":null,"SubmissionTime":"2016-02-16T20:38:26.06085","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":628,"date":"2016-02-16 20:42:16.602664","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(i, total):\n        total = total + i * g(n-i)\n        i += 1\n\n\n    if n <= 3:\n        return n\n    else:\n        return helper(1,0)\n\n","after":null,"SubmissionTime":"2016-02-16T20:42:16.602664","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":628,"date":"2016-02-16 20:42:16.602664","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(i, total):\n        total = total + i * g(n-i)\n        i += 1\n\n\n    if n <= 3:\n        return n\n    else:\n        return helper(1,0)\n\n","after":null,"SubmissionTime":"2016-02-16T20:42:16.602664","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":628,"date":"2016-02-16 20:43:15.907699","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(i, n, total):\n        if i < n:\n            total = total + i * g(n-i)\n            i += 1\n        else:\n            return total\n\n    if n <= 3:\n        return n\n    else:\n        return counter(1,0)\n\n","after":null,"SubmissionTime":"2016-02-16T20:43:15.907699","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":628,"date":"2016-02-16 20:43:33.746293","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(i, n, total):\n        if i < n:\n            total = total + i * g(n-i)\n            i += 1\n        else:\n            return total\n\n    if n <= 3:\n        return n\n    else:\n        return counter(1,n, 0)\n\n","after":null,"SubmissionTime":"2016-02-16T20:43:33.746293","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":628,"date":"2016-02-16 20:47:08.856510","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(i, n, total):\n        if i < n:\n            total = total + i * n\n            i += 1\n        else:\n            return total\n\n    if n <= 3:\n        return n\n    else:\n        return counter(1, n, 0)\n\n","after":null,"SubmissionTime":"2016-02-16T20:47:08.85651","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":628,"date":"2016-02-16 20:47:37.974195","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(i, n, total):\n        while i < n:\n            total = total + i * n\n            i += 1\n        return total\n\n    if n <= 3:\n        return n\n    else:\n        return counter(1, n, 0)\n\n","after":null,"SubmissionTime":"2016-02-16T20:47:37.974195","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-16 20:47:40.336014","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 1\n    k = 2\n    if n > 3: \n        while i <= n:\n            return g(n-1) + i * g(n-2) + k\n            i += 1\n            k += 1\n    else: \n        return n\n\n\n","after":null,"SubmissionTime":"2016-02-16T20:47:40.336014","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":628,"date":"2016-02-16 20:49:26.999429","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(i, n, total):\n        while i < n:\n            total = total + i * n\n            i += 1\n        return total\n\n    if n <= 3:\n        return n\n    else:\n        return g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T20:49:26.999429","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-16 20:49:29.202444","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 2\n    k = 3\n    if n > 3: \n        while i <= n:\n            return g(n-1) + i * g(n-2) + k \n            i += 1\n            k += 1\n    else: \n        return n\n\n\n","after":null,"SubmissionTime":"2016-02-16T20:49:29.202444","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-16 20:49:29.202444","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 2\n    k = 3\n    if n > 3: \n        while i <= n:\n            return g(n-1) + i * g(n-2) + k \n            i += 1\n            k += 1\n    else: \n        return n\n\n\n","after":null,"SubmissionTime":"2016-02-16T20:49:29.202444","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-16 20:49:43.965156","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 2\n    k = 3\n    if n > 3: \n        while i <= n+2:\n            return g(n-1) + i * g(n-2) + k \n            i += 1\n            k += 1\n    else: \n        return n\n\n\n","after":null,"SubmissionTime":"2016-02-16T20:49:43.965156","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":628,"date":"2016-02-16 20:50:04.859838","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(i, n, total):\n        while i < n:\n            total = total + i * g(n-1)\n            i += 1\n        return total\n\n    if n <= 3:\n        return n\n    else:\n        return counter(1,n,0)\n\n","after":null,"SubmissionTime":"2016-02-16T20:50:04.859838","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-16 20:50:12.894812","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 2\n    k = 3\n    if n > 3: \n        while i < n+2:\n            return g(n-1) + i * g(n-2) + k \n            i += 1\n            k += 1\n    else: \n        return n\n\n\n","after":null,"SubmissionTime":"2016-02-16T20:50:12.894812","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":628,"date":"2016-02-16 20:50:41.160678","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(i, n, total):\n        while i < n:\n            total = total + i * g(n-1)\n            n -= 1\n            i += 1\n        return total\n\n    if n <= 3:\n        return n\n    else:\n        return counter(1,n,0)\n\n","after":null,"SubmissionTime":"2016-02-16T20:50:41.160678","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":303,"date":"2016-02-16 20:51:05.669152","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    q=n\n    def helper(q,n):\n        if q<=3:\n            return n\n        else:\n            return helper(q-1,n)+2*helper(q-2,n)+3*helper(q-3,n)\n    return helper(q,n)\n\n","after":null,"SubmissionTime":"2016-02-16T20:51:05.669152","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-16 20:51:09.012068","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    a = 0\n    i = 2\n    k = 3\n    if n > 3: \n        while a < n:\n            return g(n-1) + i * g(n-2) + k \n            i += 1\n            k += 1\n            a += 1\n    else: \n        return n\n\n\n","after":null,"SubmissionTime":"2016-02-16T20:51:09.012068","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":628,"date":"2016-02-16 20:51:44.150842","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(i, n, total):\n        while i < n:\n            total = total + i * g(n-i)\n            n = n - i\n            i += 1\n        return total\n\n    if n <= 3:\n        return n\n    else:\n        return counter(1,n,0)\n\n","after":null,"SubmissionTime":"2016-02-16T20:51:44.150842","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":628,"date":"2016-02-16 20:52:08.969989","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(i, n, total):\n        while i < n:\n            total = total + i * g(n-i)\n            i += 1\n        return total\n\n    if n <= 3:\n        return n\n    else:\n        return counter(1,n,0)\n\n","after":null,"SubmissionTime":"2016-02-16T20:52:08.969989","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":756,"date":"2016-02-16 20:52:15.687349","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-16T20:52:15.687349","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-16 20:53:05.786301","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    a = 0\n    i = 2\n    k = 3\n    if n > 3: \n        n = n - 1\n        while a < n:\n            return g(n) + i * g(n-1) + k\n            i += 1\n            k += 1\n            a += 1\n    else: \n        return n\n\n\n","after":null,"SubmissionTime":"2016-02-16T20:53:05.786301","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":792,"date":"2016-02-16 20:53:29.304025","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        def h(n):\n            return (n-1)*h(n-1)\n        return h\n\n","after":null,"SubmissionTime":"2016-02-16T20:53:29.304025","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-16 20:53:57.305117","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 2\n    k = 3\n    if n > 3: \n        n = n - 1\n        while n > 0:\n            return g(n) + i * g(n-1) + k\n            i += 1\n            k += 1\n    else: \n        return n\n\n\n","after":null,"SubmissionTime":"2016-02-16T20:53:57.305117","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":756,"date":"2016-02-16 20:54:19.133604","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<3:\n        return n\n    else:\n        return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-16T20:54:19.133604","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":792,"date":"2016-02-16 20:54:41.638867","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        g = (n-1)*g(n-1)\n        return h\n\n","after":null,"SubmissionTime":"2016-02-16T20:54:41.638867","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":792,"date":"2016-02-16 20:55:11.885464","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    g=1\n    if n<=3:\n        return n\n    else:\n        g = (n-1)*g(n-1)\n        return h\n\n","after":null,"SubmissionTime":"2016-02-16T20:55:11.885464","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":792,"date":"2016-02-16 20:55:32.505858","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    h=1\n    if n<=3:\n        return n\n    else:\n        h = (n-1)*g(n-1)\n        return h\n\n","after":null,"SubmissionTime":"2016-02-16T20:55:32.505858","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":303,"date":"2016-02-16 20:55:55.328687","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if q<=3:\n        return n\n    else:\n        return g(n-1)+2*g(n-2)+3*g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-16T20:55:55.328687","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast)))))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":792,"date":"2016-02-16 20:56:54.546012","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    h=1\n    k=1\n    if n<=3:\n        return n\n    else:\n        h, k = k*g(n-1), k+1\n        return h\n\n","after":null,"SubmissionTime":"2016-02-16T20:56:54.546012","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-16 20:57:21.318415","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 2\n    k = 3\n    j = 4\n    if n > 3: \n        n = n - 1\n        while n > 0:\n            return g(n) + i * g(n-1) + k * g(n-2) + j\n            i += 1\n            k += 1\n            j += 1\n    else: \n        return n\n\n\n","after":null,"SubmissionTime":"2016-02-16T20:57:21.318415","SynthesizedAfter":"\r\ndef g(n):\r\n    i = 2\r\n    k = 3\r\n    j = 4\r\n    if n>3:\r\n        n = n-1\r\n        while n>0:\r\n            return g(n)+i*g(n-3)+k*g(n-2)+j\r\n            i += 1\r\n            k += 1\r\n            j += 1\r\n    else:\r\n        return n","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-16 20:57:21.318415","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 2\n    k = 3\n    j = 4\n    if n > 3: \n        n = n - 1\n        while n > 0:\n            return g(n) + i * g(n-1) + k * g(n-2) + j\n            i += 1\n            k += 1\n            j += 1\n    else: \n        return n\n\n\n","after":null,"SubmissionTime":"2016-02-16T20:57:21.318415","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":628,"date":"2016-02-16 20:57:42.855448","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(i, n, total):\n        while i < 4:\n            total = total + i * g(n-i)\n            i += 1\n        return total\n\n    if n <= 3:\n        return n\n    else:\n        return counter(1,n,0)\n\n","after":null,"SubmissionTime":"2016-02-16T20:57:42.855448","SynthesizedAfter":"\r\ndef g(n):\r\n    def counter(i, n, total):\r\n        while i<4:\r\n            total = total+i*g(n-i)\r\n            i += 1\r\n        return total\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return counter(1, n, 0)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-4)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":792,"date":"2016-02-16 20:58:24.317655","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    h=1\n    k=0\n    if n<=3:\n        return n\n    else:\n        k+=1\n        h = k*g(n-1)\n        return h\n\n","after":null,"SubmissionTime":"2016-02-16T20:58:24.317655","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-16 20:58:36.753107","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 2\n    k = 3\n\n    if n > 3: \n        while n > 0:\n            return g(n-1) + i*g(n-2) + k*g(n-3)\n            i += 1\n            k += 1\n\n    else: \n        return n\n\n\n","after":null,"SubmissionTime":"2016-02-16T20:58:36.753107","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-16 20:58:36.753107","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 2\n    k = 3\n\n    if n > 3: \n        while n > 0:\n            return g(n-1) + i*g(n-2) + k*g(n-3)\n            i += 1\n            k += 1\n\n    else: \n        return n\n\n\n","after":null,"SubmissionTime":"2016-02-16T20:58:36.753107","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":628,"date":"2016-02-16 20:58:41.255189","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(i, n, total):\n        if i < 4:\n            total = total + i * g(n-i)\n            i += 1\n        return total\n\n    if n <= 3:\n        return n\n    else:\n        return counter(1,n,0)\n\n","after":null,"SubmissionTime":"2016-02-16T20:58:41.255189","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-16 20:59:04.320324","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    i = 2\n    k = 3\n\n    if n > 3: \n        return n\n    else:\n        return g(n-1) + i*g(n-2) + k*g(n-3)\n        i += 1\n        k += 1\n\n\n","after":null,"SubmissionTime":"2016-02-16T20:59:04.320324","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":792,"date":"2016-02-16 21:00:21.052162","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        h = (n-1)*g(n-1)\n        return h\n\n","after":null,"SubmissionTime":"2016-02-16T21:00:21.052162","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":792,"date":"2016-02-16 21:00:46.909181","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        g = (n-1)*g(n-1)\n        return g\n\n","after":null,"SubmissionTime":"2016-02-16T21:00:46.909181","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":792,"date":"2016-02-16 21:01:00.801224","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    h=g\n    if n<=3:\n        return n\n    else:\n        g = (n-1)*h(n-1)\n        return g\n\n","after":null,"SubmissionTime":"2016-02-16T21:01:00.801224","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":792,"date":"2016-02-16 21:01:21.144274","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    h=g(n)\n    if n<=3:\n        return n\n    else:\n        g = (n-1)*h(n-1)\n        return g\n\n","after":null,"SubmissionTime":"2016-02-16T21:01:21.144274","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":358,"date":"2016-02-16 21:02:03.695455","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return n* g(n-1) + g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T21:02:03.695455","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":628,"date":"2016-02-16 21:02:22.400942","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(i, n, total):\n        if i < 4:\n            total = total + i * g(n-i)\n            i += 1\n    return total\n\n    if n <= 3:\n        return n\n    else:\n        return counter(1,n,0)\n\n","after":null,"SubmissionTime":"2016-02-16T21:02:22.400942","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":792,"date":"2016-02-16 21:02:38.882722","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        g, n = (n-1)*g(n-1), n-1\n        return h\n\n","after":null,"SubmissionTime":"2016-02-16T21:02:38.882722","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":628,"date":"2016-02-16 21:02:46.681158","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(i, n, total):\n        if i < 4:\n            total = total + i * g(n-i)\n            i += 1\n        else:\n            return total\n\n    if n <= 3:\n        return n\n    else:\n        return counter(1,n,0)\n\n","after":null,"SubmissionTime":"2016-02-16T21:02:46.681158","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":628,"date":"2016-02-16 21:03:09.395314","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(i, n, total):\n        if i < 4:\n            total = total + i * g(n-i)\n            i += 1\n            return total\n        else:\n            return total\n\n    if n <= 3:\n        return n\n    else:\n        return counter(1,n,0)\n\n","after":null,"SubmissionTime":"2016-02-16T21:03:09.395314","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":792,"date":"2016-02-16 21:03:13.864684","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        h, n = h + (n-1)*g(n-1), n-1\n        return h\n\n","after":null,"SubmissionTime":"2016-02-16T21:03:13.864684","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":792,"date":"2016-02-16 21:03:29.114114","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    h=1\n    if n<=3:\n        return n\n    else:\n        h, n = h + (n-1)*g(n-1), n-1\n        return h\n\n","after":null,"SubmissionTime":"2016-02-16T21:03:29.114114","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":628,"date":"2016-02-16 21:03:47.300219","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    def counter(i, n, total):\n        if i < 4:\n            total = total + i * g(n-i)\n            i += 1\n            counter(i, n, total)\n        return total\n\n    if n <= 3:\n        return n\n    else:\n        return counter(1,n,0)\n\n","after":null,"SubmissionTime":"2016-02-16T21:03:47.300219","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":792,"date":"2016-02-16 21:04:20.535289","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    h=1\n    if n<=3:\n        return n\n    else:\n        h = h + (n-1)*g(n-1)\n        return h\n\n","after":null,"SubmissionTime":"2016-02-16T21:04:20.535289","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":22,"date":"2016-02-16 21:05:04.599423","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    else:\n        return G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3)\n\n","after":null,"SubmissionTime":"2016-02-16T21:05:04.599423","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":792,"date":"2016-02-16 21:06:08.848750","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        g = g + (n-1)*g(n-1)\n        return g\n\n","after":null,"SubmissionTime":"2016-02-16T21:06:08.84875","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":792,"date":"2016-02-16 21:07:17.254563","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        g = (n-1)*g(n-1) + (n-2)*g(n-2)\n        return g\n\n","after":null,"SubmissionTime":"2016-02-16T21:07:17.254563","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":792,"date":"2016-02-16 21:08:33.769050","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    k=1\n    if n<=3:\n        return n\n    else:\n        g, k = (k)*g(n-k) + (n-k-1)*g(n-k-1), k+1\n        return g\n\n","after":null,"SubmissionTime":"2016-02-16T21:08:33.76905","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":792,"date":"2016-02-16 21:09:39.182923","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        def h(n):\n            return (n-1)*g(n-1)\n        return h\n\n","after":null,"SubmissionTime":"2016-02-16T21:09:39.182923","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":792,"date":"2016-02-16 21:11:04.677760","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        def h(n):\n            n=n-1\n            return (n-1)*g(n-1)\n        return h\n\n","after":null,"SubmissionTime":"2016-02-16T21:11:04.67776","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":792,"date":"2016-02-16 21:11:16.147431","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        def h(n):\n            return (n-1)*g(n-1)\n        return h\n\n","after":null,"SubmissionTime":"2016-02-16T21:11:16.147431","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":792,"date":"2016-02-16 21:11:58.593947","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        def h(n):\n            g = (n-1)*g(n-1)\n            return g\n        return h\n\n","after":null,"SubmissionTime":"2016-02-16T21:11:58.593947","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":792,"date":"2016-02-16 21:14:14.826898","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return (n-1)*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T21:14:14.826898","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-3)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Add, Children(ConstNode(BinaryExpressionNode-Add, Children(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-2), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-g), SingleChild(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-2))))))))))))))), SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(LeafConstNode(ConstantExpressionNode-3), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(ParenthesisExpressionNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":792,"date":"2016-02-16 21:15:27.683645","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return g (n-1) + (n-2)/2*g(n-2)\n\n","after":null,"SubmissionTime":"2016-02-16T21:15:27.683645","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":792,"date":"2016-02-16 21:15:35.709207","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return g (n-1) + (n-2)*g(n-2)\n\n","after":null,"SubmissionTime":"2016-02-16T21:15:35.709207","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":792,"date":"2016-02-16 21:15:47.090784","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return (n-2)*g(n-2)\n\n","after":null,"SubmissionTime":"2016-02-16T21:15:47.090784","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":792,"date":"2016-02-16 21:15:58.172092","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return (n-1)*g(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T21:15:58.172092","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":929,"date":"2016-02-16 21:16:18.604448","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return (((n-1)+2) * ((n-2)+3) * (n-3))\n\n","after":null,"SubmissionTime":"2016-02-16T21:16:18.604448","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":231,"date":"2016-02-16 21:33:37.709148","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n<=3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 2*g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-16T21:33:37.709148","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":792,"date":"2016-02-16 21:36:04.464310","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        k+=1\n        h = h + (n-k)*g(n-k)\n        return h\n\n","after":null,"SubmissionTime":"2016-02-16T21:36:04.46431","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":577,"date":"2016-02-16 21:40:27.054771","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<= 3:\n        return n\n    else:\n        def rest(i):\n            if i ==1:\n                return i*(n-i)\n            else:\n                k = i*(n-i)\n                return k + rest(i-1)\n        return rest(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-16T21:40:27.054771","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":895,"date":"2016-02-16 21:51:41.509576","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    \n    >>> from construct_check import check22\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<=3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + g(n-3)\n\n","after":null,"SubmissionTime":"2016-02-16T21:51:41.509576","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":577,"date":"2016-02-16 21:51:49.712320","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<= 3:\n        return n\n    else:\n        def rest(i):\n            if i ==1:\n                return i*g(n-i)\n            else:\n                k = g*(n-i)\n                return k + rest(i-1)\n        return rest(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-16T21:51:49.71232","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":577,"date":"2016-02-16 21:52:07.180910","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n<= 3:\n        return n\n    else:\n        def rest(i):\n            if i ==1:\n                return i*g(n-i)\n            else:\n                k = i*g(n-i)\n                return k + rest(i-1)\n        return rest(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-16T21:52:07.18091","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":409,"date":"2016-02-16 22:05:28.927145","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if(n <= 3):\n        return n\n    elif(n > 3):\n        return \n\n","after":null,"SubmissionTime":"2016-02-16T22:05:28.927145","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":164,"date":"2016-02-16 22:06:17.851974","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \n    if n >= 3:\n        return n\n    else:\n        return g(n-1) + 2 * g(n-2) + 3 * g(n-3) \n\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-16T22:06:17.851974","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":474,"date":"2016-02-16 22:24:13.384110","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)e\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n <= 3:\n        return n\n    else:\n        return g(n-1) + 2*g(n-2) + 3*g(n-3)\n\\\n","after":null,"SubmissionTime":"2016-02-16T22:24:13.38411","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+2*g(n-2)+3*g(n-3)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-g)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":1,"Id":0,"studentId":1057,"date":"2016-02-16 22:28:37.616527","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-16T22:28:37.616527","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":890,"date":"2016-02-16 22:35:24.243498","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    return lambda n: n\n\n","after":null,"SubmissionTime":"2016-02-16T22:35:24.243498","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":890,"date":"2016-02-16 22:35:24.243498","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    return lambda n: n\n\n","after":null,"SubmissionTime":"2016-02-16T22:35:24.243498","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":890,"date":"2016-02-16 22:35:52.923854","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    return 1\n\n","after":null,"SubmissionTime":"2016-02-16T22:35:52.923854","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-16 22:38:38.025978","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    if n < 3:\n\n        return n\n\n    else:\n\n        return g(n - 1) + (2 * g(n - 2)) + (3 * g(n - 3))\n\n","after":null,"SubmissionTime":"2016-02-16T22:38:38.025978","SynthesizedAfter":"\r\ndef g(n):\r\n    if n<=3:\r\n        return n\r\n    else:\r\n        return g(n-1)+(2*g(n-2))+(3*g(n-3))","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":2,"Id":0,"studentId":890,"date":"2016-02-16 22:38:58.901487","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    return n if n<= 3 else g(n -1) + 2\n\n","after":null,"SubmissionTime":"2016-02-16T22:38:58.901487","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":813,"date":"2016-02-16 22:49:00.328808","diff":null,"before":"def g(n):\n    \"\"\"Return the value of G(n), computed recursively.\n\n    >>> g(1)\n    1\n    >>> g(2)\n    2\n    >>> g(3)\n    3\n    >>> g(4)\n    10\n    >>> g(5)\n    22\n    >>> from construct_check import check\n    >>> check(HW_SOURCE_FILE, 'g', ['While', 'For'])\n    True\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if (n == 1):\n        return G(n)\n    return G(g(n-1))\n\n","after":null,"SubmissionTime":"2016-02-16T22:49:00.328808","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null}]