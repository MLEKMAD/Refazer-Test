[{"ErrorFlag":2,"Id":0,"studentId":205,"date":"2016-02-08 07:28:51.137510","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 0:\n        all_terms = list[0:]\n        return term(all_terms)\n\n","after":null,"SubmissionTime":"2016-02-08T07:28:51.13751","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":205,"date":"2016-02-08 07:30:11.480845","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 0:\n        all_terms = str[0:]\n        return term(all_terms)\n\n","after":null,"SubmissionTime":"2016-02-08T07:30:11.480845","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":205,"date":"2016-02-08 07:43:26.101302","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 0:\n        return term(n)\n\n","after":null,"SubmissionTime":"2016-02-08T07:43:26.101302","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":205,"date":"2016-02-08 07:44:17.904633","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 0:\n        all_terms = list(n)\n        return term(all_terms)\n\n","after":null,"SubmissionTime":"2016-02-08T07:44:17.904633","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":205,"date":"2016-02-08 07:47:19.765322","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 0:\n        return term(n) * term(list[:0])\n\n","after":null,"SubmissionTime":"2016-02-08T07:47:19.765322","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":323,"date":"2016-02-08 07:49:09.847832","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1: \n        return term(1)\n    elif n == 0: \n        return 0\n    else:\n        return product(n) * product(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-08T07:49:09.847832","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":323,"date":"2016-02-08 07:50:24.041374","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1: \n        return term(1)\n    elif n == 0: \n        return 0\n    else:\n        return product(n, term) * product(n-1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-08T07:50:24.041374","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":205,"date":"2016-02-08 07:50:55.946582","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 0:\n        return term(n) * term(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-08T07:50:55.946582","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":205,"date":"2016-02-08 07:53:32.331448","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 0:\n        n = n - 1\n        return term(n)\n\n","after":null,"SubmissionTime":"2016-02-08T07:53:32.331448","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":205,"date":"2016-02-08 07:56:17.836286","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 0:\n        n = n - 1\n        for n in product:\n            return term(n)\n\n","after":null,"SubmissionTime":"2016-02-08T07:56:17.836286","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":205,"date":"2016-02-08 08:01:18.644449","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 0:\n        all_terms = []\n        all_terms.append(n - 1)\n        return term(all_terms)\n\n","after":null,"SubmissionTime":"2016-02-08T08:01:18.644449","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":205,"date":"2016-02-08 08:01:30.556704","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 0:\n        all_terms = \"\"\n        all_terms.append(n - 1)\n        return term(all_terms)\n\n","after":null,"SubmissionTime":"2016-02-08T08:01:30.556704","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":205,"date":"2016-02-08 08:03:26.674558","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 0:\n        for counter in range(1,n):\n            print(counter)\n            all_terms = [counter]\n        return term(all_terms)\n\n","after":null,"SubmissionTime":"2016-02-08T08:03:26.674558","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":205,"date":"2016-02-08 08:03:44.154547","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 0:\n        for counter in range(1,n):\n            print(counter)\n        return term(counter)\n\n","after":null,"SubmissionTime":"2016-02-08T08:03:44.154547","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":205,"date":"2016-02-08 08:04:10.597248","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 0:\n        for counter in range(1,n):\n            return term(counter)\n\n","after":null,"SubmissionTime":"2016-02-08T08:04:10.597248","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":205,"date":"2016-02-08 08:06:53.358495","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 0:\n        n -= 1\n        return term(n)\n","after":null,"SubmissionTime":"2016-02-08T08:06:53.358495","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":205,"date":"2016-02-08 08:07:14.421759","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 1:\n        n -= 1\n        return term(n)\n\n","after":null,"SubmissionTime":"2016-02-08T08:07:14.421759","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":205,"date":"2016-02-08 08:10:06.330012","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 0:\n        x = n\n        n -= 1\n        return term(x) * term(n)\n\n","after":null,"SubmissionTime":"2016-02-08T08:10:06.330012","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":323,"date":"2016-02-08 08:14:42.052258","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1: \n        return term(1)\n    else:\n        return product(n, term) * product(n-1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-08T08:14:42.052258","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":177,"date":"2016-02-08 08:15:12.532567","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    while n > 0:\n        return term(n) * term(n-1)\n    \n\n","after":null,"SubmissionTime":"2016-02-08T08:15:12.532567","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":177,"date":"2016-02-08 08:16:51.311293","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, 1\n    while k >= n:\n        total, k = 1 * term(n), k + 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-08T08:16:51.311293","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":177,"date":"2016-02-08 08:17:37.969092","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    while n >= 0:\n        total = 1 * term(n)\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-08T08:17:37.969092","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":177,"date":"2016-02-08 08:17:52.305868","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    while n > 0:\n        total = 1 * term(n)\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-08T08:17:52.305868","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":205,"date":"2016-02-08 08:19:46.859142","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 0:\n        x = n\n        for n in product:\n            n -= 1\n        return term(x) * term(n)\n\n","after":null,"SubmissionTime":"2016-02-08T08:19:46.859142","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":177,"date":"2016-02-08 08:21:28.220219","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 0:\n        return n * term(n-1)\n    else:\n        return\n        \n","after":null,"SubmissionTime":"2016-02-08T08:21:28.220219","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":177,"date":"2016-02-08 08:21:40.533862","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n >= 1:\n        return n * term(n-1)\n    else:\n        return\n        \n","after":null,"SubmissionTime":"2016-02-08T08:21:40.533862","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":177,"date":"2016-02-08 08:21:57.188652","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n >= 1:\n        return n * term(n-1)\n    else:\n        return n\n        \n","after":null,"SubmissionTime":"2016-02-08T08:21:57.188652","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":177,"date":"2016-02-08 08:22:47.357624","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    while n > 0:\n        total = total * n\n        n -= 1\n    return total \n        \n","after":null,"SubmissionTime":"2016-02-08T08:22:47.357624","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":205,"date":"2016-02-08 08:23:13.704944","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = n\n    while n > 0:\n        n -= 1\n    return term(x) * term(n)\n\n","after":null,"SubmissionTime":"2016-02-08T08:23:13.704944","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":177,"date":"2016-02-08 08:23:17.778319","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    while n > 0:\n        total = total * term(n-1)\n        n -= 1\n    return total \n        \n","after":null,"SubmissionTime":"2016-02-08T08:23:17.778319","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":205,"date":"2016-02-08 08:23:21.158465","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = n\n    while n > 0:\n        n -= 1\n        return term(x) * term(n)\n\n","after":null,"SubmissionTime":"2016-02-08T08:23:21.158465","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":205,"date":"2016-02-08 08:25:33.451772","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = n\n    while n > 0:\n        for n in range(1, n):\n            return term(x) * term(n)\n\n","after":null,"SubmissionTime":"2016-02-08T08:25:33.451772","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":205,"date":"2016-02-08 08:25:59.772029","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = n\n    while n > 0:\n        for n in range(1, n):\n            return term(n)\n\n","after":null,"SubmissionTime":"2016-02-08T08:25:59.772029","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":534,"date":"2016-02-08 08:26:26.906303","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(1)\n    else:\n        return product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T08:26:26.906303","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":534,"date":"2016-02-08 08:28:38.782605","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(1)\n    elif n == 2:\n        return term(1) * term(2)\n    else:\n        return product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T08:28:38.782605","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":949,"date":"2016-02-08 09:07:01.100394","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, s = 1, 1\n    if s == 1:\n        total = total * term(n)\n        return total \n    while s <= n:\n        total = total * term(s+1)\n        return total \n\n\n","after":null,"SubmissionTime":"2016-02-08T09:07:01.100394","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":710,"date":"2016-02-08 09:10:08.191507","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return term(n) * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T09:10:08.191507","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":949,"date":"2016-02-08 09:10:44.545660","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, s = 1, 1\n    if n == 1:\n        total = total * term(n)\n        return total \n    while s <= n:\n        total = total * term(s+1)\n        return total \n\n\n","after":null,"SubmissionTime":"2016-02-08T09:10:44.54566","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":949,"date":"2016-02-08 09:14:14.304904","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return term(n)\n    else:\n        return term(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-08T09:14:14.304904","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":949,"date":"2016-02-08 09:14:46.151664","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return term(n)\n    else:\n        total = term(n)\n        return term(n-1) * total \n\n\n","after":null,"SubmissionTime":"2016-02-08T09:14:46.151664","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":605,"date":"2016-02-08 09:41:33.785732","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-08T09:41:33.785732","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1012,"date":"2016-02-08 09:42:27.979899","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i,total = 1,0\n    while i <= n:\n    \ttotal = total * term(i)\n    \ti += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-08T09:42:27.979899","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":942,"date":"2016-02-08 09:44:17.355467","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def product(n, term):\n        def term (n,identity): \n            n >= 0\n            return n*n-1\n        \n\n\n\n","after":null,"SubmissionTime":"2016-02-08T09:44:17.355467","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-08 09:50:37.678427","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return n * term(n-1)\n","after":null,"SubmissionTime":"2016-02-08T09:50:37.678427","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":423,"date":"2016-02-08 09:51:23.271510","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=1\n    if n==x:\n        return n*1\n    else: \n        return (n+1)*(n)\n\n","after":null,"SubmissionTime":"2016-02-08T09:51:23.27151","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":423,"date":"2016-02-08 09:51:53.456244","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=1\n    if n==x:\n        return n*1\n    else: \n        return (n+1)+(n)\n\n","after":null,"SubmissionTime":"2016-02-08T09:51:53.456244","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":423,"date":"2016-02-08 09:51:58.571757","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=1\n    if n==x:\n        return n\n    else: \n        return (n+1)+(n)\n\n","after":null,"SubmissionTime":"2016-02-08T09:51:58.571757","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":423,"date":"2016-02-08 09:52:13.722216","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=1\n    if n==x:\n        return n\n    else: \n        return (n-1)+(n)\n\n","after":null,"SubmissionTime":"2016-02-08T09:52:13.722216","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":423,"date":"2016-02-08 09:52:18.921263","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=1\n    if n==x:\n        return n\n    else: \n        return (n)+(n)\n\n","after":null,"SubmissionTime":"2016-02-08T09:52:18.921263","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":205,"date":"2016-02-08 09:52:33.246439","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    while n > 0:\n        x = n\n        def decrement(x):\n            return x - 1\n        return term(n)\n\n","after":null,"SubmissionTime":"2016-02-08T09:52:33.246439","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":423,"date":"2016-02-08 09:52:34.616540","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=1\n    if n==x:\n        return n\n    else: \n        return (n+1)+(n)\n\n","after":null,"SubmissionTime":"2016-02-08T09:52:34.61654","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":423,"date":"2016-02-08 09:52:40.091281","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=1\n    if n==x:\n        return n\n    else: \n        return (n+1)+(n)-1\n\n","after":null,"SubmissionTime":"2016-02-08T09:52:40.091281","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":835,"date":"2016-02-08 09:53:17.439243","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    while n>0:\n        total *= term(n)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-08T09:53:17.439243","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-08 09:53:18.675371","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return \n\n    return n * term(n-1)\n","after":null,"SubmissionTime":"2016-02-08T09:53:18.675371","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":205,"date":"2016-02-08 09:55:05.223490","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    while n > 0:\n        def decrement(n):\n            n -= 1\n        return term(n) * term(decrement(n))\n\n","after":null,"SubmissionTime":"2016-02-08T09:55:05.22349","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":205,"date":"2016-02-08 09:57:35.360491","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    if n > 0:\n        return term(1, n)\n\n","after":null,"SubmissionTime":"2016-02-08T09:57:35.360491","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":205,"date":"2016-02-08 09:57:35.360491","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    if n > 0:\n        return term(1, n)\n\n","after":null,"SubmissionTime":"2016-02-08T09:57:35.360491","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":205,"date":"2016-02-08 09:58:33.687087","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    \n    if n > 0:\n        return term(n) * term(n-1) * term(n-2) * term(n-3)\n\n","after":null,"SubmissionTime":"2016-02-08T09:58:33.687087","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":205,"date":"2016-02-08 10:02:48.824422","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, x = 1, 1\n\n    while x <= n:\n        total, x = total * x, x + 1\n\n    return total\n\n","after":null,"SubmissionTime":"2016-02-08T10:02:48.824422","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":558,"date":"2016-02-08 10:15:06.770526","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return term(n)*product(n+1)\n\n","after":null,"SubmissionTime":"2016-02-08T10:15:06.770526","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":768,"date":"2016-02-08 10:17:57.494074","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n < 1:\n        return 0\n    else:\n        return term * term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-08T10:17:57.494074","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":558,"date":"2016-02-08 10:17:58.056183","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 1\n    else:\n        term(n)*product(n-1,term)\n\n","after":null,"SubmissionTime":"2016-02-08T10:17:58.056183","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":768,"date":"2016-02-08 10:19:23.034927","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n < 1:\n        return 0\n    else:\n        return term(n) * term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-08T10:19:23.034927","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":768,"date":"2016-02-08 10:22:13.486812","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n < 1:\n        return 0\n    else:\n        return n * term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-08T10:22:13.486812","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":784,"date":"2016-02-08 10:40:01.995743","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    total_product = 0\n    while i <= n:\n        total_product *= identity(i)\n        i += 1\n\n    return total_product\n\n","after":null,"SubmissionTime":"2016-02-08T10:40:01.995743","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":784,"date":"2016-02-08 10:40:32.926884","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    total_product = 0\n    while i <= n:\n        total_product = identity(i) * total_product\n        i += 1\n\n    return total_product\n\n","after":null,"SubmissionTime":"2016-02-08T10:40:32.926884","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":784,"date":"2016-02-08 10:40:40.682635","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    total_product = 1\n    while i <= n:\n        total_product = identity(i) * total_product\n        i += 1\n\n    return total_product\n\n","after":null,"SubmissionTime":"2016-02-08T10:40:40.682635","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":45,"date":"2016-02-08 10:54:21.882554","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \"\"\"if term(n) == 0:\n    \treturn term(0)\n    if term(n) == 1:\n    \treturn term(1)\n    return n*product(term(n-1),term)\"\"\"\n    return 1\n\n","after":null,"SubmissionTime":"2016-02-08T10:54:21.882554","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":182,"date":"2016-02-08 10:59:52.008527","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return term(n) * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T10:59:52.008527","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":870,"date":"2016-02-08 11:23:05.228418","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    y = 0\n    while x <= term:\n        y += term(x)\n        x += 1\n    return y\n\n","after":null,"SubmissionTime":"2016-02-08T11:23:05.228418","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":870,"date":"2016-02-08 11:23:31.477134","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    y = 0\n    while x < term:\n        y += term(x)\n        x += 1\n    return y\n\n","after":null,"SubmissionTime":"2016-02-08T11:23:31.477134","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":870,"date":"2016-02-08 11:25:36.111903","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    y = 0\n    while x < n:\n        y += term(x)\n        x += 1\n    return y\n\n","after":null,"SubmissionTime":"2016-02-08T11:25:36.111903","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":870,"date":"2016-02-08 11:25:45.197445","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    y = 0\n    while x <= n:\n        y += term(x)\n        x += 1\n    return y\n\n","after":null,"SubmissionTime":"2016-02-08T11:25:45.197445","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":870,"date":"2016-02-08 11:26:25.752674","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    y = 0\n    while x <= n:\n        y *= term(x)\n        x += 1\n    return y\n\n","after":null,"SubmissionTime":"2016-02-08T11:26:25.752674","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-08 11:36:52.651211","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return \n\n    return term(n) * product(n-1)\n","after":null,"SubmissionTime":"2016-02-08T11:36:52.651211","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-08 11:37:11.905763","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return \n\n    return term(n) * product(n-1, term)\n","after":null,"SubmissionTime":"2016-02-08T11:37:11.905763","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":535,"date":"2016-02-08 11:38:42.719817","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = n\n    if n == 0:\n        return term(n)\n    return term(k)\n    k = k - 1\n\n","after":null,"SubmissionTime":"2016-02-08T11:38:42.719817","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":43,"date":"2016-02-08 11:40:11.329357","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, x = 0, 1\n    while x <= n:\n        total, x = total * term(x), x +1\n    return total \n\n","after":null,"SubmissionTime":"2016-02-08T11:40:11.329357","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-08 11:40:45.674423","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    return term(n) * product(n-1, term)\n","after":null,"SubmissionTime":"2016-02-08T11:40:45.674423","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return 1\r\n    return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))), 2), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-product, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-08 11:41:04.778635","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return \n    return term(n) * product(n-1, term)\n","after":null,"SubmissionTime":"2016-02-08T11:41:04.778635","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-08 11:41:04.778635","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return \n    return term(n) * product(n-1, term)\n","after":null,"SubmissionTime":"2016-02-08T11:41:04.778635","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":535,"date":"2016-02-08 11:41:22.694662","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = n\n    if n == 0:\n        total, k = 0, 1\n        while k <= n:\n           total, k = total * term(k), k + 1\n        return total\n\n","after":null,"SubmissionTime":"2016-02-08T11:41:22.694662","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":535,"date":"2016-02-08 11:41:43.992189","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        total, k = 0, 1\n        while k <= n:\n           total, k = total * term(k), k + 1\n        return total\n\n","after":null,"SubmissionTime":"2016-02-08T11:41:43.992189","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-08 11:43:39.570126","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k = term(n)\n    if n == 0:\n        return \n    return k * product(n-1, term)\n","after":null,"SubmissionTime":"2016-02-08T11:43:39.570126","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":438,"date":"2016-02-08 11:44:02.748688","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n >= 1:\n        return(n * product(n - 1))\n\n\n","after":null,"SubmissionTime":"2016-02-08T11:44:02.748688","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":438,"date":"2016-02-08 11:44:47.756273","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n >= 1:\n        return(n * product(n - 1, term))\n\n\n","after":null,"SubmissionTime":"2016-02-08T11:44:47.756273","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":535,"date":"2016-02-08 11:45:48.769912","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    if n == 0:\n        return term(n)\n    while n <= k:\n        total, k = total + term(n), n + 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-08T11:45:48.769912","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":535,"date":"2016-02-08 11:46:10.775509","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while n <= k:\n        total, k = total * term(n), n + 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-08T11:46:10.775509","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":535,"date":"2016-02-08 11:46:22.057508","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total * term(n), n + 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-08T11:46:22.057508","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":535,"date":"2016-02-08 11:46:47.708363","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total * term(k), k + 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-08T11:46:47.708363","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":535,"date":"2016-02-08 11:46:57.730343","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = n\n    total, k = 0, 1\n    while k <= n:\n        total, k = total * term(k), k + 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-08T11:46:57.730343","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-08 11:47:30.521045","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k = term(n)\n    if n != 0:\n        return k * product(n-1, term)\n","after":null,"SubmissionTime":"2016-02-08T11:47:30.521045","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":837,"date":"2016-02-08 11:50:50.310706","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, x = 0, 0\n    while x <= n:\n        k, x = k * term(k), k + 1\n    return k\n\n\n","after":null,"SubmissionTime":"2016-02-08T11:50:50.310706","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-08 11:51:38.637847","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n != 0:\n        return term(n) * product(n-1, term)\n","after":null,"SubmissionTime":"2016-02-08T11:51:38.637847","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":837,"date":"2016-02-08 11:51:43.596051","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, x = 0, 0\n    while x <= n:\n        k, x = k * term(x), k + 1\n    return k\n\n\n","after":null,"SubmissionTime":"2016-02-08T11:51:43.596051","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":837,"date":"2016-02-08 11:51:50.255363","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, x = 1, 1\n    while x <= n:\n        k, x = k * term(x), k + 1\n    return k\n\n\n","after":null,"SubmissionTime":"2016-02-08T11:51:50.255363","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":837,"date":"2016-02-08 11:52:09.454994","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, x = 1, 1\n    while x <= n:\n        k, x = k * term(k), k + 1\n    return k\n\n\n","after":null,"SubmissionTime":"2016-02-08T11:52:09.454994","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":837,"date":"2016-02-08 11:52:47.296090","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, x = 1, 1\n    while x <= n:\n        k, x = k * term(x), k + 1\n    return k\n\n\n","after":null,"SubmissionTime":"2016-02-08T11:52:47.29609","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":837,"date":"2016-02-08 11:53:09.240608","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, x = 1, 1\n    while x <= n:\n        x, k = k * term(x), k + 1\n    return k\n\n\n","after":null,"SubmissionTime":"2016-02-08T11:53:09.240608","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":837,"date":"2016-02-08 11:53:16.910587","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, x = 1, 1\n    while x <= n:\n        x, k = k * term(x), k + 1\n    return x\n\n\n","after":null,"SubmissionTime":"2016-02-08T11:53:16.910587","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":986,"date":"2016-02-08 11:53:52.197086","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    counter, product = 1, 1\n    while counter <= n:\n        product*= counter\n        counter ++ 1\n    return product\n\n","after":null,"SubmissionTime":"2016-02-08T11:53:52.197086","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":987,"date":"2016-02-08 11:54:01.097890","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    r = 1\n    total = 0\n    while r <= n:\n        total += term(r)\n    return total \n\n","after":null,"SubmissionTime":"2016-02-08T11:54:01.09789","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":837,"date":"2016-02-08 11:54:20.488888","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, x = 1, 1\n    while x <= n:\n        x, k = k * term(x), x + 1\n    return x\n\n\n","after":null,"SubmissionTime":"2016-02-08T11:54:20.488888","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-08 11:54:26.114880","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k = term(n)\n    n+=1\n    if n != 0:\n        return k * product(*args)\n","after":null,"SubmissionTime":"2016-02-08T11:54:26.11488","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":837,"date":"2016-02-08 11:54:33.676892","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, x = 1, 1\n    while x <= n:\n        k, x = k * term(x), x + 1\n    return x\n\n\n","after":null,"SubmissionTime":"2016-02-08T11:54:33.676892","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":987,"date":"2016-02-08 11:54:44.870487","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    r = 1\n    total = 0\n    while r <= n:\n        total += term(r)\n        r += 1\n    return total \n\n","after":null,"SubmissionTime":"2016-02-08T11:54:44.870487","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":986,"date":"2016-02-08 11:54:48.099520","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    counter, product = 1, 1\n    while counter <= n:\n        product *= counter\n        counter += 1\n    return product\n\n","after":null,"SubmissionTime":"2016-02-08T11:54:48.09952","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":987,"date":"2016-02-08 11:55:08.004603","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    r = 1\n    total = 0\n    while r <= n:\n        total *= term(r)\n        r += 1\n    return total \n\n","after":null,"SubmissionTime":"2016-02-08T11:55:08.004603","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1003,"date":"2016-02-08 11:55:09.582896","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n < 0:\n        return \n    elif n == 1:\n        return 1\n    else:\n        term(n) \n\n\n\n\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-08T11:55:09.582896","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1003,"date":"2016-02-08 11:56:25.992875","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n < 0:\n        return \n    elif n == 1:\n        return 1\n    else:\n        product(n, term)\n\n\n\n\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-08T11:56:25.992875","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":438,"date":"2016-02-08 11:56:42.739906","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x = 1\n    total = 1\n    while x <= n:\n        total = total * term(x)\n        x = term(x) + x + 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-08T11:56:42.739906","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1003,"date":"2016-02-08 11:57:09.420352","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n < 0:\n        return \n    elif n == 1:\n        return 1\n    else:\n        mul(n, term(n) - 1)\n\n\n\n\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-08T11:57:09.420352","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":308,"date":"2016-02-08 11:57:23.369774","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 0\n    if n == 0 or n == 1:\n        return n\n    if n > 0:\n        while i <= n:\n            return term(i) + term(i+1)\n\n\n","after":null,"SubmissionTime":"2016-02-08T11:57:23.369774","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":308,"date":"2016-02-08 11:58:23.887231","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 0\n    if n == 0 or n == 1:\n        return n\n    if n > 0:\n        while i <= n:\n            return term(i) * term(i+1)\n\n\n","after":null,"SubmissionTime":"2016-02-08T11:58:23.887231","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":308,"date":"2016-02-08 11:58:36.285980","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    if n == 0 or n == 1:\n        return n\n    if n > 0:\n        while i <= n:\n            return term(i) * term(i+1)\n\n\n","after":null,"SubmissionTime":"2016-02-08T11:58:36.28598","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":438,"date":"2016-02-08 12:00:28.794022","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x = 1\n    total = 1\n    while x <= n:\n        total = total * x\n        x += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-08T12:00:28.794022","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":363,"date":"2016-02-08 12:01:31.182136","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    while(n > 0):\n        total += term(n)\n        n -= 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-08T12:01:31.182136","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":363,"date":"2016-02-08 12:01:59.322953","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    while(n > 0):\n        total *= term(n)\n        n -= 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-08T12:01:59.322953","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-08 12:02:55.196514","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n != 0:\n        return term(n) * product(n-1, term)\n    else: \n        return\n\n","after":null,"SubmissionTime":"2016-02-08T12:02:55.196514","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":523,"date":"2016-02-08 12:03:14.509912","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n != 0:\n        return term(n) * product(n-1, term)\n    \n\n","after":null,"SubmissionTime":"2016-02-08T12:03:14.509912","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":308,"date":"2016-02-08 12:04:04.344061","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    if n == 0 or n == 1:\n        return n\n    if n > 0:\n        while i <= n:\n            return term(i) * product(i+1)\n\n\n","after":null,"SubmissionTime":"2016-02-08T12:04:04.344061","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":308,"date":"2016-02-08 12:04:18.448341","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    if n == 0 or n == 1:\n        return n\n    if n > 0:\n        while i <= n:\n            return term(i) * product(i+1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-08T12:04:18.448341","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":308,"date":"2016-02-08 12:06:09.196334","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    total = 1\n    if n == 0 or n == 1:\n        return n\n    if n > 0:\n        while i <= n:\n            total = total * term(i)\n            i += 1\n            return total\n\n\n","after":null,"SubmissionTime":"2016-02-08T12:06:09.196334","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":308,"date":"2016-02-08 12:07:04.709815","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    total = 1\n    if n == 0 or n == 1:\n        return n\n    if n > 0:\n        while i <= n:\n            total == total * term(i)\n            i += 1\n            return total\n\n\n","after":null,"SubmissionTime":"2016-02-08T12:07:04.709815","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":239,"date":"2016-02-08 12:14:06.294377","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-08T12:14:06.294377","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":966,"date":"2016-02-08 12:16:37.651616","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, 1\n    while k <= n:\n        total *= term(k)\n        k = increment(k)\n\n\n","after":null,"SubmissionTime":"2016-02-08T12:16:37.651616","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":239,"date":"2016-02-08 12:16:51.088896","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def term(n):\n        while n > 0:\n            return n\n            n -= 1\n    return term(n)\n\n","after":null,"SubmissionTime":"2016-02-08T12:16:51.088896","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":21,"date":"2016-02-08 12:20:22.796251","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def inner_product(x):\n        if n == 1:\n            return term(x)\n        else:\n            return term(x) * product(n-1, term)\n    return inner_product\n\n","after":null,"SubmissionTime":"2016-02-08T12:20:22.796251","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":239,"date":"2016-02-08 12:21:29.630845","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, i = 0, 1\n    while i <= n:\n        total = total + term(i)\n        i += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-08T12:21:29.630845","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":21,"date":"2016-02-08 12:21:36.879514","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(*args)\n    else:\n        return term(*args) * product(n-1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-08T12:21:36.879514","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":239,"date":"2016-02-08 12:21:44.596897","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, i = 0, 1\n    while i <= n:\n        total = total * term(i)\n        i += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-08T12:21:44.596897","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":21,"date":"2016-02-08 12:22:07.764154","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def inner_product(x):\n        if n == 1:\n            return term(x)\n        else:\n            return term(x) * product(n-1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-08T12:22:07.764154","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":21,"date":"2016-02-08 12:22:48.759880","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def inner_product(n):\n        if n == 1:\n            return term(n)\n        else:\n            return term(n) * product(n-1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-08T12:22:48.75988","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":203,"date":"2016-02-08 12:23:44.930594","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, sum = 1, 0\n    while k <= n:\n        sum += term(k)\n        k += 1\n    return sum\n\n","after":null,"SubmissionTime":"2016-02-08T12:23:44.930594","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":373,"date":"2016-02-08 12:26:37.861372","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if n == 1:\n        return 1\n    else:\n        return product(n-1, term)*n\n\n","after":null,"SubmissionTime":"2016-02-08T12:26:37.861372","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":712,"date":"2016-02-08 12:34:40.842031","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n <1:\n        return 1\n    else:\n        return n * product(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-08T12:34:40.842031","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":712,"date":"2016-02-08 12:35:12.906514","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n <1:\n        return 1\n    else:\n        return n * product(n-1,term)\n\n\n","after":null,"SubmissionTime":"2016-02-08T12:35:12.906514","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":883,"date":"2016-02-08 12:35:56.104612","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n ==1:\n        return n\n    else:\n        return n * term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-08T12:35:56.104612","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":883,"date":"2016-02-08 12:38:14.012340","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n ==1:\n        return n\n    else:\n        return n * product(n, term(n-1))\n\n","after":null,"SubmissionTime":"2016-02-08T12:38:14.01234","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":883,"date":"2016-02-08 12:39:03.618375","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n ==1:\n        return n\n    else:\n        return n * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T12:39:03.618375","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return n\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":479,"date":"2016-02-08 12:42:24.513827","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    result = 1\n    for x in range(1,n):\n        result = term(x)\n    return result\n\n","after":null,"SubmissionTime":"2016-02-08T12:42:24.513827","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":479,"date":"2016-02-08 12:42:56.980527","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    result = 1\n    for x in range(1,n+1):\n        result = term(x)\n    return result\n\n","after":null,"SubmissionTime":"2016-02-08T12:42:56.980527","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":392,"date":"2016-02-08 12:44:25.203076","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    product_sum = 0 \n    while n:\n        product_sum += term(n)\n    return product_sum\n\n","after":null,"SubmissionTime":"2016-02-08T12:44:25.203076","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":392,"date":"2016-02-08 12:45:04.767771","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    product_sum = 0 \n    while n:\n        product_sum += term(n)\n        n -= 1\n    return product_sum\n\n","after":null,"SubmissionTime":"2016-02-08T12:45:04.767771","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":392,"date":"2016-02-08 12:45:04.767771","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    product_sum = 0 \n    while n:\n        product_sum += term(n)\n        n -= 1\n    return product_sum\n\n","after":null,"SubmissionTime":"2016-02-08T12:45:04.767771","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":392,"date":"2016-02-08 12:45:51.279469","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    product_sum = 1 \n    while n:\n        product_sum == product_sum * term(n)\n        n -= 1\n    return product_sum\n\n","after":null,"SubmissionTime":"2016-02-08T12:45:51.279469","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":392,"date":"2016-02-08 12:46:42.410763","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    product_sum = 1 \n    while n:\n        product_sum == product_sum * term(n)\n        print (product_sum)\n        n -= 1\n    return product_sum\n\n","after":null,"SubmissionTime":"2016-02-08T12:46:42.410763","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":392,"date":"2016-02-08 12:46:54.600010","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    product_sum = 1 \n    while n:\n        product_sum = product_sum * term(n)\n        print (product_sum)\n        n -= 1\n    return product_sum\n\n","after":null,"SubmissionTime":"2016-02-08T12:46:54.60001","SynthesizedAfter":"\r\ndef product(n, term):\r\n    product_sum = 1\r\n    while n:\r\n        product_sum = product_sum*term(n)\r\n        print(product_sum)\r\n        n -= 1\r\n    return product_sum","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-term)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":423,"date":"2016-02-08 12:51:21.909377","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=1\n    if n==x:\n        return n\n    else: \n        return (n+1)*(n)\n\n","after":null,"SubmissionTime":"2016-02-08T12:51:21.909377","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":423,"date":"2016-02-08 12:51:55.045934","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=1\n    if n==x:\n        return term(n)\n    else: \n        return product(n+1, term)*product(n)\n\n","after":null,"SubmissionTime":"2016-02-08T12:51:55.045934","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":423,"date":"2016-02-08 12:52:21.357694","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=1\n    if n==x:\n        return n\n    else: \n        return product(n+1, term)*product(n, term)\n\n","after":null,"SubmissionTime":"2016-02-08T12:52:21.357694","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":761,"date":"2016-02-08 13:14:30.925572","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1\n    while k <= n:\n    \ttotal,k = total * 1, k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-08T13:14:30.925572","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":667,"date":"2016-02-08 13:16:22.495428","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    n = abs(n)\n    lambda n: n + term\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return product(n + 1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T13:16:22.495428","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":829,"date":"2016-02-08 13:17:15.396207","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    while n > 0:\n        return term(n) * product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T13:17:15.396207","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":667,"date":"2016-02-08 13:17:41.076974","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    n = abs(n)\n    lambda n: n + term\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return product(n, term) * product(n + 1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T13:17:41.076974","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":829,"date":"2016-02-08 13:18:16.814084","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    while n > 0:\n        return n * product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T13:18:16.814084","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":667,"date":"2016-02-08 13:18:43.835062","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    n = abs(n)\n    lambda n: n + term\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 6\n    return product(n, term) * product(n + 1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T13:18:43.835062","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":829,"date":"2016-02-08 13:19:02.583411","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    while n > 0:\n        return term(n) * product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T13:19:02.583411","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":667,"date":"2016-02-08 13:19:09.987889","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    n = abs(n)\n    lambda n: n + term\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 6\n    return product(n-1, term) * product(n, term)\n\n","after":null,"SubmissionTime":"2016-02-08T13:19:09.987889","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":667,"date":"2016-02-08 13:19:09.987889","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    n = abs(n)\n    lambda n: n + term\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 6\n    return product(n-1, term) * product(n, term)\n\n","after":null,"SubmissionTime":"2016-02-08T13:19:09.987889","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":667,"date":"2016-02-08 13:19:43.062828","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    n = abs(n)\n    lambda n: n + term\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 6\n    return (n) * (n + 1)\n\n","after":null,"SubmissionTime":"2016-02-08T13:19:43.062828","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":667,"date":"2016-02-08 13:20:28.155277","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    n = abs(n)\n    lambda n: n + term\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return product(n) * product(n + 1)\n\n","after":null,"SubmissionTime":"2016-02-08T13:20:28.155277","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":667,"date":"2016-02-08 13:20:40.614579","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    n = abs(n)\n    lambda n: n + term\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return product(n, term) * product(n + 1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T13:20:40.614579","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":667,"date":"2016-02-08 13:21:06.617034","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    n = abs(n)\n    lambda n: n + term\n    if n == 1:\n        return (1, term)\n    if n == 2:\n        return (2, term)\n    return product(n, term) * product(n + 1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T13:21:06.617034","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":667,"date":"2016-02-08 13:21:18.265246","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    n = abs(n)\n    lambda n: n + term\n    if n == 1:\n        return product(1, term)\n    if n == 2:\n        return product(2, term)\n    return product(n, term) * product(n + 1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T13:21:18.265246","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":761,"date":"2016-02-08 13:21:20.839182","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1\n    while k <= n:\n    \ttotal = total * term (k)\n    \tk += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-08T13:21:20.839182","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":829,"date":"2016-02-08 13:21:27.642543","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    while n > 0:\n        return term(n) * (product(n - 1, term))\n\n","after":null,"SubmissionTime":"2016-02-08T13:21:27.642543","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":761,"date":"2016-02-08 13:21:49.378957","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1\n    while k <= n:\n    \ttotal = total * term (k + 1)\n    \tk += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-08T13:21:49.378957","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":829,"date":"2016-02-08 13:21:51.390285","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    while n > 0:\n        return term(n) * (n-1)\n\n","after":null,"SubmissionTime":"2016-02-08T13:21:51.390285","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":761,"date":"2016-02-08 13:21:55.968653","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1\n    while k <= n:\n    \ttotal = total * term (k , 1)\n    \tk += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-08T13:21:55.968653","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":667,"date":"2016-02-08 13:21:57.587995","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    n = abs(n)\n    lambda n: n + term\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    else:\n        return product(n, term) * product(n + 1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T13:21:57.587995","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":667,"date":"2016-02-08 13:22:14.803071","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    n = abs(n)\n    lambda n: n + term\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    else:\n        return product(n, term) * product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T13:22:14.803071","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":829,"date":"2016-02-08 13:22:25.527669","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    while n > 0:\n        return term(n) * term(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-08T13:22:25.527669","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":667,"date":"2016-02-08 13:22:46.134488","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    n = abs(n)\n    lambda n: n + term\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return product(n, term) * product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T13:22:46.134488","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":761,"date":"2016-02-08 13:23:01.180664","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1\n    while k <= n:\n    \ttotal = total * term (k)\n    \tk += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-08T13:23:01.180664","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":667,"date":"2016-02-08 13:23:03.043396","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    n = abs(n)\n    lambda n: n + term\n    if n == 2:\n        return 2\n    elif n == 3:\n        return 6\n    else:\n        return product(n, term) * product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T13:23:03.043396","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":667,"date":"2016-02-08 13:23:19.001820","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    n = abs(n)\n    lambda n: n + term\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return product(n, term) * product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T13:23:19.00182","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":829,"date":"2016-02-08 13:23:52.754907","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    while n > 0:\n        return term(n) * product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T13:23:52.754907","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":829,"date":"2016-02-08 13:24:41.126128","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    while n > 0:\n        return term(n) * product(n, term)\n\n","after":null,"SubmissionTime":"2016-02-08T13:24:41.126128","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":667,"date":"2016-02-08 13:26:18.260168","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    n = abs(n)\n    lambda n: n + term\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return n * product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T13:26:18.260168","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":667,"date":"2016-02-08 13:26:39.088880","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    n = abs(n)\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return n * product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T13:26:39.08888","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":829,"date":"2016-02-08 13:26:46.012575","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T13:26:46.012575","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":667,"date":"2016-02-08 13:26:57.635388","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    n = abs(n)\n    lambda n: term(n)\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return n * product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T13:26:57.635388","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":829,"date":"2016-02-08 13:27:00.859765","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    while n > 0:\n        return product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T13:27:00.859765","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":829,"date":"2016-02-08 13:27:24.682391","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    while n > 0:\n        return term(n)\n\n","after":null,"SubmissionTime":"2016-02-08T13:27:24.682391","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":829,"date":"2016-02-08 13:27:38.929698","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    while n > 0:\n        return term(n) * product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T13:27:38.929698","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":667,"date":"2016-02-08 13:28:06.989108","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    n = abs(n)\n    lambda n: term(n)\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return n * product(n - 1, *args)\n\n","after":null,"SubmissionTime":"2016-02-08T13:28:06.989108","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":667,"date":"2016-02-08 13:28:26.080992","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    n = abs(n)\n    lambda n: term(n)\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return n * product(n - 1, square)\n\n","after":null,"SubmissionTime":"2016-02-08T13:28:26.080992","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":386,"date":"2016-02-08 13:31:56.731450","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return term(n) * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T13:31:56.73145","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n>0:\r\n        return term(n)*product(n-1, term)\r\n    else:\r\n        return 1","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-GreaterThan, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), Tutor.synthesis.MagicK)))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))), 1), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-product, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-product, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":829,"date":"2016-02-08 13:34:06.425340","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    while n >= 1:\n        return term(n) * product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T13:34:06.42534","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":829,"date":"2016-02-08 13:36:05.851400","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return\n    return term(n) * product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T13:36:05.8514","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":166,"date":"2016-02-08 13:41:08.046198","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return term(1)\n    else:\n        return term(n) * term(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-08T13:41:08.046198","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":852,"date":"2016-02-08 13:51:03.333547","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k, product=1,0\n    while k<=n:\n        product,k=product+term(x), k+1\n    return product\n\n","after":null,"SubmissionTime":"2016-02-08T13:51:03.333547","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":852,"date":"2016-02-08 13:51:26.308136","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k, product=1,0\n    while k<=n:\n        product,k=product+term(n), k+1\n    return product\n\n","after":null,"SubmissionTime":"2016-02-08T13:51:26.308136","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":852,"date":"2016-02-08 13:51:54.469942","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k, product=1,1\n    while k<=n:\n        product,k=product*term(n), k+1\n    return product\n\n","after":null,"SubmissionTime":"2016-02-08T13:51:54.469942","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":852,"date":"2016-02-08 13:52:11.952939","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k, product=1,0\n    while k<=n:\n        product,k=product*term(n), k+1\n    return product\n\n","after":null,"SubmissionTime":"2016-02-08T13:52:11.952939","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":200,"date":"2016-02-08 14:08:31.029621","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        term(n) * product(term(n-1))\n\n","after":null,"SubmissionTime":"2016-02-08T14:08:31.029621","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":200,"date":"2016-02-08 14:10:26.405511","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        term(n) * product(n, term(n-1))\n\n","after":null,"SubmissionTime":"2016-02-08T14:10:26.405511","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":362,"date":"2016-02-08 14:12:05.891382","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i=1\n    sum=0\n    while i<n:\n        sum += term(i)\n        i += 1\n    return sum\n\n","after":null,"SubmissionTime":"2016-02-08T14:12:05.891382","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":362,"date":"2016-02-08 14:13:10.358492","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i=1\n    sum=0\n    while i<n:\n        sum *= term(i)\n        i += 1\n    return sum\n\n","after":null,"SubmissionTime":"2016-02-08T14:13:10.358492","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":362,"date":"2016-02-08 14:13:38.088860","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i=1\n    product=1\n    while i<n:\n        product *= term(i)\n        i += 1\n    return product\n\n","after":null,"SubmissionTime":"2016-02-08T14:13:38.08886","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":362,"date":"2016-02-08 14:14:19.559157","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i=0\n    product=1\n    while i<n:\n        product *= term(i)\n        i += 1\n    return product\n\n","after":null,"SubmissionTime":"2016-02-08T14:14:19.559157","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":200,"date":"2016-02-08 14:16:35.736271","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    while n>0:\n        k = n\n        k = term(k)* term(n)\n        n = n-1\n    return k\n\n","after":null,"SubmissionTime":"2016-02-08T14:16:35.736271","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":200,"date":"2016-02-08 14:18:46.596390","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    while n > 0:\n        n = k\n        k = term(k)* term(n)\n        n = n-1\n    return k\n\n","after":null,"SubmissionTime":"2016-02-08T14:18:46.59639","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":200,"date":"2016-02-08 14:18:46.596390","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    while n > 0:\n        n = k\n        k = term(k)* term(n)\n        n = n-1\n    return k\n\n","after":null,"SubmissionTime":"2016-02-08T14:18:46.59639","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":200,"date":"2016-02-08 14:19:30.500170","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    while n > 0:\n        n = k\n        k = term(n)* term(k)\n        k = k-1\n    return k\n\n","after":null,"SubmissionTime":"2016-02-08T14:19:30.50017","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":150,"date":"2016-02-08 14:19:56.669792","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    counter=0\n    while(counter<n):\n        if term==identity:\n            n*=n+1\n            counter+=1\n        elif term==square:\n            n*=(n+1)**2\n            counter+=1\n            \n        return n\n    \n\n","after":null,"SubmissionTime":"2016-02-08T14:19:56.669792","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":150,"date":"2016-02-08 14:23:28.599607","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    counter=0\n    while(counter<n):\n        if term==identity:\n            n*=n+1\n            counter+=1\n        elif term==square:\n            n*=(n+1)**2\n            counter+=1\n            \n        return n/2\n    \n\n","after":null,"SubmissionTime":"2016-02-08T14:23:28.599607","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":150,"date":"2016-02-08 14:23:44.733252","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    counter=0\n    while(counter<n):\n        if term==identity:\n            n*=n+1\n            counter+=1\n        elif term==square:\n            n*=(n+1)**2\n            counter+=1\n            \n        return n//2\n    \n\n","after":null,"SubmissionTime":"2016-02-08T14:23:44.733252","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":150,"date":"2016-02-08 14:24:12.944468","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    counter=0\n    while(counter<n):\n        if term==identity:\n            n*=(n+1)\n            counter+=1\n        elif term==square:\n            n*=(n+1)**2\n            counter+=1\n            \n        return n//2\n    \n\n","after":null,"SubmissionTime":"2016-02-08T14:24:12.944468","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":220,"date":"2016-02-08 14:24:49.083571","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n <= 0:\n        return \n    else:\n        return product (n, term) * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T14:24:49.083571","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":220,"date":"2016-02-08 14:27:03.516017","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0 or n ==1:\n        return 1\n    else:\n        return n * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T14:27:03.516017","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==0 or n==1:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":150,"date":"2016-02-08 14:28:06.668171","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    counter=0\n    while(counter<n):\n        if term==identity:\n            n*=(n+1)\n            counter+=1\n        return n\n        \"\"\"elif term==square:\n            n*=(n+1)**2\n            counter+=1\n            \n        return n//2\"\"\"\n    \n\n","after":null,"SubmissionTime":"2016-02-08T14:28:06.668171","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":150,"date":"2016-02-08 14:28:51.507725","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    counter=0\n    while(counter<n):\n        if term==identity:\n            n*=(n+1)\n            counter+=1\n        return n//2\n        \"\"\"elif term==square:\n            n*=(n+1)**2\n            counter+=1\n            \n        return n//2\"\"\"\n    \n\n","after":null,"SubmissionTime":"2016-02-08T14:28:51.507725","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":150,"date":"2016-02-08 14:29:13.946264","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    counter=0\n    while(counter<n):\n        if term==identity:\n            n*=(n+1)\n            counter+=1\n        return n//2\n        \"\"\"elif term==square:\n            n*=(n+1)**2\n            counter+=1\n            \n        return n//2\"\"\"\n    \n\n","after":null,"SubmissionTime":"2016-02-08T14:29:13.946264","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":25,"date":"2016-02-08 14:30:20.047412","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    prod = prod * term(n)\n    if n == 1:\n        return prod\n    else:\n        return (n-1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-08T14:30:20.047412","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":150,"date":"2016-02-08 14:30:24.315079","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    counter=0\n    while(counter<=n):\n        if term==identity:\n            n*=(n+1)\n            counter+=1\n      \n        elif term==square:\n            n*=(n+1)**2\n            counter+=1\n            \n        return n//2\n    \n\n","after":null,"SubmissionTime":"2016-02-08T14:30:24.315079","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":25,"date":"2016-02-08 14:31:41.735323","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    prod = term(n)\n    if n == 1:\n        return prod\n    else:\n        return (n-1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-08T14:31:41.735323","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":540,"date":"2016-02-08 14:31:48.768131","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return term(1)\n    else:\n        return\n        term(n) * term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-08T14:31:48.768131","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":25,"date":"2016-02-08 14:32:22.659033","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    prod = term(n)\n    print (prod)\n    if n == 1:\n        return prod\n    else:\n        return (n-1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-08T14:32:22.659033","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":25,"date":"2016-02-08 14:32:58.537570","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return prod\n    else:\n        prod = term(n)\n        return (n-1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-08T14:32:58.53757","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":150,"date":"2016-02-08 14:33:13.105454","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    counter=0\n    while(counter<n):\n        if term==identity:\n            n=n*(n+1)\n            counter+=1\n      \n        elif term==square:\n            n*=(n+1)**2\n            counter+=1\n            \n        return n//2\n    \n\n","after":null,"SubmissionTime":"2016-02-08T14:33:13.105454","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":540,"date":"2016-02-08 14:34:11.801764","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return term(1)\n    else:\n        return term(n) * term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-08T14:34:11.801764","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return term(1)\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":150,"date":"2016-02-08 14:34:23.596967","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    counter=0\n    while(counter<n):\n        if term==identity:\n            n=n*(n+1)\n            counter+=1\n      \n        elif term==square:\n            n*=(n+1)**2\n            counter+=1\n            \n        return n\n    \n\n","after":null,"SubmissionTime":"2016-02-08T14:34:23.596967","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":150,"date":"2016-02-08 14:34:49.914963","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    counter=0\n    while(counter<n):\n        if term == identity:\n            n=n*(n+1)\n            counter+=1\n      \n        elif term==square:\n            n*=(n+1)**2\n            counter+=1\n            \n        return n\n    \n\n","after":null,"SubmissionTime":"2016-02-08T14:34:49.914963","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":25,"date":"2016-02-08 14:34:54.793531","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return term(n)\n    else:\n        return (n-1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-08T14:34:54.793531","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":150,"date":"2016-02-08 14:35:00.142613","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    counter=0\n    while(counter<n):\n        if term == identity:\n            n=n*(n+1)\n            counter+=1\n      \n        elif term==square:\n            n*=(n+1)**2\n            counter+=1\n            \n        return n//2\n    \n\n","after":null,"SubmissionTime":"2016-02-08T14:35:00.142613","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":540,"date":"2016-02-08 14:36:38.028288","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return term(1)\n    else:\n        return term(n) * product(n-1)\n\n","after":null,"SubmissionTime":"2016-02-08T14:36:38.028288","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":419,"date":"2016-02-08 14:37:14.310593","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    camnewton = 1\n    if camnewton == n:\n        return n\n    else:\n        return camnewton * product(camnewton + 1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-08T14:37:14.310593","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":25,"date":"2016-02-08 14:38:17.441289","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    prod = term(n)\n    if n == 1:\n        return prod\n    else:\n        return product(n-1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-08T14:38:17.441289","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":25,"date":"2016-02-08 14:39:31.883997","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return prod\n    else:\n        return product(n, term) * product (n-1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-08T14:39:31.883997","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":419,"date":"2016-02-08 14:40:20.331853","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    bruh = 1\n    if bruh == n:\n        return n\n    else:\n        return bruh * product(bruh + 1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-08T14:40:20.331853","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":419,"date":"2016-02-08 14:41:13.218974","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    bruh = 1\n    if bruh == n:\n        return n\n    else:\n        return 1 * product(bruh + 1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-08T14:41:13.218974","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":211,"date":"2016-02-08 14:41:29.447577","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(n)\n    else:\n        return n * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T14:41:29.447577","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return term(n)\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":25,"date":"2016-02-08 14:43:09.502666","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    prod = term(n)\n    def counter():\n        if n == 1:\n            return prod\n        else:\n            prod = prod * term(n-1)\n            return counter\n    return counter\n\n\n","after":null,"SubmissionTime":"2016-02-08T14:43:09.502666","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":211,"date":"2016-02-08 14:43:27.867246","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return \n    else:\n        return term(n) * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T14:43:27.867246","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":25,"date":"2016-02-08 14:43:40.198219","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    prod = term(n)\n    def counter():\n        if n == 1:\n            return prod\n        else:\n            n -= 1\n            prod = prod * term(n)\n            return counter\n    return counter\n\n\n","after":null,"SubmissionTime":"2016-02-08T14:43:40.198219","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":211,"date":"2016-02-08 14:43:59.044449","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return\n    else:\n        return term(n) * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T14:43:59.044449","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":25,"date":"2016-02-08 14:44:01.259920","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    prod = term(n)\n    def counter():\n        if n == 1:\n            return prod\n        else:\n            n -= 1\n            prod = prod * term(n)\n            return counter()\n    return counter()\n\n\n","after":null,"SubmissionTime":"2016-02-08T14:44:01.25992","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":211,"date":"2016-02-08 14:44:11.831060","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return\n    else:\n        term(n) * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T14:44:11.83106","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":25,"date":"2016-02-08 14:44:18.781832","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    prod = term(n)\n    def counter(n):\n        if n == 1:\n            return prod\n        else:\n            n -= 1\n            prod = prod * term(n)\n            return counter(n)\n    return counter(n)\n\n\n","after":null,"SubmissionTime":"2016-02-08T14:44:18.781832","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":25,"date":"2016-02-08 14:46:28.477455","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    iterm = term(n)\n    prod = iterm*prod\n    if n == 1:\n        return prod\n    else:\n        return product(n-1, term)\n    '''def counter(n):\n        if n == 1:\n            return prod\n        else:\n            n -= 1\n            prod = prod * term(n)\n            return counter(n)\n    return counter(n)\n'''\n\n","after":null,"SubmissionTime":"2016-02-08T14:46:28.477455","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":392,"date":"2016-02-08 14:50:49.813870","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    product_sum = 1 \n    while n:\n        product_sum = product_sum * term(n)\n        print (term(n))\n        n -= 1\n    return product_sum\n\n","after":null,"SubmissionTime":"2016-02-08T14:50:49.81387","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":376,"date":"2016-02-08 14:53:55.768064","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return term(n)\n    else:\n        return term(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-08T14:53:55.768064","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":376,"date":"2016-02-08 14:55:20.322522","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return term(n)\n    else:\n        return term(n) * term(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-08T14:55:20.322522","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return term(n)\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":663,"date":"2016-02-08 14:59:14.939763","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i=1\n    while i<=n:\n        s=s*term(i)\n    return s\n\n","after":null,"SubmissionTime":"2016-02-08T14:59:14.939763","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":776,"date":"2016-02-08 14:59:24.565980","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, total = 1, 1\n    while k <= n:\n        k, total = k + 1, total * term(k, 1)\n    return total\n","after":null,"SubmissionTime":"2016-02-08T14:59:24.56598","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":419,"date":"2016-02-08 14:59:44.997398","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 1:\n        return 1\n    else:\n        return n * product(n- 1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-08T14:59:44.997398","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":663,"date":"2016-02-08 15:00:01.902735","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i=1;s=1\n    while i<=n:\n        s=s*term(i)\n    return s\n\n","after":null,"SubmissionTime":"2016-02-08T15:00:01.902735","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":419,"date":"2016-02-08 15:00:54.227036","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 1:\n        return 1\n    else:\n        return n * product(n - 1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-08T15:00:54.227036","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":376,"date":"2016-02-08 15:01:22.606497","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i, product = 1, term(i)\n    while i <= n:\n        i += 1\n        product = product * term(i)\n    return product\n\n","after":null,"SubmissionTime":"2016-02-08T15:01:22.606497","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":376,"date":"2016-02-08 15:01:43.328490","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i = 1\n    product = term(i)\n    while i <= n:\n        i += 1\n        product = product * term(i)\n    return product\n\n","after":null,"SubmissionTime":"2016-02-08T15:01:43.32849","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1009,"date":"2016-02-08 15:03:52.489975","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i, total = 1, 0\n    while i <= n:\n        total *= term(i)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-08T15:03:52.489975","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":191,"date":"2016-02-08 15:05:07.072348","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, i = 1, 0\n    while i <= n:\n        total *= term(i)\n        i += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-08T15:05:07.072348","SynthesizedAfter":"\r\ndef product(n, term):\r\n    total, i = 1, 1\r\n    while i<=n:\r\n        total *= term(i)\r\n        i += 1\r\n    return total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":1,"Id":0,"studentId":310,"date":"2016-02-08 15:08:37.623513","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-08T15:08:37.623513","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":310,"date":"2016-02-08 15:09:47.065583","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    assert n > 0\n    if n == 1:\n        return 1\n    else:\n        return term(n) * term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-08T15:09:47.065583","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":941,"date":"2016-02-08 15:13:50.023449","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * product(n+1, n)\n\n","after":null,"SubmissionTime":"2016-02-08T15:13:50.023449","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":941,"date":"2016-02-08 15:15:12.278842","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-08T15:15:12.278842","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":941,"date":"2016-02-08 15:16:00.496109","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return term(n)\n    else:\n        return n * term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-08T15:16:00.496109","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":150,"date":"2016-02-08 15:20:59.662205","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    counter=0\n    while(counter<n):\n        if term == identity:\n            n=n*(n+1)\n            counter+=1\n      \n        elif term==square:\n            n*=(n+1)**2\n            counter+=1\n            \n        return n//2\n    \n\n","after":null,"SubmissionTime":"2016-02-08T15:20:59.662205","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":776,"date":"2016-02-08 15:22:41.689799","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k == 1\n    while k <= n:\n        k, total = k + 1, total * term(k, 1)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-08T15:22:41.689799","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":423,"date":"2016-02-08 15:26:06.887814","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=1\n    if x==n:\n        return term(*i)\n\n","after":null,"SubmissionTime":"2016-02-08T15:26:06.887814","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1009,"date":"2016-02-08 15:26:20.688906","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return 576\n\n","after":null,"SubmissionTime":"2016-02-08T15:26:20.688906","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":572,"date":"2016-02-08 15:26:44.193961","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if term(n) == 1:\n        return 1\n    return n * term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-08T15:26:44.193961","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if term(n)==1:\r\n        return 1\r\n    return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":423,"date":"2016-02-08 15:27:19.895541","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=1\n    if x==n:\n        return term(*i)\n    else: \n        return n+ term(*n+1)\n\n","after":null,"SubmissionTime":"2016-02-08T15:27:19.895541","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1009,"date":"2016-02-08 15:27:26.113377","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(1)\n    return term(n) * term(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-08T15:27:26.113377","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return term(1)\r\n    return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":150,"date":"2016-02-08 15:27:29.722672","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    counter=0\n    tracker=1\n    total=1\n    while(counter<n):\n        if term == identity:\n            tracker=n+1\n            total=n*tracker\n            n+=1\n            counter+=1\n            \n      \n        elif term==square:\n            n*=(n+1)**2\n            counter+=1\n            \n        return tracker\n    \n\n","after":null,"SubmissionTime":"2016-02-08T15:27:29.722672","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":572,"date":"2016-02-08 15:28:03.381952","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if term(n) == 1:\n        return 1\n    return n * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T15:28:03.381952","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":150,"date":"2016-02-08 15:28:16.606137","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    counter=0\n    tracker=1\n    total=1\n    while(counter<n):\n        if term == identity:\n            tracker=n+1\n            total=counter*tracker\n            n+=1\n            counter+=1\n            \n      \n        elif term==square:\n            n*=(n+1)**2\n            counter+=1\n            \n        return tracker\n    \n\n","after":null,"SubmissionTime":"2016-02-08T15:28:16.606137","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":572,"date":"2016-02-08 15:28:34.609124","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    return n * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T15:28:34.609124","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1009,"date":"2016-02-08 15:28:39.826064","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i, total = 1, 0\n    while i <= n:\n        total *= term(i)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-08T15:28:39.826064","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1009,"date":"2016-02-08 15:29:34.636565","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(1)\n    return term(n) + product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T15:29:34.636565","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":572,"date":"2016-02-08 15:29:58.057841","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return term(n)\n    return n * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T15:29:58.057841","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1019,"date":"2016-02-08 15:30:23.102100","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, k = 0, 1\n    while k <= n:\n        total += term(k)\n        k = increment(k)\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-08T15:30:23.1021","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":423,"date":"2016-02-08 15:30:34.780207","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    if n==1:\n        return 1\n    else:\n        x *= term(i)\n        return x\n\n","after":null,"SubmissionTime":"2016-02-08T15:30:34.780207","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":423,"date":"2016-02-08 15:31:14.918665","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    if n==1:\n        return 1\n    else:\n        x *= term(i)\n        return x + product(n+1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T15:31:14.918665","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1019,"date":"2016-02-08 15:31:18.209927","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, k = 0, 1\n    while k <= n:\n        total = total * term(k)\n        k = increment(k)\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-08T15:31:18.209927","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":423,"date":"2016-02-08 15:31:27.297040","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==1:\n        return 1\n    else:\n        x *= term(i)\n        return n + product(n+1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T15:31:27.29704","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":150,"date":"2016-02-08 15:31:37.075114","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    counter=1\n    tracker=1\n    total=1\n    while(counter<n):\n        if term == identity:\n            total=counter*(counter+1)\n            n+=1\n            \n            \n      \n        elif term==square:\n            n*=(n+1)**2\n            counter+=1\n            \n        return total\n    \n\n","after":null,"SubmissionTime":"2016-02-08T15:31:37.075114","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":150,"date":"2016-02-08 15:31:53.635141","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    counter=1\n    tracker=1\n    total=1\n    while(counter<n):\n        if term == identity:\n            total=counter*(counter+1)\n            n+=1\n            counter+=1\n            \n            \n      \n        elif term==square:\n            n*=(n+1)**2\n            counter+=1\n            \n        return total\n    \n\n","after":null,"SubmissionTime":"2016-02-08T15:31:53.635141","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":150,"date":"2016-02-08 15:32:05.649605","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    counter=1\n    tracker=1\n    total=1\n    while(counter<n):\n        if term == identity:\n            total=counter*(counter+1)\n            n+=1\n            counter+=1\n            \n            \n      \n        elif term==square:\n            n*=(n+1)**2\n            counter+=1\n            \n        return total\n    \n\n","after":null,"SubmissionTime":"2016-02-08T15:32:05.649605","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":150,"date":"2016-02-08 15:32:39.981860","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    counter=1\n    tracker=1\n    total=1\n    while(counter<n):\n        if term == identity:\n            total=counter*(counter+1)\n            counter+=1\n            \n            \n      \n        elif term==square:\n            n*=(n+1)**2\n            counter+=1\n            \n        return total\n    \n\n","after":null,"SubmissionTime":"2016-02-08T15:32:39.98186","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":120,"date":"2016-02-08 15:35:12.676045","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        result = n * term(n + 1)\n        return result\n\n\n","after":null,"SubmissionTime":"2016-02-08T15:35:12.676045","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":120,"date":"2016-02-08 15:39:07.671782","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        result = n * identity(n + 1)\n        return result\n\n\n","after":null,"SubmissionTime":"2016-02-08T15:39:07.671782","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":436,"date":"2016-02-08 15:39:58.193892","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return term(n)\n\n\n","after":null,"SubmissionTime":"2016-02-08T15:39:58.193892","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1071,"date":"2016-02-08 15:40:02.176852","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total=1\n    while n>0:\n        total==term(n)*total\n        n-=1\n    return total\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-08T15:40:02.176852","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":120,"date":"2016-02-08 15:40:15.092231","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        result = n * term(n - 1)\n        return result\n\n\n","after":null,"SubmissionTime":"2016-02-08T15:40:15.092231","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":436,"date":"2016-02-08 15:41:50.759992","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    counter = 1\n    result = 1\n    while counter <= n:\n        result *= term(n)\n        increment(counter)\n    return result\n\n\n","after":null,"SubmissionTime":"2016-02-08T15:41:50.759992","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":436,"date":"2016-02-08 15:43:35.996972","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    counter = 1\n    result = 1\n    while counter <= n:\n        result *= term(counter)\n        increment(counter)\n    return result\n\n\n","after":null,"SubmissionTime":"2016-02-08T15:43:35.996972","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":436,"date":"2016-02-08 15:44:22.399598","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    counter = 1\n    result = 1\n    while counter <= n:\n        num = term(counter)\n        result *= num\n        increment(counter)\n    return result\n\n\n","after":null,"SubmissionTime":"2016-02-08T15:44:22.399598","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-08 15:45:58.830960","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return None\n    else:\n        return term(n, product(n - 1, term))\n\n","after":null,"SubmissionTime":"2016-02-08T15:45:58.83096","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":251,"date":"2016-02-08 15:46:10.902464","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    while n > 0:\n        i = term(n)\n        n -= 1\n    return i\n\n\n","after":null,"SubmissionTime":"2016-02-08T15:46:10.902464","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-08 15:48:06.730176","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return None\n    else:\n        return product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T15:48:06.730176","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-08 15:48:23.107493","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return None\n    else:\n        return term(n) + product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T15:48:23.107493","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-08 15:49:06.799220","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return None\n    else:\n        return product(n - 1, term(n))\n\n","after":null,"SubmissionTime":"2016-02-08T15:49:06.79922","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-08 15:49:52.252787","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return None\n    else:\n        return n + product(n-1, term)\n        #return product(n - 1, term(n))\n\n","after":null,"SubmissionTime":"2016-02-08T15:49:52.252787","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-08 15:50:13.773256","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return None\n    else:\n        return n\n\n","after":null,"SubmissionTime":"2016-02-08T15:50:13.773256","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-08 15:50:47.487669","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return None\n    else:\n        return n * product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T15:50:47.487669","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-08 15:51:12.049305","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return 0\n    else:\n        return n * product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T15:51:12.049305","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-08 15:51:34.137644","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return product(1, term)\n    else:\n        return n * product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T15:51:34.137644","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":903,"date":"2016-02-08 15:51:53.763227","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    else:\n        return n * product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T15:51:53.763227","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":247,"date":"2016-02-08 15:52:26.351176","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(1)\n    else:\n        return product(n, term) * product(n - 1, term)\n\n\n\n","after":null,"SubmissionTime":"2016-02-08T15:52:26.351176","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return term(1)\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-term)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":845,"date":"2016-02-08 15:54:56.034366","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    term_no = 1\n    product_value = 1\n    while term_no <= n:\n        product_value = product_value * term(n)\n        term_no += 1\n    return product_value\n\n","after":null,"SubmissionTime":"2016-02-08T15:54:56.034366","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":251,"date":"2016-02-08 15:58:48.480629","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    total = 1\n    while i < n:\n        total = total * term(n)\n        i += 1\n    return total \n\n\n","after":null,"SubmissionTime":"2016-02-08T15:58:48.480629","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":251,"date":"2016-02-08 15:59:06.688081","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    total = 1\n    while i < n:\n        total = total * term(i)\n        i += 1\n    return total \n\n\n","after":null,"SubmissionTime":"2016-02-08T15:59:06.688081","SynthesizedAfter":"\r\ndef product(n, term):\r\n    i = 1\r\n    total = 1\r\n    while i<n:\r\n        total = total*term(i+1)\r\n        i += 1\r\n    return total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":901,"date":"2016-02-08 16:03:18.955364","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return term(n)*product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T16:03:18.955364","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n>0:\r\n        return term(n)*product(n-1, term)\r\n    else:\r\n        return 1","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-GreaterThan, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), Tutor.synthesis.MagicK)))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))), 1), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-product, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-product, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":35,"date":"2016-02-08 16:17:14.847405","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i = 1\n    total = 0\n    def summation_of_func_term(n):\n        i = 1\n        total = 0\n        if i > n:\n            return total\n        total, n = total + term(n), n + 1\n    return summation_of_func_term\n\n","after":null,"SubmissionTime":"2016-02-08T16:17:14.847405","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":35,"date":"2016-02-08 16:18:34.523927","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i = 1\n    total = 0\n    if i > n:\n        return total\n    total, n = total + term(n), n + 1\n\n\n","after":null,"SubmissionTime":"2016-02-08T16:18:34.523927","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":35,"date":"2016-02-08 16:19:05.987070","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i = 1\n    total = 0\n    if i > n:\n        return total\n    total, i = total + term(i), n + 1\n\n\n","after":null,"SubmissionTime":"2016-02-08T16:19:05.98707","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":35,"date":"2016-02-08 16:19:10.451458","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i = 1\n    total = 0\n    if i > n:\n        return total\n    total, i = total + term(i), i + 1\n\n\n","after":null,"SubmissionTime":"2016-02-08T16:19:10.451458","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":35,"date":"2016-02-08 16:19:22.241536","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i = 1\n    total = 0\n    if i > n:\n        return total\n    total, i = total + term(i), i + 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-08T16:19:22.241536","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":150,"date":"2016-02-08 16:20:56.950732","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    counter=1\n    tracker=1\n    total=1\n    while(counter<n):\n        if term == identity:\n            total=tracker*(tracker+1)\n            counter+=1\n            \n            \n      \n        elif term==square:\n            n*=(n+1)**2\n            counter+=1\n            \n        return total\n    \n\n","after":null,"SubmissionTime":"2016-02-08T16:20:56.950732","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":35,"date":"2016-02-08 16:21:26.741437","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i = 1\n    total = 1\n    if i > n:\n        return total\n    total = total * term(i+1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-08T16:21:26.741437","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":247,"date":"2016-02-08 16:21:27.303753","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(1)\n    total = product(n) * product(n - 1, term)\n    return product(n, term)\n\n\n\n","after":null,"SubmissionTime":"2016-02-08T16:21:27.303753","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":247,"date":"2016-02-08 16:21:48.814983","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(1)\n    total = product(n, term) * product(n - 1, term)\n    return product(n, term)\n\n\n\n","after":null,"SubmissionTime":"2016-02-08T16:21:48.814983","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":150,"date":"2016-02-08 16:22:31.669281","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    counter=1\n    tracker=1\n    total=1\n    while(counter<n):\n        if term == identity:\n            total*=tracker\n            tracker+=1\n            counter+=1\n            \n            \n      \n        elif term==square:\n            n*=(n+1)**2\n            counter+=1\n            \n        return total\n    \n\n","after":null,"SubmissionTime":"2016-02-08T16:22:31.669281","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":150,"date":"2016-02-08 16:22:53.832316","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    counter=0\n    tracker=1\n    total=1\n    while(counter<n):\n        if term == identity:\n            total*=tracker\n            tracker+=1\n            counter+=1\n            \n            \n      \n        elif term==square:\n            n*=(n+1)**2\n            counter+=1\n            \n        return total\n    \n\n","after":null,"SubmissionTime":"2016-02-08T16:22:53.832316","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":150,"date":"2016-02-08 16:23:35.966922","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    counter=0\n    tracker=1\n    total=1\n    while(counter<n):\n        if term == identity:\n            total*=tracker\n            tracker+=1\n            counter+=1\n      \n        elif term==square:\n            n*=(n+1)**2\n            counter+=1\n            \n        return total\n    \n\n","after":null,"SubmissionTime":"2016-02-08T16:23:35.966922","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":35,"date":"2016-02-08 16:24:38.907814","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i = 1\n    total = 1\n    while i <= n:\n        total, i = total * term(i), i + 1\n        return total\n\n\n\n","after":null,"SubmissionTime":"2016-02-08T16:24:38.907814","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":247,"date":"2016-02-08 16:24:45.432863","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(1)\n    return term(n) * term(n - 1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-08T16:24:45.432863","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":150,"date":"2016-02-08 16:24:59.144933","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    counter=0\n    tracker=1\n    total=1\n    while(counter<n):\n        if term == identity:\n            total*=tracker+1\n            counter+=1\n      \n        elif term==square:\n            n*=(n+1)**2\n            counter+=1\n            \n        return total\n    \n\n","after":null,"SubmissionTime":"2016-02-08T16:24:59.144933","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":247,"date":"2016-02-08 16:26:33.123654","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(1)\n    return term(n) * product(n - 1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-08T16:26:33.123654","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":150,"date":"2016-02-08 16:27:17.872744","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    counter=0\n    tracker=1\n    total=1\n    while(counter>n):\n        if term == identity:\n            total+=tracker*(tracker+1)\n      \n        elif term==square:\n            n*=(n+1)**2\n            counter+=1\n            \n        return total\n    \n\n","after":null,"SubmissionTime":"2016-02-08T16:27:17.872744","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":150,"date":"2016-02-08 16:27:28.528017","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    counter=0\n    tracker=1\n    total=1\n    while(counter>n):\n        if term == identity:\n            total*=tracker*(tracker+1)\n      \n        elif term==square:\n            n*=(n+1)**2\n            counter+=1\n            \n        return total\n    \n\n","after":null,"SubmissionTime":"2016-02-08T16:27:28.528017","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":150,"date":"2016-02-08 16:27:43.661545","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    counter=0\n    tracker=1\n    total=1\n    while(counter>n):\n        if term == identity:\n            total*=tracker*(tracker+1)\n            counter+=1\n      \n        elif term==square:\n            n*=(n+1)**2\n            counter+=1\n            \n        return total\n    \n\n","after":null,"SubmissionTime":"2016-02-08T16:27:43.661545","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":150,"date":"2016-02-08 16:28:34.955591","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    counter=0\n    tracker=1\n    total=1\n    while(counter>n):\n        if term == identity:\n            total*=tracker*(tracker+1)\n            counter+=1\n        elif term==square:\n            n*=(n+1)**2\n            counter+=1\n            \n        return total\n    \n\n","after":null,"SubmissionTime":"2016-02-08T16:28:34.955591","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":150,"date":"2016-02-08 16:29:08.921306","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    counter=0\n    tracker=1\n    total=1\n    while(counter>n):\n        if term == identity:\n            total*=tracker*(tracker+1)\n            counter+=1\n            tracker+=1\n        elif term==square:\n            n*=(n+1)**2\n            counter+=1\n            \n        return total\n    \n\n","after":null,"SubmissionTime":"2016-02-08T16:29:08.921306","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":464,"date":"2016-02-08 16:32:35.482786","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def recursion(n, func):\n        if n == 1:\n            return func(1)\n        else:\n            return (recursion(n-1)+func(n))\n\n    return recursion(n,func)\n\n","after":null,"SubmissionTime":"2016-02-08T16:32:35.482786","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1019,"date":"2016-02-08 16:33:34.726473","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 0: \n        return 0\n    else:\n        return n * product(n-1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-08T16:33:34.726473","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":685,"date":"2016-02-08 16:33:37.030249","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 1\n    for i in range(0, n):\n        total = total * term(i)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-08T16:33:37.030249","SynthesizedAfter":"\r\ndef product(n, term):\r\n    total = 1\r\n    for i in range(0, n):\r\n        total = total*term(i+1)\r\n    return total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":1019,"date":"2016-02-08 16:33:42.530647","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n <= 0: \n        return 1\n    else:\n        return n * product(n-1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-08T16:33:42.530647","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n<=0:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":543,"date":"2016-02-08 16:37:25.259359","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    for i in range(n):\n        total += term(i)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-08T16:37:25.259359","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":543,"date":"2016-02-08 16:37:50.134101","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    for i in range(n):\n        total *= term(i)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-08T16:37:50.134101","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":543,"date":"2016-02-08 16:38:00.777095","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    for i in range(n):\n        total *= term(i+1)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-08T16:38:00.777095","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":543,"date":"2016-02-08 16:38:23.705166","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    for i in range(n):\n        total += term(i+1)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-08T16:38:23.705166","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":543,"date":"2016-02-08 16:38:42.302456","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    for i in range(n):\n        total = total * term(i+1)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-08T16:38:42.302456","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":543,"date":"2016-02-08 16:46:21.326586","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    total = i\n    while i < n:\n        total = total * term(i)\n        i = increment(i)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-08T16:46:21.326586","SynthesizedAfter":"\r\ndef product(n, term):\r\n    i = 1\r\n    total = i\r\n    while i<n:\r\n        total = total*term(i+1)\r\n        i = increment(i)\r\n    return total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":965,"date":"2016-02-08 16:49:41.013236","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return term(n) * product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T16:49:41.013236","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n>0:\r\n        return term(n)*product(n-1, term)\r\n    else:\r\n        return 1","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-GreaterThan, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), Tutor.synthesis.MagicK)))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))), 1), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-product, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-product, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":1004,"date":"2016-02-08 17:17:13.864476","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if (n == 0):\n        return 1\n    return product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T17:17:13.864476","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1004,"date":"2016-02-08 17:18:29.106380","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if (n == 0):\n        return 1\n    return n * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T17:18:29.10638","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if (n==0):\r\n        return 1\r\n    return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":1004,"date":"2016-02-08 17:19:13.325532","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if (n == 0):\n        return 1\n    return n * product(n-1, term(n-1))\n\n","after":null,"SubmissionTime":"2016-02-08T17:19:13.325532","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1004,"date":"2016-02-08 17:19:26.487617","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if (n == 1):\n        return 1\n    return n * product(n-1, term(n-1))\n\n","after":null,"SubmissionTime":"2016-02-08T17:19:26.487617","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1004,"date":"2016-02-08 17:19:32.580213","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if (n == 1):\n        return 1\n    return n * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T17:19:32.580213","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1004,"date":"2016-02-08 17:19:47.245494","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if (n == 1):\n        return 1\n    return product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T17:19:47.245494","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1004,"date":"2016-02-08 17:20:08.779596","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if (n == 1):\n        return 1\n    return product(n-1, term) * n\n\n","after":null,"SubmissionTime":"2016-02-08T17:20:08.779596","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1004,"date":"2016-02-08 17:21:38.889300","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if (n == 1):\n        return 0\n    return product(n-1, term) * n\n\n","after":null,"SubmissionTime":"2016-02-08T17:21:38.8893","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1004,"date":"2016-02-08 17:21:45.237218","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if (n == 1):\n        return 1\n    return product(n-1, term) * n\n\n","after":null,"SubmissionTime":"2016-02-08T17:21:45.237218","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":156,"date":"2016-02-08 17:55:08.443066","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, 0 \n    while k <= n: \n        total, k = total * term(k), k + 1\n    return total \n\n","after":null,"SubmissionTime":"2016-02-08T17:55:08.443066","SynthesizedAfter":"\r\ndef product(n, term):\r\n    total, k = 1, 1\r\n    while k<=n:\r\n        total, k = total*term(k), k+1\r\n    return total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":668,"date":"2016-02-08 18:05:49.836687","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else: \n        total = 1\n        for i in range(1, n+1):\n            result = result * term(i)\n        return total\n\n","after":null,"SubmissionTime":"2016-02-08T18:05:49.836687","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":948,"date":"2016-02-08 18:36:35.195250","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def other(x, y):\n        y = y * term(x)\n        x = x+1\n        if x == n:\n            return\n        else:\n            return other(x, y)\n\n    other(1,1)\n\n","after":null,"SubmissionTime":"2016-02-08T18:36:35.19525","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":948,"date":"2016-02-08 18:37:45.685599","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def other(x, y):\n        y = y * term(x)\n        x = x+1\n        if x == n:\n            print(y)\n        else:\n            return other(x, y)\n\n    other(1,1)\n\n","after":null,"SubmissionTime":"2016-02-08T18:37:45.685599","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":948,"date":"2016-02-08 18:38:17.367119","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def other(x, y):\n        y = y * term(x)\n        x = x+1\n        print(x,y)\n        if x == n:\n            print(y)\n        else:\n            return other(x, y)\n\n    other(1,1)\n\n","after":null,"SubmissionTime":"2016-02-08T18:38:17.367119","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":948,"date":"2016-02-08 18:38:50.525859","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def other(x, y):\n        y = y * term(x)\n        x = x+1\n        if x == n:\n            print(x*y)\n        else:\n            return other(x, y)\n\n    other(1,1)\n\n","after":null,"SubmissionTime":"2016-02-08T18:38:50.525859","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-08 18:40:17.348486","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==0:\n        return \n    if n>0:\n        term(n)*product(n-1, term)\n\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-08T18:40:17.348486","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":552,"date":"2016-02-08 18:41:44.238082","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return term(1)\n    else:\n        return product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T18:41:44.238082","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":552,"date":"2016-02-08 18:43:28.983621","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return term(1)\n    else:\n        return 1 * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T18:43:28.983621","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":23,"date":"2016-02-08 18:43:50.327193","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    result = 0\n    num = n\n    if n <= 1:\n        return 1\n    else:\n        while num > 0:\n            result = term(n)\n            n = n + 1\n            num = num - 1\n\n            return result\n\n","after":null,"SubmissionTime":"2016-02-08T18:43:50.327193","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-08 18:45:43.220221","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==0:\n        return \n    else:\n        term(n) * product(n-1, term)\n\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-08T18:45:43.220221","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-08 18:46:09.473923","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==0:\n        return 1\n    else:\n        term(n) * product(n-1, term)\n\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-08T18:46:09.473923","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==0:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(ReturnStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":23,"date":"2016-02-08 18:49:53.951666","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    result = 0\n    num = n\n    if n <= 1:\n        return 1\n    else:\n        while num > 0:\n            result = term(term(n))\n            n = n + 1\n            num = num - 1\n\n            return result\n\n","after":null,"SubmissionTime":"2016-02-08T18:49:53.951666","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":811,"date":"2016-02-08 18:56:29.558938","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def square(x):\n        return x * x\n    def identity(x):\n        return x\n    if x==1:\n        return 1\n    else:\n        return term(x) \n\n","after":null,"SubmissionTime":"2016-02-08T18:56:29.558938","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":811,"date":"2016-02-08 18:57:30.920227","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=n\n    def square(x):\n        return x * x\n    def identity(x):\n        return x\n    if x==1:\n        return 1\n    else:\n        return term(x) \n\n","after":null,"SubmissionTime":"2016-02-08T18:57:30.920227","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":811,"date":"2016-02-08 19:00:41.630351","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=n\n    def square(x):\n        return x * x\n    def identity(x):\n        return x\n    if x==1:\n        return 1\n    else:\n        return term(x)\n    return product(x,term) \n\n","after":null,"SubmissionTime":"2016-02-08T19:00:41.630351","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":811,"date":"2016-02-08 19:01:53.865101","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=n\n    if x==1:\n        return 1\n    else:\n        def square(x):\n            return x * x\n        def identity(x):\n            return x\n        return term(x)\n \n\n","after":null,"SubmissionTime":"2016-02-08T19:01:53.865101","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":811,"date":"2016-02-08 19:02:52.474492","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=n\n    if x==1:\n        return 1\n    else:\n        def square(x):\n            return term(x*x)\n        def identity(x):\n            return term(x)\n \n\n","after":null,"SubmissionTime":"2016-02-08T19:02:52.474492","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":341,"date":"2016-02-08 19:03:43.024783","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-08T19:03:43.024783","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":811,"date":"2016-02-08 19:04:09.988009","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=n\n    if x==1:\n        return 1\n    else:\n        def square(x):\n            term=x*x\n            return term\n        def identity(x):\n            term=x\n            return term \n \n\n","after":null,"SubmissionTime":"2016-02-08T19:04:09.988009","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":811,"date":"2016-02-08 19:08:12.882685","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==1:\n        return 1\n    while n>1:\n        def square(n):\n            return n*n\n        def identity(n):\n            return n\n\n \n\n","after":null,"SubmissionTime":"2016-02-08T19:08:12.882685","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":811,"date":"2016-02-08 19:12:45.804540","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=n\n    if x==1:\n        return 1\n    while x>1:\n        return x*(x-1)\n\n \n\n","after":null,"SubmissionTime":"2016-02-08T19:12:45.80454","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":811,"date":"2016-02-08 19:14:28.840798","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=n\n    if x==1:\n        return 1\n    while x>1:\n        print(x*(x-1))\n\n \n\n","after":null,"SubmissionTime":"2016-02-08T19:14:28.840798","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":811,"date":"2016-02-08 19:16:12.505691","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=n\n    if x==1:\n        return 1\n    while x>1:\n        return x*(x-1)\n        x=x-1\n\n \n\n","after":null,"SubmissionTime":"2016-02-08T19:16:12.505691","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":811,"date":"2016-02-08 19:16:41.391713","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=n\n    if x==1:\n        return 1\n    while x>1:\n        return x\n        x=x-1\n        return x*(x-1)\n    \n\n \n\n","after":null,"SubmissionTime":"2016-02-08T19:16:41.391713","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":811,"date":"2016-02-08 19:16:52.196108","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=n\n    if x==1:\n        return 1\n    while x>1:\n        x=x-1\n        return x*(x-1)\n    \n\n \n\n","after":null,"SubmissionTime":"2016-02-08T19:16:52.196108","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":811,"date":"2016-02-08 19:17:14.478370","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=n\n    if x==1:\n        return 1\n    while x>1:\n        return x*(x-1)\n        x=x-1\n        return x\n    \n\n \n\n","after":null,"SubmissionTime":"2016-02-08T19:17:14.47837","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":811,"date":"2016-02-08 19:17:44.894520","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=n\n    if x==1:\n        return 1\n    while x>1:\n        return x*(x-1)\n        x=x-1\n    \n\n \n\n","after":null,"SubmissionTime":"2016-02-08T19:17:44.89452","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":253,"date":"2016-02-08 19:18:31.862859","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==0:\n        return 0\n\n    return term(n)+product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T19:18:31.862859","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":811,"date":"2016-02-08 19:20:00.061373","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=n\n    if x==1:\n        return 1\n    else:\n        return x*product(x-1, term) \n        \n    \n\n \n\n","after":null,"SubmissionTime":"2016-02-08T19:20:00.061373","SynthesizedAfter":"\r\ndef product(n, term):\r\n    x = n\r\n    if x==1:\r\n        return 1\r\n    else:\r\n        return term(x)*product(x-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":253,"date":"2016-02-08 19:24:09.567409","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==0:\n        return 0\n    return term(n)*product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T19:24:09.567409","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return 1\r\n    return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, LeafConstNode(ConstantExpressionNode-1), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":6,"date":"2016-02-08 19:26:49.986285","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    num=2\n    product= term(1)\n    while num<=n:\n        product= product*term(n)\n        n+=1\n    return product\n\n","after":null,"SubmissionTime":"2016-02-08T19:26:49.986285","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":774,"date":"2016-02-08 19:32:26.375633","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return n\n    else:\n        return term*product(n-1)\n\n","after":null,"SubmissionTime":"2016-02-08T19:32:26.375633","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":774,"date":"2016-02-08 19:33:19.915900","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return n\n    else:\n        return term*product(n-1,term)\n\n","after":null,"SubmissionTime":"2016-02-08T19:33:19.9159","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":136,"date":"2016-02-08 19:41:38.540499","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    for num in range(n+1):\n        total = total * term(n)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-08T19:41:38.540499","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":136,"date":"2016-02-08 19:43:43.982577","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    for num in range(n+1):\n        total = total * term(num)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-08T19:43:43.982577","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":339,"date":"2016-02-08 19:44:56.464037","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    n=1\n    if n<=x:\n        return n*increment(n) \n\n","after":null,"SubmissionTime":"2016-02-08T19:44:56.464037","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":731,"date":"2016-02-08 19:46:14.656787","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def adder(n, total=0):\n        total += term(n)\n        if n <= 1:\n            return 1\n        else:\n            adder(n - 1, total)\n    return adder(n)\n\n","after":null,"SubmissionTime":"2016-02-08T19:46:14.656787","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":339,"date":"2016-02-08 19:47:57.661804","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=1\n    if x<=n:\n        return x*increment(x) \n\n","after":null,"SubmissionTime":"2016-02-08T19:47:57.661804","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":731,"date":"2016-02-08 19:48:01.754782","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def adder(n, total=0):\n        if n <= 1:\n            return 1\n        else:\n            adder(n - 1, total + term(n))\n    return adder(n)\n\n","after":null,"SubmissionTime":"2016-02-08T19:48:01.754782","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":731,"date":"2016-02-08 19:49:02.463720","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def adder(n, total=0):\n        if n <= 1:\n            return 1\n        else:\n            adder(n - 1, total + term(n))\n    adder(n)\n\n","after":null,"SubmissionTime":"2016-02-08T19:49:02.46372","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":189,"date":"2016-02-08 19:49:14.271164","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    lst = []\n    for i in range (1, n + 1):\n        lst.append(i)\n    return (term in x for x in lst)\n\n","after":null,"SubmissionTime":"2016-02-08T19:49:14.271164","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":731,"date":"2016-02-08 19:49:31.180480","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def adder(n, total=0):\n        if n <= 1:\n            return 1\n        else:\n            return adder(n - 1, total + term(n))\n    adder(n)\n\n","after":null,"SubmissionTime":"2016-02-08T19:49:31.18048","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":731,"date":"2016-02-08 19:49:39.178563","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def adder(n, total=0):\n        if n <= 1:\n            return 1\n        else:\n            return adder(n - 1, total + term(n))\n    return adder(n)\n\n","after":null,"SubmissionTime":"2016-02-08T19:49:39.178563","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":189,"date":"2016-02-08 19:50:22.449479","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n\n","after":null,"SubmissionTime":"2016-02-08T19:50:22.449479","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":743,"date":"2016-02-08 19:50:23.663796","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k=1\n    while k<=n:\n        k+=term(k)\n        k+=1\n    return k\n\n","after":null,"SubmissionTime":"2016-02-08T19:50:23.663796","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":731,"date":"2016-02-08 19:50:50.500918","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def times(n, total=1):\n        if n <= 1:\n            return 1\n        else:\n            return adder(n - 1, total * term(n))\n    return times(n)\n\n","after":null,"SubmissionTime":"2016-02-08T19:50:50.500918","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":189,"date":"2016-02-08 19:50:52.395806","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    lst = []\n    for i in range (1, n + 1):\n        lst.append(i)\n    return (term for x in lst)\n\n","after":null,"SubmissionTime":"2016-02-08T19:50:52.395806","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":731,"date":"2016-02-08 19:51:03.159777","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def times(n, total=1):\n        if n <= 1:\n            return 1\n        else:\n            return times(n - 1, total * term(n))\n    return times(n)\n\n","after":null,"SubmissionTime":"2016-02-08T19:51:03.159777","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":731,"date":"2016-02-08 19:51:19.913181","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    total = 1\n    def times(n, total):\n        if n <= 1:\n            return 1\n        else:\n            return times(n - 1, total * term(n))\n    return times(n)\n\n","after":null,"SubmissionTime":"2016-02-08T19:51:19.913181","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":731,"date":"2016-02-08 19:51:36.552879","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def times(n, total):\n        if n <= 1:\n            return 1\n        else:\n            return times(n - 1, total * term(n))\n    return times(n, 1)\n\n","after":null,"SubmissionTime":"2016-02-08T19:51:36.552879","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":339,"date":"2016-02-08 19:52:43.250743","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=1\n    if x<=n:\n        n=x*n\n        increment(x)\n        return product(n, term)  \n\n","after":null,"SubmissionTime":"2016-02-08T19:52:43.250743","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":743,"date":"2016-02-08 19:53:19.530363","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k=0\n    while k<=n:\n        k+=term(k)\n        k+=1\n    return k\n\n","after":null,"SubmissionTime":"2016-02-08T19:53:19.530363","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":189,"date":"2016-02-08 19:54:21.663549","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    lst = []\n    for i in range (1, n + 1):\n        lst.append(i)\n    return [term for x in lst]\n\n","after":null,"SubmissionTime":"2016-02-08T19:54:21.663549","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":189,"date":"2016-02-08 19:54:58.124330","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    lst = []\n    for i in range (1, n + 1):\n        lst.append(i)\n    return [term() for x in lst]\n\n","after":null,"SubmissionTime":"2016-02-08T19:54:58.12433","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":189,"date":"2016-02-08 19:55:10.539700","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    lst = []\n    for i in range (1, n + 1):\n        lst.append(i)\n    return [term(x) for x in lst]\n\n","after":null,"SubmissionTime":"2016-02-08T19:55:10.5397","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":743,"date":"2016-02-08 19:55:17.524818","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k=1\n    while k<=n:\n        product+=term(k)\n        k+=1\n    return product\n\n","after":null,"SubmissionTime":"2016-02-08T19:55:17.524818","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":743,"date":"2016-02-08 19:55:53.034998","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k=1\n    product=0\n    while k<=n:\n        product+=term(k)\n        k+=1\n    return product\n\n","after":null,"SubmissionTime":"2016-02-08T19:55:53.034998","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":743,"date":"2016-02-08 19:56:23.451727","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k=1\n    product=0\n    while k<=n:\n        product*=term(k)\n        k+=1\n    return product\n\n","after":null,"SubmissionTime":"2016-02-08T19:56:23.451727","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1052,"date":"2016-02-08 19:56:47.025605","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return term(n) + product(n-1)\n\n","after":null,"SubmissionTime":"2016-02-08T19:56:47.025605","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":743,"date":"2016-02-08 19:56:49.037074","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k=1\n    product=0\n    while k<=n:\n        product*=term(k)\n        k+=1\n        return product\n\n","after":null,"SubmissionTime":"2016-02-08T19:56:49.037074","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1052,"date":"2016-02-08 19:57:19.365226","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return term(n) + product(n-1,term)\n\n","after":null,"SubmissionTime":"2016-02-08T19:57:19.365226","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1052,"date":"2016-02-08 19:57:37.344474","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return term(n) * product(n-1,term)\n\n","after":null,"SubmissionTime":"2016-02-08T19:57:37.344474","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, LeafConstNode(ConstantExpressionNode-1), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":743,"date":"2016-02-08 19:57:59.481911","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k=1\n    product=1\n    while k<=n:\n        product*=term(k)\n        k+=1\n        return product\n\n","after":null,"SubmissionTime":"2016-02-08T19:57:59.481911","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":731,"date":"2016-02-08 19:58:24.547867","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    def times(n, total):\n        if n <= 1:\n            return total\n        else:\n            return times(n - 1, total * term(n))\n    times(n, 1)\n\n","after":null,"SubmissionTime":"2016-02-08T19:58:24.547867","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":743,"date":"2016-02-08 19:59:07.178592","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k=1\n    product=1\n    while k<=n:\n        product*=term(k)\n        print(prdouct)\n        k+=1\n        return product\n\n","after":null,"SubmissionTime":"2016-02-08T19:59:07.178592","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":339,"date":"2016-02-08 19:59:07.823876","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=1\n    if x>n:\n        return \n    else:\n        n=n*x\n        increment\n        return product(n, term)  \n\n","after":null,"SubmissionTime":"2016-02-08T19:59:07.823876","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":743,"date":"2016-02-08 19:59:25.861743","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k=1\n    product=1\n    while k<=n:\n        product*=term(k)\n        print(product)\n        k+=1\n        return product\n\n","after":null,"SubmissionTime":"2016-02-08T19:59:25.861743","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":339,"date":"2016-02-08 20:00:13.242857","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    #def james(x)\n    x=1\n    if x>n:\n        return \n    else:\n        n=n*x\n        increment(x)\n        return product(n, term)  \n\n","after":null,"SubmissionTime":"2016-02-08T20:00:13.242857","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":743,"date":"2016-02-08 20:01:11.688564","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k=1\n    product=1\n    while k<=n:\n        product*=term(k)\n        print(product)\n        k+=1\n    return product\n\n","after":null,"SubmissionTime":"2016-02-08T20:01:11.688564","SynthesizedAfter":"\r\ndef product(n, term):\r\n    k = 1\r\n    product = 1\r\n    while k<=n:\r\n        product *= term(k)\r\n        print(product)\r\n        k += 1\r\n    return product","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-term)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":305,"date":"2016-02-08 20:01:13.125708","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k=0, 1\n    while k <= n:\n        total, k = total * k, k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-08T20:01:13.125708","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":339,"date":"2016-02-08 20:02:10.378756","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=1\n    def james(x):\n        if x>n:\n            return \n        else:\n            n=n*x\n            increment(x)\n            return james(x)\n\n","after":null,"SubmissionTime":"2016-02-08T20:02:10.378756","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":305,"date":"2016-02-08 20:02:44.151546","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k=1\n    while k <= n:\n        total, k = total * k, k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-08T20:02:44.151546","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":305,"date":"2016-02-08 20:02:58.534235","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k=1,2\n    while k <= n:\n        total, k = total * k, k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-08T20:02:58.534235","SynthesizedAfter":"\r\ndef product(n, term):\r\n    total, k = 1, 2\r\n    while k<=n:\r\n        total, k = total*term(k), k+1\r\n    return total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), Tutor.synthesis.MagicK)))))), 1), Selected(\\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":305,"date":"2016-02-08 20:05:30.973852","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k=0,1\n    while k <= n:\n        total, k = total * k, k + 1\n    return total\n\n    def identity(x):\n        return x\n\n    def square(x):\n        return x * x\n\n","after":null,"SubmissionTime":"2016-02-08T20:05:30.973852","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":339,"date":"2016-02-08 20:05:42.466475","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=1\n    if x>n:\n        return\n    else:\n        return x*product(x+1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T20:05:42.466475","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":305,"date":"2016-02-08 20:05:45.830029","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k=1,n\n    while k <= n:\n        total, k = total * k, k + 1\n    return total\n\n    def identity(x):\n        return x\n\n    def square(x):\n        return x * x\n\n","after":null,"SubmissionTime":"2016-02-08T20:05:45.830029","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":305,"date":"2016-02-08 20:06:12.006140","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k=1,3\n    while k <= n:\n        total, k = total * k, k + 1\n    return total\n\n    def identity(x):\n        return x\n\n    def square(x):\n        return x * x\n\n","after":null,"SubmissionTime":"2016-02-08T20:06:12.00614","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":704,"date":"2016-02-08 20:06:23.881924","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-08T20:06:23.881924","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":305,"date":"2016-02-08 20:06:33.267484","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k=1, identity\n    while k <= n:\n        total, k = total * k, k + 1\n    return total\n\n    def identity(x):\n        return x\n\n    def square(x):\n        return x * x\n\n","after":null,"SubmissionTime":"2016-02-08T20:06:33.267484","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":305,"date":"2016-02-08 20:06:56.023378","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def identity(x):\n        return x\n\n    def square(x):\n        return x * x\n        \n    total, k=1, identity\n    while k <= n:\n        total, k = total * k, k + 1\n    return total\n\n    \n\n","after":null,"SubmissionTime":"2016-02-08T20:06:56.023378","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":305,"date":"2016-02-08 20:08:07.561764","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k=1, 2\n    while k <= n:\n        total, k = total * k, k + 1\n    return total\n\n    \n\n","after":null,"SubmissionTime":"2016-02-08T20:08:07.561764","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":305,"date":"2016-02-08 20:09:16.901492","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k=1, 2\n    while k <= n:\n        total, k = total + identity, k + 1\n    return total\n\n    \n\n","after":null,"SubmissionTime":"2016-02-08T20:09:16.901492","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":305,"date":"2016-02-08 20:09:29.644856","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k=0,1\n    while k <= n:\n        total, k = total + identity, k + 1\n    return total\n\n    \n\n","after":null,"SubmissionTime":"2016-02-08T20:09:29.644856","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":339,"date":"2016-02-08 20:11:40.870053","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=1\n    if x>n:\n        return\n    else:\n        return x*product(n, term)\n    x=increment(x)\n\n","after":null,"SubmissionTime":"2016-02-08T20:11:40.870053","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":339,"date":"2016-02-08 20:14:26.729040","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def ascend(x):\n        if x==n:\n            return\n        else:\n            x+=1\n            x*ascend(x)\n\n","after":null,"SubmissionTime":"2016-02-08T20:14:26.72904","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":339,"date":"2016-02-08 20:15:09.959016","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def ascend(x):\n        if x==n:\n            return\n        else:\n            x+=1\n            x*ascend(x)\n    ascend(1)\n\n","after":null,"SubmissionTime":"2016-02-08T20:15:09.959016","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":339,"date":"2016-02-08 20:15:22.666359","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def ascend(x):\n        if x==n:\n            return\n        else:\n            x+=1\n            x=x*ascend(x)\n    ascend(1)\n\n","after":null,"SubmissionTime":"2016-02-08T20:15:22.666359","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":339,"date":"2016-02-08 20:15:56.720155","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def ascend(x):\n        if x==n:\n            return\n        else:\n            return x*ascend(x+1)\n    ascend(1)\n\n","after":null,"SubmissionTime":"2016-02-08T20:15:56.720155","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":955,"date":"2016-02-08 20:19:19.282204","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, pro = 1, 0\n    while k <= n:\n        pro, k = pro*term(k), k + 1\n    return pro\n\n","after":null,"SubmissionTime":"2016-02-08T20:19:19.282204","SynthesizedAfter":"\r\ndef product(n, term):\r\n    k, pro = 1, 1\r\n    while k<=n:\r\n        pro, k = pro*term(k), k+1\r\n    return pro","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":168,"date":"2016-02-08 20:26:07.212919","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    total =  1\n    if n < 0:\n        total = total * term(n)\n        return product(n-1,term)\n    return total\n    \n\n\n","after":null,"SubmissionTime":"2016-02-08T20:26:07.212919","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":836,"date":"2016-02-08 20:27:55.169268","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n   \n    if n < 1:\n        return\n    else:\n        product(n-1, term(n-1)) * term(n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-08T20:27:55.169268","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":168,"date":"2016-02-08 20:27:58.482007","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    \n    if n < 0:\n        \n        return term(n) * product(n-1,term)\n    \n    \n\n\n","after":null,"SubmissionTime":"2016-02-08T20:27:58.482007","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":339,"date":"2016-02-08 20:29:10.727043","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i):\n        if i==n:\n            return\n        else:\n            i=i*increment(i)\n            i+=1\n            counter(i)\n    counter(1)\n\n\n","after":null,"SubmissionTime":"2016-02-08T20:29:10.727043","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":339,"date":"2016-02-08 20:29:58.041812","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i):\n        if i==n:\n            return\n        else:\n            i=i*increment(i)\n            #i+=1\n            counter(i+1)\n    counter(1)\n\n\n","after":null,"SubmissionTime":"2016-02-08T20:29:58.041812","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":168,"date":"2016-02-08 20:30:45.650665","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    total = 1\n    while n < 0:\n        total = total * term(n)\n        n = n -1 \n\n    return total\n    \n    \n\n\n","after":null,"SubmissionTime":"2016-02-08T20:30:45.650665","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":341,"date":"2016-02-08 20:38:01.387155","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 0\n    while i < n:\n        i += 1\n        i = term(i)\n        i = i * (i-1)\n","after":null,"SubmissionTime":"2016-02-08T20:38:01.387155","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":341,"date":"2016-02-08 20:38:30.813366","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 0\n    while i < n:\n        i += 1\n        i = term(i)\n        i = i * (i-1)\n    return i\n","after":null,"SubmissionTime":"2016-02-08T20:38:30.813366","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":339,"date":"2016-02-08 20:42:37.485862","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    for i in range(n):\n        x=x*(i+1)\n    return x\n\n","after":null,"SubmissionTime":"2016-02-08T20:42:37.485862","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":333,"date":"2016-02-08 20:43:03.228485","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    while i <= n:\n        t *= term(i)\n        i+=1\n    return t\n\n","after":null,"SubmissionTime":"2016-02-08T20:43:03.228485","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":462,"date":"2016-02-08 20:46:33.827205","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return term(1)\n    else:\n        return term(n) * product(n - 1, term(n - 1))\n\n","after":null,"SubmissionTime":"2016-02-08T20:46:33.827205","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":341,"date":"2016-02-08 20:48:49.687723","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 0\n    while i < n:\n        i += 1\n        i = term(i)\n        lambda i: i * (i-1) if i > 1 else 1\n    return i\n","after":null,"SubmissionTime":"2016-02-08T20:48:49.687723","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":341,"date":"2016-02-08 20:51:26.439935","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 0\n    while i <= n:\n        i += 1\n        i = term(i)\n        lambda i: i * (i-1) if i > 1 else 1\n    return i\n","after":null,"SubmissionTime":"2016-02-08T20:51:26.439935","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":341,"date":"2016-02-08 20:52:28.387458","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 0\n    while i <= n:\n        i += 1\n        i = term(i)\n        lambda i: i * (i-1) if i > 1 else 1\n        print (i)\n    return i\n","after":null,"SubmissionTime":"2016-02-08T20:52:28.387458","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":341,"date":"2016-02-08 20:53:15.654628","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 0\n    while i <= n:\n        i += 1\n        k = term(i)\n        lambda k: k * (k-1) if i > 1 else 1\n        print (k)\n    return k\n","after":null,"SubmissionTime":"2016-02-08T20:53:15.654628","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":341,"date":"2016-02-08 20:53:39.479258","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    while i <= n:\n        k = term(i)\n        lambda k: k * (k-1) if i > 1 else 1\n        print (k)\n        i += 1\n    return k\n","after":null,"SubmissionTime":"2016-02-08T20:53:39.479258","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":341,"date":"2016-02-08 20:54:08.261416","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    if i < n:\n        k = term(i)\n        lambda k: k * (k-1) if i > 1 else 1\n        print (k)\n        i += 1\n    return k\n","after":null,"SubmissionTime":"2016-02-08T20:54:08.261416","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":341,"date":"2016-02-08 20:54:17.774713","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    while i < n:\n        k = term(i)\n        lambda k: k * (k-1) if i > 1 else 1\n        print (k)\n        i += 1\n    return k\n","after":null,"SubmissionTime":"2016-02-08T20:54:17.774713","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":341,"date":"2016-02-08 20:54:39.194053","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    while i <= n:\n        k = term(i)\n        lambda k: k * (k-1) if i > 1 else 1\n        print (k)\n        i += 1\n    return k\n","after":null,"SubmissionTime":"2016-02-08T20:54:39.194053","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":836,"date":"2016-02-08 20:54:52.236852","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def term_output(n):\n        return term(n)\n\n    if n < 1:\n        return\n    else:\n        return product(n-1, term_output(n-1)) * term_output(n)\n\n","after":null,"SubmissionTime":"2016-02-08T20:54:52.236852","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":863,"date":"2016-02-08 20:59:14.925024","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def function(n):\n        return term(n)\n    index, total = 1, 0\n    while index <= n:\n        total = total + function(n)\n        n += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-08T20:59:14.925024","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":836,"date":"2016-02-08 21:02:47.790317","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def term_output(n):\n        return term(n)\n\n\n    if n > 1:\n        return\n    else:\n        return product(n-1, term_output(n-1)) * term_output(n)\n\n\n","after":null,"SubmissionTime":"2016-02-08T21:02:47.790317","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":417,"date":"2016-02-08 21:03:22.783739","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x, result = 1, 0\n    while x <= n:\n        result = result * term(x)\n        x += 1\n    return result\n\n\n","after":null,"SubmissionTime":"2016-02-08T21:03:22.783739","SynthesizedAfter":"\r\ndef product(n, term):\r\n    x, result = 1, 1\r\n    while x<=n:\r\n        result = result*term(x)\r\n        x += 1\r\n    return result","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":699,"date":"2016-02-08 21:07:33.866577","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    while n>0:\n        return term(n)*product(n-1, term)\n    return term(n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-08T21:07:33.866577","SynthesizedAfter":"\r\ndef product(n, term):\r\n    while n>0:\r\n        return term(n)*product(n-1, term)\r\n    return term(n+1)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":554,"date":"2016-02-08 21:07:44.556896","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    i = n\n    total = 1\n    while i > 0:\n        total = total * i\n        i -= 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-08T21:07:44.556896","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":327,"date":"2016-02-08 21:08:27.301350","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k, product = 1, 1\n    while k <= n:\n        product, k = sum+term(k), k+1\n    return product\n\n    \n\n","after":null,"SubmissionTime":"2016-02-08T21:08:27.30135","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":327,"date":"2016-02-08 21:09:14.002558","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k, product = 1, 1\n    while k <= n:\n        product, k = product+term(k), k+1\n    return product\n\n    \n\n","after":null,"SubmissionTime":"2016-02-08T21:09:14.002558","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":481,"date":"2016-02-08 21:11:57.863684","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==1:\n        return n\n    else:\n        return term(n)*term(n-1)\n","after":null,"SubmissionTime":"2016-02-08T21:11:57.863684","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return n\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":325,"date":"2016-02-08 21:14:41.005062","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count = 1\n    while count <= n:\n        result *= term(count)\n        count += 1\n    return result\n\n","after":null,"SubmissionTime":"2016-02-08T21:14:41.005062","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":325,"date":"2016-02-08 21:15:11.140580","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    result = count\n    count = 1\n    while count <= n:\n        result *= term(count)\n        count += 1\n    return result\n\n","after":null,"SubmissionTime":"2016-02-08T21:15:11.14058","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":325,"date":"2016-02-08 21:15:20.355870","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    result = 0\n    count = 1\n    while count <= n:\n        result *= term(count)\n        count += 1\n    return result\n\n","after":null,"SubmissionTime":"2016-02-08T21:15:20.35587","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":910,"date":"2016-02-08 21:20:21.541208","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    k = 1\n    while k <= n:\n        total = total * term(k)\n        k = k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-08T21:20:21.541208","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":266,"date":"2016-02-08 21:24:53.388454","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def identity(x):\n        return x\n\n    ","after":null,"SubmissionTime":"2016-02-08T21:24:53.388454","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":325,"date":"2016-02-08 21:26:12.719083","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    # result = 1\n    # count = 1\n    # while count <= n:\n    #     result *= term(count)\n    #     count += 1\n    # return result\n    if n == 1:\n        return n\n    else:\n        return n * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T21:26:12.719083","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return n\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":325,"date":"2016-02-08 21:27:00.293323","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    # result = 1\n    # count = 1\n    # while count <= n:\n    #     result *= term(count)\n    #     count += 1\n    # return result\n    if n == 0:\n        return n\n    else:\n        return term(n) * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T21:27:00.293323","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":266,"date":"2016-02-08 21:27:52.314665","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + term(n), k + 1\n        n += 1\n        return total \n\n\n","after":null,"SubmissionTime":"2016-02-08T21:27:52.314665","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":525,"date":"2016-02-08 21:27:59.880900","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    product, i =1,1\n    while k<=n:\n        product,i=product*term(n),k+1\n    return product\n\n","after":null,"SubmissionTime":"2016-02-08T21:27:59.8809","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":266,"date":"2016-02-08 21:28:17.009834","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total * term(n), k + 1\n        n += 1\n        return total \n\n\n","after":null,"SubmissionTime":"2016-02-08T21:28:17.009834","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":266,"date":"2016-02-08 21:28:49.076447","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + term(k), k + 1\n        n += 1\n        return total \n\n\n","after":null,"SubmissionTime":"2016-02-08T21:28:49.076447","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":266,"date":"2016-02-08 21:28:58.097715","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total * term(k), k + 1\n        n += 1\n        return total \n\n\n","after":null,"SubmissionTime":"2016-02-08T21:28:58.097715","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":525,"date":"2016-02-08 21:29:00.847646","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    product, k =1,1\n    while k<=n:\n        product,k=product*term(n),k+1\n    return product\n\n","after":null,"SubmissionTime":"2016-02-08T21:29:00.847646","SynthesizedAfter":"\r\ndef product(n, term):\r\n    product, k = 1, 1\r\n    while k<=n:\r\n        product, k = product*term(k), k+1\r\n    return product","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":266,"date":"2016-02-08 21:29:59.341617","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + term(k), k + 1\n        k+= 1\n        return total \n\n\n","after":null,"SubmissionTime":"2016-02-08T21:29:59.341617","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":266,"date":"2016-02-08 21:30:10.635375","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + term(k), k + 1\n        return total \n\n\n","after":null,"SubmissionTime":"2016-02-08T21:30:10.635375","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":912,"date":"2016-02-08 21:30:11.588624","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return reduce(lambda o, e: o * square(e), range(1,n+1))\n\n","after":null,"SubmissionTime":"2016-02-08T21:30:11.588624","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":266,"date":"2016-02-08 21:31:02.887339","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total * term(k), k + 1\n        return total \n\n\n","after":null,"SubmissionTime":"2016-02-08T21:31:02.887339","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":266,"date":"2016-02-08 21:31:56.604881","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + term(k), k + 1\n        return total \n\n\n","after":null,"SubmissionTime":"2016-02-08T21:31:56.604881","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":266,"date":"2016-02-08 21:32:03.151587","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, k = 0, 1\n    while k < n:\n        total, k = total + term(k), k + 1\n        return total \n\n\n","after":null,"SubmissionTime":"2016-02-08T21:32:03.151587","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":266,"date":"2016-02-08 21:33:36.973368","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + term(k), k + 1\n        return total \n\n\n","after":null,"SubmissionTime":"2016-02-08T21:33:36.973368","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":266,"date":"2016-02-08 21:34:59.071634","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, k = 1, 1\n    while k <= n:\n        total, k = total * term(k), k + 1\n        return total \n\n\n","after":null,"SubmissionTime":"2016-02-08T21:34:59.071634","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":414,"date":"2016-02-08 21:35:03.959764","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x, y = 1, 1\n    while x <= n:\n        y *= term(i)\n        i += 1\n    return y\n\n","after":null,"SubmissionTime":"2016-02-08T21:35:03.959764","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return term(n)\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Target(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(LeafWildcard(\"ConstantExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-term)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-product), Children(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term)))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n))))))))))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-product), Children(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))))))))))))))))), 1), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-product, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-product, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChildren(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-product, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-product, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast)))))))))))))))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":266,"date":"2016-02-08 21:35:30.118253","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total * term(k), k + 1\n        return total \n\n\n","after":null,"SubmissionTime":"2016-02-08T21:35:30.118253","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":266,"date":"2016-02-08 21:36:13.069939","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + term(k), k + 1\n    return total \n\n\n","after":null,"SubmissionTime":"2016-02-08T21:36:13.069939","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":414,"date":"2016-02-08 21:36:14.579268","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x, y = 1, 1\n    while x <= n:\n        y *= term(i)\n        x += 1\n    return y\n\n","after":null,"SubmissionTime":"2016-02-08T21:36:14.579268","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":414,"date":"2016-02-08 21:36:21.887601","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x, y = 1, 1\n    while x < n - 1:\n        y *= term(i)\n        x += 1\n    return y\n\n","after":null,"SubmissionTime":"2016-02-08T21:36:21.887601","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":414,"date":"2016-02-08 21:36:29.941763","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x, y = 1, 1\n    while x < n - 1:\n        y *= term(x)\n        x += 1\n    return y\n\n","after":null,"SubmissionTime":"2016-02-08T21:36:29.941763","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":266,"date":"2016-02-08 21:36:31.059447","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total * term(k), k + 1\n    return total \n\n\n","after":null,"SubmissionTime":"2016-02-08T21:36:31.059447","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":414,"date":"2016-02-08 21:37:02.778389","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x, y = 1, 1\n    while x <= n:\n        y += term(x)\n        x += 1\n    return y\n\n","after":null,"SubmissionTime":"2016-02-08T21:37:02.778389","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":980,"date":"2016-02-08 21:40:08.657799","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 2:\n        return 1\n    else:\n        return n * product(n, term)\n\n","after":null,"SubmissionTime":"2016-02-08T21:40:08.657799","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":980,"date":"2016-02-08 21:40:44.847156","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 2:\n        return 1\n    else:\n        return n * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T21:40:44.847156","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n<2:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":1,"Id":0,"studentId":390,"date":"2016-02-08 21:42:23.128670","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-08T21:42:23.12867","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":910,"date":"2016-02-08 21:42:33.330109","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    k = 1\n    while k <= n:\n        total = total * term(k)\n        increment(k)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-08T21:42:33.330109","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":910,"date":"2016-02-08 21:53:06.013114","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    k = 1\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return product(n, term)\n    n += 1\n    '''while k <= n:\n        total = total * term(k)\n        k = increment(k)\n    return total'''\n\n","after":null,"SubmissionTime":"2016-02-08T21:53:06.013114","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":566,"date":"2016-02-08 21:55:40.802677","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return 1\n    return 1 * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T21:55:40.802677","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==0:\r\n        return 1\r\n    return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"ConstantExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":566,"date":"2016-02-08 21:56:17.501636","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return 1\n    return n * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T21:56:17.501636","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":77,"date":"2016-02-08 21:56:17.750982","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n<=1:\n        return 1\n    n*term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-08T21:56:17.750982","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":77,"date":"2016-02-08 21:56:37.261260","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n<=1:\n        return 1\n    return n*term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-08T21:56:37.26126","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n<=1:\r\n        return 1\r\n    return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":77,"date":"2016-02-08 21:57:02.794682","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n<=1:\n        return 1\n    return term(n-1)*term(n-2)\n\n","after":null,"SubmissionTime":"2016-02-08T21:57:02.794682","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":77,"date":"2016-02-08 21:57:20.381500","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n<=1:\n        return 1\n    return term(n)*term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-08T21:57:20.3815","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":77,"date":"2016-02-08 21:59:23.291736","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n<=1:\n        return term(n)\n    return term(n)*term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-08T21:59:23.291736","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":77,"date":"2016-02-08 21:59:54.745741","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n<=1:\n        return term(n)\n    else:\n        return term(n)*term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-08T21:59:54.745741","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":77,"date":"2016-02-08 22:01:12.980151","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n<=1:\n        return term(1)\n    else:\n        return term(n)*term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-08T22:01:12.980151","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":77,"date":"2016-02-08 22:03:35.342985","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k=1\n    while k<=n:\n        return term(n)*term(n+1)\n\n","after":null,"SubmissionTime":"2016-02-08T22:03:35.342985","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":603,"date":"2016-02-08 22:03:53.180257","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    else:\n        return n * product(n-1, term)\n        \n","after":null,"SubmissionTime":"2016-02-08T22:03:53.180257","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":77,"date":"2016-02-08 22:04:02.604810","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k=1\n    while k<n:\n        return term(n)*term(n+1)\n\n","after":null,"SubmissionTime":"2016-02-08T22:04:02.60481","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":77,"date":"2016-02-08 22:04:30.974442","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k=1\n    while k<=n:\n        return term(k)*term(k+1)\n\n","after":null,"SubmissionTime":"2016-02-08T22:04:30.974442","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":77,"date":"2016-02-08 22:05:36.503592","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n<=1:\n        return term(n)\n    else:\n        return product(n-1, term)\n  \n\n","after":null,"SubmissionTime":"2016-02-08T22:05:36.503592","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":384,"date":"2016-02-08 22:14:21.919597","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T22:14:21.919597","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return 1\r\n    else:\r\n        return product(n-1, term)*term(n)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":383,"date":"2016-02-08 22:14:21.919597","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T22:14:21.919597","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return 1\r\n    else:\r\n        return product(n-1, term)*term(n)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":384,"date":"2016-02-08 22:14:46.093783","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T22:14:46.093783","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":383,"date":"2016-02-08 22:14:46.093783","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T22:14:46.093783","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":384,"date":"2016-02-08 22:15:23.880976","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return product(n, term) * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T22:15:23.880976","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":383,"date":"2016-02-08 22:15:23.880976","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return product(n, term) * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T22:15:23.880976","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":384,"date":"2016-02-08 22:15:31.957075","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T22:15:31.957075","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":383,"date":"2016-02-08 22:15:31.957075","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T22:15:31.957075","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":383,"date":"2016-02-08 22:16:29.105782","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return term(n-1, n)\n\n","after":null,"SubmissionTime":"2016-02-08T22:16:29.105782","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":384,"date":"2016-02-08 22:16:29.105782","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return term(n-1, n)\n\n","after":null,"SubmissionTime":"2016-02-08T22:16:29.105782","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":383,"date":"2016-02-08 22:16:40.471071","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return term(n-1) * term(n)\n\n","after":null,"SubmissionTime":"2016-02-08T22:16:40.471071","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":384,"date":"2016-02-08 22:16:40.471071","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return term(n-1) * term(n)\n\n","after":null,"SubmissionTime":"2016-02-08T22:16:40.471071","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":383,"date":"2016-02-08 22:17:55.384523","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return term(n-1) * n\n\n","after":null,"SubmissionTime":"2016-02-08T22:17:55.384523","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":384,"date":"2016-02-08 22:17:55.384523","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return term(n-1) * n\n\n","after":null,"SubmissionTime":"2016-02-08T22:17:55.384523","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":384,"date":"2016-02-08 22:18:00.335461","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return term(n-1) * term(n)\n\n","after":null,"SubmissionTime":"2016-02-08T22:18:00.335461","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":383,"date":"2016-02-08 22:18:00.335461","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return term(n-1) * term(n)\n\n","after":null,"SubmissionTime":"2016-02-08T22:18:00.335461","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":384,"date":"2016-02-08 22:18:28.286484","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return term(n-1) \n\n","after":null,"SubmissionTime":"2016-02-08T22:18:28.286484","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":383,"date":"2016-02-08 22:18:28.286484","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return term(n-1) \n\n","after":null,"SubmissionTime":"2016-02-08T22:18:28.286484","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":383,"date":"2016-02-08 22:18:35.306409","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return term(n-1) * term(n)\n\n","after":null,"SubmissionTime":"2016-02-08T22:18:35.306409","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":384,"date":"2016-02-08 22:18:35.306409","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return term(n-1) * term(n)\n\n","after":null,"SubmissionTime":"2016-02-08T22:18:35.306409","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":384,"date":"2016-02-08 22:21:02.100127","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    for i in range (1,n+1):\n        prod = prod * i\n    return prod\n\n","after":null,"SubmissionTime":"2016-02-08T22:21:02.100127","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":383,"date":"2016-02-08 22:21:02.100127","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    for i in range (1,n+1):\n        prod = prod * i\n    return prod\n\n","after":null,"SubmissionTime":"2016-02-08T22:21:02.100127","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":383,"date":"2016-02-08 22:21:17.093821","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    prod = 1\n    for i in range (1,n+1):\n        prod = prod * i\n    return prod\n\n","after":null,"SubmissionTime":"2016-02-08T22:21:17.093821","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":384,"date":"2016-02-08 22:21:17.093821","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    prod = 1\n    for i in range (1,n+1):\n        prod = prod * i\n    return prod\n\n","after":null,"SubmissionTime":"2016-02-08T22:21:17.093821","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":339,"date":"2016-02-08 22:24:51.788558","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    m=1\n    def start(n, m):\n        if m>n:\n            return \n        else:\n            return m*start(n+1)\n\n\n","after":null,"SubmissionTime":"2016-02-08T22:24:51.788558","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":158,"date":"2016-02-08 22:24:51.812012","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    while n >= 1:\n        a = lambda n: term(n)\n        n -= 1\n        total = total * a\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-08T22:24:51.812012","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":120,"date":"2016-02-08 22:26:01.986078","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        result = term(1) * ... * term (n)\n        return result\n\n","after":null,"SubmissionTime":"2016-02-08T22:26:01.986078","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":120,"date":"2016-02-08 22:27:32.023238","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        result = term(1) * term(n)\n        return result\n\n","after":null,"SubmissionTime":"2016-02-08T22:27:32.023238","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":120,"date":"2016-02-08 22:27:44.443409","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        result = term(1) * term (2) * term(n)\n        return result\n\n","after":null,"SubmissionTime":"2016-02-08T22:27:44.443409","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":339,"date":"2016-02-08 22:29:11.724041","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def start(n, m):\n        if m>n:\n            return \n        else:\n            return m*start(n+1)\n\n\n","after":null,"SubmissionTime":"2016-02-08T22:29:11.724041","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":83,"date":"2016-02-08 22:29:19.968205","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, counter = 0, 1\n    while k <= n:\n        total, k =  total + term(k), k + 1\n    return total \n\n","after":null,"SubmissionTime":"2016-02-08T22:29:19.968205","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":83,"date":"2016-02-08 22:30:00.989404","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, counter = 0, 1\n    while counter <= n:\n        total, k =  total + term(k), counter + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-08T22:30:00.989404","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":83,"date":"2016-02-08 22:30:27.002442","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, counter = 0, 1\n    while counter <= n:\n        total, k =  total + term(counter), counter + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-08T22:30:27.002442","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":83,"date":"2016-02-08 22:31:52.615174","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, counter = 0, 1\n    while counter <= n:\n        total, counter =  total + term(counter), counter + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-08T22:31:52.615174","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":83,"date":"2016-02-08 22:35:25.275808","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, counter = 0, 1\n    while counter <= n:\n        total, counter =  total * term(counter), counter + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-08T22:35:25.275808","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":114,"date":"2016-02-08 22:37:08.859834","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    counter = 1\n    mul = 1\n    while current <= n:\n        num = term(current)\n        mul = mul * num \n        counter = counter + 1\n    return mul\n\n\n\n","after":null,"SubmissionTime":"2016-02-08T22:37:08.859834","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":158,"date":"2016-02-08 22:38:20.042142","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    def a(n):\n        if n <= 1:\n            return 1\n        def b(n):\n            return term(n)\n        return b(n) * b(n-1)\n    return a\n\n\n","after":null,"SubmissionTime":"2016-02-08T22:38:20.042142","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":158,"date":"2016-02-08 22:38:41.377735","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    def a(n):\n        if n <= 1:\n            return 1\n        def b(n):\n            return term(n)\n        return b(n) * b(n-1)\n    return a(n)\n\n\n","after":null,"SubmissionTime":"2016-02-08T22:38:41.377735","SynthesizedAfter":"\r\ndef product(n, term):\r\n    total = 1\r\n    def a(n):\r\n        if n<=1:\r\n            return 1\r\n        def b(n):\r\n            return term(n)\r\n        return b(n)*product(n-1, term)\r\n    return a(n)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":114,"date":"2016-02-08 22:39:19.079240","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    counter = 1\n    mul = 1\n    while counter <= n:\n        num, mul = term(counter), mul * num \n        counter = counter + 1\n    return mul\n\n","after":null,"SubmissionTime":"2016-02-08T22:39:19.07924","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":158,"date":"2016-02-08 22:42:47.616192","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    def a(n):\n        if n <= 1:\n            return 1\n        def b(n):\n            return term(n)\n        return a(b)\n    return a(n)\n\n\n","after":null,"SubmissionTime":"2016-02-08T22:42:47.616192","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":120,"date":"2016-02-08 22:45:08.963829","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        result = n * n\n        return result\n\n","after":null,"SubmissionTime":"2016-02-08T22:45:08.963829","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":120,"date":"2016-02-08 22:45:23.829235","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        result = n * term(n - 1)\n        return result\n\n","after":null,"SubmissionTime":"2016-02-08T22:45:23.829235","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":158,"date":"2016-02-08 22:45:36.764574","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    def a(n):\n        if n <= 1:\n            return 1\n        def b(n):\n            return term(n)\n        f = a(b)\n        x = f(n) * f(n - 1)\n    return a(n)\n\n\n","after":null,"SubmissionTime":"2016-02-08T22:45:36.764574","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":158,"date":"2016-02-08 22:47:03.668917","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def b(n):\n        return term(n)\n    def a(n):\n        if n <= 1:\n            return 1\n        f = a(b)\n        x = f(n) * f(n - 1)\n    return a(n)\n\n\n","after":null,"SubmissionTime":"2016-02-08T22:47:03.668917","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":834,"date":"2016-02-08 22:51:43.651744","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def product(n,term):\n        k,total = 1, 1\n        while k<=n:\n            total,k = total *term(k), k+1\n        return total\n\n\n\n","after":null,"SubmissionTime":"2016-02-08T22:51:43.651744","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":834,"date":"2016-02-08 22:55:07.948784","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def product(n,term):\n        k,total = 1, 1\n        while k<=n:\n            total,k = total * term (k), k+1\n        return total\n\n\n\n","after":null,"SubmissionTime":"2016-02-08T22:55:07.948784","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":834,"date":"2016-02-08 22:55:07.948784","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def product(n,term):\n        k,total = 1, 1\n        while k<=n:\n            total,k = total * term (k), k+1\n        return total\n\n\n\n","after":null,"SubmissionTime":"2016-02-08T22:55:07.948784","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":834,"date":"2016-02-08 22:55:32.200877","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\ndef product(n,term):\n    k,total = 1, 1\n    while k<=n:\n        total,k = total * term (k), k+1\n    return total\n\n\n\n","after":null,"SubmissionTime":"2016-02-08T22:55:32.200877","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":120,"date":"2016-02-08 22:57:54.224963","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    counter = 1\n    if n == 1:\n        return 1\n    else:\n        counter += 1\n        result = term(counter) * term(n + 1)\n    return result\n\n","after":null,"SubmissionTime":"2016-02-08T22:57:54.224963","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":120,"date":"2016-02-08 22:58:23.898205","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    counter = 1\n    if n == 1:\n        return 1\n    elif counter == n:\n        return\n    else:\n        counter += 1\n        result = term(counter) * term(n + 1)\n    return result\n\n","after":null,"SubmissionTime":"2016-02-08T22:58:23.898205","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":339,"date":"2016-02-08 22:58:32.927574","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def start(m):\n        if m>n:\n            return m\n        else:\n            m*start(n+1)\n    start(1)\n\n\n","after":null,"SubmissionTime":"2016-02-08T22:58:32.927574","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":339,"date":"2016-02-08 22:58:50.376316","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def start(m):\n        if m>n:\n            return m\n        else:\n            m=m*start(n+1)\n    start(1)\n\n\n","after":null,"SubmissionTime":"2016-02-08T22:58:50.376316","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":339,"date":"2016-02-08 22:59:12.409325","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def start(m):\n        if m>n:\n            return m\n        else:\n            return m*start(n+1)\n    start(1)\n\n\n","after":null,"SubmissionTime":"2016-02-08T22:59:12.409325","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":158,"date":"2016-02-08 23:01:11.242911","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a = lambda n: term(n)\n    b = lambda x: x * x - 1\n    c = lambda n: b(n)\n    return c\n\n","after":null,"SubmissionTime":"2016-02-08T23:01:11.242911","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":339,"date":"2016-02-08 23:01:48.175754","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def start(m):\n        if m==n:\n            return m\n        else:\n            return m*start(m+1)\n    start(1)\n\n\n","after":null,"SubmissionTime":"2016-02-08T23:01:48.175754","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":158,"date":"2016-02-08 23:01:56.579486","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a = lambda n: term(n)\n    b = lambda n: n * n - 1\n    c = lambda n: b(n)\n    return c\n\n","after":null,"SubmissionTime":"2016-02-08T23:01:56.579486","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":339,"date":"2016-02-08 23:05:59.164624","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def start(m):\n        if m>n:\n            return \n        else:\n            m=m*m+1\n            start(m)\n    start(1)\n\n\n","after":null,"SubmissionTime":"2016-02-08T23:05:59.164624","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":339,"date":"2016-02-08 23:06:28.138532","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def start(m):\n        if m>=n:\n            return n\n        else:\n            m=m*m+1\n            start(m)\n    start(1)\n\n\n","after":null,"SubmissionTime":"2016-02-08T23:06:28.138532","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":339,"date":"2016-02-08 23:10:41.993976","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def start(m):\n        if m>=n:\n            return n\n        else:\n            m=m*(m+1)\n            start(m)\n    start(1)\n\n\n","after":null,"SubmissionTime":"2016-02-08T23:10:41.993976","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":773,"date":"2016-02-08 23:12:37.644047","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return term(n)\n\n","after":null,"SubmissionTime":"2016-02-08T23:12:37.644047","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":834,"date":"2016-02-08 23:14:46.424171","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\ndef product(n,term):\n    k,total = 1, 1\n    while k<=n:\n        total,k = total * term (k), k+1\n    return total\n\n\n\n","after":null,"SubmissionTime":"2016-02-08T23:14:46.424171","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":212,"date":"2016-02-08 23:17:53.084166","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    total = 0\n    if x < n:\n        total = total * term(x + 1)\n    else:\n        return total\n\n","after":null,"SubmissionTime":"2016-02-08T23:17:53.084166","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":773,"date":"2016-02-08 23:19:56.686493","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return product(term(n), term)\n\n","after":null,"SubmissionTime":"2016-02-08T23:19:56.686493","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":773,"date":"2016-02-08 23:20:36.501149","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return product(term(n-1), term)\n\n","after":null,"SubmissionTime":"2016-02-08T23:20:36.501149","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":212,"date":"2016-02-08 23:21:41.913789","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n > 1:\n        return term(x) * product(n - 1, term)\n    else:\n        return term(1)    \n\n","after":null,"SubmissionTime":"2016-02-08T23:21:41.913789","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":212,"date":"2016-02-08 23:24:07.454240","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 0\n    if x < n:\n        return term(x) * product(x + 1, term)\n        x += 1\n    else:\n        return term(n)    \n\n","after":null,"SubmissionTime":"2016-02-08T23:24:07.45424","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":212,"date":"2016-02-08 23:27:18.542026","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    total = term(x)\n    while x < (n - 1):\n        total = total * total(x + 1)\n        x += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-08T23:27:18.542026","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":212,"date":"2016-02-08 23:27:30.594591","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    total = term(x)\n    while x < (n - 1):\n        total = total * term(x + 1)\n        x += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-08T23:27:30.594591","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":773,"date":"2016-02-08 23:30:23.997368","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if (n==1): return 1\n    return n*product(term(n-1))\n\n","after":null,"SubmissionTime":"2016-02-08T23:30:23.997368","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":134,"date":"2016-02-08 23:31:51.212482","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n ==0:\n        return\n    else:\n        return n * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T23:31:51.212482","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":212,"date":"2016-02-08 23:32:39.503128","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 0:\n        return term(n - (n-1)) * product((n - 1), term)\n    else:\n        return term(1)\n\n","after":null,"SubmissionTime":"2016-02-08T23:32:39.503128","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":212,"date":"2016-02-08 23:32:47.030483","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return term(n - (n-1)) * product((n - 1), term)\n    else:\n        return term(1)\n\n","after":null,"SubmissionTime":"2016-02-08T23:32:47.030483","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":212,"date":"2016-02-08 23:33:31.259912","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return term(n) * product((n - 1), term)\n    else:\n        return term(1)\n\n","after":null,"SubmissionTime":"2016-02-08T23:33:31.259912","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":328,"date":"2016-02-08 23:39:11.221882","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = 0\n    while k < n:\n        k += 1\n        term(k)*term(k+1)\n        return product(n, term)\n\n\n","after":null,"SubmissionTime":"2016-02-08T23:39:11.221882","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":328,"date":"2016-02-08 23:42:01.565039","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = 0\n    while k < n:\n        k += 1\n        term(k)*term(k+1)\n        return product(k, term)\n\n\n","after":null,"SubmissionTime":"2016-02-08T23:42:01.565039","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":773,"date":"2016-02-08 23:43:00.866256","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    j = 1\n    for i in range(1, n):\n    \tj*=term(n)\n    return j\n\n","after":null,"SubmissionTime":"2016-02-08T23:43:00.866256","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":773,"date":"2016-02-08 23:43:23.326059","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    j = 1\n    for i in range(2, n):\n    \tj*=term(n)\n    return j\n\n","after":null,"SubmissionTime":"2016-02-08T23:43:23.326059","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":773,"date":"2016-02-08 23:43:42.554891","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    j = 1\n    for i in range(1, n):\n    \tj*=term(n)\n    return j\n\n","after":null,"SubmissionTime":"2016-02-08T23:43:42.554891","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":773,"date":"2016-02-08 23:44:09.330737","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    j = 1\n    for i in range(1, n):\n    \tj*=term(i)\n    return j\n\n","after":null,"SubmissionTime":"2016-02-08T23:44:09.330737","SynthesizedAfter":"\r\ndef product(n, term):\r\n    j = 1\r\n    for i in range(1, n):\r\n        j *= term(i+1)\r\n    return j","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":328,"date":"2016-02-08 23:45:55.148590","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = 0\n    while k < n:\n        k += 1\n        return k* product(k+1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-08T23:45:55.14859","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":329,"date":"2016-02-08 23:49:26.703560","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return n\n    else:\n        return n * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T23:49:26.70356","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return n\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":329,"date":"2016-02-08 23:55:57.722811","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return n\n    else:\n        return n * product(n+1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T23:55:57.722811","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":329,"date":"2016-02-08 23:56:20.545809","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return n\n    else:\n        return n * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-08T23:56:20.545809","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":329,"date":"2016-02-09 00:04:29.862723","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k=1\n    total=1\n    while k <= n:\n        total = total * term(n)\n        k += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-09T00:04:29.862723","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":329,"date":"2016-02-09 00:04:29.862723","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k=1\n    total=1\n    while k <= n:\n        total = total * term(n)\n        k += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-09T00:04:29.862723","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":329,"date":"2016-02-09 00:06:16.489378","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return n\n    else:\n        return n * product(n-1, term(n))\n\n","after":null,"SubmissionTime":"2016-02-09T00:06:16.489378","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1045,"date":"2016-02-09 00:08:20.335198","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count = 1\n    total = 0\n    while count <= n:\n        total *= term(count)\n\n    return total\n\n","after":null,"SubmissionTime":"2016-02-09T00:08:20.335198","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":339,"date":"2016-02-09 00:08:43.873555","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def start(m):\n        if m > n:\n            return\n        else:\n            mul(m,m+1)\n            m+=1\n            start(m)\n    start(1)\n\n\n","after":null,"SubmissionTime":"2016-02-09T00:08:43.873555","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1045,"date":"2016-02-09 00:08:44.751578","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count = 1\n    total = 0\n    while count <= n:\n        total *= term(count)\n        count += 1\n\n    return total\n\n","after":null,"SubmissionTime":"2016-02-09T00:08:44.751578","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":339,"date":"2016-02-09 00:09:06.067269","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def start(m):\n        if m > n:\n            return m\n        else:\n            mul(m,m+1)\n            m+=1\n            start(m)\n    start(1)\n\n\n","after":null,"SubmissionTime":"2016-02-09T00:09:06.067269","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":339,"date":"2016-02-09 00:09:06.067269","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def start(m):\n        if m > n:\n            return m\n        else:\n            mul(m,m+1)\n            m+=1\n            start(m)\n    start(1)\n\n\n","after":null,"SubmissionTime":"2016-02-09T00:09:06.067269","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":329,"date":"2016-02-09 00:09:31.491546","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return n\n    else:\n        return n * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-09T00:09:31.491546","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":339,"date":"2016-02-09 00:12:25.733914","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def start(m):\n        if m > n:\n            return 25\n        else:\n            m+=1\n            start(m)\n    start(1)\n\n\n","after":null,"SubmissionTime":"2016-02-09T00:12:25.733914","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":280,"date":"2016-02-09 00:18:50.535817","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count = 1\n    for i in range(1, n+1):\n        count == term(i)\n        i += 1\n        count *= count\n    return count\n\n\n","after":null,"SubmissionTime":"2016-02-09T00:18:50.535817","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":280,"date":"2016-02-09 00:21:08.742831","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count = 1\n    for i in range(1, n+1):\n        count == term(i)\n        i += 1\n        return count == count * count\n    return count\n\n\n","after":null,"SubmissionTime":"2016-02-09T00:21:08.742831","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":280,"date":"2016-02-09 00:22:17.998797","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count = term(1)\n    for i in range(1, n+1):\n        num == term(i)\n        i += 1\n        return count == count * num\n    return count\n\n\n","after":null,"SubmissionTime":"2016-02-09T00:22:17.998797","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":280,"date":"2016-02-09 00:22:35.936153","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count = term(1)\n    for i in range(1, n+1):\n        num = term(i)\n        i += 1\n        return count == count * num\n    return count\n\n\n","after":null,"SubmissionTime":"2016-02-09T00:22:35.936153","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":332,"date":"2016-02-09 00:23:11.772377","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x , total = 0 , 0\n    while n > x:\n        total = total + term(x) \n        x += 1\n    return total \n\n","after":null,"SubmissionTime":"2016-02-09T00:23:11.772377","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":280,"date":"2016-02-09 00:23:51.962055","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count = term(1)\n    for i in range(1, n+1):\n        num = term(i)\n        count == count * num\n        i += 1\n    return count\n\n\n","after":null,"SubmissionTime":"2016-02-09T00:23:51.962055","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":332,"date":"2016-02-09 00:24:55.467895","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x , total = 0 , 0\n    while n > x:\n        total = total * term(x) \n        x += 1\n    return total \n\n","after":null,"SubmissionTime":"2016-02-09T00:24:55.467895","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":332,"date":"2016-02-09 00:25:08.373684","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x , total = 1 , 0\n    while n > x:\n        total = total * term(x) \n        x += 1\n    return total \n\n","after":null,"SubmissionTime":"2016-02-09T00:25:08.373684","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":332,"date":"2016-02-09 00:25:16.253165","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x , total = 0 , 1\n    while n > x:\n        total = total * term(x) \n        x += 1\n    return total \n\n","after":null,"SubmissionTime":"2016-02-09T00:25:16.253165","SynthesizedAfter":"\r\ndef product(n, term):\r\n    x, total = 0, 1\r\n    while n>x:\r\n        total = total*term(x+1)\r\n        x += 1\r\n    return total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":332,"date":"2016-02-09 00:25:30.322171","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x , total = 1 , 1\n    while n > x:\n        total = total * term(x) \n        x += 1\n    return total \n\n","after":null,"SubmissionTime":"2016-02-09T00:25:30.322171","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":71,"date":"2016-02-09 02:40:00.368825","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    prod = 0\n    while i < n + 1:\n        prod += term(i)\n        i += 1\n    return prod\n\n","after":null,"SubmissionTime":"2016-02-09T02:40:00.368825","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":737,"date":"2016-02-09 06:35:18.996025","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return identity\n\n","after":null,"SubmissionTime":"2016-02-09T06:35:18.996025","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":737,"date":"2016-02-09 06:36:58.631735","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return product(n, identity)\n\n","after":null,"SubmissionTime":"2016-02-09T06:36:58.631735","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":737,"date":"2016-02-09 06:38:09.524984","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    while i<n:\n        i+=1\n    return product(n, identity)\n\n","after":null,"SubmissionTime":"2016-02-09T06:38:09.524984","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":737,"date":"2016-02-09 06:38:50.157086","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i=1\n    while i<n:\n        i+=1\n    return product(n, identity)\n\n","after":null,"SubmissionTime":"2016-02-09T06:38:50.157086","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":737,"date":"2016-02-09 06:49:09.846812","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i=1\n    while i<n:\n        term= identity(i)\n    return term\n\nidentity= lambda c: c\n","after":null,"SubmissionTime":"2016-02-09T06:49:09.846812","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":737,"date":"2016-02-09 06:50:16.435179","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return n * term(n-1)\n\nidentity= lambda c: c\n","after":null,"SubmissionTime":"2016-02-09T06:50:16.435179","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":737,"date":"2016-02-09 06:50:57.698740","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return n * identity(n-1)\n\nidentity= lambda c: c\n","after":null,"SubmissionTime":"2016-02-09T06:50:57.69874","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":737,"date":"2016-02-09 06:51:22.482529","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return identity(n) * identity(n-1)\n\nidentity= lambda c: c\n","after":null,"SubmissionTime":"2016-02-09T06:51:22.482529","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":737,"date":"2016-02-09 06:54:36.946093","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i=1\n    while i<n:\n        i+=1\n    return identity(i) * identity(i+1)\n\n\nidentity= lambda c: c\n","after":null,"SubmissionTime":"2016-02-09T06:54:36.946093","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":737,"date":"2016-02-09 06:56:05.836704","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return n* term(n-1)\n\n\nidentity= lambda c: c\n","after":null,"SubmissionTime":"2016-02-09T06:56:05.836704","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":737,"date":"2016-02-09 06:56:28.243747","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return n* term(n+1)\n\n\nidentity= lambda c: c\n","after":null,"SubmissionTime":"2016-02-09T06:56:28.243747","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":737,"date":"2016-02-09 06:56:42.953873","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return term(n)* term(n+1)\n\n\nidentity= lambda c: c\n","after":null,"SubmissionTime":"2016-02-09T06:56:42.953873","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":387,"date":"2016-02-09 07:47:43.374723","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total * term(k), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-09T07:47:43.374723","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":23,"date":"2016-02-09 08:15:47.201416","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n\n\n    result = 0\n    num = n\n    if n <= 1:\n        return 1\n    else:\n        while num > 0:\n            result = result * term(n)\n            n = n + 1\n            num = num - 1\n\n            return result\n\n","after":null,"SubmissionTime":"2016-02-09T08:15:47.201416","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":23,"date":"2016-02-09 08:16:05.105440","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n\n\n    result = 1\n    num = n\n    if n <= 1:\n        return 1\n    else:\n        while num > 0:\n            result = result * term(n)\n            n = n + 1\n            num = num - 1\n\n            return result\n\n","after":null,"SubmissionTime":"2016-02-09T08:16:05.10544","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":737,"date":"2016-02-09 08:16:30.468461","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return mul(term(n),term(n+1))\n\n\nidentity= lambda c: c\n","after":null,"SubmissionTime":"2016-02-09T08:16:30.468461","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":737,"date":"2016-02-09 08:16:46.599773","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return mul(n,term(n))\n\n\nidentity= lambda c: c\n","after":null,"SubmissionTime":"2016-02-09T08:16:46.599773","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":737,"date":"2016-02-09 08:16:59.807364","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return mul(n, identity)\n\n\nidentity= lambda c: c\n","after":null,"SubmissionTime":"2016-02-09T08:16:59.807364","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":23,"date":"2016-02-09 08:17:11.351229","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n\n\n    result = 1\n    num = n + 1    \n    while num > 0:\n            result = result * term(n)\n            n = n + 1\n            num = num - 1\n\n            return result\n\n","after":null,"SubmissionTime":"2016-02-09T08:17:11.351229","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":737,"date":"2016-02-09 08:17:23.604478","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return mul(n, term(n))\n\n\nidentity= lambda c: c\n","after":null,"SubmissionTime":"2016-02-09T08:17:23.604478","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":23,"date":"2016-02-09 08:17:26.799112","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n\n\n    result = 1\n    num = n    \n    while num >= 0:\n            result = result * term(n)\n            n = n + 1\n            num = num - 1\n\n            return result\n\n","after":null,"SubmissionTime":"2016-02-09T08:17:26.799112","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":737,"date":"2016-02-09 08:17:35.172469","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return mul(n, term)\n\n\nidentity= lambda c: c\n","after":null,"SubmissionTime":"2016-02-09T08:17:35.172469","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":23,"date":"2016-02-09 08:17:47.293284","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n\n\n    result = 1\n    num = n    \n    while num >= 0:\n            result = result * term(n)\n            n = n + 1\n            num = num - 1\n\n    return result\n\n","after":null,"SubmissionTime":"2016-02-09T08:17:47.293284","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":737,"date":"2016-02-09 08:17:54.849747","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    term= identity(n)\n    return mul(n, term)\n\n\nidentity= lambda c: c\n","after":null,"SubmissionTime":"2016-02-09T08:17:54.849747","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":23,"date":"2016-02-09 08:18:03.991240","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n\n\n    result = 1\n    num = n    \n    while num > 0:\n            result = result * term(n)\n            n = n + 1\n            num = num - 1\n\n    return result\n\n","after":null,"SubmissionTime":"2016-02-09T08:18:03.99124","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":737,"date":"2016-02-09 08:19:39.049281","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i=1\n    while i<n:\n        i+=1\n    return product\n\n\nidentity= lambda c: c\n","after":null,"SubmissionTime":"2016-02-09T08:19:39.049281","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":304,"date":"2016-02-09 08:21:28.399182","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = 1\n    product = term(k)\n    while k <= n:\n        k += 1\n        product = product * term(k)\n    return product\n\n","after":null,"SubmissionTime":"2016-02-09T08:21:28.399182","SynthesizedAfter":"\r\ndef product(n, term):\r\n    k = 1\r\n    product = term(k)\r\n    while k<n:\r\n        k += 1\r\n        product = product*term(k)\r\n    return product","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThan, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":304,"date":"2016-02-09 08:22:52.132478","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = 0\n    product = term(k)\n    while k <= n:\n        k += 1\n        product = product * term(k)\n    return product\n\n","after":null,"SubmissionTime":"2016-02-09T08:22:52.132478","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":23,"date":"2016-02-09 08:27:14.653736","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        result = result * term(n-1)\n    return result\n\n\n    result = 1\n    \n    number = 1    \n    while n > 0:\n            result = result * term(number)\n            number = number + 1\n            n = n - 1\n\n    return result\n\n","after":null,"SubmissionTime":"2016-02-09T08:27:14.653736","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":23,"date":"2016-02-09 08:28:27.709914","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        result = n * term(n-1)\n        \n\n    return result\n\n\n    result = 1\n    \n    number = 1    \n    while n > 0:\n            result = result * term(number)\n            number = number + 1\n            n = n - 1\n\n    return result\n\n","after":null,"SubmissionTime":"2016-02-09T08:28:27.709914","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":23,"date":"2016-02-09 08:28:46.449986","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    result = 1\n    if n == 0:\n        return 1\n    else:\n        \n        result = n * term(n-1)\n\n\n    return result\n\n\n    result = 1\n    \n    number = 1    \n    while n > 0:\n            result = result * term(number)\n            number = number + 1\n            n = n - 1\n\n    return result\n\n","after":null,"SubmissionTime":"2016-02-09T08:28:46.449986","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":134,"date":"2016-02-09 08:39:31.421062","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n ==0:\n        return\n    else:\n        return term(x) * product(n-1, term(x))\n\n","after":null,"SubmissionTime":"2016-02-09T08:39:31.421062","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":134,"date":"2016-02-09 08:39:56.948609","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n ==0:\n        return\n    else:\n        return term() * product(n-1, term())\n\n","after":null,"SubmissionTime":"2016-02-09T08:39:56.948609","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":711,"date":"2016-02-09 08:56:03.327537","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n<=0:\n        return 1\n    return n*product(n-1,term)\n\n","after":null,"SubmissionTime":"2016-02-09T08:56:03.327537","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n<=0:\r\n        return 1\r\n    return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":128,"date":"2016-02-09 09:07:04.745292","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    counter=1\n    if (counter==n):\n        return\n    else:\n        return term(n)* product(increment(counter), term)\n\n","after":null,"SubmissionTime":"2016-02-09T09:07:04.745292","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":97,"date":"2016-02-09 09:15:44.781369","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def times(x):\n        if x==n:\n            return 1\n        else:\n            return term(x)*times(increment(x))\n    return times(1)\n\n","after":null,"SubmissionTime":"2016-02-09T09:15:44.781369","SynthesizedAfter":"\r\ndef product(n, term):\r\n    def times(x):\r\n        if x==n:\r\n            return 1\r\n        else:\r\n            return term(x+1)*times(increment(x))\r\n    return times(1)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":97,"date":"2016-02-09 09:18:04.902954","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def times(x):\n        if x==n:\n            return n\n        else:\n            return term(x)*times(increment(x))\n    return times(1)\n\n","after":null,"SubmissionTime":"2016-02-09T09:18:04.902954","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":364,"date":"2016-02-09 09:26:01.358201","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return 0\n    else:\n        return term(n) * term(n - 1)\n \nprint(product(3, identity))\n\n","after":null,"SubmissionTime":"2016-02-09T09:26:01.358201","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":364,"date":"2016-02-09 09:35:05.077893","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    else:\n        print(term(n))\n        return term(n) * product(n-1, term)\n \nprint(product(4, identity))\n\n","after":null,"SubmissionTime":"2016-02-09T09:35:05.077893","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":339,"date":"2016-02-09 09:37:51.157126","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def start(m, accum):\n        if m > n:\n            return accum\n        else:\n            return start(m+1, accum*m)\n    start(1,0)\n\n\n","after":null,"SubmissionTime":"2016-02-09T09:37:51.157126","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":339,"date":"2016-02-09 09:38:26.564679","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def start(m, accum):\n        if m > n:\n            return accum\n        else:\n            return start(m+1, accum*m)\n    start(1,1)\n\n\n","after":null,"SubmissionTime":"2016-02-09T09:38:26.564679","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":339,"date":"2016-02-09 09:40:39.198296","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def start(m, accum):\n        if m<=n:\n            return start(m+1, accum*m)\n        else:\n            return accum\n    start(1,1)\n\n\n","after":null,"SubmissionTime":"2016-02-09T09:40:39.198296","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":339,"date":"2016-02-09 09:41:57.689807","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def start(m, accum):\n        if m<=n:\n            return start(m+1, accum*(m+1))\n        else:\n            return accum\n    start(1,1)\n\n\n","after":null,"SubmissionTime":"2016-02-09T09:41:57.689807","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":246,"date":"2016-02-09 10:04:23.708605","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(n)\n    else:\n        return term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-09T10:04:23.708605","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":931,"date":"2016-02-09 10:14:14.825236","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a=1\n    while a<=n:\n        return term(a)*term(a+1)\n        a+=1\n\n","after":null,"SubmissionTime":"2016-02-09T10:14:14.825236","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":339,"date":"2016-02-09 10:14:30.455217","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def start(m, accum):\n        if m<n:\n            return start(m+1, accum*(m+1))\n        else:\n            return accum\n    start(1,1)\n\n\n","after":null,"SubmissionTime":"2016-02-09T10:14:30.455217","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":931,"date":"2016-02-09 10:16:38.421634","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a=1\n    while a<=n:\n        total=total*term(a)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-09T10:16:38.421634","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":931,"date":"2016-02-09 10:17:23.161883","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a=1\n    total=1\n    while a<=n:\n        total=total*term(a)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-09T10:17:23.161883","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":499,"date":"2016-02-09 10:28:24.055775","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-09T10:28:24.055775","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":17,"date":"2016-02-09 10:30:43.980641","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    while n > 0:\n        term(n) * product(term(n-1))\n        \n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-09T10:30:43.980641","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":17,"date":"2016-02-09 10:31:06.432770","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    while n > 0:\n        term(n) * product(term(n-1), term)\n\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-09T10:31:06.43277","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":721,"date":"2016-02-09 10:31:18.185107","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i, total = 1, 0\n    while i <= n:\n        total = total * term(i)\n        i += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-09T10:31:18.185107","SynthesizedAfter":"\r\ndef product(n, term):\r\n    i, total = 1, 1\r\n    while i<=n:\r\n        total = total*term(i)\r\n        i += 1\r\n    return total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":17,"date":"2016-02-09 10:33:30.167711","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total * term(k), k * 1\n    return total\n\n    \"\"\"while n > 0:\n        term(n) * product(term(n-1), term)\"\"\"\n\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-09T10:33:30.167711","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":17,"date":"2016-02-09 10:33:46.655294","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total * term(k), k + 1\n    return total\n\n    \"\"\"while n > 0:\n        term(n) * product(term(n-1), term)\"\"\"\n\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-09T10:33:46.655294","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":341,"date":"2016-02-09 10:35:34.644842","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        n = term(n)\n        return n * (n-1)\n","after":null,"SubmissionTime":"2016-02-09T10:35:34.644842","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":341,"date":"2016-02-09 10:36:14.228836","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        n = term(n)\n        k = n * (n-1)\n    return k\n","after":null,"SubmissionTime":"2016-02-09T10:36:14.228836","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":341,"date":"2016-02-09 10:36:47.532127","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        n = term(n)\n        k = n * (n-1)\n        n-=1\n    return k\n","after":null,"SubmissionTime":"2016-02-09T10:36:47.532127","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":341,"date":"2016-02-09 10:36:47.532127","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        n = term(n)\n        k = n * (n-1)\n        n-=1\n    return k\n","after":null,"SubmissionTime":"2016-02-09T10:36:47.532127","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":128,"date":"2016-02-09 10:42:05.802008","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    if (n==0):\n        return\n    else:\n        return term(n)* product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-09T10:42:05.802008","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if (n==1):\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, LeafConstNode(ConstantExpressionNode-1), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":423,"date":"2016-02-09 10:43:05.137180","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    Term(*n)\n\n","after":null,"SubmissionTime":"2016-02-09T10:43:05.13718","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":423,"date":"2016-02-09 10:43:11.210453","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return Term(*n)\n\n","after":null,"SubmissionTime":"2016-02-09T10:43:11.210453","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":423,"date":"2016-02-09 10:44:11.873665","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==1:\n        return 1\n    else:\n        return n+ term(*n-1)\n\n","after":null,"SubmissionTime":"2016-02-09T10:44:11.873665","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":423,"date":"2016-02-09 10:45:45.417263","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==1:\n        return term(1)\n    else:\n        return n+ term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-09T10:45:45.417263","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":423,"date":"2016-02-09 10:45:45.417263","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==1:\n        return term(1)\n    else:\n        return n+ term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-09T10:45:45.417263","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":423,"date":"2016-02-09 10:45:59.750960","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==1:\n        return term(1)\n    else:\n        return term(n)+ term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-09T10:45:59.75096","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":341,"date":"2016-02-09 10:46:18.617431","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return term(n) * fact(term(n-1))\n\n","after":null,"SubmissionTime":"2016-02-09T10:46:18.617431","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":341,"date":"2016-02-09 10:46:28.804354","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return term(n) * product(term(n-1))\n\n","after":null,"SubmissionTime":"2016-02-09T10:46:28.804354","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":423,"date":"2016-02-09 10:46:32.797845","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==1:\n        return term(1)\n    else:\n        return term(term(n)+ term(n-1))\n\n","after":null,"SubmissionTime":"2016-02-09T10:46:32.797845","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":423,"date":"2016-02-09 10:46:32.797845","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==1:\n        return term(1)\n    else:\n        return term(term(n)+ term(n-1))\n\n","after":null,"SubmissionTime":"2016-02-09T10:46:32.797845","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":426,"date":"2016-02-09 10:46:40.796902","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(1)\n    else:\n        return term(n) + term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-09T10:46:40.796902","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":423,"date":"2016-02-09 10:46:45.739760","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==1:\n        return term(1)\n    else:\n        return term(n)+ term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-09T10:46:45.73976","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":423,"date":"2016-02-09 10:47:23.738629","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==1:\n        return term(1)\n    else:\n        return term(n)* term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-09T10:47:23.738629","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return term(1)\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":426,"date":"2016-02-09 10:47:26.752594","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(1)\n    else:\n        return term(n) * term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-09T10:47:26.752594","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return term(1)\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":423,"date":"2016-02-09 10:48:17.721712","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==1:\n        return term(1)\n    else:\n        return term(n)* term(n-1)*term(1)\n\n","after":null,"SubmissionTime":"2016-02-09T10:48:17.721712","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":423,"date":"2016-02-09 10:48:30.163939","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==1:\n        return term(1)\n    else:\n        return term(n)* term(n-1)*5\n\n","after":null,"SubmissionTime":"2016-02-09T10:48:30.163939","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":863,"date":"2016-02-09 10:48:43.406562","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def function(n):\n        return term(n)\n    index, total = 1, 0\n    while index <= n:\n        total = total + function(n)\n        index += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-09T10:48:43.406562","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":423,"date":"2016-02-09 10:48:44.124941","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==1:\n        return term(1)\n    else:\n        return term(n)* term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-09T10:48:44.124941","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":423,"date":"2016-02-09 10:48:59.197810","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==1:\n        return term(1)\n    else:\n        return term(n)* term(n-1)+term(n)\n\n","after":null,"SubmissionTime":"2016-02-09T10:48:59.19781","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":863,"date":"2016-02-09 10:49:07.870391","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def function(n):\n        return term(n)\n    index, total = 1, 0\n    while index <= n:\n        total = total * function(n)\n        index += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-09T10:49:07.870391","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":423,"date":"2016-02-09 10:49:17.224309","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==1:\n        return term(1)\n    else:\n        return term(n) * term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-09T10:49:17.224309","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":863,"date":"2016-02-09 10:49:17.676882","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def function(n):\n        return term(n)\n    index, total = 1, 1\n    while index <= n:\n        total = total * function(n)\n        index += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-09T10:49:17.676882","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":423,"date":"2016-02-09 10:49:40.213380","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n<=1:\n        return term(1)\n    else:\n        return term(n) * term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-09T10:49:40.21338","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":426,"date":"2016-02-09 10:50:21.006610","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(1)\n    else:\n        return term(n) * product(n-1)\n\n","after":null,"SubmissionTime":"2016-02-09T10:50:21.00661","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":423,"date":"2016-02-09 10:50:25.024213","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n<=1:\n        return term(1)\n    else:\n        return term(n) * product(n-1)\n\n","after":null,"SubmissionTime":"2016-02-09T10:50:25.024213","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":423,"date":"2016-02-09 10:50:36.010405","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n<=1:\n        return term(1)\n    else:\n        return product(n,term) * product(n-1,term)\n\n","after":null,"SubmissionTime":"2016-02-09T10:50:36.010405","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":339,"date":"2016-02-09 10:54:48.655114","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def start(m, accum):\n        if m==n:\n            return accum\n        else:\n            m+=1\n            return start(m, accum*m)\n    return start(1,1)\n\n\n","after":null,"SubmissionTime":"2016-02-09T10:54:48.655114","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":134,"date":"2016-02-09 11:06:19.892156","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n ==0:\n        return\n    else:\n        return term * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-09T11:06:19.892156","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":237,"date":"2016-02-09 11:25:47.571595","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    m = 1\n    while m <= n:\n        total += (m*(m-1))\n        m += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-09T11:25:47.571595","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":237,"date":"2016-02-09 11:29:40.089255","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    m = 1\n    while m <= n:\n        total = (total*m)\n        m += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-09T11:29:40.089255","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":272,"date":"2016-02-09 11:30:31.830854","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i = 1\n    product = 1\n    while i <= n:\n        product *= i\n    return product\n\n","after":null,"SubmissionTime":"2016-02-09T11:30:31.830854","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":272,"date":"2016-02-09 11:31:03.257755","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i = 1\n    product = 1\n    while i <= n:\n        product *= i\n        i += 1\n    return product\n\n","after":null,"SubmissionTime":"2016-02-09T11:31:03.257755","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":981,"date":"2016-02-09 11:57:21.069678","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if(n == 1):\n        return 1\n    return term*product(n-1, term-1)\n\n","after":null,"SubmissionTime":"2016-02-09T11:57:21.069678","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":981,"date":"2016-02-09 12:00:03.364550","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if(n == 1):\n        return 1\n    return term * product(n-1, term-1)\n\n","after":null,"SubmissionTime":"2016-02-09T12:00:03.36455","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":981,"date":"2016-02-09 12:00:45.829286","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if(n == 1):\n        return 1\n    return product(n-1, term-1)*term\n\n","after":null,"SubmissionTime":"2016-02-09T12:00:45.829286","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":981,"date":"2016-02-09 12:04:59.150684","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if(n == 1):\n        return 1\n    return product(n-1, term(n-1))*term(n)\n\n","after":null,"SubmissionTime":"2016-02-09T12:04:59.150684","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":981,"date":"2016-02-09 12:11:25.740232","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if(n == 1):\n        return 1\n    return product(n-1, term)*term\n\n","after":null,"SubmissionTime":"2016-02-09T12:11:25.740232","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":981,"date":"2016-02-09 12:12:19.459473","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if(n == k):\n        return 1\n    return product(k, term(n))*term\n\n","after":null,"SubmissionTime":"2016-02-09T12:12:19.459473","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":981,"date":"2016-02-09 12:12:37.531245","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k=1\n    if(n == k):\n        return 1\n    return product(k+1, term(n))*term\n\n","after":null,"SubmissionTime":"2016-02-09T12:12:37.531245","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":930,"date":"2016-02-09 12:33:00.269984","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return term(1)\n    else:\n        return term(n) + product(n - 1)\n","after":null,"SubmissionTime":"2016-02-09T12:33:00.269984","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":930,"date":"2016-02-09 12:33:29.387146","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return term(1)\n    else:\n        return term(n) + product(n - 1, term)\n","after":null,"SubmissionTime":"2016-02-09T12:33:29.387146","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":124,"date":"2016-02-09 12:55:09.812860","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, n = 0, n-1\n    while n > 0:\n        total = total + term (n-1)\n    return product(n, term)\n\n","after":null,"SubmissionTime":"2016-02-09T12:55:09.81286","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":981,"date":"2016-02-09 13:00:33.133970","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k=1\n    if(n == k):\n        return 1\n    return product(k+1, term(n-1))*term(n)\n\n","after":null,"SubmissionTime":"2016-02-09T13:00:33.13397","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":791,"date":"2016-02-09 13:59:21.999775","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-09T13:59:21.999775","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":738,"date":"2016-02-09 14:09:17.290808","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def awkward_product(x, term, y):\n        if y>x:\n            return 1\n        else:\n            return term(x) * awkward_product(x, term, y+1)\n    return awkward_product(n, term, 0)\n\n","after":null,"SubmissionTime":"2016-02-09T14:09:17.290808","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":738,"date":"2016-02-09 14:12:33.477060","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def awkward_product(x, term, n):\n        if x>n:\n            return n\n        else:\n            return term(1) * awkward_product(x+1, term, n)\n    return awkward_product(1, term, n)\n\n","after":null,"SubmissionTime":"2016-02-09T14:12:33.47706","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":738,"date":"2016-02-09 14:13:35.666875","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def awkward_product(x, term, n):\n        if x>n:\n            return n\n        else:\n            return term(x) * awkward_product(x+1, term, n)\n    return awkward_product(1, term, n)\n\n","after":null,"SubmissionTime":"2016-02-09T14:13:35.666875","SynthesizedAfter":"\r\ndef product(n, term):\r\n    def awkward_product(x, term, n):\r\n        if x>n:\r\n            return 1\r\n        else:\r\n            return term(x)*awkward_product(x+1, term, n)\r\n    return awkward_product(1, term, n)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, LeafConstNode(ConstantExpressionNode-1), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":738,"date":"2016-02-09 14:13:55.626724","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def awkward_product(x, term, n):\n        if x>n:\n            return term(x)\n        else:\n            return term(x) * awkward_product(x+1, term, n)\n    return awkward_product(1, term, n)\n\n","after":null,"SubmissionTime":"2016-02-09T14:13:55.626724","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":738,"date":"2016-02-09 14:14:45.911882","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def awkward_product(x, term, n):\n        if x>n:\n            return term(x)\n        else:\n            print (boo)\n            return term(x) * awkward_product(x+1, term, n)\n    return awkward_product(1, term, n)\n\n","after":null,"SubmissionTime":"2016-02-09T14:14:45.911882","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":738,"date":"2016-02-09 14:14:53.941831","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def awkward_product(x, term, n):\n        if x>n:\n            return term(x)\n        else:\n            print ('boo')\n            return term(x) * awkward_product(x+1, term, n)\n    return awkward_product(1, term, n)\n\n","after":null,"SubmissionTime":"2016-02-09T14:14:53.941831","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":738,"date":"2016-02-09 14:15:18.668158","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def awkward_product(x, term, n):\n        if x>n:\n            return term(x)\n        else:\n            print (x)\n            return term(x) * awkward_product(x+1, term, n)\n    return awkward_product(1, term, n)\n\n","after":null,"SubmissionTime":"2016-02-09T14:15:18.668158","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":738,"date":"2016-02-09 14:16:16.994067","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def awkward_product(x, term, n):\n        if x>n:\n            return term(x)\n        else:\n            print (x)\n            return mul(term(x), awkward_product(x+1, term, n))\n    return awkward_product(1, term, n)\n\n","after":null,"SubmissionTime":"2016-02-09T14:16:16.994067","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":679,"date":"2016-02-09 14:28:39.530060","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    trial, result = 1, 1\n    while trial <= n:\n        result = result * trial\n        trial = trial + 1\n    return result\n\n","after":null,"SubmissionTime":"2016-02-09T14:28:39.53006","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":981,"date":"2016-02-09 14:38:52.550267","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(x):\n        if(n == x):\n            return 1\n        return x*helper(x+1)\n    return helper(1)\n\n","after":null,"SubmissionTime":"2016-02-09T14:38:52.550267","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":981,"date":"2016-02-09 14:39:12.965587","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(x):\n        if(n == x):\n            return x\n        return x*helper(x+1)\n    return helper(1)\n\n","after":null,"SubmissionTime":"2016-02-09T14:39:12.965587","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":981,"date":"2016-02-09 14:42:58.216505","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(x):\n        if(n == x):\n            return term(x)\n        return x*helper(x+1)\n    return helper(1)\n\n","after":null,"SubmissionTime":"2016-02-09T14:42:58.216505","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":981,"date":"2016-02-09 14:44:30.393254","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(x):\n        if(n == x):\n            return term(n)\n        return term(x)*helper(x+1)\n\n\n","after":null,"SubmissionTime":"2016-02-09T14:44:30.393254","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":981,"date":"2016-02-09 14:45:13.372350","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(x):\n        if(n == x):\n            return term(n)\n        return term(x+1)*helper(x+1)\n    return helper(1)\n\n\n","after":null,"SubmissionTime":"2016-02-09T14:45:13.37235","SynthesizedAfter":"\r\ndef product(n, term):\r\n    def helper(x):\r\n        if (n==x):\r\n            return 1\r\n        return term(x+1)*helper(x+1)\r\n    return helper(1)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, LeafConstNode(ConstantExpressionNode-1), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":981,"date":"2016-02-09 14:46:08.431691","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(x):\n        if(n == x):\n            return term(x)\n        return term(x+1)*helper(x+1)\n    return helper(0)\n\n\n","after":null,"SubmissionTime":"2016-02-09T14:46:08.431691","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":112,"date":"2016-02-09 14:49:55.271962","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a = 1\n    while a <= n:\n        Product = a * product(a+1,term)\n    return Product\n\n","after":null,"SubmissionTime":"2016-02-09T14:49:55.271962","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":960,"date":"2016-02-09 14:53:30.747834","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    thing = 1\n    while i != n:\n        thing *= term(i)\n        i += 1\n    return thing\n\n","after":null,"SubmissionTime":"2016-02-09T14:53:30.747834","SynthesizedAfter":"\r\ndef product(n, term):\r\n    i = 1\r\n    thing = 1\r\n    while i!=n:\r\n        thing *= term(i+1)\r\n        i += 1\r\n    return thing","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":112,"date":"2016-02-09 14:54:27.332037","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a = 1\n    while a <= n:\n        Product = a * product(a+1,term)\n        a += 1\n    return Product\n\n","after":null,"SubmissionTime":"2016-02-09T14:54:27.332037","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":112,"date":"2016-02-09 14:56:57.762375","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a = 1\n    Product = term(a)\n    while a <= n:\n        Product = Product * term(a+1)\n        a += 1\n    return Product\n\n","after":null,"SubmissionTime":"2016-02-09T14:56:57.762375","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":298,"date":"2016-02-09 14:59:41.886227","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, total = 1, 0\n    while k < n:\n        total = total + term(k)\n        k += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-09T14:59:41.886227","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":298,"date":"2016-02-09 15:00:27.876174","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, total = 1, 0\n    while k <= n:\n        total = total + term(k)\n        k += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-09T15:00:27.876174","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":147,"date":"2016-02-09 15:09:30.187280","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    result=1\n    while n<0:\n        result= result*term(n)\n        n-=1\n    return result\n\n","after":null,"SubmissionTime":"2016-02-09T15:09:30.18728","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":147,"date":"2016-02-09 15:10:35.377875","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    result=1\n    while n>0:\n        result= result*term(n)\n        n-=1\n    return resultcd\n\n","after":null,"SubmissionTime":"2016-02-09T15:10:35.377875","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":841,"date":"2016-02-09 15:20:29.183995","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    while x<n: \n        n=X+1 \n        return product\n\n","after":null,"SubmissionTime":"2016-02-09T15:20:29.183995","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":841,"date":"2016-02-09 15:21:39.342095","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    while x<n: \n        x=X+1 \n        return product\n\n","after":null,"SubmissionTime":"2016-02-09T15:21:39.342095","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":841,"date":"2016-02-09 15:21:56.530384","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    while x<n: \n        x=X+1 \n        return product(n,term)\n\n","after":null,"SubmissionTime":"2016-02-09T15:21:56.530384","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":841,"date":"2016-02-09 15:22:46.862744","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=0\n    while x<n: \n        x=X+1 \n        term(x)\n    return product(n,term)\n\n","after":null,"SubmissionTime":"2016-02-09T15:22:46.862744","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":841,"date":"2016-02-09 15:23:07.805329","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x==0\n    while x<n: \n        x=X+1 \n        term(x)\n    return product(n,term)\n\n","after":null,"SubmissionTime":"2016-02-09T15:23:07.805329","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":841,"date":"2016-02-09 15:24:29.588469","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=0\n    while x<n: \n        x=X+1 \n        term(x)\n    return product(n,term)\n\n","after":null,"SubmissionTime":"2016-02-09T15:24:29.588469","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":841,"date":"2016-02-09 15:25:30.674365","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    while n>0: \n        n=n+1 \n        term(n)\n    return product(n,term)\n\n","after":null,"SubmissionTime":"2016-02-09T15:25:30.674365","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":841,"date":"2016-02-09 15:26:57.694792","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    while x<n:\n        x=0 \n        x=x+1 \n        term(x)\n    return product(n,term)\n\n","after":null,"SubmissionTime":"2016-02-09T15:26:57.694792","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":126,"date":"2016-02-09 15:27:25.825163","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(1)\n    else:\n        term(n) * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-09T15:27:25.825163","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return term(1)\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(ReturnStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":841,"date":"2016-02-09 15:27:32.164395","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    while p<n:\n        p=0 \n        p=p+1 \n        term(p)\n    return product(n,term)\n\n","after":null,"SubmissionTime":"2016-02-09T15:27:32.164395","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":176,"date":"2016-02-09 15:31:37.572150","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def prod(k,ans):\n        if k == n-1:\n            return ans\n        else:\n            ans *= term(ans)\n            return prod(k+1,ans)\n    return prod(1,1)\n\n","after":null,"SubmissionTime":"2016-02-09T15:31:37.57215","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":176,"date":"2016-02-09 15:32:24.170201","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def prod(k,ans):\n        if k == n:\n            return ans\n        else:\n            ans *= term(ans)\n            return prod(k+1,ans)\n    return prod(1,1)\n\n","after":null,"SubmissionTime":"2016-02-09T15:32:24.170201","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":176,"date":"2016-02-09 15:32:48.724500","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def prod(k,ans):\n        if k == n:\n            return ans\n        else:\n            ans *= term(k)\n            return prod(k+1,ans)\n    return prod(1,1)\n\n","after":null,"SubmissionTime":"2016-02-09T15:32:48.7245","SynthesizedAfter":"\r\ndef product(n, term):\r\n    def prod(k, ans):\r\n        if k==n:\r\n            return ans\r\n        else:\r\n            ans *= term(k+1)\r\n            return prod(k+1, ans)\r\n    return prod(1, 1)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":431,"date":"2016-02-09 15:35:04.527585","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = 0\n    sum = 1\n    while k < n:\n        sum = sum * term(k)\n        k += 1\n    return sum\n\n\n","after":null,"SubmissionTime":"2016-02-09T15:35:04.527585","SynthesizedAfter":"\r\ndef product(n, term):\r\n    k = 0\r\n    sum = 1\r\n    while k<n:\r\n        sum = sum*term(k+1)\r\n        k += 1\r\n    return sum","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":841,"date":"2016-02-09 15:35:15.289598","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k=1 \n    while k<n: \n        k=k+1\n        total= term(k)\n    return total \n","after":null,"SubmissionTime":"2016-02-09T15:35:15.289598","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":841,"date":"2016-02-09 15:36:41.681671","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k=0\n    while k<n: \n        k=k+1\n        total= term(k)\n    return total\n","after":null,"SubmissionTime":"2016-02-09T15:36:41.681671","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":841,"date":"2016-02-09 15:38:53.922033","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k=0\n    while k<n: \n        k=k+1\n        term(k)\n    return term(k)\n","after":null,"SubmissionTime":"2016-02-09T15:38:53.922033","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":7,"date":"2016-02-09 15:40:27.703572","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, k=0,1\n    while k<=n:\n        total=total*term(k)\n        k+=1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-09T15:40:27.703572","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":442,"date":"2016-02-09 15:42:40.902041","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    x = term(n)\n    while n > 0:\n        n -= 1\n    total += x\n    return total\n\n","after":null,"SubmissionTime":"2016-02-09T15:42:40.902041","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":27,"date":"2016-02-09 15:57:00.013695","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    while n > 1:\n        total += term(n)\n        n -= 1\n    return total\n    \n","after":null,"SubmissionTime":"2016-02-09T15:57:00.013695","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":27,"date":"2016-02-09 15:58:33.224544","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    while n > 1:\n        total *= term(n)\n        n -= 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-09T15:58:33.224544","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":76,"date":"2016-02-09 16:03:22.220212","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i, product = 1, 0\n    def helper(n,i,term):\n        if n == i:\n            return term(i)\n        product += term(i)\n        i += 1\n    return helper(n,i,term)\n\n","after":null,"SubmissionTime":"2016-02-09T16:03:22.220212","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":264,"date":"2016-02-09 16:03:26.390277","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==0:\n        return term(0)\n    return term(n) + term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-09T16:03:26.390277","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":76,"date":"2016-02-09 16:03:57.332974","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i, product = 1, 0\n    def helper(n,i,term, product):\n        if n == i:\n            return term(i)\n        product += term(i)\n        i += 1\n    return helper(n,i,term)\n\n","after":null,"SubmissionTime":"2016-02-09T16:03:57.332974","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":76,"date":"2016-02-09 16:04:13.693940","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i, product = 1, 0\n    def helper(n,i,term, product):\n        if n == i:\n            return term(i)\n        product += term(i)\n        i += 1\n    return helper(n,i,term,product)\n\n","after":null,"SubmissionTime":"2016-02-09T16:04:13.69394","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":264,"date":"2016-02-09 16:04:41.309023","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==0:\n        return term(0)\n    return term(n) + product(n-1)\n\n","after":null,"SubmissionTime":"2016-02-09T16:04:41.309023","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":264,"date":"2016-02-09 16:04:59.456556","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==0:\n        return term(0)\n    return term(n) + product(n-1,term)\n\n","after":null,"SubmissionTime":"2016-02-09T16:04:59.456556","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":264,"date":"2016-02-09 16:05:43.912999","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==0:\n        return term(0)\n    return term(n) * product(n-1,term)\n\n","after":null,"SubmissionTime":"2016-02-09T16:05:43.912999","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return 1\r\n    return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, LeafConstNode(ConstantExpressionNode-1), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":447,"date":"2016-02-09 16:19:17.861470","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k, result = 1, 0\n    while k <= n:\n        k, result = k + 1, term(k)\n    return result\n\n","after":null,"SubmissionTime":"2016-02-09T16:19:17.86147","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":124,"date":"2016-02-09 16:20:02.928794","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, n = 0, n-1\n    while n > 0:\n        total = total + term (n-1)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-09T16:20:02.928794","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":447,"date":"2016-02-09 16:20:18.257603","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k, result = 1, 0\n    while k <= n:\n        k, result = k + 1, result * term(k)\n    return result\n\n","after":null,"SubmissionTime":"2016-02-09T16:20:18.257603","SynthesizedAfter":"\r\ndef product(n, term):\r\n    k, result = 1, 1\r\n    while k<=n:\r\n        k, result = k+1, result*term(k)\r\n    return result","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":124,"date":"2016-02-09 16:23:18.709480","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    while n > 0:\n        total = total * term (n)\n        n -= 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-09T16:23:18.70948","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":713,"date":"2016-02-09 16:33:24.271634","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 1\n    return n * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-09T16:33:24.271634","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==0:\r\n        return 1\r\n    return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":334,"date":"2016-02-09 16:41:09.365160","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k = 1\n    if k == n:\n        return term(n)\n    else:\n        return term(k) * product(k + 1)\n\n","after":null,"SubmissionTime":"2016-02-09T16:41:09.36516","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":334,"date":"2016-02-09 16:42:32.248109","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k = 1\n    if k == n:\n        return term(n)\n    else:\n        return term(k) * product(k + 1, term)\n\n","after":null,"SubmissionTime":"2016-02-09T16:42:32.248109","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":334,"date":"2016-02-09 16:43:18.403122","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k = 1\n    if k == n:\n        return term(k)\n    else:\n        return term(k) * product(k + 1, term)\n\n","after":null,"SubmissionTime":"2016-02-09T16:43:18.403122","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":561,"date":"2016-02-09 16:43:44.716492","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==0:\n        return 0\n    elif n==1:\n        return term(1)\n    else:\n        return term(n) + product(n-1, term)\n\n    \n\n","after":null,"SubmissionTime":"2016-02-09T16:43:44.716492","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==0:\r\n        return 0\r\n    elif n==1:\r\n        return term(1)\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":574,"date":"2016-02-09 16:54:45.609518","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(i=1):\n        if i == n:\n            return\n        return term(i) * helper(i + 1)\n    return helper()\n\n\n","after":null,"SubmissionTime":"2016-02-09T16:54:45.609518","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":574,"date":"2016-02-09 16:55:05.248007","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(i=1):\n        if i == n:\n            return 1\n        return term(i) * helper(i + 1)\n    return helper()\n\n\n","after":null,"SubmissionTime":"2016-02-09T16:55:05.248007","SynthesizedAfter":"\r\ndef product(n, term):\r\n    def helper(i = 1):\r\n        if i==n:\r\n            return 1\r\n        return term(i+1)*helper(i+1)\r\n    return helper()","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":165,"date":"2016-02-09 17:02:49.215782","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=1\n    total=1\n    while x<n:\n        total=total*term(x)\n        x+=1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-09T17:02:49.215782","SynthesizedAfter":"\r\ndef product(n, term):\r\n    x = 1\r\n    total = 1\r\n    while x<n:\r\n        total = total*term(x+1)\r\n        x += 1\r\n    return total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":322,"date":"2016-02-09 17:23:07.870998","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return term(n - 1) * term(n)\n\n","after":null,"SubmissionTime":"2016-02-09T17:23:07.870998","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":322,"date":"2016-02-09 17:24:43.161750","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return n\n    else:\n        return term(n - 1) * term(n)\n\n","after":null,"SubmissionTime":"2016-02-09T17:24:43.16175","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":322,"date":"2016-02-09 17:25:21.875094","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return n\n    else:\n        return term(n) * term(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-09T17:25:21.875094","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return n\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":322,"date":"2016-02-09 17:26:01.812071","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return n\n    else:\n        return term(n) * product(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-09T17:26:01.812071","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":322,"date":"2016-02-09 17:26:12.728586","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return term(n) * product(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-09T17:26:12.728586","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":322,"date":"2016-02-09 17:26:26.752987","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return term(n) * product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-09T17:26:26.752987","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":498,"date":"2016-02-09 17:28:55.375204","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i, total = 1, 1\n    while i < n:\n        total = total * term(i)\n        i += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-09T17:28:55.375204","SynthesizedAfter":"\r\ndef product(n, term):\r\n    i, total = 1, 1\r\n    while i<n:\r\n        total = total*term(i+1)\r\n        i += 1\r\n    return total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":37,"date":"2016-02-09 17:34:18.293776","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    counter =1\n    result = term(n)\n    while counter <= n:\n        result = result * term(n)\n    counter +=1\n    return result\n\n","after":null,"SubmissionTime":"2016-02-09T17:34:18.293776","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":157,"date":"2016-02-09 17:38:58.602801","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n < 1:\n        return n\n    else:\n        return product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-09T17:38:58.602801","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":157,"date":"2016-02-09 17:40:16.247242","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return n\n    else:\n        return product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-09T17:40:16.247242","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":157,"date":"2016-02-09 17:40:34.796303","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return \n    else:\n        return product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-09T17:40:34.796303","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":157,"date":"2016-02-09 17:41:09.857308","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n < 0:\n        return \n    else:\n        return product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-09T17:41:09.857308","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":157,"date":"2016-02-09 17:43:53.303657","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    else:\n        return product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-09T17:43:53.303657","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return 1\r\n    else:\r\n        return product(n-1, term)*term(n)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":157,"date":"2016-02-09 17:44:29.326717","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return product(n, term)\n    else:\n        return product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-09T17:44:29.326717","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":157,"date":"2016-02-09 17:44:47.066732","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return product(1, term)\n    else:\n        return product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-09T17:44:47.066732","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":157,"date":"2016-02-09 17:45:47.843208","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    else:\n        return product(n, term) * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-09T17:45:47.843208","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":157,"date":"2016-02-09 17:46:17.670914","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    else:\n        return term(n)*term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-09T17:46:17.670914","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":37,"date":"2016-02-09 17:53:14.912352","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    while n >= 1:\n        return term(n) * term(n-i)\n    i =+1\n\n","after":null,"SubmissionTime":"2016-02-09T17:53:14.912352","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":37,"date":"2016-02-09 17:56:48.382091","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    for i in range (1, n):\n        return term(n) * term(n-i)\n    i =+1\n\n","after":null,"SubmissionTime":"2016-02-09T17:56:48.382091","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":37,"date":"2016-02-09 18:00:26.331047","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    while n <= i:\n        result *= term(i)\n    return result\n    i =+1\n\n","after":null,"SubmissionTime":"2016-02-09T18:00:26.331047","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":37,"date":"2016-02-09 18:01:10.400539","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    result= term(n)\n    while n <= i:\n        results *= term(i)\n    return result\n    i =+1\n\n","after":null,"SubmissionTime":"2016-02-09T18:01:10.400539","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":37,"date":"2016-02-09 18:05:08.934103","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <=n:\n        total, k = total + k*k, k+1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-09T18:05:08.934103","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":37,"date":"2016-02-09 18:05:34.577429","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <=n:\n        total, k = total + k*k, k-1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-09T18:05:34.577429","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":37,"date":"2016-02-09 18:06:38.220601","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <=n:\n        total, k = total + k*n, k+1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-09T18:06:38.220601","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":37,"date":"2016-02-09 18:09:49.118294","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <=n:\n        total, k = total * k, k+1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-09T18:09:49.118294","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":469,"date":"2016-02-09 18:14:29.472957","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i == 1\n    if i < n:\n        return term(i) * product(i+1, term)\n\n\n\n","after":null,"SubmissionTime":"2016-02-09T18:14:29.472957","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":37,"date":"2016-02-09 18:14:52.577989","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, 1\n    while k <=n:\n        total, k = total * term(k,1), k+1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-09T18:14:52.577989","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":469,"date":"2016-02-09 18:15:26.097783","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i = 1\n    if i < n:\n        return term(i) * product(i+1, term)\n\n\n\n","after":null,"SubmissionTime":"2016-02-09T18:15:26.097783","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":37,"date":"2016-02-09 18:15:29.809517","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, total = 1, 1\n    while k <=n:\n        k, total = k + 1, total * term(k,1)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-09T18:15:29.809517","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":442,"date":"2016-02-09 18:16:25.787339","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    while n > 0:\n        x = product(n, term)\n        total += x\n        n -= 1\n    return total\n   \n\n\n","after":null,"SubmissionTime":"2016-02-09T18:16:25.787339","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":442,"date":"2016-02-09 18:17:27.315176","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    while n > 0:\n        x = term(n)\n        total += x\n        n -= 1\n    return total\n   \n\n\n","after":null,"SubmissionTime":"2016-02-09T18:17:27.315176","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":442,"date":"2016-02-09 18:17:27.315176","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    while n > 0:\n        x = term(n)\n        total += x\n        n -= 1\n    return total\n   \n\n\n","after":null,"SubmissionTime":"2016-02-09T18:17:27.315176","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":442,"date":"2016-02-09 18:18:18.209690","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = n\n    while n > 0:\n        x = term(n)\n        total *= x\n        n -= 1\n    return total\n   \n\n\n","after":null,"SubmissionTime":"2016-02-09T18:18:18.20969","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":442,"date":"2016-02-09 18:18:41.648677","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    x = term(n)\n    while n > 0:\n        n -= 1\n    total += x\n    return total\n\n","after":null,"SubmissionTime":"2016-02-09T18:18:41.648677","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":442,"date":"2016-02-09 18:20:24.222046","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = term(n)\n    while n > 0:\n        total = x * term(n-1)\n        n -= 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-09T18:20:24.222046","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":766,"date":"2016-02-09 19:02:41.251197","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-09T19:02:41.251197","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":421,"date":"2016-02-09 19:13:18.759910","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    result = 1\n    while n > 0:\n        result *= n\n        n -= 1\n    return result\n\n","after":null,"SubmissionTime":"2016-02-09T19:13:18.75991","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1047,"date":"2016-02-09 19:20:21.336486","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    m = 1\n    def outcome(n, term):\n        if m == n:\n            return term(m)\n        else:\n            return term(m) * outcome(m + 1, term)\n    return outcome\n\n","after":null,"SubmissionTime":"2016-02-09T19:20:21.336486","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1047,"date":"2016-02-09 19:23:17.997232","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return\n    else:\n        return term(n) * product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-09T19:23:17.997232","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, LeafConstNode(ConstantExpressionNode-1), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":305,"date":"2016-02-09 19:36:52.406624","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k=0,1\n    while k <= n:\n        total, k = total + term, k + 1\n    return total\n\n    \n\n","after":null,"SubmissionTime":"2016-02-09T19:36:52.406624","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":305,"date":"2016-02-09 19:40:20.468643","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k=1\n    while k < 1:\n        total, k = total * term(i), k + 1\n    return total\n\n    \n\n","after":null,"SubmissionTime":"2016-02-09T19:40:20.468643","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":305,"date":"2016-02-09 19:40:47.094976","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k=1\n    while k <= 1:\n        total, k = total * term(k), k + 1\n    return total\n\n    \n\n","after":null,"SubmissionTime":"2016-02-09T19:40:47.094976","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":305,"date":"2016-02-09 19:41:08.392566","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1\n    while k <= 1:\n        total, k = total * term(k), k + 1\n    return total\n\n    \n\n","after":null,"SubmissionTime":"2016-02-09T19:41:08.392566","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":305,"date":"2016-02-09 19:41:19.787615","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    k = 1\n    while k <= 1:\n        total, k = total * term(k), k + 1\n    return total\n\n    \n\n","after":null,"SubmissionTime":"2016-02-09T19:41:19.787615","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":305,"date":"2016-02-09 19:42:17.382435","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    k = 1\n    while k <= 1:\n        total = total * term(k)\n        k = k + 1\n    return total\n\n    \n\n","after":null,"SubmissionTime":"2016-02-09T19:42:17.382435","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":280,"date":"2016-02-09 20:12:00.428805","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count = 0\n    for i in range(1, n+1):\n        num = term(i)\n        count = count * num\n        increment(i)\n    return count\n\n\n","after":null,"SubmissionTime":"2016-02-09T20:12:00.428805","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":280,"date":"2016-02-09 20:13:42.445306","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count = 0\n    i = 1\n    while i <= n:\n        count = count * term(i)\n        increment(i)\n    return count\n\n\n","after":null,"SubmissionTime":"2016-02-09T20:13:42.445306","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":280,"date":"2016-02-09 20:14:19.855077","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count = 1\n    i = 1\n    while i <= n:\n        count = count * term(i)\n        increment(i)\n    return count\n\n\n","after":null,"SubmissionTime":"2016-02-09T20:14:19.855077","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":781,"date":"2016-02-09 20:20:24.518623","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if i==n:\n        return term(i)\n    else:\n        return term(i) * product(i+1, term)\n\n","after":null,"SubmissionTime":"2016-02-09T20:20:24.518623","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":781,"date":"2016-02-09 20:22:35.790396","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def product_helper(i):\n        if i==n:\n            return term(i)\n        else:\n            return term(i) * product_helper(i+1, term)\n    return product_helper(1, term)\n\n","after":null,"SubmissionTime":"2016-02-09T20:22:35.790396","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":781,"date":"2016-02-09 20:22:52.786705","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def product_helper(i):\n        if i==n:\n            return term(i)\n        else:\n            return term(i) * product_helper(i+1, term)\n    return product_helper(1)\n\n","after":null,"SubmissionTime":"2016-02-09T20:22:52.786705","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":352,"date":"2016-02-09 20:27:49.501333","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total *= term(k)\n        k += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-09T20:27:49.501333","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return term(n)\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(Target(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Target(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(LeafWildcard(\"ConstantExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), Tutor.synthesis.MagicK), 1), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-term)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-product), Children(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term)))))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Target(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n))))))))))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-product), Children(ConstNode(ArgNode, SingleChild(ConstNode(BinaryExpressionNode-Subtract, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))))), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))))))))))))))))), 1), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-product, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Target(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-product, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChildren(Target(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-product, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-product, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))), TChildren(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast)))))))))))))))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":522,"date":"2016-02-09 20:50:16.221180","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==0:\n        return 0\n    return term(n)+product(n-1)\n\n","after":null,"SubmissionTime":"2016-02-09T20:50:16.22118","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":522,"date":"2016-02-09 20:50:51.011903","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==0:\n        return 0\n    return term(n)+product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-09T20:50:51.011903","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":522,"date":"2016-02-09 20:51:17.697987","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==0:\n        return 0\n    return term(n)*product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-09T20:51:17.697987","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return 1\r\n    return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, LeafConstNode(ConstantExpressionNode-1), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":522,"date":"2016-02-09 20:53:15.231735","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return\n    if n==0:\n        return 0\n    return term(n)*product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-09T20:53:15.231735","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":718,"date":"2016-02-09 20:54:52.377825","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1;\n    for i in range(1,n):\n        total = total*term(i)\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-09T20:54:52.377825","SynthesizedAfter":"\r\ndef product(n, term):\r\n    total = 1\r\n    for i in range(1, n):\r\n        total = total*term(i+1)\r\n    return total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":874,"date":"2016-02-09 20:56:31.259296","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(n)\n    else:\n        return term(n) + product(n-1, term)    \n\n","after":null,"SubmissionTime":"2016-02-09T20:56:31.259296","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return term(n)\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":718,"date":"2016-02-09 20:56:40.406508","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1;\n    for i in range(1,n):\n        total = total*term(i)\n        i+=1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-09T20:56:40.406508","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":718,"date":"2016-02-09 20:56:40.406508","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1;\n    for i in range(1,n):\n        total = total*term(i)\n        i+=1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-09T20:56:40.406508","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":170,"date":"2016-02-09 20:57:01.713409","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i=0\n    total=0\n    while i<n:\n        i+=1\n        total=total+term(i)\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-09T20:57:01.713409","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":170,"date":"2016-02-09 20:57:41.070962","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i=0\n    total=0\n    while i<n:\n        i+=1\n        total=total*term(i)\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-09T20:57:41.070962","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":718,"date":"2016-02-09 20:57:51.517922","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1;\n    while i<=n:\n        total = total*term(i)\n        i+=1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-09T20:57:51.517922","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":504,"date":"2016-02-09 21:04:13.607576","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return term(n) * term (n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-09T21:04:13.607576","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==0:\r\n        return 0\r\n    elif n==1:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":504,"date":"2016-02-09 21:05:31.551583","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        print (term(n))\n        return term(n) * term (n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-09T21:05:31.551583","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":504,"date":"2016-02-09 21:06:09.368782","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        while n > 1:\n            return term(n) * term (n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-09T21:06:09.368782","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":504,"date":"2016-02-09 21:09:25.820301","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        while n > 1:\n            product = term(n) * term (n-1)\n            n -= 1\n\n\n","after":null,"SubmissionTime":"2016-02-09T21:09:25.820301","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":504,"date":"2016-02-09 21:09:42.854378","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        while n > 1:\n            product = term(n) * term (n-1)\n            n -= 1\n            return product\n\n\n","after":null,"SubmissionTime":"2016-02-09T21:09:42.854378","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":178,"date":"2016-02-09 21:13:18.236770","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if (n == 0):\n        return 0\n    else:\n        return term(n) + product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-09T21:13:18.23677","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":178,"date":"2016-02-09 21:14:20.178934","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if (n == 0):\n        return 0\n    else:\n        return term(n) * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-09T21:14:20.178934","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if (n==1):\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, LeafConstNode(ConstantExpressionNode-1), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":848,"date":"2016-02-09 21:15:06.686141","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    def product_counter(i):\n        result = 0\n        if i == n:\n            return term(n)\n        else:\n            result += term(i)\n            return result * product_counter()\n    # i = 1\n    # while i < n:\n    #     term(i)\n\n","after":null,"SubmissionTime":"2016-02-09T21:15:06.686141","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":848,"date":"2016-02-09 21:15:41.518221","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    def product_counter(i):\n        result = 0\n        if i == n:\n            return term(n)\n        else:\n            result += term(i)\n            return result * product_counter()\n    return product_counter(i)\n    # i = 1\n    # while i < n:\n    #     term(i)\n\n","after":null,"SubmissionTime":"2016-02-09T21:15:41.518221","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":693,"date":"2016-02-09 21:18:17.671140","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def helper_product(k, term):\n        if k>n:\n            return 1\n        else:\n            return term(1) * helper_product(k+1, term)\n    return helper_product(1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-09T21:18:17.67114","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":334,"date":"2016-02-09 21:21:40.752611","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return 0\n    else:\n        return term(n) * product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-09T21:21:40.752611","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, LeafConstNode(ConstantExpressionNode-1), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":18,"date":"2016-02-09 21:25:16.591616","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return \n    else:\n        return term(n) * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-09T21:25:16.591616","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, LeafConstNode(ConstantExpressionNode-1), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":442,"date":"2016-02-09 21:26:54.667939","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(n)\n    else: \n        term(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-09T21:26:54.667939","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":442,"date":"2016-02-09 21:27:47.071777","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = term(n)\n    if n == 1:\n        return x\n    else: \n        while n > 1:\n            x *= term(n - 1)\n    return x\n\n\n","after":null,"SubmissionTime":"2016-02-09T21:27:47.071777","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":442,"date":"2016-02-09 21:28:15.569927","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = term(n)\n    if n == 1:\n        return x\n    else: \n        while n >= 1:\n            x *= term(n - 1)\n    return x\n\n\n","after":null,"SubmissionTime":"2016-02-09T21:28:15.569927","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":442,"date":"2016-02-09 21:31:05.531552","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = term(n)\n    if n == 1:\n        return x\n    else: \n        while n >= 1:\n            x *= term(n)\n            n -= 1\n    return x\n\n\n","after":null,"SubmissionTime":"2016-02-09T21:31:05.531552","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":658,"date":"2016-02-09 21:32:38.821447","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    while n > 0:\n        total = total * n\n        n -= 1\n\n    return total \n\n\n","after":null,"SubmissionTime":"2016-02-09T21:32:38.821447","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":442,"date":"2016-02-09 21:34:34.547341","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = term(n)\n    while n >= 1:\n        n -= 1\n        x *= term(n)\n    return x\n\n\n","after":null,"SubmissionTime":"2016-02-09T21:34:34.547341","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":459,"date":"2016-02-09 21:48:20.947986","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, i = 1, 1\n    while i<=n:\n        total = total*i \n        i+=1\n    return total \n\n\n","after":null,"SubmissionTime":"2016-02-09T21:48:20.947986","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":319,"date":"2016-02-09 22:22:57.376188","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-09T22:22:57.376188","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":319,"date":"2016-02-09 22:24:19.486115","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    else:\n        return term(n, product(n-1, term))\n    \n","after":null,"SubmissionTime":"2016-02-09T22:24:19.486115","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":326,"date":"2016-02-09 22:35:03.675583","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a = 1\n    while n > 1:\n        a  = a * product(n,term)\n        n = n - 1\n    if n == 1:\n        return a\n\n\n","after":null,"SubmissionTime":"2016-02-09T22:35:03.675583","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":11,"date":"2016-02-09 22:53:32.348103","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 0\n    return term * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-09T22:53:32.348103","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==0:\r\n        return 1\r\n    return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, LeafConstNode(ConstantExpressionNode-1), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":464,"date":"2016-02-09 23:13:53.068765","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def recursion(n, func):\n        if n == 1:\n            return func(1)\n        else:\n            return (recursion(n-1)+func(n))\n\n    return recursion(n,term)\n\n","after":null,"SubmissionTime":"2016-02-09T23:13:53.068765","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":545,"date":"2016-02-09 23:14:11.129689","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    while n >= 1:\n        total = term(n)\n        n -= 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-09T23:14:11.129689","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":464,"date":"2016-02-09 23:15:47.680087","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def recursion(n, func):\n        if n == 1:\n            return func(1)\n        else:\n            return (recursion((n-1)+func(n),func))\n\n    return recursion(n,term)\n\n","after":null,"SubmissionTime":"2016-02-09T23:15:47.680087","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":545,"date":"2016-02-09 23:17:47.925062","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    while n >= 1:\n        total += term(n)\n        n -= 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-09T23:17:47.925062","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":545,"date":"2016-02-09 23:17:56.953357","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    while n >= 1:\n        total *= term(n)\n        n -= 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-09T23:17:56.953357","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":464,"date":"2016-02-09 23:23:15.109988","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(n)\n    else:\n        return product(n-1,term) + term(n)    \n\n","after":null,"SubmissionTime":"2016-02-09T23:23:15.109988","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":526,"date":"2016-02-09 23:40:41.726791","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-09T23:40:41.726791","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":526,"date":"2016-02-09 23:43:21.514409","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==1:\n        return 1\n    else:\n        return 1 * product(n-1,term)\n\n\n\n","after":null,"SubmissionTime":"2016-02-09T23:43:21.514409","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"ConstantExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":526,"date":"2016-02-09 23:44:19.967885","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==1:\n        return 1\n    else:\n        return product(n-2,term) * product(n-1,term)\n\n\n\n","after":null,"SubmissionTime":"2016-02-09T23:44:19.967885","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":526,"date":"2016-02-09 23:47:36.232393","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, 1\n    while k <= n:\n        total = total * n\n        n = n-1\n        return total\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-09T23:47:36.232393","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":526,"date":"2016-02-09 23:47:43.832555","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, 1\n    while k < n:\n        total = total * n\n        n = n-1\n        return total\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-09T23:47:43.832555","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":526,"date":"2016-02-09 23:48:30.462409","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, 1\n    while k < n:\n        total = total * n\n        k = k+1\n        return total\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-09T23:48:30.462409","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":526,"date":"2016-02-09 23:49:04.168369","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, 1\n    while k < n:\n        total = total * n\n        n = n-1\n        return total\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-09T23:49:04.168369","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":526,"date":"2016-02-10 00:02:13.438710","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, 1\n    while k < n:\n        total = total * k\n        k = k+1\n        return total\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-10T00:02:13.43871","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":526,"date":"2016-02-10 00:02:28.867254","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, 1\n    while k < n:\n        total = total * n\n        n = n-1\n        return total\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-10T00:02:28.867254","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":526,"date":"2016-02-10 00:04:52.976526","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, 1\n    while k <= n:\n        total = total * k\n        k = k+1\n        return total\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-10T00:04:52.976526","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":667,"date":"2016-02-10 00:19:10.020836","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + term(k), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-10T00:19:10.020836","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":667,"date":"2016-02-10 00:19:26.094758","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total * term(k), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-10T00:19:26.094758","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":526,"date":"2016-02-10 00:31:41.607173","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, 1\n    while k <= n:\n        total = total * k\n        k = k+1\n    return total\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-10T00:31:41.607173","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":526,"date":"2016-02-10 00:32:46.770478","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, 1\n    while k <= n:\n        total = total * k\n        k = term+1\n    return total\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-10T00:32:46.770478","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":526,"date":"2016-02-10 00:34:03.451537","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, 1\n    while k <= n:\n        total = total+f(term) * k\n        k = k+1\n    return total\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-10T00:34:03.451537","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":526,"date":"2016-02-10 00:35:07.656773","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, 1\n    while k <= n:\n        total = total * term\n        k = k+1\n    return total\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-10T00:35:07.656773","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":526,"date":"2016-02-10 00:36:34.398128","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, 1\n    while k <= n:\n        total = total * k(product(term))\n        k = k+1\n    return total\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-10T00:36:34.398128","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":526,"date":"2016-02-10 00:36:48.323347","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, 1\n    while k <= n:\n        total = total * k*term\n        k = k+1\n    return total\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-10T00:36:48.323347","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":526,"date":"2016-02-10 00:37:26.324461","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, 1\n    while k <= n:\n        total = total * k*term(k)\n        k = k+1\n    return total\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-10T00:37:26.324461","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":728,"date":"2016-02-10 01:03:01.740942","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    while i <= n:\n        total *= term(i)\n        i += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-10T01:03:01.740942","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":728,"date":"2016-02-10 01:04:57.663235","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    total = 0\n    while i <= n:\n        total *= term(i)\n        i += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-10T01:04:57.663235","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":692,"date":"2016-02-10 01:43:14.899008","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    current = 1\n    def helper(i):\n        if i == 1:\n            return term(1)\n        else:\n            return current*term(i-1)\n    helper(n)\n\n","after":null,"SubmissionTime":"2016-02-10T01:43:14.899008","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":692,"date":"2016-02-10 01:43:43.071192","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    current = 1\n    def helper(i):\n        if i == 1:\n            return term(1)\n        else:\n            return current*term(i-1)\n    return helper(n)\n\n","after":null,"SubmissionTime":"2016-02-10T01:43:43.071192","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":692,"date":"2016-02-10 01:44:29.706478","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    current = 1\n    def helper(n):\n        if i == 1:\n            return term(n)\n        else:\n            return current*term(i+1)\n    return helper(1)\n\n","after":null,"SubmissionTime":"2016-02-10T01:44:29.706478","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":692,"date":"2016-02-10 01:44:42.969852","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    current = 1\n    def helper(i):\n        if i == n:\n            return term(n)\n        else:\n            return current*term(i+1)\n    return helper(1)\n\n","after":null,"SubmissionTime":"2016-02-10T01:44:42.969852","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":692,"date":"2016-02-10 01:45:19.292876","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    current = term(1)\n    def helper(i):\n        if i == n:\n            return term(n)\n        else:\n            return current*term(i+1)\n    return helper(1)\n\n","after":null,"SubmissionTime":"2016-02-10T01:45:19.292876","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":692,"date":"2016-02-10 01:46:21.149018","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    current = term(n)\n    def helper(i):\n        if i == 1:\n            return term(1)\n        else:\n            return current*term(i-1)\n    return helper(n)\n\n","after":null,"SubmissionTime":"2016-02-10T01:46:21.149018","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":365,"date":"2016-02-10 04:47:29.513448","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    start=1\n    result=term(start)*term(start+1)\n    start +=1\n    if start==n:\n        return result\n\n","after":null,"SubmissionTime":"2016-02-10T04:47:29.513448","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":365,"date":"2016-02-10 04:51:38.726445","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a=1\n    def final_product(a):\n        result=term(a)*term(a+1)\n        if a==n:\n            return result\n        return final_product(a+1)\n    return final_product(a)\n\n","after":null,"SubmissionTime":"2016-02-10T04:51:38.726445","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":365,"date":"2016-02-10 04:51:58.435605","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a=1\n    def final_product(a):\n        result=term(a)*term(a+1)\n        if a+1==n:\n            return result\n        return final_product(a+1)\n    return final_product(a)\n\n","after":null,"SubmissionTime":"2016-02-10T04:51:58.435605","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":365,"date":"2016-02-10 04:54:23.569111","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a=1\n    def final_product(a):\n        result=term(a) * term(a+1)\n        if a+1==n:\n            return result\n        return final_product(a+1)\n    return final_product(a)\n\n","after":null,"SubmissionTime":"2016-02-10T04:54:23.569111","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":365,"date":"2016-02-10 04:56:38.051344","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a=1\n    result=1\n    def final_product(a):\n        result=result * term(a)\n        if a==n:\n            return result\n        return final_product(a+1)\n    return final_product(a)\n\n","after":null,"SubmissionTime":"2016-02-10T04:56:38.051344","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":365,"date":"2016-02-10 05:12:16.636262","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a=1\n    def final_product(a):\n        nextnumber =term(a+1)\n        result=term(a)*nextnumber\n        if a==n:\n            return result\n        return term(a)*final_product(a+1)\n    return final_product(a)\n\n","after":null,"SubmissionTime":"2016-02-10T05:12:16.636262","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":137,"date":"2016-02-10 07:11:30.703422","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    p=1\n    for _ in range(n):\n        p*=_\n    return p\n        \n\n","after":null,"SubmissionTime":"2016-02-10T07:11:30.703422","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":137,"date":"2016-02-10 07:12:41.456937","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    p=1\n    for _ in range(1,n):\n        p*=_\n    return p\n        \n\n","after":null,"SubmissionTime":"2016-02-10T07:12:41.456937","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":137,"date":"2016-02-10 07:13:05.780423","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    p=1\n    for _ in range(1,n+1):\n        p*=_\n    return p\n        \n\n","after":null,"SubmissionTime":"2016-02-10T07:13:05.780423","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":367,"date":"2016-02-10 08:06:33.654398","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if term == identity:\n        print(\"ident\")\n        for i in n:\n            i += 1\n    \n\n\n","after":null,"SubmissionTime":"2016-02-10T08:06:33.654398","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":367,"date":"2016-02-10 08:10:09.596564","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if term == identity:\n        print(\"identity\")\n        return reduce(lambda x, y: x * y,[1]+range(1, n + 1))\n    elif term == square:\n        print(\"square\")\n\n","after":null,"SubmissionTime":"2016-02-10T08:10:09.596564","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":367,"date":"2016-02-10 08:13:29.135077","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if term == identity:\n        print(\"identity\")\n        fac = 1\n        for i in range(2, n + 1):\n            fac *= i\n        return fac\n    elif term == square:\n        print(\"square\")\n\n","after":null,"SubmissionTime":"2016-02-10T08:13:29.135077","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":367,"date":"2016-02-10 08:13:38.923354","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if term == identity:\n        fac = 1\n        for i in range(2, n + 1):\n            fac *= i\n        return fac\n    elif term == square:\n        print(\"square\")\n\n","after":null,"SubmissionTime":"2016-02-10T08:13:38.923354","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":454,"date":"2016-02-10 08:13:53.790920","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def product_helper(num):\n        if num > n:\n            return 0\n        else:\n            return term(num) + product_helper(num+1)\n    return product_helper(1)\n\n","after":null,"SubmissionTime":"2016-02-10T08:13:53.79092","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":367,"date":"2016-02-10 08:13:57.187383","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if term == identity:\n        fac = 1\n        for i in range(2, n + 1):\n            fac *= i\n        print(fac)\n        return fac\n    elif term == square:\n        print(\"square\")\n\n","after":null,"SubmissionTime":"2016-02-10T08:13:57.187383","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":367,"date":"2016-02-10 08:14:11.339166","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n    if term == identity:\n        fac = 1\n        for i in range(2, n + 1):\n            fac *= i\n        print(fac)\n    elif term == square:\n        print(\"square\")\n\n","after":null,"SubmissionTime":"2016-02-10T08:14:11.339166","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":454,"date":"2016-02-10 08:14:30.725345","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def product_helper(num):\n        if num > n:\n            return 0\n        else:\n            return term(num) * product_helper(num+1)\n    return product_helper(1)\n\n","after":null,"SubmissionTime":"2016-02-10T08:14:30.725345","SynthesizedAfter":"\r\ndef product(n, term):\r\n    def product_helper(num):\r\n        if num>n:\r\n            return 1\r\n        else:\r\n            return term(num)*product_helper(num+1)\r\n    return product_helper(1)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, LeafConstNode(ConstantExpressionNode-1), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":388,"date":"2016-02-10 09:32:25.341030","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = 1\n    product = 1\n    while k < n:\n        num = term(k)\n        product *= num\n        k += 1\n    return product\n\n","after":null,"SubmissionTime":"2016-02-10T09:32:25.34103","SynthesizedAfter":"\r\ndef product(n, term):\r\n    k = 1\r\n    product = 1\r\n    while k<n:\r\n        num = term(k+1)\r\n        product *= num\r\n        k += 1\r\n    return product","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":355,"date":"2016-02-10 10:31:44.701863","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return n * product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-10T10:31:44.701863","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":355,"date":"2016-02-10 10:33:00.181099","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 0: \n        return n * product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-10T10:33:00.181099","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":171,"date":"2016-02-10 10:41:52.387775","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > -1:\n        n = n - 1\n        return term(n) * term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-10T10:41:52.387775","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":171,"date":"2016-02-10 10:41:52.387775","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > -1:\n        n = n - 1\n        return term(n) * term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-10T10:41:52.387775","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":171,"date":"2016-02-10 10:43:34.547893","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 1:\n        n = n - 1\n        return term(n) * product(n-1,term)\n","after":null,"SubmissionTime":"2016-02-10T10:43:34.547893","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":181,"date":"2016-02-10 10:45:27.142431","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    while n > 0:\n        total, n = total + term(n), n - 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-10T10:45:27.142431","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":171,"date":"2016-02-10 10:46:06.747128","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def helper(n):\n        if n > 1:\n            n = n - 1\n        return term(n) + helper(n-1)\n","after":null,"SubmissionTime":"2016-02-10T10:46:06.747128","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":171,"date":"2016-02-10 10:46:22.867603","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def helper(n):\n        if n > 1:\n            n = n - 1\n        return term(n) + helper(n-1)\n    return helper(n)\n","after":null,"SubmissionTime":"2016-02-10T10:46:22.867603","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":171,"date":"2016-02-10 10:48:20.686104","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a = 1\n    def helper(a):\n        if a < n:\n            return term(a)\n        return term(a) + helper(a + 1)\n\n\n","after":null,"SubmissionTime":"2016-02-10T10:48:20.686104","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":171,"date":"2016-02-10 10:48:39.385872","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a = 1\n    if a < n:\n        return term(a)\n    return term(a) + helper(a + 1)\n\n\n","after":null,"SubmissionTime":"2016-02-10T10:48:39.385872","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":171,"date":"2016-02-10 10:49:11.496627","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a = 1\n    if a < n:\n        return term(a)\n    return term(a) *  term(a + 1)\n\n\n","after":null,"SubmissionTime":"2016-02-10T10:49:11.496627","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":171,"date":"2016-02-10 10:50:50.620286","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a = 1\n    def helper(a):\n        if a < n:\n            return term(a)\n        return term(a) * helper(a + 1)\n    return helper(a)\n\n\n\n","after":null,"SubmissionTime":"2016-02-10T10:50:50.620286","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":171,"date":"2016-02-10 10:51:32.273538","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a = 1\n    def helper(a):\n        if a < n:\n            return term(a)\n    return term(a) * helper(a + 1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-10T10:51:32.273538","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":171,"date":"2016-02-10 10:52:04.576451","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a = 1\n    def helper(a):\n        if a < n:\n            return term(a) * helper(a+1)\n    return term(a) * helper(a + 1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-10T10:52:04.576451","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":171,"date":"2016-02-10 10:52:04.576451","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a = 1\n    def helper(a):\n        if a < n:\n            return term(a) * helper(a+1)\n    return term(a) * helper(a + 1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-10T10:52:04.576451","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":171,"date":"2016-02-10 10:53:30.554454","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a = 1\n    def helper(a):\n        if a < n:\n            b = term(a)\n            a = a + 1\n        total = b * helper(a)\n    return total\n\n\n\n","after":null,"SubmissionTime":"2016-02-10T10:53:30.554454","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":171,"date":"2016-02-10 10:53:30.554454","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a = 1\n    def helper(a):\n        if a < n:\n            b = term(a)\n            a = a + 1\n        total = b * helper(a)\n    return total\n\n\n\n","after":null,"SubmissionTime":"2016-02-10T10:53:30.554454","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":171,"date":"2016-02-10 10:53:45.204447","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a = 1\n    total = 0\n    def helper(a):\n        if a < n:\n            b = term(a)\n            a = a + 1\n        total = b * helper(a)\n    return total\n\n\n\n","after":null,"SubmissionTime":"2016-02-10T10:53:45.204447","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":171,"date":"2016-02-10 10:53:45.204447","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a = 1\n    total = 0\n    def helper(a):\n        if a < n:\n            b = term(a)\n            a = a + 1\n        total = b * helper(a)\n    return total\n\n\n\n","after":null,"SubmissionTime":"2016-02-10T10:53:45.204447","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":171,"date":"2016-02-10 10:54:01.764198","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a = 1\n    total = 0\n    def helper(a):\n        if a < n:\n            b = term(a)\n            a = a + 1\n        total == b * helper(a)\n    return total\n\n\n\n","after":null,"SubmissionTime":"2016-02-10T10:54:01.764198","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":171,"date":"2016-02-10 10:54:53.044273","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a = 1\n    total = 0\n    def helper(a):\n        if a < n:\n            b = term(a)\n            a = a + 1\n        total = b * helper(b)\n    return total\n\n\n\n","after":null,"SubmissionTime":"2016-02-10T10:54:53.044273","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":171,"date":"2016-02-10 10:55:14.049271","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a = 1\n    total = 0\n    def helper(a):\n        if a < n:\n            b = term(a)\n            a = a + 1\n        total = b * helper(a)\n        return total\n    return total\n\n\n\n","after":null,"SubmissionTime":"2016-02-10T10:55:14.049271","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":893,"date":"2016-02-10 10:55:19.659379","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total * term(k), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-10T10:55:19.659379","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":171,"date":"2016-02-10 10:55:53.480775","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a = 1\n    total = 0\n    def helper(a):\n        if a < n:\n            b = term(a)\n            a = a + 1\n        return b * helper(a)\n\n\n\n","after":null,"SubmissionTime":"2016-02-10T10:55:53.480775","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":171,"date":"2016-02-10 10:56:04.375018","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a = 1\n    total = 0\n    def helper(a):\n        if a < n:\n            b = term(a)\n            a = a + 1\n    return b * helper(a)\n\n\n\n","after":null,"SubmissionTime":"2016-02-10T10:56:04.375018","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":844,"date":"2016-02-10 10:58:57.414056","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    if n == 0:\n        return total\n    else:\n        return n * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-10T10:58:57.414056","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":844,"date":"2016-02-10 11:00:13.490302","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return n * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-10T11:00:13.490302","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":844,"date":"2016-02-10 11:01:50.674441","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    while n > 0:\n        if n == 0:\n            return total \n        else:  \n            total = n * total\n            n = n - 1\n\n","after":null,"SubmissionTime":"2016-02-10T11:01:50.674441","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":844,"date":"2016-02-10 11:02:01.675808","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    while n >= 0:\n        if n == 0:\n            return total \n        else:  \n            total = n * total\n            n = n - 1\n\n","after":null,"SubmissionTime":"2016-02-10T11:02:01.675808","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":844,"date":"2016-02-10 11:03:03.642626","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    if i == n:\n        return total \n    else:  \n        return i * product(i+1, term)\n\n","after":null,"SubmissionTime":"2016-02-10T11:03:03.642626","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":844,"date":"2016-02-10 11:05:03.041667","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    if i > n:\n        return 1\n    else:  \n        return i * product(i+1, term)\n\n","after":null,"SubmissionTime":"2016-02-10T11:05:03.041667","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":844,"date":"2016-02-10 11:05:03.041667","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    if i > n:\n        return 1\n    else:  \n        return i * product(i+1, term)\n\n","after":null,"SubmissionTime":"2016-02-10T11:05:03.041667","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":844,"date":"2016-02-10 11:06:42.113500","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    if i > n:\n        return 1\n    else:  \n        i = i + 1\n        return i * product(i, term)\n\n","after":null,"SubmissionTime":"2016-02-10T11:06:42.1135","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":844,"date":"2016-02-10 11:09:24.998259","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    total = 1\n    while i <= n:\n        total = total * term(i)\n        i = i + 1\n        return total\n\n","after":null,"SubmissionTime":"2016-02-10T11:09:24.998259","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":844,"date":"2016-02-10 11:10:16.206718","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 0\n    total = 1\n    while i <= n:\n        i = i + 1\n        total = total * term(i)\n        return total\n\n","after":null,"SubmissionTime":"2016-02-10T11:10:16.206718","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":844,"date":"2016-02-10 11:10:38.595004","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 0\n    total = 1\n    while i <= n:\n        i = i + 1\n        total = total * term(i)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-10T11:10:38.595004","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":905,"date":"2016-02-10 11:14:22.034206","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return term(1)\n    else:\n        return product(n) * product(n-1)\n\n","after":null,"SubmissionTime":"2016-02-10T11:14:22.034206","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":340,"date":"2016-02-10 11:21:04.833107","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k = 1\n    total = 1\n    while k <= n:\n        total = total * k \n        k += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-10T11:21:04.833107","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":340,"date":"2016-02-10 11:26:48.238475","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k = 1\n    product = 1\n    if term == identity:\n        while k <= n:\n            total = total * k \n            k += 1\n    else:\n        while k <= n:\n            product *= square(k)\n            k += 1\n    return product\n\n","after":null,"SubmissionTime":"2016-02-10T11:26:48.238475","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":656,"date":"2016-02-10 11:29:23.915240","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i, total):\n        if i > n:\n            return total \n        else:\n            total = total + term(i)\n            return counter(i+1, total)\n    return counter(1, 0)\n\n","after":null,"SubmissionTime":"2016-02-10T11:29:23.91524","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":656,"date":"2016-02-10 11:30:24.624940","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i, total):\n        if i > n:\n            return total \n        else:\n            total = total * term(i)\n            return counter(i+1, total)\n    return counter(1, 0)\n\n","after":null,"SubmissionTime":"2016-02-10T11:30:24.62494","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":340,"date":"2016-02-10 11:55:30.472544","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return term(n)\n    else:\n        return term(n)*product(n-1, identity)\n\n    \"\"\"  k = 1\n    product = 1\n    if term == identity:\n        while k <= n:\n            product = product * k \n            k += 1\n    else:\n        while k <= n:\n            product *= square(k)\n            k += 1\n    return product\n    \"\"\"\n\n\n","after":null,"SubmissionTime":"2016-02-10T11:55:30.472544","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":340,"date":"2016-02-10 11:57:10.749864","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return term(n)\n    else:\n        print(term(n)*product(n-1, term))\n\n    \"\"\"  k = 1\n    product = 1\n    if term == identity:\n        while k <= n:\n            product = product * k \n            k += 1\n    else:\n        while k <= n:\n            product *= square(k)\n            k += 1\n    return product\n    \"\"\"\n\n\n","after":null,"SubmissionTime":"2016-02-10T11:57:10.749864","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":415,"date":"2016-02-10 12:19:01.664429","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n <= 2:  \n        return n \n    else: \n        return n * product(n-1, term)\n\n\n\n","after":null,"SubmissionTime":"2016-02-10T12:19:01.664429","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":293,"date":"2016-02-10 12:28:05.150361","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def helper(i):\n        if i==0:\n            return 1\n        else:\n            return term(i) * product(i-1, term)\n    helper(n)\n\n","after":null,"SubmissionTime":"2016-02-10T12:28:05.150361","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":776,"date":"2016-02-10 12:29:28.472349","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, total = 1, 1\n    while k <= n:\n        k, total = k + 1, total * term(k, 1)\n    return total\n","after":null,"SubmissionTime":"2016-02-10T12:29:28.472349","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":776,"date":"2016-02-10 12:29:28.472349","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, total = 1, 1\n    while k <= n:\n        k, total = k + 1, total * term(k, 1)\n    return total\n","after":null,"SubmissionTime":"2016-02-10T12:29:28.472349","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":776,"date":"2016-02-10 12:29:59.730254","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, total = 1, 1\n    while k <= n:\n        k, total = k + 1, total * num(k, 1)\n    return total\n","after":null,"SubmissionTime":"2016-02-10T12:29:59.730254","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":776,"date":"2016-02-10 12:32:33.886739","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, total = 1, 1\n    while k <= n:\n        k, total = k + 1, (total * term(k, 1))\n    return total\n","after":null,"SubmissionTime":"2016-02-10T12:32:33.886739","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":776,"date":"2016-02-10 12:33:05.185346","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, total = 1, 1\n    while k <= n:\n        k, total = k + 1, (total * term(k, n))\n    return total\n","after":null,"SubmissionTime":"2016-02-10T12:33:05.185346","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":776,"date":"2016-02-10 12:33:23.295780","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, total = 1, 1\n    while k <= n:\n        k, total = k + 1, n, (total * term(k, n))\n    return total\n","after":null,"SubmissionTime":"2016-02-10T12:33:23.29578","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":24,"date":"2016-02-10 12:35:14.065425","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def helper(i,k):\n        if i > n:\n            return k\n        else:\n            k = k + term(i)\n            helper(i+1, k)\n    return helper(1,0)\n\n","after":null,"SubmissionTime":"2016-02-10T12:35:14.065425","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":218,"date":"2016-02-10 12:37:23.088235","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-10T12:37:23.088235","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":24,"date":"2016-02-10 12:41:10.644206","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def helper(i,k):\n        if i > n:\n            return k\n        else:\n            k = k * term(i)\n            helper(i+1, k)\n    return helper(1,0)\n\n","after":null,"SubmissionTime":"2016-02-10T12:41:10.644206","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":415,"date":"2016-02-10 12:42:17.285033","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n <= 2:  \n        return n \n    else: \n        return n * product(n-1, term(n))\n\n\n\n","after":null,"SubmissionTime":"2016-02-10T12:42:17.285033","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":24,"date":"2016-02-10 12:42:30.622873","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def helper(i,k):\n        if i > n:\n            return k\n        else:\n            k = k * term(i)\n            helper(i, k)\n    return helper(1,1)\n\n","after":null,"SubmissionTime":"2016-02-10T12:42:30.622873","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":24,"date":"2016-02-10 12:47:16.308018","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def helper(i,k):\n        if i > n:\n            return k\n        else:\n            k = k * term(i)\n            return helper(i, k)\n    return helper(1,1)\n\n","after":null,"SubmissionTime":"2016-02-10T12:47:16.308018","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":4,"date":"2016-02-10 12:58:30.127341","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(x, y):\n    \tif x == n:\n    \t\tx * n\n    \telse:\n    \t\ty * term(x)\n    \t\treturn helper(x + 1, y)\n    return helper(1, 1)\n\n","after":null,"SubmissionTime":"2016-02-10T12:58:30.127341","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":218,"date":"2016-02-10 13:00:05.837838","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, sum = 1, 0\n    while k <= n:\n        sum, k = sum+term(k), k+1\n    return sum\n\n","after":null,"SubmissionTime":"2016-02-10T13:00:05.837838","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":218,"date":"2016-02-10 13:01:21.350331","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, sum = 1, 0\n    while k <= n:\n        sum, k = sum(*term(k)), k*1\n    return sum\n\n","after":null,"SubmissionTime":"2016-02-10T13:01:21.350331","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":218,"date":"2016-02-10 13:02:05.742802","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, sum = 1, 0\n    while k <= n:\n        sum, k = sum*term(k), k*1\n    return sum\n\n","after":null,"SubmissionTime":"2016-02-10T13:02:05.742802","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":4,"date":"2016-02-10 13:04:24.056516","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(x, y):\n    \tif x == n:\n    \t\ty * term(n)\n    \telse:\n    \t\ty * term(x)\n    \t\treturn helper(x + 1, y)\n    return helper(1, 1)\n\n","after":null,"SubmissionTime":"2016-02-10T13:04:24.056516","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":4,"date":"2016-02-10 13:04:54.863175","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(x, y):\n    \tif x == n:\n    \t\treturn y * term(n)\n    \telse:\n    \t\ty * term(x)\n    \t\treturn helper(x + 1, y)\n    return helper(1, 1)\n\n","after":null,"SubmissionTime":"2016-02-10T13:04:54.863175","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":218,"date":"2016-02-10 13:06:10.380881","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, sum = 1, 0\n    while k <= n:\n        sum, k = sum*term(k), k+1\n    return sum\n\n","after":null,"SubmissionTime":"2016-02-10T13:06:10.380881","SynthesizedAfter":"\r\ndef product(n, term):\r\n    k, sum = 1, 1\r\n    while k<=n:\r\n        sum, k = sum*term(k), k+1\r\n    return sum","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":218,"date":"2016-02-10 13:10:57.387051","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 0 \n    elif n == 1:\n        return term(1)\n    else:\n        return product(n,term) * product(n-1, term)\n        \n\n","after":null,"SubmissionTime":"2016-02-10T13:10:57.387051","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":218,"date":"2016-02-10 13:23:22.713165","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    product = 1\n    x = lambda n: term(n)\n    for n in range (1,n + 1):\n        product = product * x\n        return product \n\n\n\n\n","after":null,"SubmissionTime":"2016-02-10T13:23:22.713165","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":218,"date":"2016-02-10 13:24:05.877191","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    product = 1\n    x = lambda n: term(n)\n    for n in range (1,n + 1):\n        product = product * x(n)\n        return product \n\n\n\n\n","after":null,"SubmissionTime":"2016-02-10T13:24:05.877191","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":218,"date":"2016-02-10 13:24:42.387718","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    for n in range (1,n + 1):\n        product = product * term(n)\n        return product \n\n\n\n\n","after":null,"SubmissionTime":"2016-02-10T13:24:42.387718","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":218,"date":"2016-02-10 13:25:01.662871","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    product = 1\n    for n in range (1,n + 1):\n        product = product * term(n)\n        return product \n\n\n\n\n","after":null,"SubmissionTime":"2016-02-10T13:25:01.662871","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":218,"date":"2016-02-10 13:26:15.874823","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    for n in range (1,n + 1):\n        total = total * term(n)\n        return total \n\n\n\n\n","after":null,"SubmissionTime":"2016-02-10T13:26:15.874823","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":218,"date":"2016-02-10 13:27:20.589582","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    for i in range (1,n + 1):\n        total = total * term(i)\n        return total \n\n\n\n\n","after":null,"SubmissionTime":"2016-02-10T13:27:20.589582","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":218,"date":"2016-02-10 13:27:36.755002","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    for i in range (1, n + 1):\n        total = total * term(i)\n        return total \n\n\n\n\n","after":null,"SubmissionTime":"2016-02-10T13:27:36.755002","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":565,"date":"2016-02-10 13:31:47.359046","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return term(1)\n    return term(n) + term(n - 1)\n\n\n","after":null,"SubmissionTime":"2016-02-10T13:31:47.359046","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":565,"date":"2016-02-10 13:32:46.367419","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return term(1)\n    return term(n) * term(n - 1)\n\n\n","after":null,"SubmissionTime":"2016-02-10T13:32:46.367419","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return term(1)\r\n    return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":130,"date":"2016-02-10 13:53:58.519800","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return term(n) + product(n - 1, term)\n    \n","after":null,"SubmissionTime":"2016-02-10T13:53:58.5198","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":716,"date":"2016-02-10 13:54:28.055572","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-10T13:54:28.055572","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":48,"date":"2016-02-10 13:57:11.977977","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def helper(a):\n        if n==0:\n            return a\n        else:\n            a=a*term(n)\n            n-=1\n        return helper(a)\n    return helper(0)\n","after":null,"SubmissionTime":"2016-02-10T13:57:11.977977","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":48,"date":"2016-02-10 13:58:35.432750","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def helper(a,n):\n        if n==0:\n            return a\n        else:\n            a=a*term(n)\n            n-=1\n        return helper(a)\n    return helper(0,n)\n","after":null,"SubmissionTime":"2016-02-10T13:58:35.43275","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":716,"date":"2016-02-10 14:00:34.118301","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return term(n) + product(n+1, term)\n\n","after":null,"SubmissionTime":"2016-02-10T14:00:34.118301","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":716,"date":"2016-02-10 14:03:33.011833","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return product(n,term) * product(n+1, term)\n\n","after":null,"SubmissionTime":"2016-02-10T14:03:33.011833","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":218,"date":"2016-02-10 14:05:42.297611","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = lambda term: term \n    total = 1\n    for i in range (1, n + 1):\n        total = total * x(i)\n    return total \n\n\n\n\n","after":null,"SubmissionTime":"2016-02-10T14:05:42.297611","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":716,"date":"2016-02-10 14:07:52.734231","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n ==1:\n        return n\n    return term(n)+ product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-10T14:07:52.734231","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return n\r\n    return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":919,"date":"2016-02-10 14:09:24.039097","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return 1\n    return term(n) + product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-10T14:09:24.039097","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==0:\r\n        return 1\r\n    return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":660,"date":"2016-02-10 14:13:04.157183","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = 1\n    total = 0\n    while k != n:\n        total = total + term(k)\n        k = k + 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-10T14:13:04.157183","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":48,"date":"2016-02-10 14:27:23.176928","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def helper(a,n):\n        if n==0:\n            return a\n        else:\n            a=a*term(n)\n        return helper(a,n-1)\n    return helper(0,n)\n","after":null,"SubmissionTime":"2016-02-10T14:27:23.176928","SynthesizedAfter":"\r\ndef product(n, term):\r\n    def helper(a, n):\r\n        if n==1:\r\n            return a\r\n        else:\r\n            a = a*term(n)\r\n        return helper(a, n-1)\r\n    return helper(1, n)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":171,"date":"2016-02-10 14:36:52.078322","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 0:\n        return term(n) * product(n - 1,term)\n\n\n\n    # a = 1\n    # total = 0\n    # def helper(a):\n    #     if a < n:\n    #         b = term(a)\n    #         a = a + 1\n    #     return b * helper(a)\n\n\n\n","after":null,"SubmissionTime":"2016-02-10T14:36:52.078322","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":171,"date":"2016-02-10 14:37:17.936578","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 0:\n        total = term(n) * product(n - 1,term)\n    else:\n        return total\n\n\n\n    # a = 1\n    # total = 0\n    # def helper(a):\n    #     if a < n:\n    #         b = term(a)\n    #         a = a + 1\n    #     return b * helper(a)\n\n\n\n","after":null,"SubmissionTime":"2016-02-10T14:37:17.936578","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":171,"date":"2016-02-10 14:37:45.525387","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    if n > 0:\n        total = term(n) * product(n - 1,term)\n    else:\n        return total\n\n\n\n    # a = 1\n    # total = 0\n    # def helper(a):\n    #     if a < n:\n    #         b = term(a)\n    #         a = a + 1\n    #     return b * helper(a)\n\n\n\n","after":null,"SubmissionTime":"2016-02-10T14:37:45.525387","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":171,"date":"2016-02-10 14:37:45.525387","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    if n > 0:\n        total = term(n) * product(n - 1,term)\n    else:\n        return total\n\n\n\n    # a = 1\n    # total = 0\n    # def helper(a):\n    #     if a < n:\n    #         b = term(a)\n    #         a = a + 1\n    #     return b * helper(a)\n\n\n\n","after":null,"SubmissionTime":"2016-02-10T14:37:45.525387","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":171,"date":"2016-02-10 14:38:54.939774","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    if n > 0:\n        def helper(a):\n            return term(n) * product(n - 1,term)\n    else:\n        return helper\n\n\n\n    # a = 1\n    # total = 0\n    # def helper(a):\n    #     if a < n:\n    #         b = term(a)\n    #         a = a + 1\n    #     return b * helper(a)\n\n\n\n","after":null,"SubmissionTime":"2016-02-10T14:38:54.939774","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":171,"date":"2016-02-10 14:39:04.420887","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    if n > 0:\n        def helper(a):\n            return term(n) * product(n - 1,term)\n    else:\n        return helper(n)\n\n\n\n    # a = 1\n    # total = 0\n    # def helper(a):\n    #     if a < n:\n    #         b = term(a)\n    #         a = a + 1\n    #     return b * helper(a)\n\n\n\n","after":null,"SubmissionTime":"2016-02-10T14:39:04.420887","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":171,"date":"2016-02-10 14:39:20.107483","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    if n > 0:\n        def helper(n):\n            return term(n) * product(n - 1,term)\n    else:\n        return helper(n)\n\n\n\n    # a = 1\n    # total = 0\n    # def helper(a):\n    #     if a < n:\n    #         b = term(a)\n    #         a = a + 1\n    #     return b * helper(a)\n\n\n\n","after":null,"SubmissionTime":"2016-02-10T14:39:20.107483","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":171,"date":"2016-02-10 14:39:58.882416","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    if n > 0:\n        def helper(n):\n            return term(n) * helper(n-1)\n    else:\n        return helper(n)\n\n\n\n    # a = 1\n    # total = 0\n    # def helper(a):\n    #     if a < n:\n    #         b = term(a)\n    #         a = a + 1\n    #     return b * helper(a)\n\n\n\n","after":null,"SubmissionTime":"2016-02-10T14:39:58.882416","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":171,"date":"2016-02-10 14:40:28.803018","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    if n > 0:\n        def helper(n):\n            total = term(n) * helper(n-1)\n    else:\n        return total\n\n\n\n    # a = 1\n    # total = 0\n    # def helper(a):\n    #     if a < n:\n    #         b = term(a)\n    #         a = a + 1\n    #     return b * helper(a)\n\n\n\n","after":null,"SubmissionTime":"2016-02-10T14:40:28.803018","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1027,"date":"2016-02-10 15:04:19.686067","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \"\"\"if(n == 1):\n        return term(n)\n    else:\n        return term(n) * product(n-1, term)\"\"\"\n\n    def counter(n, term, i):\n        if(i == n):\n            return term(n)\n        else:\n            return term(i) * counter(n, term, i+1)\n\n    counter(n, term, 1)\n\n","after":null,"SubmissionTime":"2016-02-10T15:04:19.686067","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":660,"date":"2016-02-10 15:13:35.971356","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = 1\n    total = 0\n    while k <= n:\n        total = total + term(k)\n        k = k + 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-10T15:13:35.971356","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":660,"date":"2016-02-10 15:14:02.804058","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = 1\n    total = 0\n    while k <= n:\n        total = total * term(k)\n        k = k + 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-10T15:14:02.804058","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1009,"date":"2016-02-10 15:18:05.245352","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 0\n    return term(n) * product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-10T15:18:05.245352","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":269,"date":"2016-02-10 15:36:17.011823","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    for i in range(0, n):\n        total *= term(i + 1)\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-10T15:36:17.011823","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":60,"date":"2016-02-10 15:38:33.205340","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def partial_product(n, term, total, k):\n        if k==1:\n            return total*term(1)\n        else:\n            total*=term(k)\n            return partial_product(n, term, total, k-1)\n    return partial_product(n, term, n)\n\n","after":null,"SubmissionTime":"2016-02-10T15:38:33.20534","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":60,"date":"2016-02-10 15:39:16.933698","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def partial_product(n, term, total, k):\n        if k==1:\n            return total*term(1)\n        else:\n            total*=term(k)\n            return partial_product(n, term, total, k-1)\n    return partial_product(n, term, total, n)\n\n","after":null,"SubmissionTime":"2016-02-10T15:39:16.933698","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":60,"date":"2016-02-10 15:42:15.763391","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def partial_product(n, term, k):\n        if n==1:\n            return k*term(1)\n        else:\n            k*=term(n)\n            return partial_product(n-1, term, k)\n    return partial_product(n, term, n)\n\n","after":null,"SubmissionTime":"2016-02-10T15:42:15.763391","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":60,"date":"2016-02-10 15:43:17.240753","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def partial_product(n, term, k):\n        if n==1:\n            return k\n        else:\n            k*=term(n)\n            return partial_product(n-1, term, k)\n    return partial_product(n, term, n)\n\n","after":null,"SubmissionTime":"2016-02-10T15:43:17.240753","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":351,"date":"2016-02-10 15:44:05.135221","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(1)\n    else:\n        return term(n)*term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-10T15:44:05.135221","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return term(1)\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":351,"date":"2016-02-10 15:45:41.613339","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return term(n)*term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-10T15:45:41.613339","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":351,"date":"2016-02-10 15:46:53.467672","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return term(n)*product(n-1, term(n-1))\n\n","after":null,"SubmissionTime":"2016-02-10T15:46:53.467672","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":351,"date":"2016-02-10 15:51:53.093101","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(1)\n    else:\n        return term(n)*product(n-1, term(n-1))\n        \n","after":null,"SubmissionTime":"2016-02-10T15:51:53.093101","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1032,"date":"2016-02-10 15:52:14.924803","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return term(1)\n    else:\n        return term(n) + product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-10T15:52:14.924803","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return term(1)\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":320,"date":"2016-02-10 15:59:36.592076","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(n)\n    else:\n        return tern(n) * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-10T15:59:36.592076","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return term(n)\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-term)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":746,"date":"2016-02-10 16:01:01.429910","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i, prod = 1, 0\n    while i <= n:\n        prod = prod + term(i)\n        i += 1\n    return prod\n\n","after":null,"SubmissionTime":"2016-02-10T16:01:01.42991","SynthesizedAfter":"\r\ndef product(n, term):\r\n    i, prod = 1, 1\r\n    while i<=n:\r\n        prod = prod*term(i)\r\n        i += 1\r\n    return prod","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":746,"date":"2016-02-10 16:02:17.863469","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i, prod = 1, 0\n    while i <= n:\n        prod = prod * term(i)\n        i += 1\n    return prod\n\n","after":null,"SubmissionTime":"2016-02-10T16:02:17.863469","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":355,"date":"2016-02-10 16:05:40.423850","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    def helper(n):\n        term(1) * product(n + 1, term)\n    helper(1)\n\n","after":null,"SubmissionTime":"2016-02-10T16:05:40.42385","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":355,"date":"2016-02-10 16:07:14.295302","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    def helper(k):\n        if k >= n: \n            return term(1) * product(k + 1, term)\n    helper(1)\n\n","after":null,"SubmissionTime":"2016-02-10T16:07:14.295302","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":355,"date":"2016-02-10 16:07:42.590105","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    def helper(k):\n        if k >= n: \n            return term(1) * product(k + 1, term(k))\n    helper(1)\n\n","after":null,"SubmissionTime":"2016-02-10T16:07:42.590105","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":947,"date":"2016-02-10 16:26:12.431289","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return term(n)\n    else:\n        return term(n) * factorial(n - 1)\n\n\n","after":null,"SubmissionTime":"2016-02-10T16:26:12.431289","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return term(n)\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 16:27:08.321537","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    if n > 1:\n        total = total + n*n\n        return product(n-1, term)\n    print(total)\n\n","after":null,"SubmissionTime":"2016-02-10T16:27:08.321537","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 16:30:39.674989","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    if n > 1:\n        m = identity(n)\n        total = total + n*m\n        return product(n-1, term)\n    print(total)\n\n","after":null,"SubmissionTime":"2016-02-10T16:30:39.674989","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1049,"date":"2016-02-10 16:31:28.660797","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(1)\n    else:\n        return term(n) + product(n-1, term)\n\n\n\n\"\"\"\n    def sum_product(n):\n        total = 0\n        k = 1\n        while k < n:\n            total = total + term(k)\n            sum_product(n-1)\n    return sum_product(n)\"\"\"\n\n","after":null,"SubmissionTime":"2016-02-10T16:31:28.660797","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return term(1)\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 16:33:50.127747","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def product_total(i):\n        if n > 1:\n            m = identity(n)\n            i = (n*m) * i\n            return product(n-1, term)\n        print(i)\n\n","after":null,"SubmissionTime":"2016-02-10T16:33:50.127747","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":1034,"date":"2016-02-10 16:35:57.918111","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-10T16:35:57.918111","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1034,"date":"2016-02-10 16:36:43.079672","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i, total = 1, 1\n    while i <=n:\n        i, total = i+1, total*item(i)\n        return total\n\n\n","after":null,"SubmissionTime":"2016-02-10T16:36:43.079672","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1034,"date":"2016-02-10 16:37:07.613798","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i, total = 1, 1\n    while i <=n:\n        i, total = i+1, total*term(i)\n        return total\n\n\n","after":null,"SubmissionTime":"2016-02-10T16:37:07.613798","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1034,"date":"2016-02-10 16:38:55.290247","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i, total = 1, 1\n    while i <=n:\n        i, total = i + 1, total * term(i)\n        return total\n\n\n","after":null,"SubmissionTime":"2016-02-10T16:38:55.290247","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 16:41:02.891911","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def product_total(i):\n        if i < n:\n            m = identity(n)\n            i = (n*m) * i\n            return product(n-1, term)\n        print(i)\n\n","after":null,"SubmissionTime":"2016-02-10T16:41:02.891911","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 16:42:49.691115","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 1:\n        m = identity(n)\n        total += (n*m)\n        return product(n-1, term)\n    print(i)\n\n","after":null,"SubmissionTime":"2016-02-10T16:42:49.691115","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 16:43:04.180993","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 1:\n        m = identity(n)\n        total += (n*m)\n        return product(n-1, term)\n    print(total)\n\n","after":null,"SubmissionTime":"2016-02-10T16:43:04.180993","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1034,"date":"2016-02-10 16:44:11.955638","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i, Total = 1, 1\n\n    while i<=n:\n        i, Total = i + 1, Total * term(i)\n        return Total\n\n\n","after":null,"SubmissionTime":"2016-02-10T16:44:11.955638","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1034,"date":"2016-02-10 16:44:21.860646","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i, Total = 0, 1\n\n    while i<=n:\n        i, Total = i + 1, Total * term(i)\n        return Total\n\n\n","after":null,"SubmissionTime":"2016-02-10T16:44:21.860646","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1040,"date":"2016-02-10 16:44:38.271248","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return term(n)\n    else:\n        return product(n - 1) * term(n)\n\n","after":null,"SubmissionTime":"2016-02-10T16:44:38.271248","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1034,"date":"2016-02-10 16:45:06.633321","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    item, Total = 0, 1\n\n    while item<=n:\n        item, Total = item + 1, Total * term(item)\n        return Total\n\n\n","after":null,"SubmissionTime":"2016-02-10T16:45:06.633321","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 16:45:31.077437","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def prod_total(total):\n        if n > 1:\n           m = identity(n)\n           total += (n*m)\n           return product(n-1, term)\n    print(total)\n\n","after":null,"SubmissionTime":"2016-02-10T16:45:31.077437","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 16:46:05.394946","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def prod_total(total):\n        total = total\n        if n > 1:\n           m = identity(n)\n           total += (n*m)\n           return product(n-1, term)\n    print(total)\n\n","after":null,"SubmissionTime":"2016-02-10T16:46:05.394946","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 16:53:13.403300","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def prod_total(total):\n        total = 0\n        if n > 1:\n           m = identity(n)\n           total += (n*m)\n           return product(n-1, term)\n    print(total)\n\n","after":null,"SubmissionTime":"2016-02-10T16:53:13.4033","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":867,"date":"2016-02-10 16:53:45.850492","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    x = 1\n    for i in range(1, n + 1):\n        x = 1 * term(i)\n    return x\n\n    #x = 1\n    #if x == n:\n        #return\n    #else:\n        #return term(x) *\n\n\n    #x = 1\n    #if n == 1:\n        #return 1\n    #else:\n        #n = n - 1\n        #return x * term(n)\n\n","after":null,"SubmissionTime":"2016-02-10T16:53:45.850492","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":867,"date":"2016-02-10 16:55:19.618546","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    x = 1\n    for i in range(n):\n        x = x * term(i)\n    return x\n\n\n","after":null,"SubmissionTime":"2016-02-10T16:55:19.618546","SynthesizedAfter":"\r\ndef product(n, term):\r\n    x = 1\r\n    for i in range(n):\r\n        x = x*term(i+1)\r\n    return x","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":867,"date":"2016-02-10 16:55:28.366997","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    x = 1\n    for i in range(0, n):\n        x = x * term(i)\n    return x\n\n\n","after":null,"SubmissionTime":"2016-02-10T16:55:28.366997","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 17:13:39.631150","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def prod_total(total):\n        total = 0\n        n = n\n        if n > 1:\n           m = identity(n)\n           total += (n*m)\n    return product(n-1, term)\n    print(total)\n\n","after":null,"SubmissionTime":"2016-02-10T17:13:39.63115","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 17:14:22.055145","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    \n    if n > 1:\n       m = identity(n)\n       total += (n*m)\n    return product(n-1, term)\n    print(total)\n\n","after":null,"SubmissionTime":"2016-02-10T17:14:22.055145","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 17:16:47.749921","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    m = 0\n    if n > 1:\n        m = identity(n)\n        total += (n*m)\n        product(n-1, term)\n    print(total)\n\n","after":null,"SubmissionTime":"2016-02-10T17:16:47.749921","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 17:20:26.200407","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    if n == 1:\n        return 1\n    if n > 1:\n        total += term(n)\n        product(n-1, term)\n    print(total)\n\n","after":null,"SubmissionTime":"2016-02-10T17:20:26.200407","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 17:21:30.992429","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    if n == 1:\n        return 1\n    if n > 1:\n        total += term(n)\n        product(n-1, term)\n    return(total)\n\n","after":null,"SubmissionTime":"2016-02-10T17:21:30.992429","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 17:21:54.993956","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    if n == 1:\n        return 1\n    if n > 1:\n        total = total + term(n)\n        product(n-1, term)\n    print(total)\n\n","after":null,"SubmissionTime":"2016-02-10T17:21:54.993956","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 17:22:24.746885","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    if n == 1:\n        total += 1\n    if n > 1:\n        total = total + term(n)\n        product(n-1, term)\n    print(total)\n\n","after":null,"SubmissionTime":"2016-02-10T17:22:24.746885","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1026,"date":"2016-02-10 17:22:31.196738","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def better_product(n, term, i, total):\n        if i > n:\n            return total\n        else:\n            return better_product(n, term, i + 1, total + term(i))\n        return better_product(n, term, 0)\n\n","after":null,"SubmissionTime":"2016-02-10T17:22:31.196738","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1026,"date":"2016-02-10 17:23:38.706909","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def better_product(n, term, i, total):\n        if i > n:\n            return total\n        else:\n            return better_product(n, term, i + 1, total * term(i))\n        return better_product(n, term, 1)\n\n","after":null,"SubmissionTime":"2016-02-10T17:23:38.706909","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1026,"date":"2016-02-10 17:23:51.389634","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def better_product(n, term, i, total):\n        if i > n:\n            return total\n        else:\n            print(n, term, i, total, 'ayyyooyo')\n            return better_product(n, term, i + 1, total * term(i))\n        return better_product(n, term, 1)\n\n","after":null,"SubmissionTime":"2016-02-10T17:23:51.389634","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":89,"date":"2016-02-10 17:23:56.112073","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    def helper(x, total):\n        while x > 0:\n                return helper(x - 1, total * x)\n        return total\n    return helper(n, total)\n\n","after":null,"SubmissionTime":"2016-02-10T17:23:56.112073","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1026,"date":"2016-02-10 17:24:24.989112","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def better_product(n, term, i=1, total=0):\n        if i > n:\n            return total\n        else:\n            print(n, term, i, total, 'ayyyooyo')\n            return better_product(n, term, i + 1, total * term(i))\n        return better_product(n, term, 1, 0)\n\n","after":null,"SubmissionTime":"2016-02-10T17:24:24.989112","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1026,"date":"2016-02-10 17:24:35.538337","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def better_product(n, term, i=1, total=0):\n        if i > n:\n            return total\n        else:\n            print(n, term, i, total, 'ayyyooyo')\n            return better_product(n, term, i + 1, total * term(i))\n    return better_product(n, term, 1, 0)\n\n","after":null,"SubmissionTime":"2016-02-10T17:24:35.538337","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1026,"date":"2016-02-10 17:25:00.585672","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def better_product(n, term, i=1, total=0):\n        if i > n:\n            return total\n        else:\n            print(total)\n            return better_product(n, term, i + 1, total * term(i))\n    return better_product(n, term, 1, 0)\n\n","after":null,"SubmissionTime":"2016-02-10T17:25:00.585672","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1026,"date":"2016-02-10 17:25:19.052272","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def better_product(n, term, i=1, total=0):\n        if i > n:\n            return total\n        else:\n            return better_product(n, term, i + 1, total * term(i))\n    return better_product(n, term, 1, 0)\n\n","after":null,"SubmissionTime":"2016-02-10T17:25:19.052272","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":89,"date":"2016-02-10 17:26:17.388437","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    def helper(x, total):\n        while x > 0:\n                return helper(x - 1, total * term(x))\n        return total\n    return helper(n, total)\n\n","after":null,"SubmissionTime":"2016-02-10T17:26:17.388437","SynthesizedAfter":"\r\ndef product(n, term):\r\n    total = 0\r\n    def helper(x, total):\r\n        while x>0:\r\n            return helper(x-1, total*term(x))\r\n        return total\r\n    return helper(n, 1)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 17:27:43.923700","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        total += 1\n    if n > 1:\n        total = total + term(n)\n        product(n-1, term)\n    print(total)\n\n","after":null,"SubmissionTime":"2016-02-10T17:27:43.9237","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 17:28:30.280708","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 1:\n        total = total + term(n)\n        product(n-1, term)\n    if n == 1:\n        total += 1\n    \n    print(total)\n\n","after":null,"SubmissionTime":"2016-02-10T17:28:30.280708","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":89,"date":"2016-02-10 17:30:50.362319","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    def helper(x, total):\n        if x == 0:\n            return total\n        else:\n            total += term(x)\n            return product(n - 1, term)\n    return helper(n, total)\n\n","after":null,"SubmissionTime":"2016-02-10T17:30:50.362319","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":89,"date":"2016-02-10 17:32:00.009808","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    def helper(x, total):\n        if x == 0:\n            return total\n        else:\n            total += term(x)\n            return product(x - 1, term)\n    return helper(n, total)\n\n","after":null,"SubmissionTime":"2016-02-10T17:32:00.009808","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":89,"date":"2016-02-10 17:32:09.392702","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    def helper(x, total):\n        if x == 0:\n            return total\n        else:\n            total += term(x)\n            return helper(x - 1, term)\n    return helper(n, total)\n\n","after":null,"SubmissionTime":"2016-02-10T17:32:09.392702","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":89,"date":"2016-02-10 17:32:31.815430","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    def helper(x, total):\n        if x == 0:\n            return total\n        else:\n            total = total + term(x)\n            return helper(x - 1, term)\n    return helper(n, total)\n\n","after":null,"SubmissionTime":"2016-02-10T17:32:31.81543","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":89,"date":"2016-02-10 17:32:31.815430","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    def helper(x, total):\n        if x == 0:\n            return total\n        else:\n            total = total + term(x)\n            return helper(x - 1, term)\n    return helper(n, total)\n\n","after":null,"SubmissionTime":"2016-02-10T17:32:31.81543","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":89,"date":"2016-02-10 17:33:29.760219","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    def helper(x, total):\n        if x == 0:\n            return total\n        else:\n            total = total * x\n            return helper(x - 1, total)\n    return helper(n, total)\n\n","after":null,"SubmissionTime":"2016-02-10T17:33:29.760219","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":89,"date":"2016-02-10 17:33:39.010334","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    def helper(x, total):\n        if x == 1:\n            return total\n        else:\n            total = total * x\n            return helper(x - 1, total)\n    return helper(n, total)\n\n","after":null,"SubmissionTime":"2016-02-10T17:33:39.010334","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":89,"date":"2016-02-10 17:34:05.668168","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = n\n    def helper(x, total):\n        if x == 1:\n            return total\n        else:\n            total = total * x\n            return helper(x - 1, total)\n    return helper(n, total)\n\n","after":null,"SubmissionTime":"2016-02-10T17:34:05.668168","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":89,"date":"2016-02-10 17:34:38.991652","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = n\n    def helper(x, total):\n        if x == 1:\n            return total\n        else:\n            total = total * (x - 1)\n            return helper(x - 1, total)\n    return helper(n, total)\n\n","after":null,"SubmissionTime":"2016-02-10T17:34:38.991652","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":89,"date":"2016-02-10 17:34:50.418869","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = n\n    def helper(x, total):\n        if x == 1:\n            return total\n        else:\n            total = total * term(x - 1)\n            return helper(x - 1, total)\n    return helper(n, total)\n\n","after":null,"SubmissionTime":"2016-02-10T17:34:50.418869","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":89,"date":"2016-02-10 17:35:38.495495","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 1\n    def helper(x, total):\n        if x == n:\n            return total\n        else:\n            total = total * term(x)\n            return helper(x + 1, total)\n    return helper(n, total)\n\n","after":null,"SubmissionTime":"2016-02-10T17:35:38.495495","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":89,"date":"2016-02-10 17:35:56.833213","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 1\n    def helper(x, total):\n        if x == n:\n            return total\n        else:\n            total = total * term(x + 1)\n            return helper(x + 1, total)\n    return helper(n, total)\n\n","after":null,"SubmissionTime":"2016-02-10T17:35:56.833213","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":176,"date":"2016-02-10 17:48:39.691886","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def prod(k,ans):\n        if k ==n+1:\n            return ans\n        else:\n            ans*=term(k)\n            return prod(k+1,ans)\n    return prod(12,1)\n\n","after":null,"SubmissionTime":"2016-02-10T17:48:39.691886","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":102,"date":"2016-02-10 17:50:57.044291","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total = total * term(k)\n        k += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-10T17:50:57.044291","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":776,"date":"2016-02-10 17:52:10.134830","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return product(n, lambda x: x)\n","after":null,"SubmissionTime":"2016-02-10T17:52:10.13483","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 17:54:20.129198","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def total_seq(i):\n        if n > 1:\n            i = i + term(n)\n            product(n-1, term)\n        elif n == 1:\n            i += 1\n        else:\n            print(i)\n    \n    return total_seq\n\n","after":null,"SubmissionTime":"2016-02-10T17:54:20.129198","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 17:55:24.859809","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def total_seq(i):\n        if n > 1:\n            i = i + term(n)\n            product(n-1, term)\n        elif n == 1:\n            i += 1\n        else:\n            print(i)\n    \n        return total_seq\n\n","after":null,"SubmissionTime":"2016-02-10T17:55:24.859809","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 17:56:05.378470","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def total_seq(i):\n        if n > 1:\n            i = i + term(n)\n            print(i)\n            product(n-1, term)\n        elif n == 1:\n            i += 1\n        else:\n            print(i)\n    \n        return total_seq\n\n","after":null,"SubmissionTime":"2016-02-10T17:56:05.37847","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 17:58:09.796702","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def total_seq(i):\n        if n >= 1:\n            i = i + term(n)\n            product(n-1, term)\n            return total_seq(i)\n        else:\n            print(i)\n    \n        return total_seq\n\n","after":null,"SubmissionTime":"2016-02-10T17:58:09.796702","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 18:07:41.084887","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def total_seq(i):\n        if n >= 1:\n            print(n)\n            i = i + term(n)\n            product(n-1, term)\n        else:\n            print(i)\n    \n        return total_seq\n\n","after":null,"SubmissionTime":"2016-02-10T18:07:41.084887","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 18:08:03.538671","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def total_seq(i):\n        print (n)\n        if n >= 1:\n            print(n)\n            i = i + term(n)\n            product(n-1, term)\n        else:\n            print(i)\n    \n        return total_seq\n\n","after":null,"SubmissionTime":"2016-02-10T18:08:03.538671","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 18:08:31.608573","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def total_seq(i):\n        if n >= 1:\n            i = i + term(n)\n            product(n-1, term)\n        else:\n            print(i)\n    \n    return total_seq\n\n","after":null,"SubmissionTime":"2016-02-10T18:08:31.608573","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 18:08:47.464615","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def total_seq(i):\n        if n >= 1:\n            i = i + term(n)\n            product(n-1, term)\n        else:\n            print(i)\n    \n    return product\n\n","after":null,"SubmissionTime":"2016-02-10T18:08:47.464615","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":776,"date":"2016-02-10 18:11:49.190985","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    while n > 1:\n        total = total * n \n        n = n - 1 \n    return square(total)\n","after":null,"SubmissionTime":"2016-02-10T18:11:49.190985","SynthesizedAfter":"\r\ndef product(n, term):\r\n    total = 1\r\n    while n>1:\r\n        total = total*n\r\n        n = n-1\r\n    return term(total)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-term)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":776,"date":"2016-02-10 18:12:04.312106","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    while n > 1:\n        total = total * n \n        n = n - 1 \n    return(total)\n","after":null,"SubmissionTime":"2016-02-10T18:12:04.312106","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":776,"date":"2016-02-10 18:12:15.947952","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    while n > 1:\n        total = total * n \n        n = n - 1 \n    return square(total)\n","after":null,"SubmissionTime":"2016-02-10T18:12:15.947952","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 18:13:09.609952","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n >= 1:\n        i = i + term(n)\n        product(n-1, term)\n    else:\n        print(i)\n    return product\n\n","after":null,"SubmissionTime":"2016-02-10T18:13:09.609952","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":89,"date":"2016-02-10 18:15:11.163126","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 1\n    def helper(x, total):\n        if x == 1:\n            return total\n        else:\n            total = total * term(x - 1)\n            return helper(x - 1, total)\n    return helper(n, total)\n\n","after":null,"SubmissionTime":"2016-02-10T18:15:11.163126","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":109,"date":"2016-02-10 18:17:56.947256","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 0:\n        return product(identity(n), identity(n-1))\n    else:\n        return 1\n\n","after":null,"SubmissionTime":"2016-02-10T18:17:56.947256","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 18:22:24.337601","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n        \n    if n >= 1:\n        return product(n-1, n*term(n))\n    else:\n        print (product)\n    \n    return product\n\n","after":null,"SubmissionTime":"2016-02-10T18:22:24.337601","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 18:23:58.487109","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def total_seq(i):\n        if n >= 1:\n            i = i + term(n)\n            return product(n-1, term)\n        else:\n            print(i)\n\n","after":null,"SubmissionTime":"2016-02-10T18:23:58.487109","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 18:25:17.278672","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def total_seq(i):\n        if n >= 1:\n            i = i + term(n)\n            return product(n-1, term)\n        else:\n            print(i)\n    return total_seq(i)\n\n","after":null,"SubmissionTime":"2016-02-10T18:25:17.278672","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 18:25:28.517529","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def total_seq(i):\n        if n >= 1:\n            i = i + term(n)\n            return product(n-1, term)\n        else:\n            print(i)\n    return total_seq\n\n","after":null,"SubmissionTime":"2016-02-10T18:25:28.517529","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":461,"date":"2016-02-10 18:32:13.060745","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def count_nums(n,term):\n        k,prod = 1, 0\n        while k <= n:\n            prod, k = prod * f(k), k+1\n        return prod\n    return count_nums(n,term)\n\n","after":null,"SubmissionTime":"2016-02-10T18:32:13.060745","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":461,"date":"2016-02-10 18:32:39.234354","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def count_nums(n,term):\n        k,prod = 1, 0\n        while k <= n:\n            prod, k = prod * term(k), k+1\n        return prod\n    return count_nums(n,term)\n\n","after":null,"SubmissionTime":"2016-02-10T18:32:39.234354","SynthesizedAfter":"\r\ndef product(n, term):\r\n    def count_nums(n, term):\r\n        k, prod = 1, 1\r\n        while k<=n:\r\n            prod, k = prod*term(k), k+1\r\n        return prod\r\n    return count_nums(n, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":461,"date":"2016-02-10 18:34:45.535812","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, prod = 1,1\n    while k <= n:\n        prod, k = prod * term(k,1), k+1\n    return prod\n\n","after":null,"SubmissionTime":"2016-02-10T18:34:45.535812","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":595,"date":"2016-02-10 18:35:40.851056","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(k):\n        if k == n - term + 1:\n            return k\n        elif k < (n - term + 1):\n            return k * counter(k + 1)\n\n    return counter(n)\n\n","after":null,"SubmissionTime":"2016-02-10T18:35:40.851056","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":595,"date":"2016-02-10 18:36:12.612801","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(k):\n        if k == (n - term + 1):\n            return k\n        elif k < (n - term + 1):\n            return k * counter(k + 1)\n\n    return counter(n)\n\n","after":null,"SubmissionTime":"2016-02-10T18:36:12.612801","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 18:39:45.173697","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def total_seq(n,i,total):\n        if n >= 1:\n            return total_seq(n-1, i+1, i+term(n))\n        else:\n            print(i)\n\n","after":null,"SubmissionTime":"2016-02-10T18:39:45.173697","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 18:40:33.237452","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def total_seq(n,i,total):\n        if n >= 1:\n            print (n)\n            return total_seq(n-1, i+1, i+term(n))\n        else:\n            print(i)\n\n","after":null,"SubmissionTime":"2016-02-10T18:40:33.237452","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 18:42:00.164105","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 0\n    \n    def total_seq(n,i,total):\n        if n >= 1:\n            print (n)\n            return total_seq(n-1, i+1, i  +term(n))\n        else:\n            print(i)\n\n","after":null,"SubmissionTime":"2016-02-10T18:42:00.164105","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 18:42:34.868806","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 0\n\n    def total_seq(n,i,total):\n        if n >= 1:\n            print (n)\n            return total_seq(n-1, i+1, i  +term(n))\n        else:\n            print(i)\n    return total_seq()\n\n","after":null,"SubmissionTime":"2016-02-10T18:42:34.868806","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 18:42:46.855034","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 0\n\n    def total_seq(n,i,total):\n        if n >= 1:\n            print (n)\n            return total_seq(n-1, i+1, i  +term(n))\n        else:\n            print(i)\n    return total_seq\n\n","after":null,"SubmissionTime":"2016-02-10T18:42:46.855034","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":802,"date":"2016-02-10 19:02:51.766809","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0 \n    def tracker(k):\n        if k>n:\n            return total \n        else:\n            total = total + term(k)\n            return tracker(k+1)\n    return tracker(1)\n\n\n","after":null,"SubmissionTime":"2016-02-10T19:02:51.766809","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":802,"date":"2016-02-10 19:03:41.066610","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0 \n    def tracker(k):\n        nonlocal total \n        if k>n:\n            return total \n        else:\n            total = total + term(k)\n            return tracker(k+1)\n    return tracker(1)\n\n\n","after":null,"SubmissionTime":"2016-02-10T19:03:41.06661","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":802,"date":"2016-02-10 19:06:39.080434","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0 \n    def product_tracker(k):\n        nonlocal total \n        if k > n:\n            return total \n        else:\n            total = total * term(k)\n            return product_tracker(k+1)\n    return tracker(1)\n\n\n","after":null,"SubmissionTime":"2016-02-10T19:06:39.080434","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":802,"date":"2016-02-10 19:06:52.168720","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0 \n    def product_tracker(k):\n        nonlocal total \n        if k > n:\n            return total \n        else:\n            total = total * term(k)\n            return product_tracker(k+1)\n    return product_tracker(1)\n\n\n","after":null,"SubmissionTime":"2016-02-10T19:06:52.16872","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":609,"date":"2016-02-10 19:07:36.000964","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i=1\n    sum =0\n    while i<=n:\n        sum += term(i)\n        i+=1\n    return sum\n\n","after":null,"SubmissionTime":"2016-02-10T19:07:36.000964","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":609,"date":"2016-02-10 19:08:28.615872","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i=1\n    sum =0\n    while i<=n:\n        sum *= term(i)\n        i+=1\n    return sum\n\n","after":null,"SubmissionTime":"2016-02-10T19:08:28.615872","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 19:08:52.386028","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    total = 0\n    def total_seq(n,i,total):\n        if n >= 1:\n            total = total +term(n)\n            i +=1\n            return total_seq(n-1, i, total)\n        else: \n            print(total)\n    return total_seq(n,i, total)\n\n","after":null,"SubmissionTime":"2016-02-10T19:08:52.386028","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 19:13:14.176158","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 0\n    total = 1\n    def total_seq(n,i,total):\n        if n >= 1:\n            total = total*term(n)\n            i +=1\n            return total_seq(n-1, i+1, total)\n        else: \n            print(total)\n    return total_seq(n,i, total)\n\n","after":null,"SubmissionTime":"2016-02-10T19:13:14.176158","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":468,"date":"2016-02-10 19:17:38.822013","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k=1\n    total=0\n    while k<n+1:\n        total=total+term(k)\n        k+1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-10T19:17:38.822013","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":468,"date":"2016-02-10 19:19:12.076059","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k=1\n    total=0\n    while k<n+1:\n        total=total*term(k)\n        k+1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-10T19:19:12.076059","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":468,"date":"2016-02-10 19:19:34.516891","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k=1\n    total=1\n    while k<n+1:\n        total=total*term(k)\n        k+1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-10T19:19:34.516891","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":194,"date":"2016-02-10 19:28:31.979954","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return term(n)\n    else:\n        return term(n) * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-10T19:28:31.979954","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, LeafConstNode(ConstantExpressionNode-1), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 19:35:37.108435","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 0\n    total = 1\n    def total_seq(n,i,total):\n        if n >= 1:\n            total = total*term(n)\n            return total_seq(n-1, i+1, total)\n        else: \n            print(total)\n    return total_seq(n,i, total)\n\n","after":null,"SubmissionTime":"2016-02-10T19:35:37.108435","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 19:38:05.567673","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 0\n    total = 1\n    def total_seq(n,i,total):\n        if n >= 1:\n            return total_seq(n-1, i+1, total*term(n))\n        else: \n            print(total)\n    return total_seq(n,i, total)\n\n","after":null,"SubmissionTime":"2016-02-10T19:38:05.567673","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 19:57:11.064219","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    def total_seq(n,total):\n        if n >= 1:\n            return total_seq(n-1, total*term(n))\n        else: \n            print(total)\n    return total_seq(n, total)\n\n","after":null,"SubmissionTime":"2016-02-10T19:57:11.064219","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 19:57:46.796153","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    def total_seq(n,term):\n        if n >= 1:\n            return total_seq(n-1, term(n)*term(n))\n        else: \n            print(term(n))\n    return total_seq(n, term)\n\n","after":null,"SubmissionTime":"2016-02-10T19:57:46.796153","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 19:58:14.030371","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    def total_seq(n,total):\n        if n >= 1:\n            return total_seq(n-1, total*term(n))\n        else: \n            print(total)\n    return total_seq(n, total)\n\n","after":null,"SubmissionTime":"2016-02-10T19:58:14.030371","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-10 20:00:01.584040","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 1:\n        return product(n-1, n*term(n))\n    else: \n        print(n)\n    \"\"\"total = 1\n    def total_seq(n,total):\n        if n >= 1:\n            return total_seq(n-1, total*term(n))\n        else: \n            print(total)\n    return total_seq(n, total)\"\"\"\n\n","after":null,"SubmissionTime":"2016-02-10T20:00:01.58404","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":507,"date":"2016-02-10 20:07:24.390935","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i, total = 1, 0\n    while i <= n:\n       total *= term(i)\n       i += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-10T20:07:24.390935","SynthesizedAfter":"\r\ndef product(n, term):\r\n    i, total = 1, 1\r\n    while i<=n:\r\n        total *= term(i)\r\n        i += 1\r\n    return total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":470,"date":"2016-02-10 20:16:30.086107","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 1\n    for i in range(n):\n        if term == identity:\n            total *= i\n        elif term == square:\n            total *= square(i)\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-10T20:16:30.086107","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":795,"date":"2016-02-10 20:19:03.720640","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    n > 0\n    x = product(n-1, term)\n    return term(n)*x\n\n","after":null,"SubmissionTime":"2016-02-10T20:19:03.72064","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":993,"date":"2016-02-10 20:28:04.917919","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    result = 1\n    i = 1\n    if i <= n:\n    \treturn result * term(i) * product(i + 1, term)\n    else:\n    \treturn result\n\n","after":null,"SubmissionTime":"2016-02-10T20:28:04.917919","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":103,"date":"2016-02-10 20:34:53.563535","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    value=0\n    def find_value(value, n, term):\n        if n<=0:\n            return value\n        else:\n            return find_value(value+term(n),n-1,term)\n    return find_value(value, n, term)\n\n","after":null,"SubmissionTime":"2016-02-10T20:34:53.563535","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":677,"date":"2016-02-10 20:38:43.807515","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    total = 0\n    while i <= n:\n        total *= term(i)\n        i += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-10T20:38:43.807515","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":595,"date":"2016-02-10 20:43:14.546824","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    def counter(k):\n        if k == n:\n            return term(k)\n        else:\n            return k * counter(k - 1)\n    return counter(1)\n\n\n","after":null,"SubmissionTime":"2016-02-10T20:43:14.546824","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":595,"date":"2016-02-10 20:46:04.287600","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    def counter(k):\n        if k == n:\n            return term(k)\n        else:\n            return k * counter(k + 1)\n    return counter(1)\n\n\n","after":null,"SubmissionTime":"2016-02-10T20:46:04.2876","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":509,"date":"2016-02-10 20:47:16.039538","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    counter = n - 1\n    while counter > 0:\n        return term(n) * term(counter)\n        counter -= 1\n\n","after":null,"SubmissionTime":"2016-02-10T20:47:16.039538","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":509,"date":"2016-02-10 20:48:29.516296","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    counter = n - 1\n    while counter > 0:\n        return term(n) * term(counter)\n    counter -= 1\n\n","after":null,"SubmissionTime":"2016-02-10T20:48:29.516296","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":509,"date":"2016-02-10 20:49:10.680958","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    counter = n - 1\n    while counter > 0:\n        return term(n) * term(counter)\n        counter -= 1\n        n -= 1\n\n","after":null,"SubmissionTime":"2016-02-10T20:49:10.680958","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":509,"date":"2016-02-10 20:49:15.845050","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    counter = n - 1\n    while counter > 0:\n        return term(n) * term(counter)\n        counter -= 1\n        n -= 1\n\n","after":null,"SubmissionTime":"2016-02-10T20:49:15.84505","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":509,"date":"2016-02-10 20:49:28.290355","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    counter = n - 1\n    while n > 0:\n        return term(n) * term(counter)\n        counter -= 1\n        n -= 1\n\n","after":null,"SubmissionTime":"2016-02-10T20:49:28.290355","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":509,"date":"2016-02-10 20:55:33.374458","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    counter = n - 1\n    result = 0\n    while n > 0:\n        final = term(n) * term(counter)\n        result += final\n        counter -= 1\n        n -= 1\n    return result\n\n","after":null,"SubmissionTime":"2016-02-10T20:55:33.374458","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":470,"date":"2016-02-10 20:57:29.310016","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 1\n    for i in range(1, n):\n        if term == identity:\n            total *= i\n        elif term == square:\n            total *= square(i)\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-10T20:57:29.310016","SynthesizedAfter":"\r\ndef product(n, term):\r\n    total = 1\r\n    for i in range(1, n+1):\r\n        if term==identity:\r\n            total *= i\r\n        elif term==square:\r\n            total *= square(i)\r\n    return total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\")))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":1,"Id":0,"studentId":13,"date":"2016-02-10 21:05:37.252039","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-10T21:05:37.252039","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":509,"date":"2016-02-10 21:10:29.635827","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    counter = 1\n    total = 1\n    while counter <= n:\n        counter = counter + 1\n        total = total * term(counter)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-10T21:10:29.635827","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":946,"date":"2016-02-10 21:11:15.013981","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i, total = 0):\n        if i == n:\n            return total + term(i)\n        else:\n            return counter(i + 1, total + term(i))\n    return counter(1)\n\n","after":null,"SubmissionTime":"2016-02-10T21:11:15.013981","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":850,"date":"2016-02-10 21:11:58.214447","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    term = 1\n    while n != identity:\n        identity = (identity * (identity + 1))\n\n\n","after":null,"SubmissionTime":"2016-02-10T21:11:58.214447","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":946,"date":"2016-02-10 21:13:11.592509","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i, total = 0):\n        if i == n:\n            return total * term(i)\n        else:\n            return counter(i + 1, total * term(i))\n    return counter(1)\n\n","after":null,"SubmissionTime":"2016-02-10T21:13:11.592509","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":509,"date":"2016-02-10 21:15:58.879837","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    counter = n - 1\n    while counter > 0:\n        total = total * term(counter)\n        counter -= 1\n    return total\n\n    # for i in range(1, n+1, 1):\n    #     total = total * term(i)\n    # return total\n\n","after":null,"SubmissionTime":"2016-02-10T21:15:58.879837","SynthesizedAfter":"\r\ndef product(n, term):\r\n    total = 1\r\n    counter = n-1\r\n    while counter>0:\r\n        total = total*term(counter+1)\r\n        counter -= 1\r\n    return total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":509,"date":"2016-02-10 21:22:56.242061","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    # total = 0\n    # counter = n - 1\n    # while counter > 0:\n    #     total = total * term(counter)\n    #     counter -= 1\n    # return total\n\n    for i in range(1, n+1, 1):\n        total = total * term(i)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-10T21:22:56.242061","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":509,"date":"2016-02-10 21:23:25.398773","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    # total = 0\n    # counter = n - 1\n    # while counter > 0:\n    #     total = total * term(counter)\n    #     counter -= 1\n    # return total\n\n    total = 0\n    for i in range(1, n+1, 1):\n        total = total * term(i)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-10T21:23:25.398773","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":120,"date":"2016-02-10 22:03:18.571583","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def multiplied(n, term):\n        if n == 1:\n            return 1\n        else:\n            result = term(n) * term(n - 1)\n        return multiplied(n - 1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-10T22:03:18.571583","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":120,"date":"2016-02-10 22:05:28.931259","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def multiplied(n, term):\n        if n == 1:\n            return 1\n        else:\n            result = term(n) * term(n - 1)\n    return multiplied(n - 1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-10T22:05:28.931259","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":120,"date":"2016-02-10 22:08:31.972942","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * product(n - 1)\n\n\n","after":null,"SubmissionTime":"2016-02-10T22:08:31.972942","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==0:\r\n        return 0\r\n    elif n==1:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":120,"date":"2016-02-10 22:08:45.615330","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * product(n - 1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-10T22:08:45.61533","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":120,"date":"2016-02-10 22:08:45.615330","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * product(n - 1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-10T22:08:45.61533","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":120,"date":"2016-02-10 22:12:24.419139","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def multiplied(n, term):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return n * multiplied(n - 1, term)\n    return multiplied(n - 1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-10T22:12:24.419139","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":120,"date":"2016-02-10 22:16:36.919041","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def multiplied(n, term):\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        result = n * multiplied(n - 1, term)\n    return multiplied(n - 1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-10T22:16:36.919041","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":120,"date":"2016-02-10 22:23:11.310270","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    while n != 1:\n        result = term(n) * term(n - 1)\n        n -= 1\n    return result\n\n\n","after":null,"SubmissionTime":"2016-02-10T22:23:11.31027","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":429,"date":"2016-02-10 22:28:20.052106","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def term(i):\n        if i > n:\n            return 0\n        else:\n            return term(i) * term(i + 1)\n    return term(1)\n\n","after":null,"SubmissionTime":"2016-02-10T22:28:20.052106","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":429,"date":"2016-02-10 22:29:47.578584","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def term(i, n):\n        if i > n:\n            return 0\n        else:\n            return term(i) * term(i + 1)\n    return term(1)\n\n","after":null,"SubmissionTime":"2016-02-10T22:29:47.578584","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":429,"date":"2016-02-10 22:30:08.431635","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def term(n, i):\n        if i > n:\n            return 0\n        else:\n            return term(i) * term(i + 1)\n    return term(1)\n\n","after":null,"SubmissionTime":"2016-02-10T22:30:08.431635","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":120,"date":"2016-02-10 22:30:12.768477","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    counter = 1\n    while counter != n:\n        result = term(n) * term(n - 1)\n        counter += 1\n        n -= 1\n    return result\n\n\n","after":null,"SubmissionTime":"2016-02-10T22:30:12.768477","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":429,"date":"2016-02-10 22:30:23.564561","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def term(n, i):\n        if i > n:\n            return 0\n        else:\n            return term(n, i) * term(n, i + 1)\n    return term(1)\n\n","after":null,"SubmissionTime":"2016-02-10T22:30:23.564561","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":429,"date":"2016-02-10 22:30:33.924763","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def term(n, i):\n        if i > n:\n            return 0\n        else:\n            return term(n, i) * term(n, i + 1)\n    return term(n, 1)\n\n","after":null,"SubmissionTime":"2016-02-10T22:30:33.924763","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":120,"date":"2016-02-10 22:31:48.614772","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def multiplied(n, term):\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        result = n * multiplied(n - 1, term)\n    return multiplied(n - 1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-10T22:31:48.614772","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":120,"date":"2016-02-10 22:32:06.398101","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def multiplied(n, term):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return n * multiplied(n - 1, term)\n    return multiplied(n - 1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-10T22:32:06.398101","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":120,"date":"2016-02-10 22:32:28.600611","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def multiplied(n, term):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            result = term(n) * term(n - 1)\n    return multiplied(n - 1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-10T22:32:28.600611","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":429,"date":"2016-02-10 22:44:00.869050","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper_function(i, n, term):\n        if i > n:\n            return 0\n        else:\n            return term(i) * term(i + 1)\n    return term(1)\n\n","after":null,"SubmissionTime":"2016-02-10T22:44:00.86905","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":429,"date":"2016-02-10 22:45:23.504552","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper_function(i, n, term):\n        if i > n:\n            return 1\n        else:\n            return term(i) * term(i + 1)\n    return term(1)\n\n","after":null,"SubmissionTime":"2016-02-10T22:45:23.504552","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":895,"date":"2016-02-10 23:03:52.300048","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(n)\n    else:\n        return n * term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-10T23:03:52.300048","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return term(n)\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":895,"date":"2016-02-10 23:04:53.413086","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(n)\n    else:\n        return n * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-10T23:04:53.413086","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":997,"date":"2016-02-10 23:24:54.813440","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 0\n    return term(n) * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-10T23:24:54.81344","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return 1\r\n    return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, LeafConstNode(ConstantExpressionNode-1), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":816,"date":"2016-02-10 23:48:36.561646","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def times(num):\n        if num < n:\n            return term(num) * product (num+1, term)\n        else: \n            return term(n)\n    return times(1)\n\n","after":null,"SubmissionTime":"2016-02-10T23:48:36.561646","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":816,"date":"2016-02-10 23:49:58.784788","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def times(num):\n        if num < n:\n            return term(num) * times (num+1, term)\n        else: \n            return term(n)\n    return times(1)\n\n","after":null,"SubmissionTime":"2016-02-10T23:49:58.784788","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":599,"date":"2016-02-11 00:08:48.258704","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def product_counter(counter, n, f):\n        if counter == n:\n            return f(n)\n        else: \n            return f(n) * product_counter((counter + 1), n, f)\n\n    return product_counter(1, n, term)\n\n","after":null,"SubmissionTime":"2016-02-11T00:08:48.258704","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":850,"date":"2016-02-11 00:56:53.359679","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x = 1\n    while n != x:\n        n *= term(n)\n        x = X + 1\n\n","after":null,"SubmissionTime":"2016-02-11T00:56:53.359679","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":850,"date":"2016-02-11 01:03:46.736151","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    while n != x:\n        total = term(n)\n        n = n - 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-11T01:03:46.736151","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":850,"date":"2016-02-11 01:04:37.496126","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    while n != x:\n        total += term(n)\n        n = n - 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-11T01:04:37.496126","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":850,"date":"2016-02-11 01:05:05.132892","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    while n >= 1:\n        total += term(n)\n        n = n - 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-11T01:05:05.132892","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":850,"date":"2016-02-11 01:25:58.697464","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    i = 1\n    while n >= i:\n        total += term(n)\n        n = n - 1\n        i = i + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-11T01:25:58.697464","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":850,"date":"2016-02-11 01:27:58.807675","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    i = 1\n    while n >= i:\n        total += term(n)\n        i = i + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-11T01:27:58.807675","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":850,"date":"2016-02-11 01:30:23.642531","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    i = 0\n    while n >= i:\n        total += term(n)\n        #n = n - 1\n        i = i + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-11T01:30:23.642531","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":850,"date":"2016-02-11 01:36:43.202144","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    i = 1\n    while n >= i:\n        total += term(n)\n        #n = n - 1\n        i = i + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-11T01:36:43.202144","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":850,"date":"2016-02-11 01:37:06.695624","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    i = 1\n    while n >= i:\n        total *= term(n)\n        #n = n - 1\n        i = i + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-11T01:37:06.695624","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":850,"date":"2016-02-11 01:37:55.876911","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 1\n    i = 1\n    while n >= i:\n        total *= term(n)\n        #n = n - 1\n        i = i + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-11T01:37:55.876911","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":850,"date":"2016-02-11 01:38:08.689367","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 1\n    i = 1\n    while n > i:\n        total *= term(n)\n        #n = n - 1\n        i = i + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-11T01:38:08.689367","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":850,"date":"2016-02-11 01:38:51.797239","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 1\n    i = 1\n    while n > i:\n        total *= term(i)\n        #n = n - 1\n        i = i + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-11T01:38:51.797239","SynthesizedAfter":"\r\ndef product(n, term):\r\n    total = 1\r\n    i = 1\r\n    while n>i:\r\n        total *= term(i+1)\r\n        i = i+1\r\n    return total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-11 07:20:39.389815","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    def total_seq(n,total):\n        if n >= 1:\n            return total_seq(n-1, total*term(n))\n        else: \n            print(total)\n    return total_seq(n, total)\n\n","after":null,"SubmissionTime":"2016-02-11T07:20:39.389815","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-11 07:36:49.110415","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def total_seq(n,total):\n        if n >= 1:\n            return total_seq(n-1, total*term(n))\n        else: \n            print(total)\n    return total_seq(n, 1)\n\n","after":null,"SubmissionTime":"2016-02-11T07:36:49.110415","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-11 07:39:00.458212","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def total_seq(n,total):\n        if n >= 1:\n            return total_seq(n-1, total*term(n))\n        print(total)\n    return total_seq(n, 1)\n\n","after":null,"SubmissionTime":"2016-02-11T07:39:00.458212","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-11 07:40:33.441576","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def total_seq(n,total):\n        if n >= 1:\n            total_seq(n-1, total*term(n))\n        print(total)\n    return total_seq(n, 1)\n\n","after":null,"SubmissionTime":"2016-02-11T07:40:33.441576","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-11 07:41:10.623074","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def total_seq(n,total):\n        if n >= 1:\n            return total_seq(n-1, total*term(n))\n        print(total)\n    return total_seq(n, 1)\n\n","after":null,"SubmissionTime":"2016-02-11T07:41:10.623074","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":348,"date":"2016-02-11 10:37:20.493052","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-11T10:37:20.493052","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":348,"date":"2016-02-11 10:43:12.053132","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    counter = 1\n    if n == 1:\n        return term(n)\n    elif n == 2:\n        return n * term(n-1)\n    else:\n        return n * product(n-1, term(n))\n\n","after":null,"SubmissionTime":"2016-02-11T10:43:12.053132","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":348,"date":"2016-02-11 10:46:07.833162","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(n)\n    elif n == 2:\n        return n * term(n-1)\n    else:\n        return n * product(n-1, term(n))\n\n","after":null,"SubmissionTime":"2016-02-11T10:46:07.833162","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":348,"date":"2016-02-11 10:48:38.202218","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(n)\n    else:\n        return n * product(n-1, term(n-1))\n\n","after":null,"SubmissionTime":"2016-02-11T10:48:38.202218","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":348,"date":"2016-02-11 10:49:15.159116","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(n)\n    else:\n        return n * product(n-1)\n\n","after":null,"SubmissionTime":"2016-02-11T10:49:15.159116","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return term(n)\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":348,"date":"2016-02-11 10:49:23.171993","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(n)\n    else:\n        return n * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-11T10:49:23.171993","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":348,"date":"2016-02-11 10:49:58.009760","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(n)\n    else:\n        return n * product(n-1, term(n-1))\n\n","after":null,"SubmissionTime":"2016-02-11T10:49:58.00976","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":348,"date":"2016-02-11 10:56:55.158730","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(n)\n    else:\n        return n * product(n-1, term(n))\n\n","after":null,"SubmissionTime":"2016-02-11T10:56:55.15873","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":348,"date":"2016-02-11 10:57:38.132239","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(n)\n    else:\n        i = n-1\n        return n * product(i, term(i))\n\n","after":null,"SubmissionTime":"2016-02-11T10:57:38.132239","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":348,"date":"2016-02-11 10:59:36.158746","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(n)\n    else:\n        return n * product(n-1, term(n-1))\n\n","after":null,"SubmissionTime":"2016-02-11T10:59:36.158746","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":348,"date":"2016-02-11 11:00:54.047339","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(n)\n    else:\n        return n * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-11T11:00:54.047339","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":348,"date":"2016-02-11 11:03:47.329188","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(n)\n    else:\n        return term(n) * product(n-1)\n\n","after":null,"SubmissionTime":"2016-02-11T11:03:47.329188","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":958,"date":"2016-02-11 11:51:01.494215","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return identity(n)\n    else:\n        return term(n) * produce(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-11T11:51:01.494215","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":106,"date":"2016-02-11 12:02:56.432243","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        x = term(n)\n        return x*(n-1)\n    \n\n","after":null,"SubmissionTime":"2016-02-11T12:02:56.432243","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":106,"date":"2016-02-11 12:05:21.781816","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        x = term(n)\n        return x*term(n-1)\n    \n\n","after":null,"SubmissionTime":"2016-02-11T12:05:21.781816","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":474,"date":"2016-02-11 12:07:43.321574","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(1)\n    else:\n        return term(n) * product(n-1)\n\n","after":null,"SubmissionTime":"2016-02-11T12:07:43.321574","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return term(1)\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":317,"date":"2016-02-11 12:23:07.352342","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return term(n)\n    return n * term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-11T12:23:07.352342","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":317,"date":"2016-02-11 12:24:27.960131","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return term(n)\n    return n * term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-11T12:24:27.960131","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return term(n)\r\n    return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":575,"date":"2016-02-11 12:30:42.007304","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    return n * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-11T12:30:42.007304","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":575,"date":"2016-02-11 12:32:05.261226","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 0:\n        return n * product(n-1, term)\n    else:\n        return n * product(1, term)\n\n","after":null,"SubmissionTime":"2016-02-11T12:32:05.261226","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":575,"date":"2016-02-11 12:32:13.123200","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 0:\n        return n * product(n-1, term)\n    else:\n        return n \n\n","after":null,"SubmissionTime":"2016-02-11T12:32:13.1232","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":99,"date":"2016-02-11 12:32:29.649444","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 1\n    return term(n) * term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-11T12:32:29.649444","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==0:\r\n        return 1\r\n    return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":99,"date":"2016-02-11 12:33:01.541135","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 1\n    return term(n) * prodcut(n-1)\n\n","after":null,"SubmissionTime":"2016-02-11T12:33:01.541135","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":99,"date":"2016-02-11 12:33:13.072878","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 1\n    return term(n) * product(n-1)\n\n","after":null,"SubmissionTime":"2016-02-11T12:33:13.072878","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":99,"date":"2016-02-11 12:33:32.464880","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 1\n    return term(n) * product(term(n-1))\n\n","after":null,"SubmissionTime":"2016-02-11T12:33:32.46488","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":575,"date":"2016-02-11 12:35:03.966498","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        return term(n) + product(n-1)\n\n","after":null,"SubmissionTime":"2016-02-11T12:35:03.966498","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":575,"date":"2016-02-11 12:35:35.221372","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        return term(n) + product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-11T12:35:35.221372","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":394,"date":"2016-02-11 12:37:58.876253","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return term(n) + product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-11T12:37:58.876253","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return term(1)\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(ConstantExpressionNode-1)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":394,"date":"2016-02-11 12:39:04.140529","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return term(n) * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-11T12:39:04.140529","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":575,"date":"2016-02-11 12:39:24.202590","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        return term(n) * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-11T12:39:24.20259","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n<1:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, LeafConstNode(ConstantExpressionNode-1), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":575,"date":"2016-02-11 12:40:10.238020","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        return term(n) + product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-11T12:40:10.23802","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":781,"date":"2016-02-11 12:48:25.920681","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==0:\n        return term(n)\n    else:\n        return term(n) * product(n-1)\n\n\n    \"\"\"def product_helper(i):\n        if i==n:\n            return term(i)\n        else:\n            return term(i) * product_helper(i+1)\n    return product_helper(1)\"\"\"\n\n","after":null,"SubmissionTime":"2016-02-11T12:48:25.920681","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":877,"date":"2016-02-11 12:53:51.589464","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    for i in term:\n        total *= i\n    return total\n\n","after":null,"SubmissionTime":"2016-02-11T12:53:51.589464","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":877,"date":"2016-02-11 12:55:40.652634","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    for i in range(n):\n        total *= term(i)\n    return total * term (n)\n","after":null,"SubmissionTime":"2016-02-11T12:55:40.652634","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1,"date":"2016-02-11 13:58:50.178606","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = 1\n    a = 1\n    if k <= n:\n    \ta = a * term(k)\n    \tk += 1\n    return a \n\n","after":null,"SubmissionTime":"2016-02-11T13:58:50.178606","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":377,"date":"2016-02-11 14:15:18.122438","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-11T14:15:18.122438","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":120,"date":"2016-02-11 14:20:34.248669","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    counter = 1\n    while counter != n + 1:\n        result = term(n) * term(n - 1)\n        counter += 1\n    return result\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T14:20:34.248669","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":120,"date":"2016-02-11 14:21:09.693573","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    while counter != n + 1:\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        counter = 1\n        result = term(n) * term(n - 1)\n        counter += 1\n    return result\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T14:21:09.693573","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":120,"date":"2016-02-11 14:21:25.102527","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    counter = 1\n    while counter != n + 1:\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        result = term(n) * term(n - 1)\n        counter += 1\n    return result\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T14:21:25.102527","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":120,"date":"2016-02-11 14:22:34.998244","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    counter = 1\n    while counter != n + 1:\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        result = term(counter) * term(counter + 1)\n        counter += 1\n    return result\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T14:22:34.998244","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":12,"date":"2016-02-11 14:23:23.044832","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-11T14:23:23.044832","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":120,"date":"2016-02-11 14:24:37.795565","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    counter = 1\n    while counter != n:\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        result = term(counter) * term(counter + 1)\n        counter += 1\n    return result\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T14:24:37.795565","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":120,"date":"2016-02-11 14:26:35.827460","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    counter = 1\n    while counter != n + 1:\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        result = term(counter) * term(counter + 1)\n        counter += 1\n    return result\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T14:26:35.82746","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":120,"date":"2016-02-11 14:28:18.230689","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    counter = 1\n    while counter != n + 1:\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        result = term(counter)\n        final = result * term(counter + 1)\n    return final \n\n\n\n","after":null,"SubmissionTime":"2016-02-11T14:28:18.230689","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":62,"date":"2016-02-11 14:48:42.380703","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total * term(k), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-11T14:48:42.380703","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":184,"date":"2016-02-11 14:56:36.309848","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def f(n):\n        if n==1:\n            return 1\n        else:\n            return term(n)*g(n-1)\n    def g(n):\n        if n==1:\n            return 1\n        else:\n            return term(n)*f(n-1)\n    f(n)\n\n","after":null,"SubmissionTime":"2016-02-11T14:56:36.309848","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":98,"date":"2016-02-11 14:57:57.987828","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    k = 1\n    while k <= n:\n        total = total + term(k)\n        k = k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-11T14:57:57.987828","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":79,"date":"2016-02-11 14:58:43.412597","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, identity = 0, 1\n    while k <= n:\n        total, k = total * identity, k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-11T14:58:43.412597","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":98,"date":"2016-02-11 14:59:22.107714","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    k = 1\n    while k <= n:\n        total = total * term(k)\n        k = k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-11T14:59:22.107714","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":79,"date":"2016-02-11 14:59:27.043526","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, identity = 0, 1\n    while k <= n:\n        total, k = total * identity, k + 1\n    return product(total, identity)\n\n","after":null,"SubmissionTime":"2016-02-11T14:59:27.043526","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":79,"date":"2016-02-11 14:59:59.597093","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, identity = 0, 1\n    while identity <= n:\n        total, identity = total * identity, identity + 1\n    return product(total, identity)\n\n","after":null,"SubmissionTime":"2016-02-11T14:59:59.597093","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":428,"date":"2016-02-11 15:12:35.880026","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k = 1\n    while n > k:\n        k += 1\n    def term(func):\n        while n > 0:\n            return func(lambda x: x)\n    return product(n, term)\n","after":null,"SubmissionTime":"2016-02-11T15:12:35.880026","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":776,"date":"2016-02-11 15:13:32.216138","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    total = 1\n    while i <= 1:\n        total = total * term(i)\n        i = i + 1 \n    return (total)\n","after":null,"SubmissionTime":"2016-02-11T15:13:32.216138","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":393,"date":"2016-02-11 15:16:49.601647","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, term = 1, 0 \n    while k<= n:\n        term, k, term*f(k), k+1\n    return term\n\n","after":null,"SubmissionTime":"2016-02-11T15:16:49.601647","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":393,"date":"2016-02-11 15:18:19.242165","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def helper(n, acc):\n        if n > 0:\n            return helper(n-1, acc)\n        print(acc)\n    return helper(n, 1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T15:18:19.242165","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":776,"date":"2016-02-11 15:18:53.939384","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    total = 1\n    while i <= n:\n        total = total * term(i)\n        i = i + 1 \n    return (total)\n","after":null,"SubmissionTime":"2016-02-11T15:18:53.939384","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":776,"date":"2016-02-11 15:19:07.494029","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    total = 1\n    while i <= n:\n        total = total * term(i)\n        i = i + 1 \n    return total\n","after":null,"SubmissionTime":"2016-02-11T15:19:07.494029","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":776,"date":"2016-02-11 15:20:08.239735","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    total = 1\n    while i <= n:\n        total = total * term(i)\n        i = i + 1 \n    return total\n    \n","after":null,"SubmissionTime":"2016-02-11T15:20:08.239735","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":79,"date":"2016-02-11 15:20:25.164153","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, identity = 1, 1\n    while identity <= n:\n        total, identity = total * term(identity), identity + 1\n    return product(total, identity)\n\n","after":null,"SubmissionTime":"2016-02-11T15:20:25.164153","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":776,"date":"2016-02-11 15:20:56.955245","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    total = 1\n    while i <= n:\n        total = total * term(i)\n        i = i + 1 \n    return total\n\n","after":null,"SubmissionTime":"2016-02-11T15:20:56.955245","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":79,"date":"2016-02-11 15:21:57.141722","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, identity = 1, 1\n    while identity < n:\n        total, identity = total * term(identity), identity + 1\n    return product(total, identity)\n\n","after":null,"SubmissionTime":"2016-02-11T15:21:57.141722","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":497,"date":"2016-02-11 15:23:29.870884","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if k <= n: \n        return total * product(k + 1, term)\n    product(1, term) \n\n","after":null,"SubmissionTime":"2016-02-11T15:23:29.870884","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":497,"date":"2016-02-11 15:24:54.090040","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def helper(k):\n        if k <= n: \n            return total * helper(k + 1, term)\n        helper(1, term) \n\n","after":null,"SubmissionTime":"2016-02-11T15:24:54.09004","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":497,"date":"2016-02-11 15:25:08.805500","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def helper(k):\n        if k <= n: \n            return total * product(k + 1, term)\n        helper(1, term) \n\n","after":null,"SubmissionTime":"2016-02-11T15:25:08.8055","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":598,"date":"2016-02-11 15:25:10.590307","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-11T15:25:10.590307","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":497,"date":"2016-02-11 15:25:24.346501","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def helper(k):\n        if k <= n: \n            return total * product(k + 1, term)\n    helper(1, term) \n\n","after":null,"SubmissionTime":"2016-02-11T15:25:24.346501","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":497,"date":"2016-02-11 15:25:35.479007","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def helper(k):\n        if k <= n: \n            return total * product(k + 1, term)\n    return helper(1, term) \n\n","after":null,"SubmissionTime":"2016-02-11T15:25:35.479007","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":497,"date":"2016-02-11 15:25:46.772328","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def helper(k):\n        if k <= n: \n            return total * product(k + 1, term)\n    return helper(1) \n\n","after":null,"SubmissionTime":"2016-02-11T15:25:46.772328","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":497,"date":"2016-02-11 15:26:14.776965","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def helper(k):\n        if k <= n: \n            return k * product(k + 1, term)\n    return helper(1) \n\n","after":null,"SubmissionTime":"2016-02-11T15:26:14.776965","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":497,"date":"2016-02-11 15:26:27.072958","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def helper(k):\n        if k <= n: \n            return k * helper(k + 1)\n    return helper(1) \n\n","after":null,"SubmissionTime":"2016-02-11T15:26:27.072958","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":39,"date":"2016-02-11 15:28:41.451107","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return total\n\n    # n goes down 1 every time you go through the code until it reaches 1, where\n    # you just return the total\n    # everytime you go through the loop, multiply the term applied to n by\n    # the term applied to (n-1) since you decrease 1 each time until you reach 1.\n    # but every time you go through the loop, you need to multiply your previous\n    # term(n) you got to total\n    return term(n) * product(n-1, term)\n    #base case--> start from n and go down to 1\n    # if n is 1, return 1 * total\n\n","after":null,"SubmissionTime":"2016-02-11T15:28:41.451107","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return 1\r\n    return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, LeafConstNode(ConstantExpressionNode-1), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":497,"date":"2016-02-11 15:29:15.053441","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def helper(k, term):\n        if k <= n: \n            return k * helper(k + 1, term)\n    return helper(1) \n\n","after":null,"SubmissionTime":"2016-02-11T15:29:15.053441","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":39,"date":"2016-02-11 15:29:24.189002","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return \n\n    # n goes down 1 every time you go through the code until it reaches 1, where\n    # you just return the total\n    # everytime you go through the loop, multiply the term applied to n by\n    # the term applied to (n-1) since you decrease 1 each time until you reach 1.\n    # but every time you go through the loop, you need to multiply your previous\n    # term(n) you got to total\n    return term(n) * product(n-1, term)\n    #base case--> start from n and go down to 1\n    # if n is 1, return 1 * total\n\n","after":null,"SubmissionTime":"2016-02-11T15:29:24.189002","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":497,"date":"2016-02-11 15:29:44.977882","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def helper(k, term):\n        if k <= n: \n            return k * term(k + 1)\n    return helper(1) \n\n","after":null,"SubmissionTime":"2016-02-11T15:29:44.977882","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":497,"date":"2016-02-11 15:32:34.280035","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if k <= n:\n        return k * term(k + 1)\n    return product(1, term)\n\n","after":null,"SubmissionTime":"2016-02-11T15:32:34.280035","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":497,"date":"2016-02-11 15:37:31.857061","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, 1 \n    if k <= n:\n        return k * term(k + 1)\n    return product(1, term)\n\n","after":null,"SubmissionTime":"2016-02-11T15:37:31.857061","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":497,"date":"2016-02-11 15:37:57.663475","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, 1 \n    if k <= n:\n        return k * term(k + 1)\n    else: \n        return 1\n    return product(1, term)\n\n","after":null,"SubmissionTime":"2016-02-11T15:37:57.663475","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":497,"date":"2016-02-11 15:38:35.496747","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, 1 \n    if k <= n:\n        return term(k) * term(k + 1)\n    else: \n        return 1\n    return product(1, term)\n\n","after":null,"SubmissionTime":"2016-02-11T15:38:35.496747","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":497,"date":"2016-02-11 15:40:37.675648","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = 1 \n    if k <= n:\n        return term(k) * term(k + 1)\n    else: \n        return 1\n    return product(1, term)\n\n","after":null,"SubmissionTime":"2016-02-11T15:40:37.675648","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":497,"date":"2016-02-11 15:40:56.795340","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = 1 \n    if k <= n:\n        return term(k) * term(k + 1)\n    else: \n        return term(k) \n    return product(1, term)\n\n","after":null,"SubmissionTime":"2016-02-11T15:40:56.79534","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":497,"date":"2016-02-11 15:41:09.931337","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = 1 \n    if k <= n:\n        return term(k) * term(k + 1)\n    else: \n        return term(k) \n\n","after":null,"SubmissionTime":"2016-02-11T15:41:09.931337","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":497,"date":"2016-02-11 15:46:26.808627","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = 1 \n    if k < n:\n        return term(k) * term(k + 1)\n    else: \n        return term(k) \n\n","after":null,"SubmissionTime":"2016-02-11T15:46:26.808627","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":402,"date":"2016-02-11 15:47:42.955461","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def counter(count):\n        if count == n:\n            return term(n)\n        else:\n            return product(count-1, term)\n    return counter(n)\n\n","after":null,"SubmissionTime":"2016-02-11T15:47:42.955461","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":402,"date":"2016-02-11 15:49:50.503304","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def counter(count):\n        if count == n:\n            return term(n)\n        else:\n            return term(count) * product(count-1, term)\n    return counter(n)\n\n","after":null,"SubmissionTime":"2016-02-11T15:49:50.503304","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":402,"date":"2016-02-11 15:50:06.129210","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def counter(count):\n        if count == n:\n            return term(n)\n        else:\n            return term(count) * product(count+1, term)\n    return counter(n)\n\n","after":null,"SubmissionTime":"2016-02-11T15:50:06.12921","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":402,"date":"2016-02-11 15:50:34.345069","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def counter(count):\n        if count == n:\n            return term(n)\n        else:\n            return term(count) * product(count+1, term)\n    return counter(1)\n\n","after":null,"SubmissionTime":"2016-02-11T15:50:34.345069","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":39,"date":"2016-02-11 15:54:45.237382","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    #def total_prod(x, total):\n    if n == 1:\n        return\n    else:\n        return term(n) * product(n-1, term)\n    #return total_prod(1, 1)\n    # n goes down 1 every time you go through the code until it reaches 1, where\n    # you just return the total\n    # everytime you go through the loop, multiply the term applied to n by\n    # the term applied to (n-1) since you decrease 1 each time until you reach 1.\n    # but every time you go through the loop, you need to multiply your previous\n    # term(n) you got to total\n    #base case--> start from n and go down to 1\n    # if n is 1, return 1 * total\n\n","after":null,"SubmissionTime":"2016-02-11T15:54:45.237382","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":39,"date":"2016-02-11 15:55:14.475608","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    #def total_prod(x, total):\n    if n == 1:\n        return\n    else:\n        new = term(n)\n        return new * product(n-1, term)\n    #return total_prod(1, 1)\n    # n goes down 1 every time you go through the code until it reaches 1, where\n    # you just return the total\n    # everytime you go through the loop, multiply the term applied to n by\n    # the term applied to (n-1) since you decrease 1 each time until you reach 1.\n    # but every time you go through the loop, you need to multiply your previous\n    # term(n) you got to total\n    #base case--> start from n and go down to 1\n    # if n is 1, return 1 * total\n\n","after":null,"SubmissionTime":"2016-02-11T15:55:14.475608","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":39,"date":"2016-02-11 15:55:37.830358","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    #def total_prod(x, total):\n    if n == 1:\n        return\n    else:\n        #new = term(n)\n        return n * product(n-1, term)\n    #return total_prod(1, 1)\n    # n goes down 1 every time you go through the code until it reaches 1, where\n    # you just return the total\n    # everytime you go through the loop, multiply the term applied to n by\n    # the term applied to (n-1) since you decrease 1 each time until you reach 1.\n    # but every time you go through the loop, you need to multiply your previous\n    # term(n) you got to total\n    #base case--> start from n and go down to 1\n    # if n is 1, return 1 * total\n\n","after":null,"SubmissionTime":"2016-02-11T15:55:37.830358","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":497,"date":"2016-02-11 16:18:56.555374","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = 1 \n    if k == 1:\n        return 1\n    elif k < n:\n        return term(k) * term(k + 1)\n    else: \n        return term(k) \n\n","after":null,"SubmissionTime":"2016-02-11T16:18:56.555374","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":497,"date":"2016-02-11 16:18:56.555374","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = 1 \n    if k == 1:\n        return 1\n    elif k < n:\n        return term(k) * term(k + 1)\n    else: \n        return term(k) \n\n","after":null,"SubmissionTime":"2016-02-11T16:18:56.555374","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":497,"date":"2016-02-11 16:19:41.442083","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = 1 \n    if k < n:\n        return term(k) * term(k + 1)\n    else: \n        return term(k) \n\n","after":null,"SubmissionTime":"2016-02-11T16:19:41.442083","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":39,"date":"2016-02-11 16:32:23.314388","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def total_prod(x, total):\n        if x == n:\n            return\n        else:\n            return product(x+1, total * term(x))\n    return total_prod(1, 1)\n    # n goes down 1 every time you go through the code until it reaches 1, where\n    # you just return the total\n    # everytime you go through the loop, multiply the term applied to n by\n    # the term applied to (n-1) since you decrease 1 each time until you reach 1.\n    # but every time you go through the loop, you need to multiply your previous\n    # term(n) you got to total\n    #base case--> start from n and go down to 1\n    # if n is 1, return 1 * total\n\n","after":null,"SubmissionTime":"2016-02-11T16:32:23.314388","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":39,"date":"2016-02-11 16:33:09.880264","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def total_prod(x, total):\n        if x == n:\n            return\n        else:\n            return product(x+1, total * int(term(x)))\n    return total_prod(1, 1)\n    # n goes down 1 every time you go through the code until it reaches 1, where\n    # you just return the total\n    # everytime you go through the loop, multiply the term applied to n by\n    # the term applied to (n-1) since you decrease 1 each time until you reach 1.\n    # but every time you go through the loop, you need to multiply your previous\n    # term(n) you got to total\n    #base case--> start from n and go down to 1\n    # if n is 1, return 1 * total\n\n","after":null,"SubmissionTime":"2016-02-11T16:33:09.880264","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":39,"date":"2016-02-11 16:40:40.432044","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def total_prod(x, total):\n        if x == n:\n            return total * term(x)\n        else:\n            return product(x+1, total * term(x))\n    return total_prod(1, 1)\n\n# term becomes 1 instead of staying as square\n    # n goes down 1 every time you go through the code until it reaches 1, where\n    # you just return the total\n    # everytime you go through the loop, multiply the term applied to n by\n    # the term applied to (n-1) since you decrease 1 each time until you reach 1.\n    # but every time you go through the loop, you need to multiply your previous\n    # term(n) you got to total\n    #base case--> start from n and go down to 1\n    # if n is 1, return 1 * total\n\n","after":null,"SubmissionTime":"2016-02-11T16:40:40.432044","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":39,"date":"2016-02-11 16:40:45.880721","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def total_prod(x, total):\n        if x == n:\n            return total * term(x)\n        else:\n            return product(x+1, total * term(x+1))\n    return total_prod(1, 1)\n\n# term becomes 1 instead of staying as square\n    # n goes down 1 every time you go through the code until it reaches 1, where\n    # you just return the total\n    # everytime you go through the loop, multiply the term applied to n by\n    # the term applied to (n-1) since you decrease 1 each time until you reach 1.\n    # but every time you go through the loop, you need to multiply your previous\n    # term(n) you got to total\n    #base case--> start from n and go down to 1\n    # if n is 1, return 1 * total\n\n","after":null,"SubmissionTime":"2016-02-11T16:40:45.880721","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":39,"date":"2016-02-11 16:41:45.294757","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def total_prod(x, total):\n        if x == n:\n            return total * term(x)\n        #else:\n            #return product(x+1, total * term(x+1))\n    return total_prod(1, 1)\n\n# term becomes 1 instead of staying as square\n    # n goes down 1 every time you go through the code until it reaches 1, where\n    # you just return the total\n    # everytime you go through the loop, multiply the term applied to n by\n    # the term applied to (n-1) since you decrease 1 each time until you reach 1.\n    # but every time you go through the loop, you need to multiply your previous\n    # term(n) you got to total\n    #base case--> start from n and go down to 1\n    # if n is 1, return 1 * total\n\n","after":null,"SubmissionTime":"2016-02-11T16:41:45.294757","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":770,"date":"2016-02-11 16:51:09.281994","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    a = 1\n    while a <= n:\n        return term(n) * product(n-1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-11T16:51:09.281994","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":770,"date":"2016-02-11 16:52:02.653687","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    a = 1\n    while a <= n:\n        return term(n) * product(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-11T16:52:02.653687","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":770,"date":"2016-02-11 17:03:53.655231","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n >= 1:\n        return term(n) * product(n-1, term)\n        \n\n\n","after":null,"SubmissionTime":"2016-02-11T17:03:53.655231","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":290,"date":"2016-02-11 17:09:51.276098","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, count = 0, 1\n    total += term(n)\n    count += count\n    if count == n:\n        return total\n    return product(n+1, term) * total\n\n\n","after":null,"SubmissionTime":"2016-02-11T17:09:51.276098","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":290,"date":"2016-02-11 17:10:58.234257","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, count = 0, 1\n    count += count\n    if count == n:\n        return total\n    total += term(n)\n    return product(n+1, term) * total\n\n\n","after":null,"SubmissionTime":"2016-02-11T17:10:58.234257","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":290,"date":"2016-02-11 17:13:17.980460","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return total\n    total = term(n)\n    return product(n-1, term) * total\n\n\n","after":null,"SubmissionTime":"2016-02-11T17:13:17.98046","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return 1\r\n    total = term(n)\r\n    return product(n-1, term)*total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, LeafConstNode(ConstantExpressionNode-1), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":857,"date":"2016-02-11 17:25:13.147295","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n    \treturn n\n    else:\n    \treturn product(n, term) * product (n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-11T17:25:13.147295","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return n\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-term)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":967,"date":"2016-02-11 17:53:21.953746","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + term(k), k + 1\n    return total\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T17:53:21.953746","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":330,"date":"2016-02-11 17:57:45.714130","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    c = 1\n    if c >= n:\n        return term(c)\n    else:\n        return term(c+1)\n\n","after":null,"SubmissionTime":"2016-02-11T17:57:45.71413","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":330,"date":"2016-02-11 17:58:51.697354","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    c = 1\n    if c >= n:\n        return term(0)\n    else:\n        return term(c) + term(c+1)\n\n","after":null,"SubmissionTime":"2016-02-11T17:58:51.697354","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":330,"date":"2016-02-11 18:00:11.021235","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n + term(n)\n\n","after":null,"SubmissionTime":"2016-02-11T18:00:11.021235","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":428,"date":"2016-02-11 18:08:04.652233","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k = 1\n    def term(func):\n        while n > 0:\n            return func(lambda x: x)\n    while n > k:\n        n += 1\n        return product(n, term)\n","after":null,"SubmissionTime":"2016-02-11T18:08:04.652233","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":428,"date":"2016-02-11 18:08:23.551634","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k = 1\n    def term(func):\n        while n > 0:\n            return func(lambda x: x)\n    while n > k:\n        n -= 1\n        return product(n, term)\n","after":null,"SubmissionTime":"2016-02-11T18:08:23.551634","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":428,"date":"2016-02-11 18:09:03.147289","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k = 1\n    def term(func):\n        while n > 0:\n            return func(lambda x: x)\n    while n > k:\n        k * n\n        n -= 1\n        return product(n, term)\n","after":null,"SubmissionTime":"2016-02-11T18:09:03.147289","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":330,"date":"2016-02-11 18:09:19.058071","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    if i == n:\n        return term(n)\n    else:\n        return term(i)*term(i+1)\n\n","after":null,"SubmissionTime":"2016-02-11T18:09:19.058071","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":428,"date":"2016-02-11 18:09:42.136943","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k = 1\n    def term(func):\n        while n > 0:\n            return func(n)\n    while n > k:\n        k * n\n        n -= 1\n        return product(n, term)\n","after":null,"SubmissionTime":"2016-02-11T18:09:42.136943","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":330,"date":"2016-02-11 18:13:36.326275","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    counter = 1\n    if counter == n:\n        return term(n)\n    else:\n        return term(counter)*term(counter+1)\n\n","after":null,"SubmissionTime":"2016-02-11T18:13:36.326275","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":428,"date":"2016-02-11 18:13:43.758437","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k = 1\n    total = 1\n    while k <= n:\n        k += 1\n        total = total * term(k)\n    return total\n","after":null,"SubmissionTime":"2016-02-11T18:13:43.758437","SynthesizedAfter":"\r\ndef product(n, term):\r\n    k = 1\r\n    total = 1\r\n    while k<n:\r\n        k += 1\r\n        total = total*term(k)\r\n    return total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThan, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":428,"date":"2016-02-11 18:15:44.823375","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k = 1\n    total = 1\n    while k <= n:\n        k = k + 1\n        total = total * term(k)\n    return total\n","after":null,"SubmissionTime":"2016-02-11T18:15:44.823375","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":366,"date":"2016-02-11 18:16:44.280212","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-11T18:16:44.280212","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":330,"date":"2016-02-11 18:23:08.411632","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return term(n)*term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-11T18:23:08.411632","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":330,"date":"2016-02-11 18:25:49.301006","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k < n:\n        total, k = total + term(k), k+1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-11T18:25:49.301006","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":330,"date":"2016-02-11 18:26:17.469565","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + term(k), k+1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-11T18:26:17.469565","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":330,"date":"2016-02-11 18:26:25.084117","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k >= n:\n        total, k = total + term(k), k+1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-11T18:26:25.084117","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":330,"date":"2016-02-11 18:27:02.085953","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + term(k), k+1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-11T18:27:02.085953","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":366,"date":"2016-02-11 18:32:39.681917","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k, product = 0, 1\n    while k<=n:\n        product, k = product*term(k), k +1 \n    return product\n\n","after":null,"SubmissionTime":"2016-02-11T18:32:39.681917","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":366,"date":"2016-02-11 18:34:36.067302","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k, product = 0, 1\n    while k<=n:\n\n        product, k = product*term(k), k +1\n\n    return product\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T18:34:36.067302","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":641,"date":"2016-02-11 18:36:45.644974","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-11T18:36:45.644974","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":577,"date":"2016-02-11 18:54:20.995283","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def product(n, term):\n        def helper(m):\n            if m==1:\n                return term(m)\n            else:\n                return (m*helper(term(m-1)))\n        return (helper(n))\n\n","after":null,"SubmissionTime":"2016-02-11T18:54:20.995283","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":744,"date":"2016-02-11 19:09:44.337780","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-11T19:09:44.33778","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":744,"date":"2016-02-11 19:13:13.443028","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * product(n-1)\n\n","after":null,"SubmissionTime":"2016-02-11T19:13:13.443028","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==0 or n==1:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":577,"date":"2016-02-11 19:15:41.514197","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    if m==1:\n        return term(n)\n    else:\n        return (term(n)*product(n-1))\n\n\n","after":null,"SubmissionTime":"2016-02-11T19:15:41.514197","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":577,"date":"2016-02-11 19:15:57.616914","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    if n==1:\n        return term(n)\n    else:\n        return (term(n)*product(n-1))\n\n\n","after":null,"SubmissionTime":"2016-02-11T19:15:57.616914","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return term(n)\r\n    else:\r\n        return (term(n)*product(n-1, term))","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":338,"date":"2016-02-11 19:19:24.225375","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 0\n    if x == n:\n        return n\n    elif x == 0:\n        incerement(x)\n        return square(x)\n        return product(n-1,term)\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T19:19:24.225375","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":338,"date":"2016-02-11 19:20:31.090423","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 0\n    if x == n:\n        return n\n    elif x == 0:\n        increment(x)\n        return square(x)\n        return product(n-1,term)\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T19:20:31.090423","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":338,"date":"2016-02-11 19:21:01.404560","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 0\n    if x == n:\n        return n\n    elif x == 0:\n        increment(x)\n        return square(x)\n        return product(n+1,term)\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T19:21:01.40456","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":338,"date":"2016-02-11 19:21:58.220431","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 0\n    if x == n:\n        return n\n    elif x == 0:\n        increment(x)\n        return square(x)\n        \n\n\n\n","after":null,"SubmissionTime":"2016-02-11T19:21:58.220431","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":744,"date":"2016-02-11 19:24:46.800949","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    t, i = 1, 1\n    while i <= n:\n        t *= term(i)\n        i += 1\n        return t\n\n","after":null,"SubmissionTime":"2016-02-11T19:24:46.800949","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":257,"date":"2016-02-11 19:25:16.536592","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    theList = range(1, n+1)\n    for i in theList:\n        theList = [term(i)]\n    total = reduce(mul, theList, 1)\n    return total\n","after":null,"SubmissionTime":"2016-02-11T19:25:16.536592","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":257,"date":"2016-02-11 19:28:50.744740","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    theList = range(1, n+1)\n    for i in theList:\n        list1 = [term(i)]\n    total = reduce(mul, list1, 1)\n    return total\n","after":null,"SubmissionTime":"2016-02-11T19:28:50.74474","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":257,"date":"2016-02-11 19:31:15.643267","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    theList = list(range(1, n+1))\n    for i in theList:\n        list1 = [term(i)]\n    total = reduce(mul, list1, 1)\n    return total\n","after":null,"SubmissionTime":"2016-02-11T19:31:15.643267","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":257,"date":"2016-02-11 19:32:26.127207","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    list1 = []\n    total = 1\n    theList = list(range(1, n+1))\n    for i in theList:\n        list1 = [term(i)]\n    total = reduce(mul, list1, 1)\n    return total\n","after":null,"SubmissionTime":"2016-02-11T19:32:26.127207","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1020,"date":"2016-02-11 19:41:17.343081","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n\n\n    \"\"\"\n    while x <= n:\n        x = x + 1\n        total = total*term(x)\n        return total\n\n    \"\"\"def identity()\n \n        return identity\"\"\"\n\n","after":null,"SubmissionTime":"2016-02-11T19:41:17.343081","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1020,"date":"2016-02-11 19:42:24.542662","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n\n\n    \"\"\"\n    x = x + 1\n    while x <= n:\n        total = total*term(x)\n        return total\n\n    \"\"\"def identity()\n \n        return identity\"\"\"\n\n","after":null,"SubmissionTime":"2016-02-11T19:42:24.542662","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1020,"date":"2016-02-11 19:43:57.969358","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n\n\n    \"\"\"\n    x = 1\n    while x <= n:\n        x = x + 1\n        total = total*term(x)\n        return total\n\n    \"\"\"def identity()\n \n        return identity\"\"\"\n\n","after":null,"SubmissionTime":"2016-02-11T19:43:57.969358","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1020,"date":"2016-02-11 19:44:45.444016","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n\n\n    \"\"\"\n    x = 1\n    total = 1\n    while x <= n:\n        x = x + 1\n        total = total*term(x)\n        return total\n\n    \"\"\"def identity()\n \n        return identity\"\"\"\n\n","after":null,"SubmissionTime":"2016-02-11T19:44:45.444016","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1020,"date":"2016-02-11 19:45:03.883841","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n\n\n    \"\"\"\n    x = 1\n    total = n - 1\n    while x <= n:\n        x = x + 1\n        total = total*term(x)\n        return total\n\n    \"\"\"def identity()\n \n        return identity\"\"\"\n\n","after":null,"SubmissionTime":"2016-02-11T19:45:03.883841","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1020,"date":"2016-02-11 19:45:37.974604","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n\n\n    \"\"\"\n    x = 1\n    total = 0\n    while x <= n:\n        x = x + 1\n        total = total*term(x)\n        return total\n\n    \"\"\"def identity()\n \n        return identity\"\"\"\n\n","after":null,"SubmissionTime":"2016-02-11T19:45:37.974604","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1020,"date":"2016-02-11 19:46:31.869556","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n\n\n    \"\"\"\n    x = 1\n    total = 1\n    while x <= n:\n        x = x + 1\n        total = total*term(x)\n        return total\n\n    \"\"\"def identity()\n \n        return identity\"\"\"\n\n","after":null,"SubmissionTime":"2016-02-11T19:46:31.869556","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1020,"date":"2016-02-11 19:47:04.798991","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n\n\n    \"\"\"\n    x = 1\n    total = 1\n    while x <= n:\n        x = x + 1\n        total = total*term(x)\n    return total\n\n    \"\"\"def identity()\n \n        return identity\"\"\"\n\n","after":null,"SubmissionTime":"2016-02-11T19:47:04.798991","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":446,"date":"2016-02-11 20:13:38.882515","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total * term(n), k + 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-11T20:13:38.882515","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":446,"date":"2016-02-11 20:14:15.514472","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total * term(n), k + 1\n        print (k)\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-11T20:14:15.514472","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":446,"date":"2016-02-11 20:14:26.277917","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total * term(n), k + 1\n        print (term(n))\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-11T20:14:26.277917","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":446,"date":"2016-02-11 20:14:39.898278","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total * term(k), k + 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-11T20:14:39.898278","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":311,"date":"2016-02-11 20:15:38.072170","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    #new_list = list(map(term, range(1, n + 1)))\n\n    return reduce(mul, new_list(x))\n\n","after":null,"SubmissionTime":"2016-02-11T20:15:38.07217","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":311,"date":"2016-02-11 20:15:50.965760","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    #new_list = list(map(term, range(1, n + 1)))\n\n    return reduce(mul, new_list(n))\n\n","after":null,"SubmissionTime":"2016-02-11T20:15:50.96576","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":446,"date":"2016-02-11 20:18:58.698308","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    k = 0\n    while k <= n:\n        k += 1\n        total= total * term(k)\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-11T20:18:58.698308","SynthesizedAfter":"\r\ndef product(n, term):\r\n    total = 1\r\n    k = 0\r\n    while k<n:\r\n        k += 1\r\n        total = total*term(k)\r\n    return total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThan, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":2,"Id":0,"studentId":720,"date":"2016-02-11 21:02:08.906079","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return reduce(lambda a, b: a*b, [term(x) for x in range(1, n+1)])\n\n\n","after":null,"SubmissionTime":"2016-02-11T21:02:08.906079","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":720,"date":"2016-02-11 21:08:23.681837","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return functools.reduce(lambda a, b: a*b, [term(x) for x in range(1, n+1)])\n\n\n","after":null,"SubmissionTime":"2016-02-11T21:08:23.681837","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":720,"date":"2016-02-11 21:09:33.530578","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    [term(x) for x in range(1, n+1)]\n    total = 1\n    for i in mapped_list:\n        total = total * i\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-11T21:09:33.530578","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":446,"date":"2016-02-11 21:40:32.335883","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    k = 0\n    while k <= n:\n        total= total * term(k)\n        k += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-11T21:40:32.335883","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":446,"date":"2016-02-11 21:41:23.838804","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    k = 0\n    while k <= n:\n        total= total * term(k)\n        k += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-11T21:41:23.838804","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":118,"date":"2016-02-11 21:46:19.569462","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 1\n    k = 1\n    if k <= n:\n        total = total * term(k)\n        k += 1\n\n","after":null,"SubmissionTime":"2016-02-11T21:46:19.569462","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":808,"date":"2016-02-11 22:49:50.245940","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==0:\n        return term(n)\n    else:\n        return term(n) * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-11T22:49:50.24594","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, LeafConstNode(ConstantExpressionNode-1), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":598,"date":"2016-02-11 23:00:30.245976","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0: \n        return 1 \n    else: \n        return n * product(n - 1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-11T23:00:30.245976","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==0:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":503,"date":"2016-02-11 23:07:52.426915","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    for n in range(1,n):\n        total=term(n)*term(n-1)\n        total+=total\n        n=n-2\n    return total\n\n","after":null,"SubmissionTime":"2016-02-11T23:07:52.426915","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":158,"date":"2016-02-11 23:22:25.827694","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = 0\n    total = 0\n    while k < n:\n        a = lambda n: term(n)\n        total = total * a\n        k += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-11T23:22:25.827694","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":158,"date":"2016-02-11 23:29:09.453738","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = 0\n    total = lambda x: x\n    while k < n:\n        a = lambda n: term(n)\n        total = total * a\n        k += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-11T23:29:09.453738","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":503,"date":"2016-02-11 23:29:54.156627","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    for n in range(1,n+1):\n        total=term(n)*term(n-1)\n        total+=total\n        n=n-2\n    return total\n\n","after":null,"SubmissionTime":"2016-02-11T23:29:54.156627","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":973,"date":"2016-02-11 23:30:37.879299","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return term(0)\n    else:\n        return term(n) * product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-11T23:30:37.879299","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, LeafConstNode(ConstantExpressionNode-1), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":973,"date":"2016-02-11 23:31:46.526669","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return term(0)\n    else:\n        return term(n) * product((n - 1), term)\n\n","after":null,"SubmissionTime":"2016-02-11T23:31:46.526669","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":158,"date":"2016-02-11 23:35:40.434764","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    for i in range(1, n + 1):\n        total = total * term(i)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-11T23:35:40.434764","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":503,"date":"2016-02-11 23:36:14.023147","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def product_partial(n,term):\n        if n==2:\n            return term(1)*term(2)\n        else:\n            return term(n)*product_partial(n-1)\n    return product_partial(n,term)\n  \n\n","after":null,"SubmissionTime":"2016-02-11T23:36:14.023147","SynthesizedAfter":"\r\ndef product(n, term):\r\n    def product_partial(n, term):\r\n        if n==2:\r\n            return term(1)*term(2)\r\n        else:\r\n            return term(n)*product(n-1, term)\r\n    return product_partial(n, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":158,"date":"2016-02-11 23:36:36.010679","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    for i in range(1, n + 1):\n        total = total * term(i)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-11T23:36:36.010679","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":68,"date":"2016-02-11 23:43:07.250569","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return term(n)\n    \n\n\n\n\n","after":null,"SubmissionTime":"2016-02-11T23:43:07.250569","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":129,"date":"2016-02-11 23:46:54.849815","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i=1\n    total=0\n    while i<=n:\n        total += term(i)\n        i+=1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-11T23:46:54.849815","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":129,"date":"2016-02-11 23:47:37.818295","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i=1\n    total=0\n    while i<=n:\n        total = total * term(i)\n        i+=1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-11T23:47:37.818295","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":68,"date":"2016-02-11 23:49:08.972475","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if (n==1):\n    \treturn term(n)\n    return turm(n)*product(n-1,term)    \n\n","after":null,"SubmissionTime":"2016-02-11T23:49:08.972475","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if (n==1):\r\n        return term(n)\r\n    return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-term)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":361,"date":"2016-02-12 00:27:16.883820","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def applyterm(n,term):\n        i = 1\n        while i <= n:\n            term(i) + term(i+1)\n        else:\n            return 0\n\n    return applyterm(n, term)\n\n","after":null,"SubmissionTime":"2016-02-12T00:27:16.88382","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":361,"date":"2016-02-12 00:27:53.890541","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def applyterm(n,term):\n        i = 1\n        while i <= n:\n            term(i) + term(i+1)\n            i +=1\n        else:\n            return 0\n\n    return applyterm(n, term)\n\n","after":null,"SubmissionTime":"2016-02-12T00:27:53.890541","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":361,"date":"2016-02-12 00:28:05.061952","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def applyterm(n,term):\n        i = 1\n        while i <= n:\n            term(i) + term(i+1)\n            i +=1\n\n    return applyterm(n, term)\n\n","after":null,"SubmissionTime":"2016-02-12T00:28:05.061952","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":361,"date":"2016-02-12 00:30:47.411097","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def applyterm(n,term):\n        return term(n)\n\n    i = 1\n    while i < n:\n        total = applyterm(i) + applyterm(i+1)\n        i += 1\n        return total\n\n","after":null,"SubmissionTime":"2016-02-12T00:30:47.411097","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":361,"date":"2016-02-12 00:31:12.635251","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def applyterm(n,term):\n        return term(n)\n\n    i = 1\n    while i < n:\n        total = applyterm(i,term) + applyterm(i+1,term)\n        i += 1\n        return total\n\n","after":null,"SubmissionTime":"2016-02-12T00:31:12.635251","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":361,"date":"2016-02-12 00:32:38.433186","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    i = 1\n    while i < n:\n        total = term(i+1) + term(i+1)\n        i += 1\n        return total\n\n","after":null,"SubmissionTime":"2016-02-12T00:32:38.433186","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":361,"date":"2016-02-12 00:34:11.948782","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    i = 1\n    while i < n:\n        total = term(i) + term(i+1)\n        i += 1\n        return total\n\n","after":null,"SubmissionTime":"2016-02-12T00:34:11.948782","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":361,"date":"2016-02-12 00:34:55.541351","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    i = 1\n    while i < n:\n        total += term(i)\n        i += 1\n        return total\n\n","after":null,"SubmissionTime":"2016-02-12T00:34:55.541351","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":361,"date":"2016-02-12 00:35:05.552352","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    i = 1\n    while i <= n:\n        total += term(i)\n        i += 1\n        return total\n\n","after":null,"SubmissionTime":"2016-02-12T00:35:05.552352","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":361,"date":"2016-02-12 00:35:21.980824","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    i = 1\n    while i <= n:\n        total = term(i) + term(i+1)\n        i += 1\n        return total\n\n","after":null,"SubmissionTime":"2016-02-12T00:35:21.980824","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":361,"date":"2016-02-12 00:37:34.348531","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    i = 1\n    while i <= n:\n        total = term(i) + term(i+1)\n        i += 1\n    \n    return total\n\n","after":null,"SubmissionTime":"2016-02-12T00:37:34.348531","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":361,"date":"2016-02-12 00:37:57.494217","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    i = 1\n    while i < n:\n        total = term(i) + term(i+1)\n        i += 1\n    \n    return total\n\n","after":null,"SubmissionTime":"2016-02-12T00:37:57.494217","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":361,"date":"2016-02-12 00:38:15.143165","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    i = 1\n    while i < n:\n        total = term(i) * term(i+1)\n        i += 1\n    \n    return total\n\n","after":null,"SubmissionTime":"2016-02-12T00:38:15.143165","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":361,"date":"2016-02-12 00:38:59.726135","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    i = 1\n    while i < n:\n        total = term(i) * term(i+1)\n        i += 2\n    \n    return total\n\n","after":null,"SubmissionTime":"2016-02-12T00:38:59.726135","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":361,"date":"2016-02-12 00:39:33.172675","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    i = 1\n    while i < n:\n        total += term(i) * term(i+1)\n        i += 2\n    \n    return total\n\n","after":null,"SubmissionTime":"2016-02-12T00:39:33.172675","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":361,"date":"2016-02-12 00:42:17.623521","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    i = 1\n    while i < n:\n        total = term(i) * term(i+1)\n        i += 2\n    \n    return total\n\n","after":null,"SubmissionTime":"2016-02-12T00:42:17.623521","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":361,"date":"2016-02-12 00:43:50.389789","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    i = 1\n    while i <= n:\n        total = term(i) * term(i+1)\n        i += 2\n    \n    return total\n\n","after":null,"SubmissionTime":"2016-02-12T00:43:50.389789","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":361,"date":"2016-02-12 00:46:20.722109","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    return term(n) * term(n+1)\n\n","after":null,"SubmissionTime":"2016-02-12T00:46:20.722109","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":361,"date":"2016-02-12 00:53:43.335105","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    i, k = 1, 1\n    total = 0\n\n    while i <= n:\n        total *= term(k)\n        i += 1\n        k += 1\n    \n    return total\n    \n\n\n\n","after":null,"SubmissionTime":"2016-02-12T00:53:43.335105","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":740,"date":"2016-02-12 08:28:38.480199","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return term(1)\n    else:\n        return term(n - 1) * term(n)\n\n","after":null,"SubmissionTime":"2016-02-12T08:28:38.480199","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 09:14:49.305251","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    return n*product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-12T09:14:49.305251","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 09:15:30.557631","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    print(n*product(n-1, term))\n\n\n","after":null,"SubmissionTime":"2016-02-12T09:15:30.557631","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 09:16:51.692352","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if term == identity:\n        return n*n-1\n    return n**2 * (n-1)**2\n\n\n","after":null,"SubmissionTime":"2016-02-12T09:16:51.692352","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 09:17:27.057416","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if term == identity:\n        return n*n-2\n    return n**2 * (n-1)**2\n\n\n","after":null,"SubmissionTime":"2016-02-12T09:17:27.057416","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 09:17:40.220324","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if term == identity:\n        return n*(n-1)\n    return n**2 * (n-1)**2\n\n\n","after":null,"SubmissionTime":"2016-02-12T09:17:40.220324","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 09:18:14.770261","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if term == identity:\n        return n*product(n-1)\n    return n**2 * (n-1)**2\n\n\n","after":null,"SubmissionTime":"2016-02-12T09:18:14.770261","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 09:18:24.808002","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if term == identity:\n        return n*product(n-1, 1)\n    return n**2 * (n-1)**2\n\n\n","after":null,"SubmissionTime":"2016-02-12T09:18:24.808002","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 09:18:36.727079","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if term == identity:\n        return n*product(n-1, 0)\n    return n**2 * (n-1)**2\n\n\n","after":null,"SubmissionTime":"2016-02-12T09:18:36.727079","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 09:18:54.030785","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if term == identity:\n        return n*product(n-1, n)\n    return n**2 * (n-1)**2\n\n\n","after":null,"SubmissionTime":"2016-02-12T09:18:54.030785","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 09:19:11.036223","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if term == identity:\n        return n*product(n-1, n-1)\n    return n**2 * (n-1)**2\n\n\n","after":null,"SubmissionTime":"2016-02-12T09:19:11.036223","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 09:19:40.386807","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if term == identity:\n        return n*product(n-1, 1)\n    return n**2 * (n-1)**2\n\n\n","after":null,"SubmissionTime":"2016-02-12T09:19:40.386807","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 09:19:47.729846","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if term == identity:\n        return n*product(n-1, identity)\n    return n**2 * (n-1)**2\n\n\n","after":null,"SubmissionTime":"2016-02-12T09:19:47.729846","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 09:20:00.824551","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if term == identity:\n        return n*product(n-1, term)\n    return n**2 * (n-1)**2\n\n\n","after":null,"SubmissionTime":"2016-02-12T09:20:00.824551","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 09:20:21.854546","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if term == identity:\n        return n*identity(x-1)\n    return n**2 * (n-1)**2\n\n\n","after":null,"SubmissionTime":"2016-02-12T09:20:21.854546","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 09:20:26.874070","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if term == identity:\n        return n*identity(n-1)\n    return n**2 * (n-1)**2\n\n\n","after":null,"SubmissionTime":"2016-02-12T09:20:26.87407","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 09:20:38.622366","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if term == identity:\n        return n*identity(n-1)\n    return n**2 * square(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T09:20:38.622366","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 09:24:22.618288","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if term == identity:\n        return n*identity(n-1)\n    return n**2 *square(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T09:24:22.618288","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 09:25:01.185678","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if term == identity:\n        return n * product(n-1, identity())\n    return n**2 *square(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T09:25:01.185678","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 09:25:10.319504","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if term == identity:\n        return n * product(n-1, identity(n))\n    return n**2 *square(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T09:25:10.319504","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 09:25:19.037385","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if term == identity:\n        return n * product(n-1, identity(n-1))\n    return n**2 *square(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T09:25:19.037385","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 09:25:31.080844","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if term == identity:\n        return n * product(n-1, identity(n))\n    return n**2 *square(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T09:25:31.080844","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 09:26:02.110870","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if term == identity:\n        return n * product(n-1, identity(term))\n    return n**2 *square(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T09:26:02.11087","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 09:26:09.044354","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if term == identity:\n        return n * product(n-1, identity(n-2))\n    return n**2 *square(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T09:26:09.044354","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 09:26:16.979220","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if term == identity:\n        return n * product(n-1, identity(n))\n    return n**2 *square(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T09:26:16.97922","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 09:28:30.971384","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if term == identity:\n        return n * product(n-1, term)\n    return n**2 *square(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T09:28:30.971384","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 09:28:57.144165","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if term == identity:\n        return n * product(n-1, identity(ns))\n    return n**2 *square(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T09:28:57.144165","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 09:29:02.373465","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if term == identity:\n        return n * product(n-1, identity(n))\n    return n**2 *square(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T09:29:02.373465","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 09:29:47.442650","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if term == identity:\n        return n * product(n-1, identity(n-1))\n    return n**2 *square(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T09:29:47.44265","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 09:29:51.459886","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if term == identity:\n        return n * product(n-1, identity(n-2))\n    return n**2 *square(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T09:29:51.459886","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 09:29:55.748137","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if term == identity:\n        return n * product(n-1, identity(n-3))\n    return n**2 *square(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T09:29:55.748137","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 09:30:00.976583","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if term == identity:\n        return n * product(n-1, identity(0))\n    return n**2 *square(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T09:30:00.976583","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 09:30:05.605055","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if term == identity:\n        return n * product(n-1, identity())\n    return n**2 *square(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T09:30:05.605055","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 09:30:12.410089","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if term == identity:\n        return n * product(n-1, term)\n    return n**2 *square(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T09:30:12.410089","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 09:30:12.410089","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if term == identity:\n        return n * product(n-1, term)\n    return n**2 *square(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T09:30:12.410089","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 09:30:54.181833","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if term == identity:\n        return n * product(n, identity(n-1))\n    return n**2 *square(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T09:30:54.181833","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 09:31:00.625636","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if term == identity:\n        return n * product(n-1, identity(n-1))\n    return n**2 *square(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T09:31:00.625636","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 09:31:10.478933","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if term == identity:\n        return n * product(n-2, identity(n-1))\n    return n**2 *square(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T09:31:10.478933","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 09:31:18.502759","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if term == identity:\n        return n * product(n, identity(n-1))\n    return n**2 *square(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T09:31:18.502759","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 09:31:37.870424","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if term == identity:\n        return n * product(n, identity(n))\n    return n**2 *square(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T09:31:37.870424","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 09:31:46.504613","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if term == identity:\n        return n * product(n-2, identity(n))\n    return n**2 *square(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T09:31:46.504613","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 09:31:52.968355","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if term == identity:\n        return n * product(n-1, identity(n))\n    return n**2 *square(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T09:31:52.968355","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 09:32:43.370796","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if term == identity:\n        return n * product(n-1, identity(n))\n    return n**2 *product((n-1), square(n))\n\n\n","after":null,"SubmissionTime":"2016-02-12T09:32:43.370796","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":592,"date":"2016-02-12 09:47:26.108493","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def prod_help(x):\n        total = total * term(x)\n        x += 1\n        if x > n:\n            return total\n        else:\n            return prod_help(x)\n    return prod_help(1)\n\n","after":null,"SubmissionTime":"2016-02-12T09:47:26.108493","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":592,"date":"2016-02-12 09:48:07.303943","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def prod_help(x, total):\n        total = total * term(x)\n        x += 1\n        if x > n:\n            return total\n        else:\n            return prod_help(x)\n    return prod_help(1, 0)\n\n","after":null,"SubmissionTime":"2016-02-12T09:48:07.303943","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":592,"date":"2016-02-12 09:48:44.076163","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def prod_help(x, total):\n        total = total * term(x)\n        x += 1\n        if x > n:\n            return total\n        else:\n            return prod_help(x, total)\n    return prod_help(1, 0)\n\n","after":null,"SubmissionTime":"2016-02-12T09:48:44.076163","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1002,"date":"2016-02-12 09:54:49.387808","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i, total = 1\n    while i <= n:\n        total = total * term(i)\n        i += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-12T09:54:49.387808","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":483,"date":"2016-02-12 10:42:06.087230","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-12T10:42:06.08723","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":483,"date":"2016-02-12 10:44:21.071753","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(1)\n    return n * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-12T10:44:21.071753","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return term(1)\r\n    return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":879,"date":"2016-02-12 11:04:11.134316","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, i = 1, 1\n    if i <= n:\n        term(n)\n        total = total * term(n)\n        i += 1\n        return total\n    else:\n        return total\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T11:04:11.134316","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":879,"date":"2016-02-12 11:05:17.631093","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, i = 1, 1\n    if i <= n:\n        total = total * term(n)\n        i += 1\n        return total\n    else:\n        return total\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T11:05:17.631093","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":879,"date":"2016-02-12 11:05:35.206408","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, i = 1, 1\n    if i <= n:\n        total = total * term(n)\n        i += 1\n    \n    else:\n        return total\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T11:05:35.206408","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":879,"date":"2016-02-12 11:05:58.763068","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, i = 1, 1\n    if i <= n:\n        total = total * term(n)\n        i += 1\n        return total\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T11:05:58.763068","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1007,"date":"2016-02-12 11:24:13.564809","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, k = 0, 1\n    while k <= n:\n        total, k =  total * term (k), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-12T11:24:13.564809","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1033,"date":"2016-02-12 11:27:27.571372","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i,n=1,1\n\n    def counter(n,i,term):\n        if i <= n:\n            n *= term(i)\n            return counter(n,i+1,term)\n        else:\n            return n\n\n","after":null,"SubmissionTime":"2016-02-12T11:27:27.571372","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1033,"date":"2016-02-12 11:29:00.543965","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i,g=1,1\n\n    def counter(g,n,i,term):\n        if i <= n:\n            g *= term(i)\n            return counter(g,n,i+1,term)\n        else:\n            return n\n\n","after":null,"SubmissionTime":"2016-02-12T11:29:00.543965","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1033,"date":"2016-02-12 11:29:31.015760","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i,g=1,1\n\n    def counter(g,n,i,term):\n        if i <= n:\n            g *= term(i)\n            return counter(g,n,i+1,term)\n        else:\n            return g\n\n","after":null,"SubmissionTime":"2016-02-12T11:29:31.01576","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1033,"date":"2016-02-12 11:30:48.943043","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n\n    def counter(g,n,i,term):\n        if i <= n:\n            g *= term(i)\n            return counter(g,n,i+1,term)\n        else:\n            return g\n    return counter*(1,n,1,term)\n","after":null,"SubmissionTime":"2016-02-12T11:30:48.943043","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1033,"date":"2016-02-12 11:30:48.943043","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n\n    def counter(g,n,i,term):\n        if i <= n:\n            g *= term(i)\n            return counter(g,n,i+1,term)\n        else:\n            return g\n    return counter*(1,n,1,term)\n","after":null,"SubmissionTime":"2016-02-12T11:30:48.943043","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1033,"date":"2016-02-12 11:31:18.694953","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n\n    def counter(g,n,i,term):\n        if i <= n:\n            g *= int(term(i))\n            return counter(g,n,i+1,term)\n        else:\n            return g\n    return counter*(1,n,1,term)\n","after":null,"SubmissionTime":"2016-02-12T11:31:18.694953","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1033,"date":"2016-02-12 11:32:06.805215","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n\n    def counter(g,n,i,term):\n        if i <= n:\n            placeholder = int(term(i))\n            g *= placeholder\n            return counter(g,n,i+1,term)\n        else:\n            return g\n    return counter*(1,n,1,term)\n","after":null,"SubmissionTime":"2016-02-12T11:32:06.805215","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":197,"date":"2016-02-12 11:38:32.933504","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(1)\n    else:\n        return term(n)*term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-12T11:38:32.933504","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return term(1)\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":619,"date":"2016-02-12 11:48:04.695215","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==0:\n        return term(n)\n    else:\n        return term(n)*term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-12T11:48:04.695215","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":619,"date":"2016-02-12 11:48:04.695215","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==0:\n        return term(n)\n    else:\n        return term(n)*term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-12T11:48:04.695215","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":619,"date":"2016-02-12 11:49:00.152992","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==0:\n        return term(n)\n    else:\n        return term(n)*product(n-1,term)\n\n","after":null,"SubmissionTime":"2016-02-12T11:49:00.152992","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, LeafConstNode(ConstantExpressionNode-1), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":1,"Id":0,"studentId":989,"date":"2016-02-12 12:48:42.993643","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-12T12:48:42.993643","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":300,"date":"2016-02-12 13:08:08.237748","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==1:\n        return 1\n    else:\n        n -= 1\n        return product( n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-12T13:08:08.237748","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":300,"date":"2016-02-12 13:09:57.309439","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==1:\n        return 1\n    else:\n        return product(n, term) * product( n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-12T13:09:57.309439","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-term)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":300,"date":"2016-02-12 13:10:12.818816","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==1:\n        return 1\n    else:\n        return n * product( n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-12T13:10:12.818816","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":989,"date":"2016-02-12 13:14:24.928963","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1: \n        return identity(k)\n    else:\n        k *= n - 1\n        return product(n-1, identity)\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:14:24.928963","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":989,"date":"2016-02-12 13:15:49.894635","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1: \n        return n\n    else:\n        return product(n-1, term)\n\n    return helper\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:15:49.894635","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return n\r\n    else:\r\n        return product(n-1, term)*term(n)\r\n    return helper","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":989,"date":"2016-02-12 13:16:15.880666","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1: \n        return n * product(n, term)\n    else:\n        return product(n-1, term)\n\n    return helper\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:16:15.880666","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":989,"date":"2016-02-12 13:16:41.415981","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1: \n        return n\n    else:\n        return product(n-1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:16:41.415981","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":582,"date":"2016-02-12 13:17:24.452562","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==1:\n        return 1\n    else:\n        return n * product(n-1)\n","after":null,"SubmissionTime":"2016-02-12T13:17:24.452562","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":989,"date":"2016-02-12 13:17:55.076182","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def helper(n, term, total):\n        if n == 1: \n            return total\n        else:\n            total *= n\n            return product(n-1, term)\n\n    return helper\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:17:55.076182","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":989,"date":"2016-02-12 13:18:13.306454","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def helper(n, term, total):\n        if n == 1: \n            return total\n        else:\n            total *= n\n            return product(n-1, term)\n\n    return (n, term, 1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:18:13.306454","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":989,"date":"2016-02-12 13:18:50.448398","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def helper(n, term, total):\n        if n == 1: \n            return total\n        else:\n            total *= term(n)\n            return product(n-1, term)\n\n    return (n, term, 1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:18:50.448398","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":989,"date":"2016-02-12 13:19:24.644279","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def helper(n, term, total):\n        if n == 1: \n            return total\n        else:\n            total *= term(n)\n            return product(n-1, term)\n\n    return helper(n, term, 1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:19:24.644279","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":989,"date":"2016-02-12 13:19:55.776517","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def helper(n, term, total):\n        if n == 1: \n            return total\n        else:\n            total *= term(n)\n            return product(n - 1, term)\n\n    return helper(n, term, 1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:19:55.776517","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":989,"date":"2016-02-12 13:20:52.810219","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def helper(n, term, total):\n        if n == 1: \n            return total\n        else:\n            total *= term(n)\n            return helper(n - 1, term)\n\n    return helper(n, term, 1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:20:52.810219","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":582,"date":"2016-02-12 13:22:08.334068","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==1:\n        return n \n    else:\n        return n * product(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:22:08.334068","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":582,"date":"2016-02-12 13:23:28.729354","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==1:\n        return n \n    else:\n        return n * product(n, term(n-1))\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:23:28.729354","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":582,"date":"2016-02-12 13:24:13.596937","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==1:\n        return term(n) \n    else:\n        return term(n) * product(n, term(n-1))\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:24:13.596937","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":492,"date":"2016-02-12 13:26:12.335963","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = 1\n    product = 1\n    if k <= n:\n        product *= term(k)\n        k += 1\n    return product\n\n","after":null,"SubmissionTime":"2016-02-12T13:26:12.335963","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":492,"date":"2016-02-12 13:27:46.594184","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = 1\n    answer = 1\n    if k <= n:\n        answer *= term(k)\n        k += 1\n    return answer\n\n","after":null,"SubmissionTime":"2016-02-12T13:27:46.594184","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":492,"date":"2016-02-12 13:28:11.864862","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = 1\n    answer = 1\n    if k <= n:\n        answer = answer *term(k)\n        k += 1\n    return answer\n\n","after":null,"SubmissionTime":"2016-02-12T13:28:11.864862","SynthesizedAfter":"\r\ndef product(n, term):\r\n    k = 1\r\n    answer = 1\r\n    while k<=n:\r\n        answer = answer*term(k)\r\n        k += 1\r\n    return answer","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(WhileStatementNode, Children(ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Target(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Target(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-product, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(IfStatementNode, TChild(Target(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))))), Tutor.synthesis.MagicK), 3), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-product, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChildren(Node(IfStatementNode, TChild(Node(IfStatementTestNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Node(SuiteStatementNode, TChildren(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), TChild(Node(ReturnStatementNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":687,"date":"2016-02-12 13:33:18.911215","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k,mul = 1,0\n    while k<n:\n        mul *= term(k)\n        k += 1\n    return mul\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:33:18.911215","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":687,"date":"2016-02-12 13:34:28.427187","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k,mul = 1,1\n    while k<n:\n        mul *= term(k)\n        k += 1\n    return mul\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:34:28.427187","SynthesizedAfter":"\r\ndef product(n, term):\r\n    k, mul = 1, 1\r\n    while k<n:\r\n        mul *= term(k+1)\r\n        k += 1\r\n    return mul","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":687,"date":"2016-02-12 13:35:12.738117","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k,mul = 1,1\n    while k<n:\n        k, mul = k+1, mul+ term(k)\n    return mul\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:35:12.738117","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":687,"date":"2016-02-12 13:35:52.296744","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k,mul = 1,1\n    while k<n:\n        k, mul = k+1, mul*term(k)\n    return mul\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:35:52.296744","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 13:38:54.769319","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if n == 1:\n        return term(1)\n    return term(n) *product((n-1), term(n))\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:38:54.769319","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 13:40:12.822310","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if n == 1:\n        return term(1)\n    return term(n) *product((n-1), term())\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:40:12.82231","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":111,"date":"2016-02-12 13:40:27.199940","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if n == 1:\n        return term(1)\n    return term(n) *product((n-1), term(x))\n\n\n","after":null,"SubmissionTime":"2016-02-12T13:40:27.19994","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":818,"date":"2016-02-12 13:41:51.536720","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def identity(x):\n        n * x\n\n","after":null,"SubmissionTime":"2016-02-12T13:41:51.53672","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":818,"date":"2016-02-12 13:42:42.376806","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def identity(x):\n        return n * x\n\n","after":null,"SubmissionTime":"2016-02-12T13:42:42.376806","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":492,"date":"2016-02-12 13:48:53.978499","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = 1\n    answer = 1\n    if k <= n:\n        answer = answer * term(k)\n        k += 1\n        return product(n, term)\n    return answer\n\n","after":null,"SubmissionTime":"2016-02-12T13:48:53.978499","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":818,"date":"2016-02-12 13:58:56.133775","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def identity(x):\n        if x > n:\n            return n*x\n        x += 1\n\n","after":null,"SubmissionTime":"2016-02-12T13:58:56.133775","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":818,"date":"2016-02-12 14:16:58.656090","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    identity(n)\n    x = n\n    x -= 1\n    return n*x\n    \n","after":null,"SubmissionTime":"2016-02-12T14:16:58.65609","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":358,"date":"2016-02-12 14:18:13.312760","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n <= 0:\n        return n\n    else:\n        return term(n) * term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-12T14:18:13.31276","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1062,"date":"2016-02-12 14:18:29.439120","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x = 1\n    if n == x:\n        return term(n)\n    else:\n        term(x) * product(x+1, term)\n\n","after":null,"SubmissionTime":"2016-02-12T14:18:29.43912","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":358,"date":"2016-02-12 14:19:02.875608","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        return term(n) * term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-12T14:19:02.875608","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n<=1:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":358,"date":"2016-02-12 14:19:35.025512","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n <= 0:\n        return 0\n    else:\n        return term(n) * term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-12T14:19:35.025512","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1062,"date":"2016-02-12 14:19:53.213654","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return term(1)\n    else:\n        term(n) * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-12T14:19:53.213654","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return term(1)\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(ReturnStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":1062,"date":"2016-02-12 14:20:30.992447","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return 0\n    else:\n        term(n) * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-12T14:20:30.992447","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1062,"date":"2016-02-12 14:21:30.616675","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x = 1\n    if n == x:\n        return term(x)\n    else:\n        term(x) * product(x + 1, term)\n\n","after":null,"SubmissionTime":"2016-02-12T14:21:30.616675","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1062,"date":"2016-02-12 14:21:46.011838","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x = 1\n    if n == x:\n        return term(n)\n    else:\n        term(x) * product(x + 1, term)\n\n","after":null,"SubmissionTime":"2016-02-12T14:21:46.011838","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1062,"date":"2016-02-12 14:23:18.343070","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x = [term(x) for x in range(n+1)]\n    if len(x) == 0:\n        return\n    else:\n        return x[0]*x[1:]\n\n","after":null,"SubmissionTime":"2016-02-12T14:23:18.34307","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1062,"date":"2016-02-12 14:23:26.926782","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x = [term(x) for x in range(n+1)]\n    if len(x) == 0:\n        return 1\n    else:\n        return x[0]*x[1:]\n\n","after":null,"SubmissionTime":"2016-02-12T14:23:26.926782","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1062,"date":"2016-02-12 14:23:41.169863","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x = [term(x) for x in range(n+1)]\n    if len(x) == 0:\n        return 1\n    else:\n        return x[0] * x[1:]\n\n","after":null,"SubmissionTime":"2016-02-12T14:23:41.169863","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1062,"date":"2016-02-12 14:24:51.892536","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x = [term(x) for x in range(n+1)]\n    if len(x) == 0:\n        return 1\n    else:\n        return x[0] * product(x[1:],term)\n\n","after":null,"SubmissionTime":"2016-02-12T14:24:51.892536","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1062,"date":"2016-02-12 14:26:32.492357","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return 0\n    else:\n        return n * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-12T14:26:32.492357","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1062,"date":"2016-02-12 14:26:43.293467","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    else:\n        return n * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-12T14:26:43.293467","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1062,"date":"2016-02-12 14:26:52.103000","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return term(1)\n    else:\n        return n * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-12T14:26:52.103","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":755,"date":"2016-02-12 14:35:43.663296","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    for i in range(1, n):\n        total *= term(i)\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-12T14:35:43.663296","SynthesizedAfter":"\r\ndef product(n, term):\r\n    total = 1\r\n    for i in range(1, n):\r\n        total *= term(i+1)\r\n    return total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":611,"date":"2016-02-12 14:42:30.664485","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = 0\n    prod = 1\n    while k <= n:\n       prod *= f(k)\n       k += 1\n    return prod\n\n","after":null,"SubmissionTime":"2016-02-12T14:42:30.664485","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":611,"date":"2016-02-12 14:42:47.410537","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = 0\n    prod = 1\n    while k <= n:\n       prod *= term(k)\n       k += 1\n    return prod\n\n","after":null,"SubmissionTime":"2016-02-12T14:42:47.410537","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":590,"date":"2016-02-12 14:44:15.548341","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return term(1)\n    else:\n        return term(n) + product(n-1)\n\n","after":null,"SubmissionTime":"2016-02-12T14:44:15.548341","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":590,"date":"2016-02-12 14:45:13.910761","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return term(1)\n    else:\n        return term(n) + product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-12T14:45:13.910761","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return term(1)\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":87,"date":"2016-02-12 14:45:24.801642","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(n)\n    return term(n) * product(n-1)\n\n","after":null,"SubmissionTime":"2016-02-12T14:45:24.801642","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return term(n)\r\n    return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":313,"date":"2016-02-12 14:51:01.581062","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def products(i):\n        if i <= n:\n            return term(i) + products(i+1)\n        return 0\n    return products(1)\n\n","after":null,"SubmissionTime":"2016-02-12T14:51:01.581062","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":313,"date":"2016-02-12 14:51:40.189591","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def products(i):\n        if i <= n:\n            return term(i) * products(i+1)\n        return 0\n    return products(1)\n\n","after":null,"SubmissionTime":"2016-02-12T14:51:40.189591","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":313,"date":"2016-02-12 14:51:51.151916","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def products(i):\n        if i <= n:\n            return term(i) * products(i+1)\n        return n\n    return products(1)\n\n","after":null,"SubmissionTime":"2016-02-12T14:51:51.151916","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":400,"date":"2016-02-12 14:52:26.563255","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i):\n        if i == n:\n            return 1\n        else:\n            return term * counter(i+1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T14:52:26.563255","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":400,"date":"2016-02-12 14:53:12.167082","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i):\n        if i == n:\n            return 1\n        else:\n            return term * counter(i+1)\n    counter(1)        \n\n\n","after":null,"SubmissionTime":"2016-02-12T14:53:12.167082","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":400,"date":"2016-02-12 14:53:58.814538","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i):\n        if i == n:\n            return 1\n        else:\n            return term(i) * counter(i+1)\n    counter(1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T14:53:58.814538","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":541,"date":"2016-02-12 14:55:15.505876","diff":null,"before":"def product(n, term, k =1):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def inner (term, k):\n        if k == n:\n            return term (n)\n        else:\n            return term(k) * term(k+1)\n\n","after":null,"SubmissionTime":"2016-02-12T14:55:15.505876","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":541,"date":"2016-02-12 14:56:34.951548","diff":null,"before":"def product(n, term, k =1):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def inner (term, k):\n        if k == n:\n            return term (n)\n        else:\n            return term(k) * term(k+1)\n    return inner (term, k)\n\n","after":null,"SubmissionTime":"2016-02-12T14:56:34.951548","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":541,"date":"2016-02-12 14:59:28.759391","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def inner (term, k=1):\n        if k == n:\n            return term (n)\n        else:\n            return term(k) * inner(k+1)\n    return inner (term, k)\n\n","after":null,"SubmissionTime":"2016-02-12T14:59:28.759391","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":541,"date":"2016-02-12 15:00:24.107539","diff":null,"before":"def product(n, term, k =1):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def inner (term, k):\n        if k == n:\n            return term (n)\n        else:\n            return term(k) * term(k+1)\n    return inner (term, k)\n\n","after":null,"SubmissionTime":"2016-02-12T15:00:24.107539","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":541,"date":"2016-02-12 15:00:39.768594","diff":null,"before":"def product(n, term, k =1):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def inner (term, k):\n        if k == n:\n            return term (n)\n        else:\n            return term(k) * inner(k+1)\n    return inner (term, k)\n\n","after":null,"SubmissionTime":"2016-02-12T15:00:39.768594","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":400,"date":"2016-02-12 15:01:17.766761","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i):\n        if i == n:\n            return 1\n        else:\n            return term(i) * counter(i+1)\n    return counter(1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T15:01:17.766761","SynthesizedAfter":"\r\ndef product(n, term):\r\n    def counter(i):\r\n        if i==n:\r\n            return 1\r\n        else:\r\n            return term(i+1)*counter(i+1)\r\n    return counter(1)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":862,"date":"2016-02-12 15:34:33.998464","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == term:\n        return n\n    return n * product(n+1, term)\n\n","after":null,"SubmissionTime":"2016-02-12T15:34:33.998464","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":209,"date":"2016-02-12 15:35:47.293899","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if (n==0):\n        return 0\n    else:\n        return term(n) * product(n-1)\n\n","after":null,"SubmissionTime":"2016-02-12T15:35:47.293899","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":209,"date":"2016-02-12 15:37:28.567979","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if (n==0):\n        return 0\n    else:\n        return term(n) * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-12T15:37:28.567979","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if (n==1):\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, LeafConstNode(ConstantExpressionNode-1), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":862,"date":"2016-02-12 15:38:28.825122","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == term:\n        return term\n    return term * product(n, term+1)\n\n","after":null,"SubmissionTime":"2016-02-12T15:38:28.825122","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":971,"date":"2016-02-12 15:41:39.874251","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n    \ttotal, k = total * term(k), k+1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-12T15:41:39.874251","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":640,"date":"2016-02-12 15:42:52.247487","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x = 1\n    if x <= n:\n        return term(x) * (x+1, term)\n    else:\n        return 0\n\n","after":null,"SubmissionTime":"2016-02-12T15:42:52.247487","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":640,"date":"2016-02-12 15:44:08.474106","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x = 1\n    if x <= n:\n        return term(x) * product(x+1, term)\n    else:\n        return 0\n\n","after":null,"SubmissionTime":"2016-02-12T15:44:08.474106","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":568,"date":"2016-02-12 15:47:03.686214","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    for i in range(0, n+1):\n        total += map(term,i)\n    return total\n        \n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T15:47:03.686214","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":640,"date":"2016-02-12 15:52:45.368322","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    a = 1\n    if a <= n:\n        return term(a) * product(a+1, term)\n    else:\n        return 0\n\n","after":null,"SubmissionTime":"2016-02-12T15:52:45.368322","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":702,"date":"2016-02-12 15:53:12.498680","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def product_term(x, num):\n        if num == 1:\n            return 1\n        else:\n            return x*term(num)*product_term(num-1)\n    return product_term(x, n)\n\n\n","after":null,"SubmissionTime":"2016-02-12T15:53:12.49868","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":702,"date":"2016-02-12 15:53:40.657346","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def product_term(x, num):\n        if num == 1:\n            return 1\n        else:\n            return x*term(num)*product_term(num-1)\n    return product_term(1, n)\n\n\n","after":null,"SubmissionTime":"2016-02-12T15:53:40.657346","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":702,"date":"2016-02-12 15:54:22.238314","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def product_term(x, num):\n        if num == 1:\n            return 1\n        else:\n            return product_term(x*term(num), num-1)\n    return product_term(1, n)\n\n\n","after":null,"SubmissionTime":"2016-02-12T15:54:22.238314","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":640,"date":"2016-02-12 15:58:15.962353","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    a = 1\n    if a <= n:\n        return term(a) * product(a+1, term(a+1))\n    else:\n        return 0\n\n","after":null,"SubmissionTime":"2016-02-12T15:58:15.962353","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":640,"date":"2016-02-12 15:58:40.873942","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    a = 1\n    if a <= n:\n        return term(a) * product(a+1, term())\n    else:\n        return 0\n\n","after":null,"SubmissionTime":"2016-02-12T15:58:40.873942","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":640,"date":"2016-02-12 15:59:03.229881","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x = 1\n    if x <= n:\n        return term(x) * product(a+1, term(x))\n    else:\n        return 0\n\n","after":null,"SubmissionTime":"2016-02-12T15:59:03.229881","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":640,"date":"2016-02-12 15:59:15.468781","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x = 1\n    if x <= n:\n        return term(x) * product(x+1, term(x))\n    else:\n        return 0\n\n","after":null,"SubmissionTime":"2016-02-12T15:59:15.468781","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":640,"date":"2016-02-12 15:59:35.610794","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x = 1\n    if x <= n:\n        return term(x) * product(x+1, term)\n    else:\n        return 0\n\n","after":null,"SubmissionTime":"2016-02-12T15:59:35.610794","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":637,"date":"2016-02-12 16:07:08.162358","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def product_bodyguard(n, term, k):\n        if k == n:\n            return term(n)\n        else:\n            return product_bodyguard(n, term, k+1)\n    return product_bodyguard(n, term, 1)\n\n","after":null,"SubmissionTime":"2016-02-12T16:07:08.162358","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":637,"date":"2016-02-12 16:09:23.975420","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def product_bodyguard(n, term, k):\n        if k == n:\n            return term(n)\n        else:\n            return product_bodyguard(n, term, k) * product_bodyguard(n, term, k+1)\n    return product_bodyguard(n, term, 1)\n\n","after":null,"SubmissionTime":"2016-02-12T16:09:23.97542","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":640,"date":"2016-02-12 16:09:36.495157","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x = 1\n    def helper_fxn(x, term):\n        if x <= n:\n            return term(x) * helper_fxn(x+1, term)\n        else:\n            return 0\n\n","after":null,"SubmissionTime":"2016-02-12T16:09:36.495157","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":637,"date":"2016-02-12 16:10:29.395596","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    def product_bodyguard(n, term, k):\n        if k == n:\n            return term(n)\n        else:\n            return product_bodyguard(n, term, k+1)\n    return x * product_bodyguard(n, term, 1)\n\n","after":null,"SubmissionTime":"2016-02-12T16:10:29.395596","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":640,"date":"2016-02-12 16:10:38.188232","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x = 1\n    def helper_fxn(x, term):\n        if x <= n:\n            return term(x) * helper_fxn(x+1, term)\n        else:\n            return 0\n    return helper_fxn(1, term)\n\n","after":null,"SubmissionTime":"2016-02-12T16:10:38.188232","SynthesizedAfter":"\r\ndef product(n, term):\r\n    x = 1\r\n    def helper_fxn(x, term):\r\n        if x<=n:\r\n            return term(x)*helper_fxn(x+1, term)\r\n        else:\r\n            return 1\r\n    return helper_fxn(1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, LeafConstNode(ConstantExpressionNode-1), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":637,"date":"2016-02-12 16:10:49.777757","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def product_bodyguard(n, term, k):\n        if k == n:\n            return term(n)\n        else:\n            return k * product_bodyguard(n, term, k+1)\n    return product_bodyguard(n, term, 1)\n\n","after":null,"SubmissionTime":"2016-02-12T16:10:49.777757","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":640,"date":"2016-02-12 16:11:41.011375","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x = 1\n    def helper_fxn(x, term):\n        if x <= n:\n            return term(x) * helper_fxn(x+1, term)\n        else:\n            return 0\n            \n    return helper_fxn(1, term)\n\n","after":null,"SubmissionTime":"2016-02-12T16:11:41.011375","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":640,"date":"2016-02-12 16:13:41.315856","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x = 1\n    def helper_fxn(x, term):\n        if x <= n:\n            return term(x) * helper_fxn(x+1, term)\n\n    return helper_fxn(1, term)\n\n","after":null,"SubmissionTime":"2016-02-12T16:13:41.315856","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":768,"date":"2016-02-12 17:14:37.222704","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n < 1:\n        return 0\n    else:\n        return n * term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-12T17:14:37.222704","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":651,"date":"2016-02-12 17:15:17.719900","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def helper(k,total):\n        if k == n:\n            return k * total\n        else:\n            total = total * term(k)\n        return helper(k+1,total)\n    return helper(1,1)\n\n","after":null,"SubmissionTime":"2016-02-12T17:15:17.7199","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":768,"date":"2016-02-12 17:17:56.263217","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 0\n    else:\n        return n * term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-12T17:17:56.263217","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":768,"date":"2016-02-12 17:18:07.965565","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    else:\n        return n * term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-12T17:18:07.965565","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":768,"date":"2016-02-12 17:22:12.297870","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    else:\n        return n * term(n-1)\n\n    print (product)\n\n\n","after":null,"SubmissionTime":"2016-02-12T17:22:12.29787","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":7,"date":"2016-02-12 17:42:17.289624","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    total, k=1,1\n    while k<=n:\n        total=total*term_of_n(k)\n        k+=1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-12T17:42:17.289624","SynthesizedAfter":"\r\ndef product(n, term):\r\n    total, k = 1, 1\r\n    while k<=n:\r\n        total = total*term(k)\r\n        k += 1\r\n    return total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-term)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":15,"date":"2016-02-12 18:36:20.667864","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return term(0)\n    else:\n        return term(n) * term (n-1)\n\n","after":null,"SubmissionTime":"2016-02-12T18:36:20.667864","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":15,"date":"2016-02-12 18:37:09.459199","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return term(0)\n    else:\n        return term(n) * term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-12T18:37:09.459199","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":15,"date":"2016-02-12 18:37:59.829921","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(1)\n    else:\n        return term(n) * term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-12T18:37:59.829921","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return term(1)\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":221,"date":"2016-02-12 18:42:45.780180","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = term(n)\n    if x != 0:\n        return x * product(x, term)\n\n","after":null,"SubmissionTime":"2016-02-12T18:42:45.78018","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":221,"date":"2016-02-12 18:43:17.725493","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = term(n)\n    if x != 0:\n        return x * product(x-1, term)\n\n","after":null,"SubmissionTime":"2016-02-12T18:43:17.725493","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":221,"date":"2016-02-12 18:44:20.349623","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n != 0:\n        return term(n) * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-12T18:44:20.349623","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":221,"date":"2016-02-12 18:46:13.808426","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return term(n) * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-12T18:46:13.808426","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, LeafConstNode(ConstantExpressionNode-1), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":729,"date":"2016-02-12 18:54:51.275010","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    else:\n        return product(n+1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-12T18:54:51.27501","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:17:07.575295","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def func(x, term):\n        if x > n:\n            return total\n        else:\n            total += term(x)\n            return total + func(x+1, term)\n    return (1,0)\n\n","after":null,"SubmissionTime":"2016-02-12T19:17:07.575295","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:17:48.182750","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def func(x, term):\n        if x > n:\n            return total\n        else:\n            total += term(x)\n            return total + func(x+1, term)\n    return func(1,0)\n\n","after":null,"SubmissionTime":"2016-02-12T19:17:48.18275","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:18:45.134320","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def func(x, term):\n        if x > n:\n            return total\n        else:\n            total = term(x)\n            return total + func(x+1, term)\n    return func(1,0)\n\n","after":null,"SubmissionTime":"2016-02-12T19:18:45.13432","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":783,"date":"2016-02-12 19:20:11.815883","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    total = 0\n    while x > n:\n        total =+ term(x)\n        return total\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:20:11.815883","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":783,"date":"2016-02-12 19:20:36.092164","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    total = 0\n    while x > n:\n        total =+ term(x)\n        x =+ 1\n        return total\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:20:36.092164","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":783,"date":"2016-02-12 19:20:36.092164","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    total = 0\n    while x > n:\n        total =+ term(x)\n        x =+ 1\n        return total\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:20:36.092164","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:21:07.888234","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    total = 0\n    while x > n:\n        total += term(x)\n        x += 1\n        return total\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:21:07.888234","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":853,"date":"2016-02-12 19:21:45.218326","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count = 1\n    totalProduct = 0\n    while count <= n:\n        totalProduct += term(count)\n        count += 1\n    return totalProduct\n\n","after":null,"SubmissionTime":"2016-02-12T19:21:45.218326","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":853,"date":"2016-02-12 19:22:25.916972","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count = 1\n    totalProduct = 0\n    while count <= n:\n        totalProduct *= term(count)\n        count += 1\n    return totalProduct\n\n","after":null,"SubmissionTime":"2016-02-12T19:22:25.916972","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:23:07.945848","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(n)\n    else:\n        return (n-1, term)*(n, term)\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:23:07.945848","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:25:06.455268","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def func(n, term):\n        return term(x)\n\n    if n == 1:\n        return func(n, term)\n    else:\n        return func(n-1, term)*fun(n, term)\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:25:06.455268","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:25:22.920211","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def func(x, term):\n        return term(x)\n\n    if n == 1:\n        return func(n, term)\n    else:\n        return func(n-1, term)*fun(n, term)\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:25:22.920211","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:25:34.611250","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def func(x, term):\n        return term(x)\n\n    if n == 1:\n        return func(n, term)\n    else:\n        return func(n-1, term)*func(n, term)\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:25:34.61125","SynthesizedAfter":"\r\ndef product(n, term):\r\n    def func(x, term):\r\n        return term(x)\r\n    if n==1:\r\n        return func(n, term)\r\n    else:\r\n        return product(n-1, term)*func(n, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:25:56.962101","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def func(x, term):\n        return term(x)\n\n    if n == 0:\n        return func(n, term)\n    else:\n        return func(n-1, term)*func(n, term)\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:25:56.962101","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:26:25.353271","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def func(x, term):\n        return term(x)\n\n    if x > n:\n        return func(x, term)\n    else:\n        return func(n+1, term)*func(n, term)\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:26:25.353271","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:27:20.562247","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def func(x, term):\n        return term(x)\n\n    if n == 1:\n        return func(n, term)\n    else:\n        return func(n-1, term)*func(n+1, term)\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:27:20.562247","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:28:02.497927","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def func(x, term):\n        return term(x)\n\n    if n == 1:\n        return func(n, term)\n    else:\n        return func(n-1, term)\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:28:02.497927","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:28:15.103850","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def func(x, term):\n        return term(x)\n\n    if n == n:\n        return func(n, term)\n    else:\n        return func(n+1, term)\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:28:15.10385","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:28:55.456387","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def func(x, term):\n        return term(x)\n\n    if n == n:\n        return func(n, term)\n    else:\n        return func(n-1, term)*fun(n-2, term)\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:28:55.456387","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:29:42.805244","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def func(x, term):\n        return term(x)\n\n    if n == n:\n        return func(n, term)\n    else:\n        return func(n-1, term)*fun(n, term)\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:29:42.805244","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":729,"date":"2016-02-12 19:30:50.618251","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    else:\n        return n * product(n-1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:30:50.618251","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:33:00.263658","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def func(x, term):\n        return term(x)\n\n    total = 0\n    n = 1\n    if n == n:\n        return total\n    else:\n        total += func(n, term) + func(n+1, term)\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:33:00.263658","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:33:12.693017","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def func(x, term):\n        return term(x)\n\n    total = 0\n    n = 1\n    if n == n:\n        return total\n    else:\n        total += func(n, term) + func(n+1, term)\n        return total\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:33:12.693017","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:33:50.490406","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def func(x, term):\n        return term(x)\n\n    total = 0\n    x = 1\n    if x == n:\n        return total\n    else:\n        total += func(x, term) + func(x+1, term)\n        return total\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:33:50.490406","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:34:33.079575","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def func(x, term):\n        return term(x)\n\n    total = 0\n    x = 1\n    if x == n:\n        return total\n    else:\n        total += func(x+1, term)**2\n        return total\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:34:33.079575","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:35:06.307002","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def func(x, term):\n        return term(x)\n\n    total = 0\n    x = 1\n    if x == n:\n        return total\n    else:\n        total =+ total*func(x+1, term)\n        return total\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:35:06.307002","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:35:25.695496","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def func(x, term):\n        return term(x)\n\n    total = 1\n    x = 1\n    if x == n:\n        return total\n    else:\n        total =+ total*func(x+1, term)\n        return total\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:35:25.695496","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:35:41.629189","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def func(x, term):\n        return term(x)\n\n    total = 1\n    x = 0\n    if x == n:\n        return total\n    else:\n        total =+ total*func(x+1, term)\n        return total\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:35:41.629189","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":673,"date":"2016-02-12 19:35:58.440264","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n    \treturn 1\n\n    else:\n    \treturn n * product(n-1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:35:58.440264","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==0:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:35:59.342856","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def func(x, term):\n        return term(x)\n\n    total = 1\n    x = 0\n    if x > n:\n        return total\n    else:\n        total =+ total*func(x+1, term)\n        return total\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:35:59.342856","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:37:31.587437","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def func(x, term):\n        return term(x)\n\n    total = 1\n    x = 0\n    if x > n:\n        return total\n    else:\n        total =+ total*func(x+1, term)\n        return total\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:37:31.587437","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:38:02.534346","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def func(x, term):\n        return term(x)\n\n    total = 1\n    x = 0\n    if x == n:\n        return total\n    else:\n        total =+ total*func(x+1, term)\n        return total\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:38:02.534346","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:38:27.529112","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def func(x, term):\n        return term(x)\n\n    total = 1\n    x = 0\n    if x > n:\n        return total\n    else:\n        total = total*func(x+1, term)\n        return total\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:38:27.529112","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:39:43.491268","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    total = 1\n    x = 0\n    if x > n:\n        return total\n    else:\n        total = total*term(x+1)\n        return total\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:39:43.491268","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:39:59.342672","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    total = 1\n    x = 0\n    if x > n:\n        return total\n    else:\n        total = total*term(x)\n        x =+ 1\n        return total\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:39:59.342672","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:40:27.645049","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    total = 1\n    x = 1\n    if x > n:\n        return total\n    else:\n        total =+ total*term(x)\n        x =+ 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:40:27.645049","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:40:27.645049","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    total = 1\n    x = 1\n    if x > n:\n        return total\n    else:\n        total =+ total*term(x)\n        x =+ 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:40:27.645049","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:40:49.380016","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    total = 1\n    x = 1\n    if x > n:\n        return total\n    else:\n        total =+ total*term(x)\n        x =+ 1\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:40:49.380016","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:41:13.389586","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    total = 1\n    x = 1\n    while x > n:\n        total =+ total*term(x)\n        x =+ 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:41:13.389586","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:41:44.685268","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    total = 1\n    x = 1\n    while x < n:\n        total =+ total*term(x)\n        x =+ 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:41:44.685268","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:42:42.094367","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    total = 1\n    x = 0\n    if x < n:\n        return total\n    else:\n        total = total*term(x+1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:42:42.094367","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:42:50.805999","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    total = 1\n    x = 0\n    if x < n:\n        return total\n    else:\n        total = total*term(x+1)\n        return total\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:42:50.805999","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:43:22.681723","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    total = 1\n    x = 0\n    if x < n:\n        return total\n    else:\n        total =+ total*term(x+1)\n        return total\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:43:22.681723","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:44:44.391835","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    counter = 1\n    while counter < n:\n        total =+ total*term(counter)\n        counter =+ 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:44:44.391835","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:45:39.683126","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    counter = 1\n    if counter < n:\n        total =+ total*term(counter)\n        counter =+ 1\n    else:\n        return total\n\n","after":null,"SubmissionTime":"2016-02-12T19:45:39.683126","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:48:02.383642","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    total = 1\n    while x < n:\n        total += total*term(x)\n        x += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:48:02.383642","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:48:59.389375","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    total = 1\n    while x < n:\n        b = term(x)\n        total = total*b\n        x += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:48:59.389375","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:50:07.364807","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    total = 1\n    while x < n:\n        total = total*term(x)\n        x += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:50:07.364807","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:50:43.010738","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    while x < n:\n        total = product\n        product = total*term(x)\n        x += 1\n    return product\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:50:43.010738","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":833,"date":"2016-02-12 19:50:51.149863","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    summed = 1\n    def summit(num):\n        if num == 1:\n            return summed\n        else:\n            summed*=term(num)\n            return summit(num-1)\n    return summit(n)\n\n","after":null,"SubmissionTime":"2016-02-12T19:50:51.149863","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:51:13.930736","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    product = 0\n    total = 1\n    while x < n:\n        product =+ total*term(x)\n        x += 1\n    return product\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:51:13.930736","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:51:44.116588","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    product = 0\n    total = 1\n    while x < n:\n        product =+ total*term(x)\n        increment(x)\n    return product\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:51:44.116588","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:52:10.538999","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    total = 1\n    while x < n:\n        total = total*term(x)\n        increment(x)\n    return product\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:52:10.538999","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:52:42.891220","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    total = 1\n    while x < n:\n        total = total*term(x)\n        increment(x)\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:52:42.89122","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:55:09.971415","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    total = 1\n    while x < n:\n        total = total*term(x)\n        increment(x)\n    return total\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:55:09.971415","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:55:32.234437","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    total = 1\n    if x < n:\n        total = total*term(x)\n        increment(x)\n    else:\n        return total\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:55:32.234437","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:55:57.484412","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    total = 1\n    if x < n:\n        total = total*term(x)\n        x += 1\n    else:\n        return total\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:55:57.484412","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:56:21.974564","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    term(n)\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:56:21.974564","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:56:31.084154","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return term(n)\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:56:31.084154","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:56:53.513660","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return term(n)*term(n-1)*term(n-2)\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:56:53.51366","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 19:58:02.670142","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == n:\n        return total\n    else:\n        total = product(n-1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-12T19:58:02.670142","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 20:01:15.612127","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    results = []\n    for i in range(n):\n        results.append(term(i))\n    return mul(results)\n\n\n","after":null,"SubmissionTime":"2016-02-12T20:01:15.612127","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":160,"date":"2016-02-12 20:02:24.591128","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    product = 0\n    while n>0:\n    \tproduct = product + term(n)\n    \tn = n-1\n    return product\n\n","after":null,"SubmissionTime":"2016-02-12T20:02:24.591128","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":160,"date":"2016-02-12 20:03:06.037326","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    product = 0\n    while n>0:\n    \tproduct = product * term(n)\n    \tn = n-1\n    return product\n\n","after":null,"SubmissionTime":"2016-02-12T20:03:06.037326","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":768,"date":"2016-02-12 20:03:09.323403","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    else:\n        return term * term(n-1)\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T20:03:09.323403","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":160,"date":"2016-02-12 20:03:34.347853","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    product = 0\n    while n>1:\n    \tproduct = product * term(n)\n    \tn = n-1\n    return product\n\n","after":null,"SubmissionTime":"2016-02-12T20:03:34.347853","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":768,"date":"2016-02-12 20:03:56.132407","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return term(n) * term(n-1)\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T20:03:56.132407","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":160,"date":"2016-02-12 20:04:11.055231","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    product = term(n)\n    while n>0:\n    \tn = n-1\n    \tproduct = product * term(n)\n    return product\n\n","after":null,"SubmissionTime":"2016-02-12T20:04:11.055231","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":783,"date":"2016-02-12 20:04:18.103466","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    total = 1\n    while x < n:\n        total = total*term(x)\n        x += 1\n    return total\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T20:04:18.103466","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":768,"date":"2016-02-12 20:04:22.989490","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n            return 0\n    if n == 1:\n        return 1\n    else:\n        return term(n) * term(n-1)\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T20:04:22.98949","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":768,"date":"2016-02-12 20:10:17.290212","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n            return 0\n    if n == 1:\n        return 1\n    else:\n        return term(n) \n    return term(n) * term(n-1)\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T20:10:17.290212","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":768,"date":"2016-02-12 20:10:43.404830","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n            return 0\n    if n == 1:\n        return 1\n    else:\n        return term(n * n-1) \n    return term(n) * term(n-1)\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T20:10:43.40483","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":768,"date":"2016-02-12 20:10:51.373998","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n            return 0\n    if n == 1:\n        return 1\n    else:\n        return term(n * n-1) \n    \n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T20:10:51.373998","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":768,"date":"2016-02-12 20:11:13.544073","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n            return 0\n    if n == 1:\n        return 1\n    else:\n        return term(n) * term(n-1)\n    \n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T20:11:13.544073","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":301,"date":"2016-02-12 20:12:14.476552","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def product_counter(i):\n    \tif i == n:\n    \t\treturn term(i)\n    \telse:\n    \t\treturn term(i) * product_counter(i + 1)\n    return product_counter(1, term)\n\n","after":null,"SubmissionTime":"2016-02-12T20:12:14.476552","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":768,"date":"2016-02-12 20:13:25.855814","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n \n    if n == 1:\n        return 1\n    else:\n        return term(n) * term(n-1)\n    \n\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T20:13:25.855814","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":537,"date":"2016-02-12 20:14:11.369887","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(1)\n    return term(n) * product(n-1)\n\n","after":null,"SubmissionTime":"2016-02-12T20:14:11.369887","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return term(1)\r\n    return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":1,"Id":0,"studentId":505,"date":"2016-02-12 20:43:25.868885","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-12T20:43:25.868885","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":584,"date":"2016-02-12 21:17:32.053539","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return \n    else:\n        return term(n) * term(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T21:17:32.053539","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":505,"date":"2016-02-12 21:20:18.587760","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    from operator import functools\n    \n    result = 0\n    for i in list(range (1, n+1)):\n        result = i\n    return result\n    \n\n","after":null,"SubmissionTime":"2016-02-12T21:20:18.58776","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":584,"date":"2016-02-12 21:20:58.458939","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return \n    else:\n        return term(n) * product(n-1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-12T21:20:58.458939","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, LeafConstNode(ConstantExpressionNode-1), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":505,"date":"2016-02-12 21:21:08.915337","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    result = 0\n    for i in list(range (1, n+1)):\n        result = i\n    return result\n    \n\n","after":null,"SubmissionTime":"2016-02-12T21:21:08.915337","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":584,"date":"2016-02-12 21:21:57.159734","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return \n    else:\n        return term(n) + product(n-1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-12T21:21:57.159734","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":584,"date":"2016-02-12 21:22:10.978808","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return \n    else:\n        return term(n)*product(n-1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-12T21:22:10.978808","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":505,"date":"2016-02-12 21:23:40.625106","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    result = 0\n    lst = list(range(1, n+1))\n    return lst\n    \n\n","after":null,"SubmissionTime":"2016-02-12T21:23:40.625106","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":505,"date":"2016-02-12 21:24:35.886434","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    result = 0\n    lst = list(range(1, n+1))\n    result = functools.reduce(lambda x, y:x*y, lst)\n    return result\n    \n\n","after":null,"SubmissionTime":"2016-02-12T21:24:35.886434","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":584,"date":"2016-02-12 21:26:09.042233","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return \n    else:\n        return product(n, term) * product(n-1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-12T21:26:09.042233","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":584,"date":"2016-02-12 21:28:03.843743","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return \n    else:\n        return term(n)*term(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T21:28:03.843743","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":584,"date":"2016-02-12 21:34:05.964053","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def count(k):\n        if k == 0:\n            return \n        else:\n            return term(k)*count(k-1)\n        return count(n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T21:34:05.964053","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":584,"date":"2016-02-12 21:34:26.737176","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def count(k):\n        if k == 0:\n            return \n        else:\n            return term(k)*count(k-1)\n    return count(n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-12T21:34:26.737176","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1018,"date":"2016-02-12 21:53:05.283163","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def count(b,a=1):\n        if b<n:\n            a=1*term(b)\n            return count(b+1,a)\n        if b==n:\n            return b\n    return count(1)\n\n","after":null,"SubmissionTime":"2016-02-12T21:53:05.283163","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1018,"date":"2016-02-12 21:54:32.288962","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def count(b,a=1):\n        if b<n:\n            a*=term(b)\n            return count(b+1,a)\n        if b==n:\n            return a\n    return count(1)\n\n","after":null,"SubmissionTime":"2016-02-12T21:54:32.288962","SynthesizedAfter":"\r\ndef product(n, term):\r\n    def count(b, a = 1):\r\n        if b<n:\r\n            a *= term(b+1)\r\n            return count(b+1, a)\r\n        if b==n:\r\n            return a\r\n    return count(1)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":1018,"date":"2016-02-12 21:55:32.368882","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def count(b,a=1):\n        if b<=n:\n            a*=term(b)\n            return count(b+1,a)\n        i#f b==n:\n        return a\n    return count(1)\n\n","after":null,"SubmissionTime":"2016-02-12T21:55:32.368882","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":627,"date":"2016-02-12 22:34:44.879149","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return term(n)\n    elif n == 1:\n        return term(n)\n    else:\n        term(n) * term(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T22:34:44.879149","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":567,"date":"2016-02-12 22:35:50.388152","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(i, total):\n        if i > n:\n            return total\n        else:\n            return total + term(n)\n    return helper(1, 0)\n\n\n","after":null,"SubmissionTime":"2016-02-12T22:35:50.388152","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":34,"date":"2016-02-12 22:36:26.038492","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-12T22:36:26.038492","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==0:\r\n        return 0\r\n    elif n==1:\r\n        return 1\r\n    else:\r\n        return product(n-1, term)*term(n)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":34,"date":"2016-02-12 22:37:25.625094","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-12T22:37:25.625094","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":567,"date":"2016-02-12 22:37:41.501508","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(i, total):\n        if i > n:\n            return total\n        else:\n            total = total * i\n            return total\n    return helper(1, 1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T22:37:41.501508","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":567,"date":"2016-02-12 22:38:23.235895","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def helper(i, total):\n        if i > n:\n            return total\n        else:\n            total = total * i\n            return helper(i + 1, total)\n    return helper(1, 1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T22:38:23.235895","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":34,"date":"2016-02-12 22:38:29.152681","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return n\n    else:\n        return n + product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-12T22:38:29.152681","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":627,"date":"2016-02-12 22:40:21.656533","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return term(n)\n    elif n == 1:\n        return term(n)\n    else:\n        return term(n) * term(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T22:40:21.656533","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==0:\r\n        return term(n)\r\n    elif n==1:\r\n        return term(n)\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":34,"date":"2016-02-12 22:41:27.884705","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return n\n    else:\n        return n * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-12T22:41:27.884705","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":627,"date":"2016-02-12 22:43:15.461368","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(n)\n    else:\n        return term(n) * term(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T22:43:15.461368","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":627,"date":"2016-02-12 22:44:37.300166","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(n)\n    else:\n        return term(n) ** term(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T22:44:37.300166","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":627,"date":"2016-02-12 22:44:50.089588","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(n)\n    else:\n        return term(n) * term(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-12T22:44:50.089588","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":490,"date":"2016-02-12 22:58:39.700811","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(1)\n    return product(n-1)*term(n)\n\n","after":null,"SubmissionTime":"2016-02-12T22:58:39.700811","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":724,"date":"2016-02-13 01:05:21.031230","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return n* product((n-1),term)\n\n","after":null,"SubmissionTime":"2016-02-13T01:05:21.03123","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":724,"date":"2016-02-13 01:10:21.507882","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n== 1:\n        return n\n    else:\n        return n* product((n-1),term)\n\n","after":null,"SubmissionTime":"2016-02-13T01:10:21.507882","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":724,"date":"2016-02-13 01:21:26.935992","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n== 1:\n        return n\n    elif term == square:\n        return square(n)+ product((n-1),term)\n    else:\n        return n* product((n-1),term)\n\n","after":null,"SubmissionTime":"2016-02-13T01:21:26.935992","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":933,"date":"2016-02-13 02:02:47.459763","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-13T02:02:47.459763","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1022,"date":"2016-02-13 02:15:53.744578","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k, product = 0, 1\n    while k <= n:\n        product *= term(n)\n    return product\n\n","after":null,"SubmissionTime":"2016-02-13T02:15:53.744578","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1022,"date":"2016-02-13 02:17:30.219581","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k, product = 0, 1\n    while k <= n:\n        product *= term(n)\n        k += 1\n    return product\n\n","after":null,"SubmissionTime":"2016-02-13T02:17:30.219581","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1022,"date":"2016-02-13 02:17:47.875384","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k, product = 1, 1\n    while k <= n:\n        product *= term(n)\n        k += 1\n    return product\n\n","after":null,"SubmissionTime":"2016-02-13T02:17:47.875384","SynthesizedAfter":"\r\ndef product(n, term):\r\n    k, product = 1, 1\r\n    while k<=n:\r\n        product *= term(k)\r\n        k += 1\r\n    return product","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":1022,"date":"2016-02-13 02:18:14.683662","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k, product = 1, 1\n    while k < n:\n        product *= term(n)\n        k += 1\n    return product\n\n","after":null,"SubmissionTime":"2016-02-13T02:18:14.683662","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":451,"date":"2016-02-13 09:06:47.218518","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-13T09:06:47.218518","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":451,"date":"2016-02-13 09:08:24.264533","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def the_count(i):\n        if i == n:\n            return func(n)\n        else:\n            return i + the_count(i)\n    return the_count(1)\n\n","after":null,"SubmissionTime":"2016-02-13T09:08:24.264533","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":451,"date":"2016-02-13 09:08:47.463749","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def the_count(i):\n        if i == n:\n            return term(n)\n        else:\n            return i + the_count(i)\n    return the_count(1)\n\n","after":null,"SubmissionTime":"2016-02-13T09:08:47.463749","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":451,"date":"2016-02-13 09:09:03.172491","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def the_count(i):\n        if i == n:\n            return term(n)\n        else:\n            return i + the_count(i + 1)\n    return the_count(1)\n\n","after":null,"SubmissionTime":"2016-02-13T09:09:03.172491","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":451,"date":"2016-02-13 09:09:25.265138","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def the_count(i):\n        if i == n:\n            return term(n)\n        else:\n            return i * the_count(i + 1)\n    return the_count(1)\n\n","after":null,"SubmissionTime":"2016-02-13T09:09:25.265138","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-13 09:23:01.833089","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def terminater(i):\n        if i < n:\n            return term(i) * terminater(i+1)\n        else:\n            return term(i)\n\n    return terminater\n\n","after":null,"SubmissionTime":"2016-02-13T09:23:01.833089","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-13 09:25:39.456212","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def terminater(i):\n        if i == n:\n            return term(i) \n        else:\n            return term(i) + terminater(i+1)\n\n    return terminater\n\n","after":null,"SubmissionTime":"2016-02-13T09:25:39.456212","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":820,"date":"2016-02-13 09:27:42.207352","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def terminater(i):\n        if i == n:\n            return term(i) \n        else:\n            return term(i) + terminater(i+1)\n\n    return terminater(1)\n\n","after":null,"SubmissionTime":"2016-02-13T09:27:42.207352","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 10:34:28.343710","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return n*n\n\n","after":null,"SubmissionTime":"2016-02-13T10:34:28.34371","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 10:38:07.406966","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    i = 1\n    while i <= n:\n        total += term(n)\n        i += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-13T10:38:07.406966","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 10:38:29.945651","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    i = 0\n    while i <= n:\n        total += term(n)\n        i += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-13T10:38:29.945651","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 10:38:52.765740","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    i = 1\n    while i <= n:\n        total += term(n)\n        i += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-13T10:38:52.76574","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 10:39:04.259910","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    i = 1\n    while i <= n:\n        total = term(n)\n        i += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-13T10:39:04.25991","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 10:39:25.391295","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    i = 1\n    while i <= n:\n        total = total * term(n)\n        i += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-13T10:39:25.391295","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 10:39:37.645785","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    i = 1\n    while i <= n:\n        total += term(n)\n        i += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-13T10:39:37.645785","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":786,"date":"2016-02-13 10:40:05.964258","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def identity(n):\n        k = 0\n        total = 0\n        while k < n:\n            total = total * k\n            k += 1\n\n    def square(n):\n        k = 0\n        total = 0\n        while k < n:\n            total = total * (k**2)\n            k += 1\n    return product\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T10:40:05.964258","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 10:40:08.980791","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    i = 1\n    while i <= n:\n        print(total)\n        total += term(n)\n        print(total)\n        i += 1\n        print(total)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-13T10:40:08.980791","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 10:40:41.107965","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    i = 1\n    while i < n:\n        print(total)\n        total += term(n)\n        print(total)\n        i += 1\n        print(total)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-13T10:40:41.107965","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 10:40:51.087238","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    i = 1\n    while i < n:\n        total += term(n)\n        i += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-13T10:40:51.087238","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":875,"date":"2016-02-13 10:42:39.017907","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    # total = 1\n    # k = 1\n    # while k <= n:\n    #     total = total * term(k)\n    #     k += 1\n    # return total\n\n    if n == 1:\n        return term\n    else:\n        return mul((term(n), product)) \n\n","after":null,"SubmissionTime":"2016-02-13T10:42:39.017907","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":875,"date":"2016-02-13 10:43:02.179593","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(n)\n    else:\n        return mul((term(n), product)) \n\n","after":null,"SubmissionTime":"2016-02-13T10:43:02.179593","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":875,"date":"2016-02-13 10:43:21.014905","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(n)\n    else:\n        return mul((term(n), product(n-1, term))) \n\n","after":null,"SubmissionTime":"2016-02-13T10:43:21.014905","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return term(n)\r\n    else:\r\n        return mul(term(n), product(n-1, term))","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-term)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":875,"date":"2016-02-13 10:43:42.453789","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(1)\n    else:\n        return mul((term(n), product(n-1, term))) \n\n","after":null,"SubmissionTime":"2016-02-13T10:43:42.453789","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 10:45:50.631904","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def lst_maker(i):\n        if i == n:\n            return [i]\n        else:\n            return [i] + lst_maker(i)\n    big_list = lst_maker(i)\n    total = map(term(big_list))\n\n","after":null,"SubmissionTime":"2016-02-13T10:45:50.631904","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 10:46:28.105729","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def lst_maker(i):\n        if i == n:\n            return [i]\n        else:\n            return [i] + lst_maker(i+1)\n    big_list = lst_maker(i)\n    total = map(term(big_list))\n\n","after":null,"SubmissionTime":"2016-02-13T10:46:28.105729","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 10:46:43.583379","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def lst_maker(i):\n        if i == n:\n            return [i]\n        else:\n            return [i] + lst_maker(i+1)\n    big_list = lst_maker(1)\n    total = map(term(big_list))\n\n","after":null,"SubmissionTime":"2016-02-13T10:46:43.583379","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 10:46:56.438812","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def lst_maker(i):\n        if i == n:\n            return [i]\n        else:\n            return [i] + lst_maker(i+1)\n    big_list = lst_maker(1)\n    total = map(term, big_list)\n\n","after":null,"SubmissionTime":"2016-02-13T10:46:56.438812","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 10:47:04.627314","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def lst_maker(i):\n        if i == n:\n            return [i]\n        else:\n            return [i] + lst_maker(i+1)\n    big_list = lst_maker(1)\n    total = map(term, big_list)\n    return total\n","after":null,"SubmissionTime":"2016-02-13T10:47:04.627314","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 10:47:37.525942","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def lst_maker(i):\n        if i == n:\n            return [i]\n        else:\n            return [i] + lst_maker(i+1)\n    big_list = lst_maker(1)\n    total = mul(map(term, big_list))\n    return total\n","after":null,"SubmissionTime":"2016-02-13T10:47:37.525942","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 10:48:03.307965","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def lst_maker(i):\n        if i == n:\n            return [i]\n        else:\n            return [i] + lst_maker(i+1)\n    big_list = lst_maker(1)\n    total = (map(term, big_list))\n    total_mul = mul(total, n)\n    return total_mul\n","after":null,"SubmissionTime":"2016-02-13T10:48:03.307965","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 10:48:57.885360","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total=0\n    k=1\n    while k < n:\n        total = total * term(n)\n        k += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-13T10:48:57.88536","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 10:49:05.908611","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total=1\n    k=1\n    while k < n:\n        total = total * term(n)\n        k += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-13T10:49:05.908611","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 10:49:19.886134","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total=0\n    k=1\n    while k < n:\n        total += total * term(n)\n        k += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-13T10:49:19.886134","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 10:49:25.423984","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total=1\n    k=1\n    while k < n:\n        total += total * term(n)\n        k += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-13T10:49:25.423984","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 10:49:35.819675","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total=1\n    k=0\n    while k < n:\n        total += total * term(n)\n        k += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-13T10:49:35.819675","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 10:49:57.234748","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total=1\n    k=1\n    while k < n:\n        total = total * term(n)\n        k += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-13T10:49:57.234748","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":786,"date":"2016-02-13 10:50:01.774444","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + term(k), k + 1\n    return total\n    \n\n\n","after":null,"SubmissionTime":"2016-02-13T10:50:01.774444","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 10:50:07.769229","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total=0\n    k=1\n    while k < n:\n        total = total * term(n)\n        k += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-13T10:50:07.769229","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 10:50:20.413645","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total=0\n    k=1\n    while k < n:\n        total = term(n)\n        k += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-13T10:50:20.413645","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 10:50:28.685153","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total=0\n    k=1\n    while k < n:\n        total += term(n)\n        k += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-13T10:50:28.685153","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":786,"date":"2016-02-13 10:50:42.996991","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    total, k = 0, 1\n    while k <= n:\n        total, k = total * term(k), k + 1\n    return total\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T10:50:42.996991","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 10:51:19.738397","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total=0\n    k=1\n    while k < n:\n        print(n)\n        total += term(n)\n        print(n)\n        k += 1\n        print(n)\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-13T10:51:19.738397","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":786,"date":"2016-02-13 10:52:32.358854","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    total, k = 0, 1\n    while k <= n:\n        total, total = total * term(k), k + 1\n    return total\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T10:52:32.358854","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":786,"date":"2016-02-13 10:53:24.115263","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    total, k = 0, 1\n    while k <= n:\n        total, k = total * term(k), k + 1\n    return total\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T10:53:24.115263","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":786,"date":"2016-02-13 10:53:46.767284","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    total, k = 0, 1\n    while k <= n:\n        total, k = total * k, k + 1\n    return total\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T10:53:46.767284","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 10:54:05.665401","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    k = 1\n    while k < n:\n        total += term(k)\n        k += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-13T10:54:05.665401","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":786,"date":"2016-02-13 10:55:18.468825","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    total, k = 0, 1\n    while k <= n:\n        total, k = (total * term(k)), k + 1\n    return total\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T10:55:18.468825","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 10:59:02.157513","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    k = 1\n    while k < n:\n        total *= term(k)\n        k += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-13T10:59:02.157513","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 10:59:09.148383","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    k = 1\n    while k < n:\n        total = term(k)\n        k += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-13T10:59:09.148383","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 10:59:20.314404","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    k = 1\n    while k <= n:\n        total = term(k)\n        k += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-13T10:59:20.314404","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 10:59:34.902268","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    k = 1\n    while k <= n:\n        total = sum(term(k))\n        k += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-13T10:59:34.902268","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 10:59:47.549853","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    k = 1\n    while k <= n:\n        total = term(k)\n        k += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-13T10:59:47.549853","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 11:00:15.108260","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    k = 1\n    while k <= n:\n        total = term(k) * term(k-1)\n        k += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-13T11:00:15.10826","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 11:00:26.403658","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    k = 1\n    while k <= n:\n        total = term(k)\n        k += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-13T11:00:26.403658","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 11:00:31.819637","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    k = 1\n    while k <= n:\n        total += term(k)\n        k += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-13T11:00:31.819637","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 11:01:30.483322","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    k = 1\n    while k <= n:\n        total = term(k)\n        k += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-13T11:01:30.483322","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 11:01:52.095210","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    k = 1\n    while k <= n:\n        total = term(k) * n \n        k += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-13T11:01:52.09521","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 11:02:00.491832","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    k = 1\n    while k <= n:\n        total = term(k) * n-1\n        k += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-13T11:02:00.491832","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 11:02:11.677347","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    k = 1\n    while k <= n:\n        total = term(k)\n        k += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-13T11:02:11.677347","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 11:02:23.367668","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    k = 1\n    while k <= n:\n        total = term(k) * n\n        k += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-13T11:02:23.367668","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 11:02:32.214890","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    k = 1\n    while k <= n:\n        total = term(k) * n-1 \n        k += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-13T11:02:32.21489","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 11:02:49.815895","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    k = 1\n    while k <= n:\n        total *= term(k)\n        k += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-13T11:02:49.815895","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1060,"date":"2016-02-13 11:45:59.035253","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==1:\n        return term(n)\n    else:\n        return term(n)*(n-1,term)\n\n","after":null,"SubmissionTime":"2016-02-13T11:45:59.035253","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1060,"date":"2016-02-13 11:49:18.332151","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==1:\n        return term(n)\n    else:\n        return term(1)*(n-1,term)\n\n","after":null,"SubmissionTime":"2016-02-13T11:49:18.332151","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":756,"date":"2016-02-13 12:00:54.257247","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-13T12:00:54.257247","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":822,"date":"2016-02-13 12:06:29.797013","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(n)\n    return product(term(increment(n-2)))*term(n)\n\n","after":null,"SubmissionTime":"2016-02-13T12:06:29.797013","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":433,"date":"2016-02-13 12:22:21.651872","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==1:\n        return 1\n    if n > 1:\n        return n*product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-13T12:22:21.651872","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return 1\r\n    if n>1:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":786,"date":"2016-02-13 12:24:20.311048","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    total, k = 1\n    while k <= n:\n        total, k = total * term(k), k + 1\n    return total\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T12:24:20.311048","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":756,"date":"2016-02-13 12:34:05.336248","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    product = 0\n    count = 1\n    while count < n:\n        product *= term(count)\n        count += 1\n    return product\n\n","after":null,"SubmissionTime":"2016-02-13T12:34:05.336248","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":756,"date":"2016-02-13 12:35:12.565943","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    product = 1\n    count = 1\n    while count < n:\n        product = product * term(count)\n        count += 1\n    return product\n\n","after":null,"SubmissionTime":"2016-02-13T12:35:12.565943","SynthesizedAfter":"\r\ndef product(n, term):\r\n    product = 1\r\n    count = 1\r\n    while count<n:\r\n        product = product*term(count+1)\r\n        count += 1\r\n    return product","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":31,"date":"2016-02-13 12:36:49.510899","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def identity(x):\n        return x\n    def factor(n, term):\n        def start(a, accum):\n            if a == n:\n                return accum\n            else:\n                a += 1\n                return start(a, accum * a)\n            return start (1,1)\n    factor (5, identity)\n\n","after":null,"SubmissionTime":"2016-02-13T12:36:49.510899","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":31,"date":"2016-02-13 12:37:20.508595","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def identity(x):\n        return x\n    def factor(n, term):\n        def start(a, accum):\n            if a == n:\n                return accum\n            else:\n                a += 1\n                return start(a, accum * a)\n        return start (1,1)\n    factor (5, identity)\n\n","after":null,"SubmissionTime":"2016-02-13T12:37:20.508595","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":31,"date":"2016-02-13 12:39:04.289765","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def identity(x):\n        return x\n    def factor(n, term):\n        def start(a, accum):\n            if a == n:\n                return accum\n            else:\n                a += 1\n                return start(a, accum * a)\n        return start (1,1)\n    return factor \n    factor (5, identity)\n\n","after":null,"SubmissionTime":"2016-02-13T12:39:04.289765","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":345,"date":"2016-02-13 12:39:24.234717","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-13T12:39:24.234717","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-13 12:45:48.386253","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i, term):\n        i = 1\n        if i <= n:\n            return i * term(i)\n            i += 1\n    return counter(n, term)        \n\n\n","after":null,"SubmissionTime":"2016-02-13T12:45:48.386253","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-13 12:46:08.390403","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i, term):\n        i = 1\n        if i <= n:\n            return i * term(i)\n            i += 1\n    return counter(n-1, term)        \n\n\n","after":null,"SubmissionTime":"2016-02-13T12:46:08.390403","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-13 12:46:21.921723","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i, term):\n        i = 1\n        if i <= n:\n            return i * term(i)\n    i+=1\n    return counter(n-1, term)        \n\n\n","after":null,"SubmissionTime":"2016-02-13T12:46:21.921723","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-13 12:47:21.537852","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i, term):\n        i = 1\n        if i <= n:\n            i+=1\n            return i * term(i)\n    \n    return counter(n-1, term)        \n\n\n","after":null,"SubmissionTime":"2016-02-13T12:47:21.537852","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-13 12:47:39.964332","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i, term):\n        i = 1\n        if i <= n:\n            i+=1\n            return i * term(i)\n    \n    return counter(n, term)        \n\n\n","after":null,"SubmissionTime":"2016-02-13T12:47:39.964332","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-13 12:48:27.375332","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i, term):\n        i = 1\n        if i <= n:\n            i+=1\n            return i * term(i+1)\n    \n    return counter(n, term)        \n\n\n","after":null,"SubmissionTime":"2016-02-13T12:48:27.375332","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-13 12:48:41.853326","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i, term):\n        i = 1\n        if i <= n:\n            \n            return i * term(i+1)\n    \n    return counter(n, term)        \n\n\n","after":null,"SubmissionTime":"2016-02-13T12:48:41.853326","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-13 12:48:52.437244","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i, term):\n        i = 1\n        if i <= n:\n            i+=1\n            return i * term(i+1)\n    \n    return counter(n, term)        \n\n\n","after":null,"SubmissionTime":"2016-02-13T12:48:52.437244","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":782,"date":"2016-02-13 12:51:02.767652","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\"\"\"\n    total, k=0,1\n    while k<=n:\n        total,k=total*term(k),k+1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-13T12:51:02.767652","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-13 12:51:47.403352","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i, term):\n        i = 1\n        if i <= n:\n            \n            return i * term(i+1)\n            i+=1\n    return counter(n, term)        \n\n\n","after":null,"SubmissionTime":"2016-02-13T12:51:47.403352","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-13 12:52:17.198347","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i, term):\n        i = 1\n        if i <= n:\n            i+=1\n            return i * term(i+1)\n            \n    return counter(n, term)        \n\n\n","after":null,"SubmissionTime":"2016-02-13T12:52:17.198347","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-13 12:55:34.014774","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i, term):\n        i = 1\n        if i <= n:\n            return i * term(i+1)\n            i+=1\n        \n                \n            \n    return counter(n, term)        \n\n\n","after":null,"SubmissionTime":"2016-02-13T12:55:34.014774","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-13 12:55:43.361434","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i, term):\n        i = 1\n        if i <= n:\n            i +=1\n            return i * term(i+1)\n            i+=1\n        \n                \n            \n    return counter(n, term)        \n\n\n","after":null,"SubmissionTime":"2016-02-13T12:55:43.361434","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":243,"date":"2016-02-13 12:55:59.801915","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==0 or n==1:\n        return term(n)\n    else:\n        return product(n-1, term(n))\n\n\n","after":null,"SubmissionTime":"2016-02-13T12:55:59.801915","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":72,"date":"2016-02-13 12:57:29.035402","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==1:\n        return term(n)\n    return n*product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-13T12:57:29.035402","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return term(n)\r\n    return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-13 12:59:17.776932","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i, term):\n        i = 1\n        if i <= n:\n            i +=1\n            k = i + term(i + 1)\n            return k + counter(i, term)\n            \n        \n                \n            \n    return counter(n, term)        \n\n\n","after":null,"SubmissionTime":"2016-02-13T12:59:17.776932","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-13 12:59:17.776932","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i, term):\n        i = 1\n        if i <= n:\n            i +=1\n            k = i + term(i + 1)\n            return k + counter(i, term)\n            \n        \n                \n            \n    return counter(n, term)        \n\n\n","after":null,"SubmissionTime":"2016-02-13T12:59:17.776932","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-13 12:59:52.558549","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i, term):\n        i = 1\n        if i <= n:\n            i +=1\n            k = i + term(i + 1)\n            return k * k + 1\n        \n            \n        \n                \n            \n    return counter(n, term)        \n\n\n","after":null,"SubmissionTime":"2016-02-13T12:59:52.558549","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-13 13:00:01.772814","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i, term):\n        i = 1\n        if i <= n:\n            i +=1\n            k = i + term(i + 1)\n            return k * k + 1\n        \n            \n        \n                \n            \n    return counter(n, term)        \n\n\n","after":null,"SubmissionTime":"2016-02-13T13:00:01.772814","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-13 13:02:05.494505","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i, term):\n        i = 1\n        if i <= n:\n            i +=1\n            k = i + term(i + 1)\n            \n\n            \n        \n                \n            \n    return counter(n, term)        \n\n\n","after":null,"SubmissionTime":"2016-02-13T13:02:05.494505","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-13 13:03:04.094473","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i, term):\n        i = 1\n        i +=1\n        if i <= n:\n            i +=1\n            sums = i + term(i + 1)\n            \n\n            \n        \n                \n            \n    return counter(n, term)        \n\n\n","after":null,"SubmissionTime":"2016-02-13T13:03:04.094473","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-13 13:03:14.214358","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i, term):\n        i = 1\n        i +=1\n        if i <= n:\n            \n            sums = i + term(i + 1)\n            return sums\n            \n\n            \n        \n                \n            \n    return counter(n, term)        \n\n\n","after":null,"SubmissionTime":"2016-02-13T13:03:14.214358","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-13 13:03:14.214358","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i, term):\n        i = 1\n        i +=1\n        if i <= n:\n            \n            sums = i + term(i + 1)\n            return sums\n            \n\n            \n        \n                \n            \n    return counter(n, term)        \n\n\n","after":null,"SubmissionTime":"2016-02-13T13:03:14.214358","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-13 13:03:22.384555","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i, term):\n        i = 1\n        i +=1\n        if i <= n:\n            \n            sums = i * term(i + 1)\n            return sums\n            \n\n            \n        \n                \n            \n    return counter(n, term)        \n\n\n","after":null,"SubmissionTime":"2016-02-13T13:03:22.384555","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":780,"date":"2016-02-13 13:14:44.168964","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, times = 1, 0\n    while k <= n:\n        times, k = times + term(k), k + 1\n    return times\n\n","after":null,"SubmissionTime":"2016-02-13T13:14:44.168964","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":780,"date":"2016-02-13 13:16:35.862937","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, times = 1, 0\n    while k <= n:\n        times, k = times * term(k), k + 1\n    return times\n\n","after":null,"SubmissionTime":"2016-02-13T13:16:35.862937","SynthesizedAfter":"\r\ndef product(n, term):\r\n    k, times = 1, 1\r\n    while k<=n:\r\n        times, k = times*term(k), k+1\r\n    return times","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":780,"date":"2016-02-13 13:16:35.862937","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, times = 1, 0\n    while k <= n:\n        times, k = times * term(k), k + 1\n    return times\n\n","after":null,"SubmissionTime":"2016-02-13T13:16:35.862937","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":780,"date":"2016-02-13 13:26:42.830137","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    # k, times = 1, 1\n    # while k <= n:\n    #     times, k = times * term(k), k + 1\n    # return times\n\n    k, times = n, 1\n    while k > 0:\n        times, k = times(k), k - 1\n    return times\n\n","after":null,"SubmissionTime":"2016-02-13T13:26:42.830137","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":31,"date":"2016-02-13 13:28:41.429568","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def identity(x):\n        return x\n    def factor(n, term):\n        def start(a, accum):\n            if a == n:\n                return accum\n            else:\n                a += 1\n                return start(a, accum * a)\n        return start (1,1)\n    factor (5, identity)\n\n","after":null,"SubmissionTime":"2016-02-13T13:28:41.429568","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":755,"date":"2016-02-13 13:31:03.474674","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    for i in range(0, n+1):\n        total = total * term(i)\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-13T13:31:03.474674","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1070,"date":"2016-02-13 13:35:13.683096","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    total = 0\n    while i < n:\n        i, total = i + 1, total * term(i)\n    return total\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T13:35:13.683096","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1070,"date":"2016-02-13 13:36:24.178349","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    total = 1\n    while i < n:\n        i, total = i + 1, total * term(i)\n    return total\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T13:36:24.178349","SynthesizedAfter":"\r\ndef product(n, term):\r\n    i = 1\r\n    total = 1\r\n    while i<n:\r\n        i, total = i+1, total*term(i+1)\r\n    return total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":648,"date":"2016-02-13 13:40:14.700443","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return term(n) + product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-13T13:40:14.700443","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==0:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":1,"Id":0,"studentId":359,"date":"2016-02-13 13:42:27.947397","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-13T13:42:27.947397","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":359,"date":"2016-02-13 13:48:21.924834","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    #create a list that has all the values until n (including n)\n    max_count = list (range(1,n)) + n\n    #using that list\n    i,total = 0, 0\n    while i != n:\n      n += 1\n      total += term(max_count[i])\n    return total\n\n","after":null,"SubmissionTime":"2016-02-13T13:48:21.924834","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":132,"date":"2016-02-13 13:48:26.335831","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total * term(k), k + 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-13T13:48:26.335831","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":359,"date":"2016-02-13 13:50:13.912636","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    #create a list that has all the values until n (including n)\n    max_count = list (range(1,n))\n    #using that list\n    i,total = 0, 0\n    while i != n:\n      n += 1\n      total += term(max_count[i])\n    return total\n\n","after":null,"SubmissionTime":"2016-02-13T13:50:13.912636","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":359,"date":"2016-02-13 13:50:17.773116","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    #create a list that has all the values until n (including n)\n    max_count = list (range(1,n))\n    #using that list\n    i,total = 0, 0\n    while i != n:\n      i += 1\n      total += term(max_count[i])\n    return total\n\n","after":null,"SubmissionTime":"2016-02-13T13:50:17.773116","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":359,"date":"2016-02-13 13:50:33.830738","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    #create a list that has all the values until n (including n)\n    max_count = list (range(1,n))\n    #using that list\n    i,total = 0, 0\n    while i != n:\n      total += term(max_count[i])\n      i += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-13T13:50:33.830738","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":359,"date":"2016-02-13 13:50:57.570210","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    #create a list that has all the values until n (including n)\n    max_count = list (range(1,n))\n    print (len(max_count))\n    #using that list\n    i,total = 0, 0\n    while i != n:\n      total += term(max_count[i])\n      i += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-13T13:50:57.57021","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":359,"date":"2016-02-13 13:51:24.767150","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    #create a list that has all the values until n (including n)\n    max_count = list (range(1,n))\n    print (len(max_count))\n    #using that list\n    i,total = 0, 0\n    while i < n:\n      total += term(max_count[i])\n      i += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-13T13:51:24.76715","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":359,"date":"2016-02-13 13:52:02.036859","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    #create a list that has all the values until n (including n)\n    max_count = list (range(n))\n    print (len(max_count))\n    #using that list\n    i,total = 0, 0\n\n    while i < n:\n      total += term(max_count[i])\n      i += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-13T13:52:02.036859","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":359,"date":"2016-02-13 13:52:36.200938","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    #create a list that has all the values until n (including n)\n    max_count = list (range(1,n+1))\n    #using that list\n    i,total = 0, 0\n\n    while i < n:\n      total += term(max_count[i])\n      i += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-13T13:52:36.200938","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":359,"date":"2016-02-13 13:53:08.982709","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    #create a list that has all the values until n (including n)\n    max_count = list (range(1,n+1))\n    #using that list\n    i,total = 0, 0\n\n    while i < n:\n      total *= term(max_count[i])\n      i += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-13T13:53:08.982709","SynthesizedAfter":"\r\ndef product(n, term):\r\n    max_count = list(range(1, n+1))\r\n    i, total = 0, 1\r\n    while i<n:\r\n        total *= term(max_count[i])\r\n        i += 1\r\n    return total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":559,"date":"2016-02-13 13:54:49.413527","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def helper (R) :\n        if R == n :\n            return term(n)\n        else :\n            return term(R) + helper(R+1)\n    return helper(1)\n\n","after":null,"SubmissionTime":"2016-02-13T13:54:49.413527","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":338,"date":"2016-02-13 14:04:04.037436","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + square(k), k + 1\n        return total\n\n        \n\n\n\n","after":null,"SubmissionTime":"2016-02-13T14:04:04.037436","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":338,"date":"2016-02-13 14:05:02.124427","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k < n:\n        total, k = total + square(k), k + 1\n        return total\n\n        \n\n\n\n","after":null,"SubmissionTime":"2016-02-13T14:05:02.124427","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":338,"date":"2016-02-13 14:05:32.994955","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k < n:\n        total, k = total + (k*k), k + 1\n        return total\n\n        \n\n\n\n","after":null,"SubmissionTime":"2016-02-13T14:05:32.994955","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":338,"date":"2016-02-13 14:05:57.276009","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k < n:\n        total, k = total + (k*k), k + 1\n        \n    return total\n\n        \n\n\n\n","after":null,"SubmissionTime":"2016-02-13T14:05:57.276009","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":338,"date":"2016-02-13 14:06:09.533260","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + (k*k), k + 1\n        \n    return total\n\n        \n\n\n\n","after":null,"SubmissionTime":"2016-02-13T14:06:09.53326","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":338,"date":"2016-02-13 14:06:38.272832","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + square(k), k + 1\n        \n    return total\n\n        \n\n\n\n","after":null,"SubmissionTime":"2016-02-13T14:06:38.272832","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":338,"date":"2016-02-13 14:07:40.043382","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + (k*(k+1)), k + 1\n        \n    return total\n\n        \n\n\n\n","after":null,"SubmissionTime":"2016-02-13T14:07:40.043382","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":338,"date":"2016-02-13 14:10:02.681136","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + (k), k + 1\n        \n    return total\n\n        \n\n\n\n","after":null,"SubmissionTime":"2016-02-13T14:10:02.681136","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":338,"date":"2016-02-13 14:11:58.951889","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + (k * increment(k))\n        \n    return total\n\n        \n\n\n\n","after":null,"SubmissionTime":"2016-02-13T14:11:58.951889","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":338,"date":"2016-02-13 14:12:54.371819","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + k * increment(k), increment(k)\n        \n    return total\n\n        \n\n\n\n","after":null,"SubmissionTime":"2016-02-13T14:12:54.371819","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":723,"date":"2016-02-13 14:15:39.341568","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    k = 1\n    while k <= n:\n        total = total * term(k)\n        k = k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-13T14:15:39.341568","SynthesizedAfter":"\r\ndef product(n, term):\r\n    total = 1\r\n    k = 1\r\n    while k<=n:\r\n        total = term(k)*total\r\n        k = k+1\r\n    return total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-total), 1), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":338,"date":"2016-02-13 14:15:57.068441","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        k =  increment(k)\n        total = (k-1) * k\n        \n    return total\n\n        \n\n\n\n","after":null,"SubmissionTime":"2016-02-13T14:15:57.068441","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":34,"date":"2016-02-13 14:16:41.031903","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    # if n == 0:\n    #     return 0\n    # elif n == 1:\n    #     return n\n    # else:\n    return term(n) * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-13T14:16:41.031903","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":497,"date":"2016-02-13 14:17:53.911510","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def helper(k):\n        if k < n:\n            return term(k) * term(k + 1)\n        else: \n            return term(k) \n    return helper(1) \n\n","after":null,"SubmissionTime":"2016-02-13T14:17:53.91151","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":497,"date":"2016-02-13 14:18:17.487870","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def helper(k):\n        if k < n:\n            return term(k) * term(k + 1)\n        else: \n            return term(n) \n    return helper(1) \n\n","after":null,"SubmissionTime":"2016-02-13T14:18:17.48787","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":338,"date":"2016-02-13 14:18:59.703714","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, 1\n    while k <= n:\n        total = total * k\n        k = increment(k)\n        \n    return total\n\n        \n\n\n\n","after":null,"SubmissionTime":"2016-02-13T14:18:59.703714","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":497,"date":"2016-02-13 14:20:25.946671","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def helper(k):\n        if k == 1:\n            return term(1)\n        elif k < n:\n            return term(k) * term(k + 1)\n        else: \n            return term(k) \n    return helper(1) \n\n","after":null,"SubmissionTime":"2016-02-13T14:20:25.946671","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":944,"date":"2016-02-13 14:20:46.356598","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i=1\n    def counter(i):\n        if i==n:\n            return term(n)\n        else:\n            return term(i)+counter(i+1)\n        \n\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T14:20:46.356598","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":497,"date":"2016-02-13 14:20:47.772898","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def helper(k):\n        if k == 1:\n            return term(1) * term(k + 1)\n        elif k < n:\n            return term(k) * term(k + 1)\n        else: \n            return term(k) \n    return helper(1) \n\n","after":null,"SubmissionTime":"2016-02-13T14:20:47.772898","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":497,"date":"2016-02-13 14:20:53.580575","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def helper(k):\n        if k == 1:\n            return term(1) * term(2)\n        elif k < n:\n            return term(k) * term(k + 1)\n        else: \n            return term(k) \n    return helper(1) \n\n","after":null,"SubmissionTime":"2016-02-13T14:20:53.580575","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":497,"date":"2016-02-13 14:22:57.340102","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def helper(k):\n        if k < n:\n            return term(k) * term(k + 1)\n        else: \n            return term(k) \n    return helper(1) \n\n","after":null,"SubmissionTime":"2016-02-13T14:22:57.340102","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":497,"date":"2016-02-13 14:23:12.855298","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def helper(k):\n        if k < n:\n            return term(k) * term(k + 1)\n        elif k == n: \n            return term(k) \n    return helper(1) \n\n","after":null,"SubmissionTime":"2016-02-13T14:23:12.855298","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":497,"date":"2016-02-13 14:24:08.974623","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def helper(k):\n        if k < n:\n            return term(k) * term(k + 1)\n        elif k == n: \n            return term(k + 1) \n    return helper(1) \n\n","after":null,"SubmissionTime":"2016-02-13T14:24:08.974623","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":497,"date":"2016-02-13 14:24:14.508291","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def helper(k):\n        if k < n:\n            return term(k) * term(k + 1)\n        elif k == n: \n            return term(k) \n    return helper(1) \n\n","after":null,"SubmissionTime":"2016-02-13T14:24:14.508291","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":497,"date":"2016-02-13 14:26:20.523978","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def helper(k):\n        if k < n:\n            return term(k) * term(k + 1)\n        elif k == n: \n            return term(3) \n    return helper(1) \n\n","after":null,"SubmissionTime":"2016-02-13T14:26:20.523978","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":497,"date":"2016-02-13 14:26:29.005970","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def helper(k):\n        if k < n:\n            return term(k) * term(k + 1)\n        elif k == n: \n            return term(k) \n    return helper(1) \n\n","after":null,"SubmissionTime":"2016-02-13T14:26:29.00597","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":497,"date":"2016-02-13 14:28:18.180979","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def helper(k):\n        if k <= n:\n            return term(k) * term(k + 1)\n        else: \n            return term(k) \n    return helper(1) \n\n","after":null,"SubmissionTime":"2016-02-13T14:28:18.180979","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":984,"date":"2016-02-13 14:40:45.591860","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==0:\n        return term(n)\n    else:\n        return term(n)*product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-13T14:40:45.59186","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, LeafConstNode(ConstantExpressionNode-1), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":984,"date":"2016-02-13 14:41:37.446889","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==0:\n        return\n    else:\n        return term(n)*product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-13T14:41:37.446889","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":671,"date":"2016-02-13 14:45:30.763170","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if a == n:\n        return term(n)\n    else:\n        return term(n) * product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-13T14:45:30.76317","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":832,"date":"2016-02-13 14:50:01.576084","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return term(1)\n    else:\n        return term(1) + product(n, term)\n    #counter = 1\n    #while counter < n:\n        #term(counter) \n        #counter += 1\n\n\n","after":null,"SubmissionTime":"2016-02-13T14:50:01.576084","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":984,"date":"2016-02-13 14:50:50.123692","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return\n    else:\n        return term(n)*term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-13T14:50:50.123692","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":984,"date":"2016-02-13 14:51:49.197070","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return\n    else:\n        return term(n)*product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-13T14:51:49.19707","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":984,"date":"2016-02-13 14:52:55.559588","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = n\n    if n == 0:\n        return\n    else:\n        return term(x)*product(x-1, term)\n\n","after":null,"SubmissionTime":"2016-02-13T14:52:55.559588","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":832,"date":"2016-02-13 14:56:12.904953","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n  #  if n == 1:\n   #     return term(1)\n    #else:\n     #   return term(n) * product(n - 1, term)\n    counter = 1\n    total = total\n    while counter < n:\n        total = total + term(counter) \n        counter += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-13T14:56:12.904953","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":832,"date":"2016-02-13 14:56:28.384692","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n  #  if n == 1:\n   #     return term(1)\n    #else:\n     #   return term(n) * product(n - 1, term)\n    counter = 1\n    total = 0\n    while counter < n:\n        total = total + term(counter) \n        counter += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-13T14:56:28.384692","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":832,"date":"2016-02-13 14:56:38.597329","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n  #  if n == 1:\n   #     return term(1)\n    #else:\n     #   return term(n) * product(n - 1, term)\n    counter = 1\n    total = 0\n    while counter < n:\n        total = total * term(counter) \n        counter += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-13T14:56:38.597329","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":832,"date":"2016-02-13 14:56:47.247816","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n  #  if n == 1:\n   #     return term(1)\n    #else:\n     #   return term(n) * product(n - 1, term)\n    counter = 1\n    total = 1\n    while counter < n:\n        total = total * term(counter) \n        counter += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-13T14:56:47.247816","SynthesizedAfter":"\r\ndef product(n, term):\r\n    counter = 1\r\n    total = 1\r\n    while counter<n:\r\n        total = total*term(counter+1)\r\n        counter += 1\r\n    return total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":762,"date":"2016-02-13 14:58:47.771540","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    k = 1\n    while k <= n:\n        total, k = total * term(k), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-13T14:58:47.77154","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1028,"date":"2016-02-13 15:02:01.184453","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    result = 1\n    result *= term(n)*product(n - 1, term)\n    return result\n\n","after":null,"SubmissionTime":"2016-02-13T15:02:01.184453","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-13 15:04:08.076619","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i, term):\n        i = 1\n        i +=1\n        if i <= n:\n            sums = i * term(i + 1)\n            return counter(i, term)\n            \n\n            \n        \n                \n            \n    return counter(n, term)        \n\n\n","after":null,"SubmissionTime":"2016-02-13T15:04:08.076619","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-13 15:06:07.859375","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i, term):\n        i = 1\n        i +=1\n        if i <= n:\n            sums = i * term(i + 1)\n            return sums\n            \n\n            \n        \n                \n            \n    return counter(n, term)        \n\n\n","after":null,"SubmissionTime":"2016-02-13T15:06:07.859375","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-13 15:09:56.917290","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i, term):\n        i = 1 \n        i +=1\n        if i <= n:\n            sums = i * term(i + 1)\n            return sums + counter(i, term)   \n    return counter(n, term)        \n\n\n","after":null,"SubmissionTime":"2016-02-13T15:09:56.91729","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-13 15:10:14.558027","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i, term):\n        i = 1 \n        i +=1\n        if i <= n:\n            sums = i * term(i + 1)\n            return sums  \n    return counter(n, term)        \n\n\n","after":null,"SubmissionTime":"2016-02-13T15:10:14.558027","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":984,"date":"2016-02-13 15:12:37.972287","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    lst = range(0, n)\n    map(term, lst)\n    return mul(lst)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:12:37.972287","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":420,"date":"2016-02-13 15:16:18.900758","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def product_of_sequence(i,term):\n        if i==n: \n            return i\n        else:\n            return i * product_of_sequence(i+1,term)\n    return product_of_sequence(1,term)\n\n","after":null,"SubmissionTime":"2016-02-13T15:16:18.900758","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-13 15:18:06.115975","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i, sum):\n        i +=1\n        if i <= n:\n            sums = i * term(i + 1)\n            return sums  \n    return counter(1, n)        \n\n\n","after":null,"SubmissionTime":"2016-02-13T15:18:06.115975","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":420,"date":"2016-02-13 15:18:15.624145","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def product_of_sequence(i,term):\n        if i==n: \n            return i\n        else:\n            return term(i) * product_of_sequence(i+1,term(i+1))\n    return product_of_sequence(1,term(1))\n\n","after":null,"SubmissionTime":"2016-02-13T15:18:15.624145","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":420,"date":"2016-02-13 15:18:36.485467","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def product_of_sequence(i,term):\n        if i==n: \n            return i\n        else:\n            return term(i) * product_of_sequence(i+1,i+1)\n    return product_of_sequence(1,1)\n\n","after":null,"SubmissionTime":"2016-02-13T15:18:36.485467","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":420,"date":"2016-02-13 15:18:51.238881","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def product_of_sequence(i,term):\n        if i==n: \n            return i\n        else:\n            return i * product_of_sequence(i+1,i+1)\n    return product_of_sequence(1,1)\n\n","after":null,"SubmissionTime":"2016-02-13T15:18:51.238881","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":420,"date":"2016-02-13 15:19:09.206444","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def product_of_sequence(i,term):\n        if i==n: \n            return i\n        else:\n            return term(i) * product_of_sequence(i+1,i+1)\n    return product_of_sequence(1,1)\n\n","after":null,"SubmissionTime":"2016-02-13T15:19:09.206444","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":420,"date":"2016-02-13 15:20:07.613520","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def product_of_sequence(i,fn):\n        if i==n: \n            return i\n        else:\n            return fn(i) * product_of_sequence(i+1,i+1)\n    return product_of_sequence(1,1)\n\n","after":null,"SubmissionTime":"2016-02-13T15:20:07.61352","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":420,"date":"2016-02-13 15:21:05.742356","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def product_of_sequence(i):\n        if i==n: \n            return i\n        else:\n            return term(i) * product_of_sequence(i+1)\n    return product_of_sequence(1)\n\n","after":null,"SubmissionTime":"2016-02-13T15:21:05.742356","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":296,"date":"2016-02-13 15:22:47.177970","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    while n > 0:\n        total *= lambda n: term(n)\n        n -= 1\n        return total\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:22:47.17797","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":296,"date":"2016-02-13 15:24:56.221326","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    while n > 0:\n        total = total * (lambda n: term(n))\n        n -= 1\n        return total\n\n","after":null,"SubmissionTime":"2016-02-13T15:24:56.221326","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":984,"date":"2016-02-13 15:25:21.578318","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    lst = range(1, n)\n    f = list(map(term, lst))\n    for x in f:\n        product *= x\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:25:21.578318","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":296,"date":"2016-02-13 15:25:50.043126","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    lambda n: term(n)\n    while n > 0:\n        total = total * (lambda n: term(n))\n        n -= 1\n        return total\n\n","after":null,"SubmissionTime":"2016-02-13T15:25:50.043126","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":296,"date":"2016-02-13 15:26:25.832949","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    f = lambda n: term(n)\n    while n > 0:\n        total = total * f\n        n -= 1\n        return total\n\n","after":null,"SubmissionTime":"2016-02-13T15:26:25.832949","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":296,"date":"2016-02-13 15:26:34.153743","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    f = lambda n: term(n)\n    while n > 0:\n        total = total * f(n)\n        n -= 1\n        return total\n\n","after":null,"SubmissionTime":"2016-02-13T15:26:34.153743","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":984,"date":"2016-02-13 15:27:26.349516","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    lst = range(1, n)\n    f = list(map(term, lst))\n    return mul(f, 1)\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:27:26.349516","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":984,"date":"2016-02-13 15:27:55.576690","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    lst = range(1, n+1)\n    f = list(map(term, lst))\n    return mul(f, 1)\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:27:55.57669","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":296,"date":"2016-02-13 15:29:31.466403","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    f = lambda n: term(n)\n    while n > 0:\n        total = total * f(n)\n        product(n-1, term)\n        return total\n\n","after":null,"SubmissionTime":"2016-02-13T15:29:31.466403","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":296,"date":"2016-02-13 15:30:04.037822","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    while n > 0:\n        total = total * term(n)\n        product(n-1, term)\n        return total\n\n","after":null,"SubmissionTime":"2016-02-13T15:30:04.037822","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":984,"date":"2016-02-13 15:34:35.771841","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    x = 0\n    if x > n:\n        return\n    else:\n        x += 1\n        return term(x) * product(x+1, term)\n\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:34:35.771841","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-13 15:37:50.649037","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i, sum):\n        i +=1\n        if i == n:\n            return sum\n        if i < n:\n            return i + (i+1)  \n    return counter(1, sum)        \n\n\n","after":null,"SubmissionTime":"2016-02-13T15:37:50.649037","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-13 15:38:01.471794","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i, sum):\n        i +=1\n        if i == n:\n            return sum\n        if i < n:\n            return i * (i+1)  \n    return counter(1, sum)        \n\n\n","after":null,"SubmissionTime":"2016-02-13T15:38:01.471794","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-13 15:38:24.815862","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i, sum):\n        i +=1\n        if i == n:\n            return sum\n        if i < n:\n            return counter(i, sum)  \n    return counter(1, sum)        \n\n\n","after":null,"SubmissionTime":"2016-02-13T15:38:24.815862","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-13 15:38:44.759039","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i, sum):\n        i +=1\n        if i == n:\n            return sum\n        if i < n:\n            return counter()  \n    return counter(1, sum)        \n\n\n","after":null,"SubmissionTime":"2016-02-13T15:38:44.759039","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-13 15:39:22.352076","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i, total):\n        i +=1\n        if i == n:\n            return total\n        if i < n:\n            return counter(i, total)  \n    return counter(1, total)        \n\n\n","after":null,"SubmissionTime":"2016-02-13T15:39:22.352076","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":984,"date":"2016-02-13 15:42:50.091100","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n  \n    if n == 0:\n        return term(n)\n    else:\n        return term(n) * product(n-1, term)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:42:50.0911","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":984,"date":"2016-02-13 15:43:01.281614","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n  \n    if n == 0:\n        return\n    else:\n        return term(n) * product(n-1, term)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:43:01.281614","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":984,"date":"2016-02-13 15:43:54.626333","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n  \n    if n == 0:\n        return product\n    else:\n        product = term(n) * product(n-1, term)\n        return product\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:43:54.626333","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":984,"date":"2016-02-13 15:44:18.642968","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n  \n    if n == 0:\n        return prod\n    else:\n        prod = term(n) * product(n-1, term)\n        return prod\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T15:44:18.642968","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":296,"date":"2016-02-13 15:45:48.951646","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    f = lambda n: term(n)\n    while n > 0:\n        total = total * f(n)\n        n -= 1\n        return total \n\n\n","after":null,"SubmissionTime":"2016-02-13T15:45:48.951646","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":155,"date":"2016-02-13 15:47:59.862372","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-13T15:47:59.862372","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==0:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-13 15:48:30.548444","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i, total):\n        i +=1\n        total = i +i\n        if i == n:\n            return total\n        if i < n:\n            return counter(i, total)  \n    return counter(1, total)        \n\n\n","after":null,"SubmissionTime":"2016-02-13T15:48:30.548444","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-13 15:49:33.129785","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i, total):\n        i +=1\n        total = i +i\n        if i == n:\n            return total\n        if i < n:\n            return counter(i, total)  \n    return counter(1, term)        \n\n\n","after":null,"SubmissionTime":"2016-02-13T15:49:33.129785","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-13 15:50:35.191623","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i, total):\n        i +=1\n        total = i +i\n        if i == n:\n            return total\n        if i < n:\n            return counter(i, total)  \n    return counter(1, i+1)        \n\n\n","after":null,"SubmissionTime":"2016-02-13T15:50:35.191623","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-13 15:52:38.069643","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i, total):\n        i +=1\n        total = i * i\n        if i == n:\n            return total\n        else:\n            return counter(i, total)  \n    return counter(1,1)        \n\n\n","after":null,"SubmissionTime":"2016-02-13T15:52:38.069643","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-13 15:56:44.688717","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i, total):\n        i +=1\n        total = i * i-1\n        if i == n:\n            return total\n        else:\n            return counter(i, total)  \n    return counter(1,1)        \n\n\n","after":null,"SubmissionTime":"2016-02-13T15:56:44.688717","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":345,"date":"2016-02-13 16:04:20.525495","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def counter(i):\n        \n        if i == n:\n            return term(i)\n        else:\n            return term(i)+ counter(i+1)\n    return counter(1)        \n\n\n","after":null,"SubmissionTime":"2016-02-13T16:04:20.525495","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:17:09.286968","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    if x == n:\n        return n\n    else:\n        return x * increment(x)\n\n","after":null,"SubmissionTime":"2016-02-13T16:17:09.286968","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:23:27.916066","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    if x == n:\n        return n\n    else:\n        return product(x * increment(x))\n\n","after":null,"SubmissionTime":"2016-02-13T16:23:27.916066","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:24:11.974389","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    if x == n:\n        return n\n    else:\n        return product(n, x * increment(x))\n\n","after":null,"SubmissionTime":"2016-02-13T16:24:11.974389","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:24:45.839307","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    if x == n:\n        return n\n    else:\n        return product(n, x * increment(x))\n    return product(n, increment)\n\n","after":null,"SubmissionTime":"2016-02-13T16:24:45.839307","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:25:15.036552","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    if x == n:\n        return n\n    else:\n        return x * increment(x)\n    return product(n, increment)\n\n","after":null,"SubmissionTime":"2016-02-13T16:25:15.036552","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:25:40.894064","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    if x == n:\n        return n\n    else:\n        return x * increment(x)\n    return product(6, increment)\n\n","after":null,"SubmissionTime":"2016-02-13T16:25:40.894064","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:26:53.905893","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    def helper(y):\n        if x == n:\n            return n\n        else:\n            return helper(x * increment(x))\n    return helper(y)\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:26:53.905893","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:31:57.080823","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    def helper(x):\n        if x == n:\n            return n\n        else:\n            return helper(x * increment(x))\n    return helper(n)\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:31:57.080823","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:32:34.728331","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    def helper(x):\n        if x == n:\n            return n\n        else:\n            return x * helper(increment(x))\n    return helper(n)\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:32:34.728331","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:32:47.611021","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    def helper(x):\n        if x == n:\n            return n\n        else:\n            return x * helper(increment(x))\n    return helper(x)\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:32:47.611021","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:33:47.337167","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 0\n    def helper(x):\n        if x == n:\n            return n\n        else:\n            return x * helper(increment(x))\n    return helper(x)\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:33:47.337167","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:34:01.303180","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 0\n    def helper(n):\n        if x == n:\n            return n\n        else:\n            return x * helper(increment(x))\n    return helper(n)\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:34:01.30318","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:34:22.647857","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 0\n    def helper(n):\n        if x == n:\n            return n\n        else:\n            return x * increment(x)\n    return helper(n)\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:34:22.647857","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:34:40.795412","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    def helper(n):\n        if x == n:\n            return n\n        else:\n            return x * increment(x)\n    return helper(n)\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:34:40.795412","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:35:05.959694","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    def helper(n):\n        if x == n:\n            return x\n        else:\n            return x * increment(x)\n    return helper(n)\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:35:05.959694","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:36:48.338650","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    def helper(n):\n        if x == n:\n            return x\n        else:\n            return x + increment(x)\n    return helper(n)\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:36:48.33865","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:36:48.338650","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    def helper(n):\n        if x == n:\n            return x\n        else:\n            return x + increment(x)\n    return helper(n)\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:36:48.33865","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:38:15.775676","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    def helper(n):\n        if x == n:\n            return x\n        else:\n            return helper(x + increment(x))\n    return helper(n)\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:38:15.775676","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:38:15.775676","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    def helper(n):\n        if x == n:\n            return x\n        else:\n            return helper(x + increment(x))\n    return helper(n)\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:38:15.775676","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:38:15.775676","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    def helper(n):\n        if x == n:\n            return x\n        else:\n            return helper(x + increment(x))\n    return helper(n)\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:38:15.775676","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:38:15.775676","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    def helper(n):\n        if x == n:\n            return x\n        else:\n            return helper(x + increment(x))\n    return helper(n)\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:38:15.775676","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:38:15.775676","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    def helper(n):\n        if x == n:\n            return x\n        else:\n            return helper(x + increment(x))\n    return helper(n)\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:38:15.775676","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:39:30.589340","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    def helper(n):\n        if x == n:\n            return x\n        else:\n            return x * increment(x) \n    return helper(n)\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:39:30.58934","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:40:12.332453","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    def helper(n):\n        if x == n:\n            return x\n        else:\n            return x * helper(increment(x))\n    return helper(n)\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:40:12.332453","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:40:26.237313","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    def helper(n):\n        if x == n:\n            return x\n        else:\n            return x * helper(increment(x))\n    return helper(increment(x))\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:40:26.237313","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:42:26.732889","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    def helper(n):\n        if x == n:\n            return x\n        else:\n            y = increment(x)\n            return x * helper(y)\n    return helper(n)\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:42:26.732889","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:42:35.589819","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    def helper(n):\n        if x == n:\n            return x\n        else:\n            y = increment(x)\n            return x * helper(y)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:42:35.589819","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:43:10.287395","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    def helper(n):\n        if x == n:\n            return x\n        else:\n            y = increment(x)\n            return x * helper(y)\n        return helper(n)\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:43:10.287395","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:43:19.653000","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    def helper(n):\n        if x == n:\n            return x\n        else:\n            y = increment(x)\n            return x * helper(y)\n    return helper(n)\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:43:19.653","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:46:15.691522","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    def helper(n):\n        if x == n:\n            return n\n        else:\n            y = increment(x)\n            return x * helper(y)\n        return helper(n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:46:15.691522","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:46:25.613743","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    def helper(n):\n        if x == n:\n            return n\n        else:\n            y = increment(x)\n            return x * helper(y)\n    return helper(n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:46:25.613743","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:47:38.029989","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    if x == n:\n        return n\n    else:\n        return x * increment(x)\n    return product(n, increment)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:47:38.029989","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":702,"date":"2016-02-13 16:49:30.607124","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def product_term(x, num):\n        if num == 1:\n            return x\n        else:\n            return product_term(x*term(num), num-1)\n    #return product_term(1, n)\n    return product(n-1, term) * term (n)\n\n","after":null,"SubmissionTime":"2016-02-13T16:49:30.607124","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:50:12.744840","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    def helper(n):\n        if x == n:\n            return n\n        else:\n            return x * increment(x)\n    return product(n, helper)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:50:12.74484","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:50:12.744840","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    def helper(n):\n        if x == n:\n            return n\n        else:\n            return x * increment(x)\n    return product(n, helper)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:50:12.74484","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:50:21.750314","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    def helper(n):\n        if x == n:\n            return n\n        else:\n            return x * increment(x)\n    return product(n, helper(n))\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:50:21.750314","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:50:50.772136","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    def helper(n):\n        if x == n:\n            return x\n        else:\n            return x * increment(x)\n    return product(n, helper(n))\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:50:50.772136","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:51:49.378019","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    def helper(n):\n        if x == n:\n            return x\n        else:\n            return x * helper(x + 1)\n    return helper(n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:51:49.378019","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:52:01.329036","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    def helper(n):\n        if x == n:\n            return x\n        else:\n            return x * helper(x + 1)\n    return helper(x)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:52:01.329036","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":933,"date":"2016-02-13 16:52:33.011313","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def mul(n, term):\n        if term == n:\n            return\n        else:\n            return term * mul(n, term + 1)\n    if n == 1:\n        return 1\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:52:33.011313","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:52:35.229486","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    def helper(n):\n        if x == n:\n            return x\n        else:\n            return x * helper(x + 1)\n    return helper(x + 1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:52:35.229486","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:52:53.561879","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    def helper(n):\n        if x == n:\n            return x\n        else:\n            return x * helper(x + 1)\n    return product(n, helper)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:52:53.561879","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:56:33.808370","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    if x == n:\n        return x\n    else:\n        return x * product(n, increment)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:56:33.80837","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:56:43.794274","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    if x == n:\n        return x\n    else:\n        return x * product(n, increment(x))\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:56:43.794274","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:58:54.384295","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    if x == n:\n        return x\n    else:\n        return x * product(x, increment(x))\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:58:54.384295","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:59:03.131220","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    if x == n:\n        return x\n    else:\n        return x * product(x, increment(x + 1))\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:59:03.13122","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:59:03.131220","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    if x == n:\n        return x\n    else:\n        return x * product(x, increment(x + 1))\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:59:03.13122","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:59:22.234871","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    if x == n:\n        return x\n    else:\n        return x * product(x, increment)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:59:22.234871","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 16:59:22.234871","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    if x == n:\n        return x\n    else:\n        return x * product(x, increment)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T16:59:22.234871","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 17:03:47.674136","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    def helper(n):\n        if x == n:\n            return x\n        else:\n            return x * helper(increment(x))\n    return helper(n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T17:03:47.674136","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 17:04:00.469113","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    def helper(x):\n        if x == n:\n            return x\n        else:\n            return x * helper(increment(x))\n    return helper(x)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T17:04:00.469113","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 17:04:21.212381","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    def helper(n):\n        if x == n:\n            return x\n        else:\n            return x * helper(increment(x))\n    return helper(n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T17:04:21.212381","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 17:04:27.218306","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    def helper(n):\n        if x == n:\n            return x\n        else:\n            return x * helper(increment)\n    return helper(n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T17:04:27.218306","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 17:04:35.999380","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    def helper(n):\n        if x == n:\n            return x\n        else:\n            return x * helper(increment(x))\n    return helper(n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T17:04:35.99938","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 17:05:58.226610","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    def helper(n, term):\n        if x == n:\n            return x\n        else:\n            return x * helper(x, increment(x))\n    return helper(x, increment)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T17:05:58.22661","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":926,"date":"2016-02-13 17:07:47.575972","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    y = 1\n    def helper_a(x, term_a):\n        if x == n:\n            return term_a(x)\n        else:\n            return term_a(x) + helper_a(x+1, term)\n    return helper_a(y, term)\n\n","after":null,"SubmissionTime":"2016-02-13T17:07:47.575972","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 17:11:12.419973","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    while x != n:\n        if x == 0:\n            x += 1\n        else:\n            x * (x + 1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T17:11:12.419973","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":265,"date":"2016-02-13 17:15:19.402786","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    x = 1\n    while x<=biggest:\n        return term(n*(n+1))\n        x+=1\n\n\n","after":null,"SubmissionTime":"2016-02-13T17:15:19.402786","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":265,"date":"2016-02-13 17:15:45.169804","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    x = 1\n    while x<=n:\n        return term(n*(n+1))\n        x+=1\n\n\n","after":null,"SubmissionTime":"2016-02-13T17:15:45.169804","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":265,"date":"2016-02-13 17:16:24.772580","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \n    x = 1\n    while x<=n:\n        return term(n*(n+1)*(n+2))\n        x+=1\n\n\n","after":null,"SubmissionTime":"2016-02-13T17:16:24.77258","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":964,"date":"2016-02-13 17:16:45.678615","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=1\n    if x==n:\n        return term(x)\n    else:\n        return x * term(x+1)\n\n","after":null,"SubmissionTime":"2016-02-13T17:16:45.678615","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":964,"date":"2016-02-13 17:19:02.515240","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=1\n    if x==n:\n        return term(x)\n    else:\n        return x * product(x+1)\n\n","after":null,"SubmissionTime":"2016-02-13T17:19:02.51524","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":964,"date":"2016-02-13 17:19:26.590856","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=1\n    if x==n:\n        return term(x)\n    else:\n        return x * product(x+1, term)\n\n","after":null,"SubmissionTime":"2016-02-13T17:19:26.590856","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 17:20:20.494830","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    while n > 0:\n        n -= 1\n        return x * n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T17:20:20.49483","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":64,"date":"2016-02-13 17:20:58.262442","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-13T17:20:58.262442","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 17:22:03.549983","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    while n > 0:\n        n -= 1\n        return x * (x + 1)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T17:22:03.549983","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 17:22:03.549983","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    while n > 0:\n        n -= 1\n        return x * (x + 1)\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T17:22:03.549983","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":64,"date":"2016-02-13 17:22:44.427508","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    counter = 1\n    total = 0\n    while counter < n:\n        total, counter = total + term(counter), counter + 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-13T17:22:44.427508","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":964,"date":"2016-02-13 17:22:48.103683","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=1\n    if x==n:\n        return term(x)\n    else:\n        return term(x) * product(x+1,term)\n\n","after":null,"SubmissionTime":"2016-02-13T17:22:48.103683","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":64,"date":"2016-02-13 17:22:58.822538","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    counter = 1\n    total = 0\n    while counter <= n:\n        total, counter = total + term(counter), counter + 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-13T17:22:58.822538","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 17:23:03.422506","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    while n > 0:\n        n -= 1\n        x += 1\n        return x * n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T17:23:03.422506","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 17:23:41.297965","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \"\"\"total = 1\n    k = 1\n    while k <= n:\n        total *= term(k)\n        k += 1\n    return total\"\"\"\n\n    if k == n:\n        return term(k)\n    else:\n        return term(k) + product(k-1, term)\n\n","after":null,"SubmissionTime":"2016-02-13T17:23:41.297965","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":666,"date":"2016-02-13 17:23:58.480771","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    \"\"\"total = 1\n    k = 1\n    while k <= n:\n        total *= term(k)\n        k += 1\n    return total\"\"\"\n    k = 0\n    if k == n:\n        return term(k)\n    else:\n        return term(k) + product(k-1, term)\n\n","after":null,"SubmissionTime":"2016-02-13T17:23:58.480771","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":206,"date":"2016-02-13 17:31:00.611369","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return n*product(n-1,term(n))\n\n","after":null,"SubmissionTime":"2016-02-13T17:31:00.611369","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":904,"date":"2016-02-13 17:31:22.415162","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return n\n    else:\n        return term(n-1) * term(n)\n\n\n","after":null,"SubmissionTime":"2016-02-13T17:31:22.415162","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":206,"date":"2016-02-13 17:31:50.262692","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return n*product(n-1,term(n-1))\n\n","after":null,"SubmissionTime":"2016-02-13T17:31:50.262692","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":206,"date":"2016-02-13 17:32:28.337671","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return n * product(n-1,term(n))\n\n","after":null,"SubmissionTime":"2016-02-13T17:32:28.337671","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 17:32:47.222052","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    while n > 0:\n        x = x * n\n        n -= 1\n    return x\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T17:32:47.222052","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":206,"date":"2016-02-13 17:33:38.129559","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 0:\n        return n * product(n-1,term(n))\n    else:\n        return 1\n\n","after":null,"SubmissionTime":"2016-02-13T17:33:38.129559","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":495,"date":"2016-02-13 17:33:56.304509","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    product = term(i)\n    for i in range(1, n):\n\t    product = product * term(n - i)\n    return product\n\n","after":null,"SubmissionTime":"2016-02-13T17:33:56.304509","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":904,"date":"2016-02-13 17:34:22.468435","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return n\n    else:\n        k = term(n-1)\n    return k * term(n)\n\n\n","after":null,"SubmissionTime":"2016-02-13T17:34:22.468435","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":206,"date":"2016-02-13 17:34:41.251792","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 1:\n        return n * product(n-1,term(n))\n    else:\n        return 1\n\n","after":null,"SubmissionTime":"2016-02-13T17:34:41.251792","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":495,"date":"2016-02-13 17:34:50.188326","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    product = term(1)\n    for i in range(1, n):\n\t    product = product * term(n - i)\n    return product\n\n","after":null,"SubmissionTime":"2016-02-13T17:34:50.188326","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":206,"date":"2016-02-13 17:35:01.643628","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 1:\n        return n * product(n-1,term)\n    else:\n        return 1\n\n","after":null,"SubmissionTime":"2016-02-13T17:35:01.643628","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n>1:\r\n        return term(n)*product(n-1, term)\r\n    else:\r\n        return 1","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":495,"date":"2016-02-13 17:35:45.462406","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    product = term(1)\n    for i in range(2, n):\n\t    product = product * term(n - i)\n    return product\n\n","after":null,"SubmissionTime":"2016-02-13T17:35:45.462406","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":495,"date":"2016-02-13 17:36:09.340954","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    product = term(1)\n    for i in range(1, n + 1):\n\t    product = product * term(n - i)\n    return product\n\n","after":null,"SubmissionTime":"2016-02-13T17:36:09.340954","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":904,"date":"2016-02-13 17:36:44.757785","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return n\n    else:\n        k = term(n-1)\n    return product(k, term)\n\n\n","after":null,"SubmissionTime":"2016-02-13T17:36:44.757785","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":495,"date":"2016-02-13 17:37:09.987613","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    product = term(1)\n    for i in range(1, n):\n\t    product = product * term(i)\n    return product\n\n","after":null,"SubmissionTime":"2016-02-13T17:37:09.987613","SynthesizedAfter":"\r\ndef product(n, term):\r\n    product = term(1)\r\n    for i in range(1, n):\r\n        product = product*term(i+1)\r\n    return product","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":519,"date":"2016-02-13 17:40:56.827035","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def helper(n, term, x):\n        if n == 0:\n            return x\n        else:\n            return x * term(n)\n    return (n - 1, term, x)\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-13T17:40:56.827035","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":889,"date":"2016-02-13 17:41:28.839073","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-13T17:41:28.839073","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":904,"date":"2016-02-13 17:41:47.955831","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return n\n    else:\n        return product(n-1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-13T17:41:47.955831","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return n\r\n    else:\r\n        return product(n-1, term)*term(n)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":889,"date":"2016-02-13 17:51:27.196675","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k = 1\n\n    if term == identity :\n        while k <= n :\n            k += 1\n        return term(k)\n    if term == square :\n        while k <= n :\n            k += 1\n        return term(k)   \n\n\n","after":null,"SubmissionTime":"2016-02-13T17:51:27.196675","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":889,"date":"2016-02-13 17:54:46.521981","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k = 1\n    sum1 = 1\n\n    if term == identity :\n        while k <= n :\n            k += 1\n        return sum1 * term(k)\n    if term == square :\n        while k <= n :\n            k += 1\n        return sum1 * term(k)\n\n\n","after":null,"SubmissionTime":"2016-02-13T17:54:46.521981","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":861,"date":"2016-02-13 17:58:13.031298","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def function(x):\n        if x<=n:\n            term(x)*term(x+1)\n    return function(1)\n\n","after":null,"SubmissionTime":"2016-02-13T17:58:13.031298","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":861,"date":"2016-02-13 17:58:13.031298","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def function(x):\n        if x<=n:\n            term(x)*term(x+1)\n    return function(1)\n\n","after":null,"SubmissionTime":"2016-02-13T17:58:13.031298","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":861,"date":"2016-02-13 17:59:39.517805","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def function(x):\n        if x<=n:\n            return term(x)*term(x+1)\n    return function(1)\n\n","after":null,"SubmissionTime":"2016-02-13T17:59:39.517805","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":861,"date":"2016-02-13 17:59:39.517805","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def function(x):\n        if x<=n:\n            return term(x)*term(x+1)\n    return function(1)\n\n","after":null,"SubmissionTime":"2016-02-13T17:59:39.517805","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":861,"date":"2016-02-13 18:00:45.207975","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def function(x):\n        if x<=n:\n            term(x)\n        return term(x)*function(x+1)\n    return function(1)\n\n","after":null,"SubmissionTime":"2016-02-13T18:00:45.207975","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":861,"date":"2016-02-13 18:01:18.290584","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def function(x):\n        if x>n:\n            return\n        return term(x)*function(x+1)\n    return function(1)\n\n","after":null,"SubmissionTime":"2016-02-13T18:01:18.290584","SynthesizedAfter":"\r\ndef product(n, term):\r\n    def function(x):\r\n        if x>n:\r\n            return 1\r\n        return term(x)*function(x+1)\r\n    return function(1)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, LeafConstNode(ConstantExpressionNode-1), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":233,"date":"2016-02-13 18:18:51.145576","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(1)\n    else:\n        return term(n) * term(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-13T18:18:51.145576","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return term(1)\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":233,"date":"2016-02-13 18:22:10.541973","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(1)\n    else:\n        return product(n, term) * product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-13T18:22:10.541973","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":57,"date":"2016-02-13 18:29:25.719975","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total * term(k), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-13T18:29:25.719975","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":810,"date":"2016-02-13 18:47:22.832363","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    re = 1\n    for i in range(1, n + 1, 1):\n        ret *= term(i)\n    return ret\n\n","after":null,"SubmissionTime":"2016-02-13T18:47:22.832363","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":588,"date":"2016-02-13 18:52:24.780879","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i = 1\n    prod = 1;\n    while i < n:\n    \tprod *= term(i)\n    return prod\n\n","after":null,"SubmissionTime":"2016-02-13T18:52:24.780879","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":588,"date":"2016-02-13 18:53:05.865208","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i = 1\n    prod = 1;\n    while i < n:\n    \tprod *= term(i)\n    \ti += 1\n    return prod\n\n","after":null,"SubmissionTime":"2016-02-13T18:53:05.865208","SynthesizedAfter":"\r\ndef product(n, term):\r\n    i = 1\r\n    prod = 1\r\n    while i<n:\r\n        prod *= term(i+1)\r\n        i += 1\r\n    return prod","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":588,"date":"2016-02-13 18:54:22.584197","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i = 1\n    while i <= n:\n    \tprod *= term(i)\n    \ti += 1\n    return prod\n\n","after":null,"SubmissionTime":"2016-02-13T18:54:22.584197","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":549,"date":"2016-02-13 18:54:56.247236","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==1:\n        return term(1)\n    return term(n)*(product(n-1), term)\n    \n","after":null,"SubmissionTime":"2016-02-13T18:54:56.247236","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":560,"date":"2016-02-13 18:56:36.308378","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    result = 1\n\n    while x<=n:\n        result *= term(x)\n        x += 1\n\n    return result\n\n","after":null,"SubmissionTime":"2016-02-13T18:56:36.308378","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":933,"date":"2016-02-13 19:08:54.565739","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if term == square(n):\n        return n**2\n    if term == identity(n):\n        return n\n    def mul(n, term):\n        if term == n:\n            return mul(n, term)\n        else:\n            return term * mul(n, term + 1)\n    if n == 1:\n        return 1\n\n\n","after":null,"SubmissionTime":"2016-02-13T19:08:54.565739","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":933,"date":"2016-02-13 19:12:32.182092","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def square(n):\n        return n**2\n    def identity(n):\n        return n\n    def mul(n, term):\n        if term == n:\n            return mul(n, term)\n        else:\n            return term * mul(n, term + 1)\n    if n == 1:\n        return 1\n\n\n","after":null,"SubmissionTime":"2016-02-13T19:12:32.182092","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":135,"date":"2016-02-13 19:20:56.185246","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    lst = range(1, n+1)\n    return lst[:]\n\n\n","after":null,"SubmissionTime":"2016-02-13T19:20:56.185246","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":135,"date":"2016-02-13 19:22:57.108581","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    lst = range(1, n+1)\n    return {lst[:]}\n\n\n","after":null,"SubmissionTime":"2016-02-13T19:22:57.108581","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":135,"date":"2016-02-13 19:23:15.637637","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    lst = range(1, n+1)\n    return product(lst[:])\n\n\n","after":null,"SubmissionTime":"2016-02-13T19:23:15.637637","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":135,"date":"2016-02-13 19:23:36.030743","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    lst = range(1, n+1)\n    return square(lst[:])\n\n\n","after":null,"SubmissionTime":"2016-02-13T19:23:36.030743","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":135,"date":"2016-02-13 19:25:06.601973","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    lst = range(1, n+1)\n    \n    return map(fn, lst)\n\n\n","after":null,"SubmissionTime":"2016-02-13T19:25:06.601973","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":135,"date":"2016-02-13 19:25:25.112186","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    lst = range(1, n+1)\n    \n    return map(square, lst)\n\n\n","after":null,"SubmissionTime":"2016-02-13T19:25:25.112186","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":135,"date":"2016-02-13 19:25:36.258293","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    lst = range(1, n+1)\n    \n    return map(square(lst), lst)\n\n\n","after":null,"SubmissionTime":"2016-02-13T19:25:36.258293","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":135,"date":"2016-02-13 19:25:45.421357","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    lst = range(1, n+1)\n    \n    return map(square(1), lst)\n\n\n","after":null,"SubmissionTime":"2016-02-13T19:25:45.421357","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":135,"date":"2016-02-13 19:27:48.866131","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    lst = range(1, n+1)\n    \n    return lst[1::]\n\n    \"\"\"map(square(1), lst)\n    \"\"\"\n\n\n","after":null,"SubmissionTime":"2016-02-13T19:27:48.866131","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":135,"date":"2016-02-13 19:28:16.411326","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    lst = range(1, n+1)\n    \n    return lst[0::]\n\n    \"\"\"map(square(1), lst)\n    \"\"\"\n\n\n","after":null,"SubmissionTime":"2016-02-13T19:28:16.411326","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":135,"date":"2016-02-13 19:28:49.676446","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    lst = range(1, n+1)\n    \n    return lst[0::1]\n\n    \"\"\"map(square(1), lst)\n    \"\"\"\n\n\n","after":null,"SubmissionTime":"2016-02-13T19:28:49.676446","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":141,"date":"2016-02-13 19:29:31.376414","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n\n","after":null,"SubmissionTime":"2016-02-13T19:29:31.376414","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":135,"date":"2016-02-13 19:29:57.730497","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    lst = list(range(1, n+1))\n    \n    return lst[0::1]\n\n    \"\"\"map(square(1), lst)\n    \"\"\"\n\n\n","after":null,"SubmissionTime":"2016-02-13T19:29:57.730497","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":135,"date":"2016-02-13 19:30:15.727641","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    lst = list(range(1, n+1))\n    \n    return square(lst[0::1])\n\n    \"\"\"map(square(1), lst)\n    \"\"\"\n\n\n","after":null,"SubmissionTime":"2016-02-13T19:30:15.727641","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":135,"date":"2016-02-13 19:30:43.985744","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    lst = list(range(1, n+1))\n    \n    return map(square, lst)\n\n    \"\"\"map(square(1), lst)\n    \"\"\"\n\n\n","after":null,"SubmissionTime":"2016-02-13T19:30:43.985744","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":135,"date":"2016-02-13 19:33:54.735960","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    lst = list(range(1, n+1))\n    def cat(f):\n        return map(term, lst)\n    return cat\n\n    \"\"\"map(square(1), lst)\n    \"\"\"\n\n\n","after":null,"SubmissionTime":"2016-02-13T19:33:54.73596","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":135,"date":"2016-02-13 19:34:21.142152","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    lst = list(range(1, n+1))\n    def cat(f):\n        return map(f, lst)\n    return cat(term)\n\n    \"\"\"map(square(1), lst)\n    \"\"\"\n\n\n","after":null,"SubmissionTime":"2016-02-13T19:34:21.142152","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":135,"date":"2016-02-13 19:36:13.249980","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    lst = list(range(1, n+1))\n    def cat(f):\n        return sum(map(f, lst))\n    return cat(term)\n\n    \"\"\"map(square(1), lst)\n    \"\"\"\n\n\n","after":null,"SubmissionTime":"2016-02-13T19:36:13.24998","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":271,"date":"2016-02-13 19:40:20.114510","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    count = 1\n    x = 0\n    while count <= n:\n        x = x * term(count)\n        count += 1\n    return x\n\n\n","after":null,"SubmissionTime":"2016-02-13T19:40:20.11451","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":917,"date":"2016-02-13 19:52:56.138553","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    lst = range(1, n+1)\n    lst[0:n]\n    def mul(a):\n        return reduce(lambda x, y: x*y, lst)\n    def step(f):\n            return mul(map(f, lst))\n    return step(term)\n\n","after":null,"SubmissionTime":"2016-02-13T19:52:56.138553","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":917,"date":"2016-02-13 19:54:59.524141","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    import functools\n    lst = range(1, n+1)\n    lst[0:n]\n    def mul(a):\n        return functool.reduce(lambda x, y: x*y, lst)\n    def step(f):\n            return mul(map(f, lst))\n    return step(term)\n\n","after":null,"SubmissionTime":"2016-02-13T19:54:59.524141","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":917,"date":"2016-02-13 19:55:43.520978","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    import functools\n    lst = range(1, n+1)\n    lst[0:n]\n    def mul(a):\n        return functools.reduce(lambda x, y: x*y, lst)\n    def step(f):\n            return mul(map(f, lst))\n    return step(term)\n\n","after":null,"SubmissionTime":"2016-02-13T19:55:43.520978","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":135,"date":"2016-02-13 19:59:22.930778","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    lst = list(range(1, n+1))\n\n\n\n    def step(f):\n        a = map(f, lst)\n    return a\n\n\n    def mul(b):\n        return functools.reduce(lambda x, y: x*y, lst, 0)\n\n    \n    \"\"\"map(square(1), lst)\n    \"\"\"\n\n\n","after":null,"SubmissionTime":"2016-02-13T19:59:22.930778","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":135,"date":"2016-02-13 19:59:35.282462","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    lst = list(range(1, n+1))\n\n\n\n    def step(f):\n        a = map(f, lst)\n    return a\n\n    \"\"\"\n    def mul(b):\n        return functools.reduce(lambda x, y: x*y, lst, 0)\n    \"\"\"\n    \n    \"\"\"map(square(1), lst)\n    \"\"\"\n\n\n","after":null,"SubmissionTime":"2016-02-13T19:59:35.282462","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":135,"date":"2016-02-13 19:59:49.118700","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    lst = list(range(1, n+1))\n\n\n\n    def step(a):\n        a = map(f, lst)\n    return a\n\n    \"\"\"\n    def mul(b):\n        return functools.reduce(lambda x, y: x*y, lst, 0)\n    \"\"\"\n    \n    \"\"\"map(square(1), lst)\n    \"\"\"\n\n\n","after":null,"SubmissionTime":"2016-02-13T19:59:49.1187","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":917,"date":"2016-02-13 20:00:01.003799","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    import functools\n    lst = range(1, n+1)\n    def apply(f):\n        return (map(f, lst))\n    def mul(a):\n        return functools.reduce(lambda x, y: x*y, apply(term))\n    return mul(please)\n\n","after":null,"SubmissionTime":"2016-02-13T20:00:01.003799","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":917,"date":"2016-02-13 20:00:15.239777","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    import functools\n    lst = range(1, n+1)\n    def apply(f):\n        return (map(f, lst))\n    def mul(a):\n        return functools.reduce(lambda x, y: x*y, apply(term))\n    return mul(a)\n\n","after":null,"SubmissionTime":"2016-02-13T20:00:15.239777","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":917,"date":"2016-02-13 20:00:47.932196","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    import functools\n    lst = range(1, n+1)\n    j == 1\n    def apply(f):\n        return (map(f, lst))\n    def mul(a):\n        return functools.reduce(lambda x, y: x*y, apply(term))\n    return mul(j)\n\n","after":null,"SubmissionTime":"2016-02-13T20:00:47.932196","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":135,"date":"2016-02-13 20:01:06.119246","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    lst = list(range(1, n+1))\n\n    return map(term, lst)\n\n    \"\"\"\n    def step(f):\n        return map(f, lst)\n    return a\n    \n    def mul(b):\n        return functools.reduce(lambda x, y: x*y, lst, 0)\n    \"\"\"\n    \n    \"\"\"map(square(1), lst)\n    \"\"\"\n\n\n","after":null,"SubmissionTime":"2016-02-13T20:01:06.119246","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":135,"date":"2016-02-13 20:05:00.723425","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    lst = list(range(1, n+1))\n\n    def apply(t):\n        return map(t, lst)\n    return apply(term)\n\n    def mul(b):\n        return functools.reduce(lambda x, y: x*y, apply(term), 0)\n    return mul(1)\n\n    \"\"\"\n    def step(f):\n        return map(f, lst)\n    return \n\n    \"\"\"\n    \n    \"\"\"map(square(1), lst)\n    \"\"\"\n\n\n","after":null,"SubmissionTime":"2016-02-13T20:05:00.723425","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":135,"date":"2016-02-13 20:05:09.152102","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    lst = list(range(1, n+1))\n\n    def apply(t):\n        return map(t, lst)\n\n    def mul(b):\n        return functools.reduce(lambda x, y: x*y, apply(term), 0)\n    return mul(1)\n\n    \"\"\"\n    def step(f):\n        return map(f, lst)\n    return \n\n    \"\"\"\n    \n    \"\"\"map(square(1), lst)\n    \"\"\"\n\n\n","after":null,"SubmissionTime":"2016-02-13T20:05:09.152102","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":135,"date":"2016-02-13 20:05:33.703079","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    import functools\n    lst = list(range(1, n+1))\n\n    def apply(t):\n        return map(t, lst)\n\n    def mul(b):\n        return functools.reduce(lambda x, y: x*y, apply(term), 0)\n    return mul(1)\n\n    \"\"\"\n    def step(f):\n        return map(f, lst)\n    return \n\n    \"\"\"\n    \n    \"\"\"map(square(1), lst)\n    \"\"\"\n\n\n","after":null,"SubmissionTime":"2016-02-13T20:05:33.703079","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":933,"date":"2016-02-13 20:11:50.677451","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def id_or_sq(n, term):\n        if term == n:\n            return 1\n        else:\n            return term * mul(n, term + 1)\n    if n == 1:\n        return 1\n\n\n","after":null,"SubmissionTime":"2016-02-13T20:11:50.677451","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":292,"date":"2016-02-13 20:25:41.519815","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def new_list(a):\n        if a==n:\n            return [a]\n        else:\n            [a] + new_list(a+1)\n    return sum (map(term, new_list(1)))\n\n\n","after":null,"SubmissionTime":"2016-02-13T20:25:41.519815","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":292,"date":"2016-02-13 20:27:48.914996","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def list(a):\n        if a==n:\n            return [a]\n        else:\n            [a] + new_list(a+1)\n    new_list= list(1)\n    return sum (map(term, new_list))\n\n\n","after":null,"SubmissionTime":"2016-02-13T20:27:48.914996","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":292,"date":"2016-02-13 20:27:48.914996","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def list(a):\n        if a==n:\n            return [a]\n        else:\n            [a] + new_list(a+1)\n    new_list= list(1)\n    return sum (map(term, new_list))\n\n\n","after":null,"SubmissionTime":"2016-02-13T20:27:48.914996","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":292,"date":"2016-02-13 20:28:02.618945","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def list(a):\n        if a==n:\n            return [a]\n        else:\n            [a] + list(a+1)\n    new_list= list(1)\n    return sum (map(term, new_list))\n\n\n","after":null,"SubmissionTime":"2016-02-13T20:28:02.618945","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":292,"date":"2016-02-13 20:28:37.113340","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def list(a):\n        if a==n:\n            return [a]\n        else:\n            return [a] + list(a+1)\n    new_list= list(1)\n    return sum (map(term, new_list))\n\n\n","after":null,"SubmissionTime":"2016-02-13T20:28:37.11334","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":292,"date":"2016-02-13 20:31:36.146128","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def list(a):\n        if a==n:\n            return [a]\n        else:\n            return [a] + list(a+1)\n    new_list= list(1)\n    return reduce(mul (map(term, new_list)))\n\n\n","after":null,"SubmissionTime":"2016-02-13T20:31:36.146128","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":933,"date":"2016-02-13 20:37:04.401724","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def id_or_sq(n, term):\n        if term == n:\n            return 1\n        else:\n            return term * mul(n, term + 1)\n    if n == 1:\n        return 1\n\n","after":null,"SubmissionTime":"2016-02-13T20:37:04.401724","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":933,"date":"2016-02-13 20:39:23.865903","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def id_or_sq(n, term):\n        if term == n:\n            return 1\n        else:\n            return term * id_or_sq(n, term + 1)\n    if n == 1:\n        return 1\n\n","after":null,"SubmissionTime":"2016-02-13T20:39:23.865903","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":933,"date":"2016-02-13 20:40:02.857963","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def id_or_sq(n, k):\n        if k == n:\n            return 1\n        else:\n            return k * id_or_sq(n, k + 1)\n    if n == 1:\n        return 1\n\n","after":null,"SubmissionTime":"2016-02-13T20:40:02.857963","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":933,"date":"2016-02-13 20:43:33.275591","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def id_or_sq(n, k):\n        if k == n:\n            return 1\n        return k * id_or_sq(n, k + 1)\n    if n == 1:\n        return 1\n\n","after":null,"SubmissionTime":"2016-02-13T20:43:33.275591","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":933,"date":"2016-02-13 20:44:17.333011","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def id_or_sq(n, k):\n        if k == n:\n            return n\n        return k * id_or_sq(n, k + 1)\n    if n == 1:\n        return 1\n\n","after":null,"SubmissionTime":"2016-02-13T20:44:17.333011","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":933,"date":"2016-02-13 20:44:30.372220","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = 1\n    def id_or_sq(n, k):\n        if k == n:\n            return n\n        return k * id_or_sq(n, k + 1)\n    if n == 1:\n        return 1\n\n","after":null,"SubmissionTime":"2016-02-13T20:44:30.37222","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":675,"date":"2016-02-13 20:47:30.656354","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(1)\n    else:\n        return term(n) + product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-13T20:47:30.656354","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return term(1)\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":424,"date":"2016-02-13 20:52:23.861420","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if N<2:\n        return 1\n    else:\n        return identity(n) * product(n-2, identity)\n\n","after":null,"SubmissionTime":"2016-02-13T20:52:23.86142","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":424,"date":"2016-02-13 20:53:10.604489","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n<2:\n        return 1\n    else:\n        return identity(n) * product(n-2, identity)\n\n","after":null,"SubmissionTime":"2016-02-13T20:53:10.604489","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":424,"date":"2016-02-13 20:54:04.617683","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n<2:\n        return 1\n    else:\n        return identity(n) * product(n-1, identity)\n\n","after":null,"SubmissionTime":"2016-02-13T20:54:04.617683","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":933,"date":"2016-02-13 20:54:59.427950","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = 1\n    def id_or_sq(n, k):\n        if k == n:\n            return n\n        return k * id_or_sq(n, k + 1)\n\n","after":null,"SubmissionTime":"2016-02-13T20:54:59.42795","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":933,"date":"2016-02-13 20:56:43.788349","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = 1\n    def id_or_sq(n, k):\n        if k == n:\n            return id_or_sq(n, k)\n        return k * id_or_sq(n, k + 1)\n\n","after":null,"SubmissionTime":"2016-02-13T20:56:43.788349","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":933,"date":"2016-02-13 20:57:05.493711","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = 1\n    def id_or_sq(n, k):\n        if k == n:\n            return k\n        return k * id_or_sq(n, k + 1)\n\n","after":null,"SubmissionTime":"2016-02-13T20:57:05.493711","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":754,"date":"2016-02-13 20:57:22.967204","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    def count_up(count):\n        if count == 1:\n            return 1\n        else:\n            return term(count)*term(count-1)\n    return count_up(n)\n\n","after":null,"SubmissionTime":"2016-02-13T20:57:22.967204","SynthesizedAfter":"\r\ndef product(n, term):\r\n    def count_up(count):\r\n        if count==1:\r\n            return 1\r\n        else:\r\n            return term(count)*product(count-1, term)\r\n    return count_up(n)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":1048,"date":"2016-02-13 21:04:57.616006","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    t, i = 0, 1\n    while i <= n:\n        t *= term(i)\n        i *= 1\n    return t\n\n","after":null,"SubmissionTime":"2016-02-13T21:04:57.616006","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":933,"date":"2016-02-13 21:05:50.614278","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = 1\n    def id_or_sq(n, term, k):\n        if k == n:\n            return k\n        return k * id_or_sq(n, k + 1)\n\n","after":null,"SubmissionTime":"2016-02-13T21:05:50.614278","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1048,"date":"2016-02-13 21:06:29.413129","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    t, i = 1, 1\n    while i <= n:\n        t *= term(i)\n        i *= 1\n    return t\n\n","after":null,"SubmissionTime":"2016-02-13T21:06:29.413129","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":933,"date":"2016-02-13 21:12:50.421501","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = 1\n    def id_or_sq(n, term, k):\n        if k == n:\n            return k\n        else:\n            return k * id_or_sq(n, term, k + 1)\n\n","after":null,"SubmissionTime":"2016-02-13T21:12:50.421501","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":933,"date":"2016-02-13 21:35:57.753348","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def functions(n, term, total):\n        if n == 1:\n            return total\n        else:\n            total = n * (n - 1)\n            return functions(n - 1, term, total)\n    return functions(n, term, 0)\n\n","after":null,"SubmissionTime":"2016-02-13T21:35:57.753348","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":918,"date":"2016-02-13 21:40:09.478826","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    result = 1\n    while (n != 0):\n        result = result * n * (n - 1)\n        n -= 2\n    result = term(result)\n    return result\n\n\n","after":null,"SubmissionTime":"2016-02-13T21:40:09.478826","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":902,"date":"2016-02-13 21:41:33.766090","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(n)\n    return term(n) + product(n-1,term)\n\n","after":null,"SubmissionTime":"2016-02-13T21:41:33.76609","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return term(n)\r\n    return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":933,"date":"2016-02-13 21:48:30.548669","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def functions(n, term, total):\n        if n == 1:\n            return total\n        else:\n            total = n * (n - 1)\n            return functions(n - 1, term, total)\n    return functions(n, term, 1)\n\n","after":null,"SubmissionTime":"2016-02-13T21:48:30.548669","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":933,"date":"2016-02-13 21:49:49.883428","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def functions(n, term, total):\n        if n == 1:\n            return total\n        else:\n            total = total * (n - 1)\n            return functions(n - 1, term, total)\n    return functions(n, term, 1)\n\n","after":null,"SubmissionTime":"2016-02-13T21:49:49.883428","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":933,"date":"2016-02-13 21:51:32.003292","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def functions(n, term, total):\n        if n == 1:\n            return total\n        else:\n            total = total * term(n - 1)\n            return functions(n - 1, term, total)\n    return functions(n, term, 1)\n\n","after":null,"SubmissionTime":"2016-02-13T21:51:32.003292","SynthesizedAfter":"\r\ndef product(n, term):\r\n    def functions(n, term, total):\r\n        if n==1:\r\n            return total\r\n        else:\r\n            total = total*term(n)\r\n            return functions(n-1, term, total)\r\n    return functions(n, term, 1)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Move(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Subtract, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"ConstantExpressionNode\"))))), Tutor.synthesis.MagicK), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":330,"date":"2016-02-13 22:12:43.994015","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 1\n    else:\n        return term(n)*term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-13T22:12:43.994015","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n<1:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":330,"date":"2016-02-13 22:13:36.279795","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        return term(n)*term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-13T22:13:36.279795","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":330,"date":"2016-02-13 22:16:47.842563","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        return n*n-1\n\n","after":null,"SubmissionTime":"2016-02-13T22:16:47.842563","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":610,"date":"2016-02-13 22:18:01.740041","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    lst= [term(x) for x in range(1,n)]\n    for i in lst:\n        product=product*i\n    return product\n\n","after":null,"SubmissionTime":"2016-02-13T22:18:01.740041","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":330,"date":"2016-02-13 22:18:05.733674","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        return n * term(-1)\n\n","after":null,"SubmissionTime":"2016-02-13T22:18:05.733674","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":330,"date":"2016-02-13 22:18:24.636588","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        return n * term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-13T22:18:24.636588","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":330,"date":"2016-02-13 22:20:04.944361","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        return product(n) * product(n-1)\n\n","after":null,"SubmissionTime":"2016-02-13T22:20:04.944361","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":330,"date":"2016-02-13 22:20:35.934317","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        return product(n, term) * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-13T22:20:35.934317","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":330,"date":"2016-02-13 22:21:22.614229","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        return term(n) * term(n-1) * term(n-2)\n\n","after":null,"SubmissionTime":"2016-02-13T22:21:22.614229","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":330,"date":"2016-02-13 22:21:32.078779","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        return term(n) * term(n-1) * term(n-2) * term(n-3)\n\n","after":null,"SubmissionTime":"2016-02-13T22:21:32.078779","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":610,"date":"2016-02-13 22:22:13.877859","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    product=1\n    lst= [term(x) for x in range(1,n)]\n    for i in lst:\n        product=product*i\n    return product\n\n","after":null,"SubmissionTime":"2016-02-13T22:22:13.877859","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":142,"date":"2016-02-13 22:22:17.311429","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return term*product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-13T22:22:17.311429","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":330,"date":"2016-02-13 22:22:38.837504","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return term(n) * term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-13T22:22:38.837504","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":330,"date":"2016-02-13 22:22:45.936376","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 1\n    else:\n        return term(n) * term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-13T22:22:45.936376","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":330,"date":"2016-02-13 22:22:58.454380","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        return term(n) * term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-13T22:22:58.45438","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":610,"date":"2016-02-13 22:23:30.680923","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    product=1\n    lst= [term(n) for n in range(1,n)]\n    for i in lst:\n        product=product*i\n    return product\n\n","after":null,"SubmissionTime":"2016-02-13T22:23:30.680923","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":610,"date":"2016-02-13 22:25:03.846275","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    product=1\n    for i in range(1,n):\n        number=term(i)\n        product=product*number\n    return product\n\n","after":null,"SubmissionTime":"2016-02-13T22:25:03.846275","SynthesizedAfter":"\r\ndef product(n, term):\r\n    product = 1\r\n    for i in range(1, n):\r\n        number = term(i+1)\r\n        product = product*number\r\n    return product","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":918,"date":"2016-02-13 22:25:37.620658","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    result = 1\n    while(n != 0):\n        result = result * n * (n - 1)\n        n -= 2\n    result = term(result)\n    return result\n\n","after":null,"SubmissionTime":"2016-02-13T22:25:37.620658","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":30,"date":"2016-02-13 22:43:15.658694","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return term(n) + product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-13T22:43:15.658694","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return term(1)\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(ConstantExpressionNode-1)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\")))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":30,"date":"2016-02-13 22:45:12.517595","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(1)\n    else:\n        return term(n) + product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-13T22:45:12.517595","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":141,"date":"2016-02-13 23:05:45.205759","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==0:\n        return product(n-1,identity)\n\n","after":null,"SubmissionTime":"2016-02-13T23:05:45.205759","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":141,"date":"2016-02-13 23:06:58.897544","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==0:\n        return product(n-1,identity(n))\n\n","after":null,"SubmissionTime":"2016-02-13T23:06:58.897544","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":141,"date":"2016-02-13 23:06:58.897544","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==0:\n        return product(n-1,identity(n))\n\n","after":null,"SubmissionTime":"2016-02-13T23:06:58.897544","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":141,"date":"2016-02-13 23:07:09.374759","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==0:\n        return product(n-1,identity(x))\n\n","after":null,"SubmissionTime":"2016-02-13T23:07:09.374759","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":141,"date":"2016-02-13 23:08:29.960872","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    mul(identity,identity)\n    if n==0:\n        return product(n-1,identity)\n\n","after":null,"SubmissionTime":"2016-02-13T23:08:29.960872","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":141,"date":"2016-02-13 23:09:00.213667","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=identity\n    mul(x,x)\n    if n==0:\n        return product(n-1,identity)\n\n","after":null,"SubmissionTime":"2016-02-13T23:09:00.213667","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":141,"date":"2016-02-13 23:13:35.900609","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==0:\n        return 1\n    else:\n        return n*product(n-1,identity)\n\n","after":null,"SubmissionTime":"2016-02-13T23:13:35.900609","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":141,"date":"2016-02-13 23:14:15.409290","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==0:\n        return 1\n    else:\n        return n*product(n-1)\n\n","after":null,"SubmissionTime":"2016-02-13T23:14:15.40929","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==0:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":141,"date":"2016-02-13 23:14:27.553582","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==0:\n        return 1\n    else:\n        return n*product(n-1,\"x\")\n\n","after":null,"SubmissionTime":"2016-02-13T23:14:27.553582","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":141,"date":"2016-02-13 23:17:16.329489","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==0:\n        return 1\n    else:\n        return term(x)*product(n-1,term(x))\n\n","after":null,"SubmissionTime":"2016-02-13T23:17:16.329489","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":141,"date":"2016-02-13 23:24:53.656592","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==0:\n        return 1\n    else:\n        return product(n-1,lambda n: x)\n\n","after":null,"SubmissionTime":"2016-02-13T23:24:53.656592","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":141,"date":"2016-02-13 23:27:43.204325","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if term==identity:\n        n*n-1\n    else:\n        n**2*(n-1)**2\n    if n==0:\n        return 1\n    else:\n        return product(n-1,lambda n: x)\n\n","after":null,"SubmissionTime":"2016-02-13T23:27:43.204325","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":226,"date":"2016-02-14 03:58:16.118006","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 1\n    return term(n) * term(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-14T03:58:16.118006","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==0:\r\n        return 1\r\n    return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":226,"date":"2016-02-14 04:01:47.867037","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 1\n    return product(n, term) * product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-14T04:01:47.867037","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":589,"date":"2016-02-14 07:31:55.752232","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k,multi=1,1\n    while k <= 1:\n        k=k+1\n        multi=term(k)*multi\n\n    return multi \n\n","after":null,"SubmissionTime":"2016-02-14T07:31:55.752232","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":589,"date":"2016-02-14 07:33:43.204018","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k,multi=1,1\n    while k <= 1:\n        multi=term(k)*multi\n        k=k+1\n    return multi \n\n","after":null,"SubmissionTime":"2016-02-14T07:33:43.204018","SynthesizedAfter":"\r\ndef product(n, term):\r\n    k, multi = 1, 1\r\n    while k<=n:\r\n        multi = term(k)*multi\r\n        k = k+1\r\n    return multi","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-n)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":398,"date":"2016-02-14 09:06:01.465602","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(1)\n    else:\n        return term(n) + product(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-14T09:06:01.465602","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":398,"date":"2016-02-14 09:07:25.255394","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(1)\n    else:\n        return term(n) + product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-14T09:07:25.255394","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return term(1)\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Add, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":398,"date":"2016-02-14 09:07:25.255394","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(1)\n    else:\n        return term(n) + product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-14T09:07:25.255394","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":398,"date":"2016-02-14 09:08:16.763340","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(1)\n    else:\n        return term(product(n - 1, term))\n\n","after":null,"SubmissionTime":"2016-02-14T09:08:16.76334","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":715,"date":"2016-02-14 09:48:23.768582","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return summation(term,n)\n\n\n\n","after":null,"SubmissionTime":"2016-02-14T09:48:23.768582","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":715,"date":"2016-02-14 10:02:17.164844","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a = 1\n    while i >= n:\n        a = a*term(i)\n        increment(i)\n    return a\n\n\n\\\n","after":null,"SubmissionTime":"2016-02-14T10:02:17.164844","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":715,"date":"2016-02-14 10:02:57.368715","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a = 1\n    i = 1\n    while i <= n:\n        a = a*term(i)\n        increment(i)\n    return a\n\n\n\\\n","after":null,"SubmissionTime":"2016-02-14T10:02:57.368715","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":715,"date":"2016-02-14 10:03:32.505584","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a = 1\n    i = 1\n    while i <= n:\n        a = a*term(i)\n        i += i\n    return a\n\n\n\\\n","after":null,"SubmissionTime":"2016-02-14T10:03:32.505584","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":715,"date":"2016-02-14 10:04:00.284047","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a = 1\n    i = 1\n    while i <= n + 1:\n        a = a*term(i)\n        i += i\n    return a\n\n\n\\\n","after":null,"SubmissionTime":"2016-02-14T10:04:00.284047","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":715,"date":"2016-02-14 10:04:15.086862","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a = 1\n    i = 1\n    while i <= n:\n        a = a*term(i)\n        i += i\n    return a\n\n\n\\\n","after":null,"SubmissionTime":"2016-02-14T10:04:15.086862","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":715,"date":"2016-02-14 10:04:39.345594","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a = 1\n    i = 1\n    while i <= n:\n        a = a*term(i)\n        i += i\n    return a*term(n)\n\n\n\\\n","after":null,"SubmissionTime":"2016-02-14T10:04:39.345594","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":715,"date":"2016-02-14 10:06:21.772480","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a = 1\n    i = 1\n    while i < n:\n        a = a*term(i)\n        i += i\n    return a*term(n)\n\n\n","after":null,"SubmissionTime":"2016-02-14T10:06:21.77248","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1054,"date":"2016-02-14 10:43:51.597845","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    result = 1\n    for x in range(1, n+1):\n        result = term(x) * term(x+1)\n    return result\n\n","after":null,"SubmissionTime":"2016-02-14T10:43:51.597845","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1055,"date":"2016-02-14 11:20:53.834550","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    result = 0\n    for x in range (1, n+1):\n        result *= term(x)\n    return result\n\n\n","after":null,"SubmissionTime":"2016-02-14T11:20:53.83455","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":270,"date":"2016-02-14 11:37:52.115301","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    prod, i = 1, 1\n    while i <=n:\n        prod = total * term(i)\n        k = increment(k)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-14T11:37:52.115301","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":270,"date":"2016-02-14 11:38:30.634980","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    prod, i = 1, 1\n    while i <=n:\n        prod = total * term(i)\n        k = increment(k)\n    return prod\n\n","after":null,"SubmissionTime":"2016-02-14T11:38:30.63498","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":270,"date":"2016-02-14 11:38:43.259900","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    prod, i = 1, 1\n    while i <=n:\n        prod = prod * term(i)\n        k = increment(k)\n    return prod\n\n","after":null,"SubmissionTime":"2016-02-14T11:38:43.2599","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":856,"date":"2016-02-14 11:45:38.631992","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return\n    return term(n)*product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-14T11:45:38.631992","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return 1\r\n    return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, LeafConstNode(ConstantExpressionNode-1), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":856,"date":"2016-02-14 11:47:46.097520","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return\n    product = term(n)\n    return product*product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-14T11:47:46.09752","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":856,"date":"2016-02-14 11:48:19.830525","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return\n    product = term(n)\n    return product*product(term, n-1)\n\n","after":null,"SubmissionTime":"2016-02-14T11:48:19.830525","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":856,"date":"2016-02-14 11:55:02.644861","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    term(n)\n\n","after":null,"SubmissionTime":"2016-02-14T11:55:02.644861","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":856,"date":"2016-02-14 11:55:06.800317","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return term(n)\n\n","after":null,"SubmissionTime":"2016-02-14T11:55:06.800317","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":856,"date":"2016-02-14 11:55:37.987174","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 1\n    product = term(n)\n    return product * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-14T11:55:37.987174","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":149,"date":"2016-02-14 12:36:32.309182","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    sum=0\n    for i in range(1,n+1):\n        sum=sum*term(i) \n    return sum\n\n","after":null,"SubmissionTime":"2016-02-14T12:36:32.309182","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":909,"date":"2016-02-14 12:51:19.248704","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    while i < n:\n        i = i * term(i + 1)\n    return i\n\n","after":null,"SubmissionTime":"2016-02-14T12:51:19.248704","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":412,"date":"2016-02-14 12:54:40.211987","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_mult(a):\n        if b == n:\n            return 1\n        else:\n            return count_mult(a+1) * a     \n\n","after":null,"SubmissionTime":"2016-02-14T12:54:40.211987","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":909,"date":"2016-02-14 12:54:47.167533","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    while i < n:\n        i = i * term(i + 1)\n        i += 1\n    return i\n\n","after":null,"SubmissionTime":"2016-02-14T12:54:47.167533","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":758,"date":"2016-02-14 12:55:24.582160","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    p = 1\n    for i in range(1, n + 1):\n        p *= term(p)\n    return p\n    \n","after":null,"SubmissionTime":"2016-02-14T12:55:24.58216","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":412,"date":"2016-02-14 12:55:36.328923","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_mult(a):\n        if b == n:\n            return 1\n        else:\n            return count_mult(a+1) * a\n    return count_mult(1)             \n\n","after":null,"SubmissionTime":"2016-02-14T12:55:36.328923","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":412,"date":"2016-02-14 12:55:51.198969","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_mult(a):\n        if a == n:\n            return 1\n        else:\n            return count_mult(a+1) * a\n    return count_mult(1)\n\n","after":null,"SubmissionTime":"2016-02-14T12:55:51.198969","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":909,"date":"2016-02-14 12:56:06.325279","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    final = 1\n    while i < n:\n        final = final * term(i + 1)\n        i += 1\n    return i\n\n","after":null,"SubmissionTime":"2016-02-14T12:56:06.325279","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":909,"date":"2016-02-14 12:57:05.513491","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    final = 1\n    while i <= n:\n        final = final * term(i)\n        i += 1\n    return i\n\n","after":null,"SubmissionTime":"2016-02-14T12:57:05.513491","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":412,"date":"2016-02-14 12:57:47.760770","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_mult(a):\n        if a == n:\n            return 1\n        else:\n            return count_mult(a+1) * term(a)\n    return count_mult(1)\n\n","after":null,"SubmissionTime":"2016-02-14T12:57:47.76077","SynthesizedAfter":"\r\ndef product(n, term):\r\n    def count_mult(a):\r\n        if a==n:\r\n            return 1\r\n        else:\r\n            return count_mult(a+1)*term(a+1)\r\n    return count_mult(1)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":909,"date":"2016-02-14 13:00:57.355357","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    final = 1\n    while i <= n:\n        final = final * term(i)\n        print(final)\n        i += 1\n    return i\n\n","after":null,"SubmissionTime":"2016-02-14T13:00:57.355357","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":412,"date":"2016-02-14 13:01:41.983283","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_mult(a):\n        if a+1 == n:\n            return\n        else:\n            print (a)\n            return count_mult(a+1) * term(a)\n    return count_mult(1)\n\n","after":null,"SubmissionTime":"2016-02-14T13:01:41.983283","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":412,"date":"2016-02-14 13:01:56.270854","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def count_mult(a):\n        if a+1 == n:\n            return 1\n        else:\n            return count_mult(a+1) * term(a)\n    return count_mult(1)\n\n","after":null,"SubmissionTime":"2016-02-14T13:01:56.270854","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1038,"date":"2016-02-14 14:01:12.039955","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def multiplication(n, term, i=1, total=0):\n        if n == 0:\n            return 0\n        if i > n:\n            return total\n        total = total*odd_term(i)\n        return multiplication(n, term, i+1, total)\n    return multiplication(n, term)\n","after":null,"SubmissionTime":"2016-02-14T14:01:12.039955","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1038,"date":"2016-02-14 14:05:52.138589","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def multiplication(n, term, i=1, total=0):\n        if n == 0:\n            return 0\n        if i > n:\n            return total\n        total = total*term(i)\n        return multiplication(n, term, i+1, total)\n    return multiplication(n, term)\n","after":null,"SubmissionTime":"2016-02-14T14:05:52.138589","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":653,"date":"2016-02-14 14:08:55.845247","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    product=1\n    while n>=1:\n        a=term(n)\n        product=product*a\n    return product\n\n","after":null,"SubmissionTime":"2016-02-14T14:08:55.845247","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":638,"date":"2016-02-14 14:11:45.175522","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i, b = 0, 1\n    while i <= n:\n        b = term(b) * b\n        i += 1\n    return b\n\n\n\n","after":null,"SubmissionTime":"2016-02-14T14:11:45.175522","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":638,"date":"2016-02-14 14:12:33.241731","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i, b = 0, 1\n    while i <= n:\n        b = term(i) * b\n        i += 1\n    return b\n\n\n\n","after":null,"SubmissionTime":"2016-02-14T14:12:33.241731","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":638,"date":"2016-02-14 14:12:48.124453","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i, b = 0, 1\n    while i < n:\n        b = term(i) * b\n        i += 1\n    return b\n\n\n\n","after":null,"SubmissionTime":"2016-02-14T14:12:48.124453","SynthesizedAfter":"\r\ndef product(n, term):\r\n    i, b = 0, 1\r\n    while i<n:\r\n        b = term(i+1)*b\r\n        i += 1\r\n    return b","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":638,"date":"2016-02-14 14:13:38.644812","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i, b = 1, 0\n    while i <= n:\n        b = term(i) * b\n        i += 1\n    return b\n\n\n\n","after":null,"SubmissionTime":"2016-02-14T14:13:38.644812","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":638,"date":"2016-02-14 14:14:51.596367","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i, b = 1, 0\n    while i <= n:\n        b = term(i,1) * b\n        i += 1\n    return b\n\n\n\n","after":null,"SubmissionTime":"2016-02-14T14:14:51.596367","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":638,"date":"2016-02-14 14:15:38.354966","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i, b = 0, 1\n    while i <= n:\n        b *= term(i)\n        i += 1\n    return b\n\n\n\n","after":null,"SubmissionTime":"2016-02-14T14:15:38.354966","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":638,"date":"2016-02-14 14:15:44.764826","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i, b = 0, 0\n    while i <= n:\n        b *= term(i)\n        i += 1\n    return b\n\n\n\n","after":null,"SubmissionTime":"2016-02-14T14:15:44.764826","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":336,"date":"2016-02-14 14:16:00.986488","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    k = 1\n    while k <= n:\n        total = total + term(k)\n        k += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-14T14:16:00.986488","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":336,"date":"2016-02-14 14:19:46.661396","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    k = 1\n    while k <= n:\n        total = total * term(k)\n        k += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-14T14:19:46.661396","SynthesizedAfter":"\r\ndef product(n, term):\r\n    total = 1\r\n    k = 1\r\n    while k<=n:\r\n        total = term(k)*total\r\n        k += 1\r\n    return total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-total), 1), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":972,"date":"2016-02-14 14:25:12.317340","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i, result = 1, 1\n    while i <= n:\n        result *= i\n        i += 1\n    return result\n\n","after":null,"SubmissionTime":"2016-02-14T14:25:12.31734","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":972,"date":"2016-02-14 14:29:41.134111","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i, result = 1, 1\n    while i <= n:\n        result = term(result) * i\n        i += 1\n    return result\n\n","after":null,"SubmissionTime":"2016-02-14T14:29:41.134111","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":866,"date":"2016-02-14 14:48:32.033173","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-14T14:48:32.033173","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":296,"date":"2016-02-14 15:11:24.882649","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    for i in range(1, n+1):\n        while i <= n:\n            total = total * term(i)\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-14T15:11:24.882649","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-14 15:14:32.186461","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-14T15:14:32.186461","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return 1\r\n    else:\r\n        return product(n-1, term)*term(n)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":477,"date":"2016-02-14 15:15:44.760871","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-14T15:15:44.760871","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":937,"date":"2016-02-14 15:19:16.349793","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        return product(n - 1, term)\n","after":null,"SubmissionTime":"2016-02-14T15:19:16.349793","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n<=1:\r\n        return 1\r\n    else:\r\n        return product(n-1, term)*term(n)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":937,"date":"2016-02-14 15:20:08.416393","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1 or 0:\n        return 1\n    else:\n        return n * product(n - 1, term)\n","after":null,"SubmissionTime":"2016-02-14T15:20:08.416393","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":866,"date":"2016-02-14 15:32:04.996712","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n\n","after":null,"SubmissionTime":"2016-02-14T15:32:04.996712","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":866,"date":"2016-02-14 15:35:14.700106","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    sum = 1\n    for i in range(1, n+1):\n         sum = sum*n\n    return sum\n\n","after":null,"SubmissionTime":"2016-02-14T15:35:14.700106","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":866,"date":"2016-02-14 15:35:56.591973","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    sum = term\n    for i in range(1, n+1):\n        term = term**n\n    return term\n\n","after":null,"SubmissionTime":"2016-02-14T15:35:56.591973","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":866,"date":"2016-02-14 15:36:10.459141","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n    for i in range(1, n+1):\n        term = term**n\n    return term\n\n","after":null,"SubmissionTime":"2016-02-14T15:36:10.459141","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":866,"date":"2016-02-14 15:39:00.234197","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    value = 1\n    for i in range(1, n+1):\n        value = value + value**term\n    return value\n\n","after":null,"SubmissionTime":"2016-02-14T15:39:00.234197","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":866,"date":"2016-02-14 15:39:13.061573","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    value = 1\n    for i in range(1, n+1):\n        value = value + 1\n    return value\n\n","after":null,"SubmissionTime":"2016-02-14T15:39:13.061573","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":866,"date":"2016-02-14 15:39:21.639765","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    value = 1\n    for i in range(1, n+1):\n        value = value**term\n    return value\n\n","after":null,"SubmissionTime":"2016-02-14T15:39:21.639765","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":866,"date":"2016-02-14 15:39:27.610205","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    value = 1\n    for i in range(1, n+1):\n        value = value**term + value\n    return value\n\n","after":null,"SubmissionTime":"2016-02-14T15:39:27.610205","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":866,"date":"2016-02-14 15:39:57.127055","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    value = 1\n    for i in range(1, n+1):\n        value += i**term\n    return value\n\n","after":null,"SubmissionTime":"2016-02-14T15:39:57.127055","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":866,"date":"2016-02-14 15:40:09.732919","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    value = 1\n    for i in range(1, n+1):\n        value = value + i**term\n    return value\n\n","after":null,"SubmissionTime":"2016-02-14T15:40:09.732919","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":866,"date":"2016-02-14 15:40:15.734162","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    value = 1\n    for i in range(1, n+1):\n        value = value + i**(term)\n    return value\n\n","after":null,"SubmissionTime":"2016-02-14T15:40:15.734162","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":866,"date":"2016-02-14 15:40:36.664729","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    value = 1\n    for i in range(1, n+1):\n         return 6\n\n","after":null,"SubmissionTime":"2016-02-14T15:40:36.664729","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":731,"date":"2016-02-14 15:48:35.134863","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return 1\n    else:\n        return product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-14T15:48:35.134863","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==0:\r\n        return 1\r\n    else:\r\n        return product(n-1, term)*term(n)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK), SingleChild(ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-n))))))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ReturnStatementNode, TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":731,"date":"2016-02-14 15:51:29.131680","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return 1\n    else:\n        return mul(n, product(n - 1, term))\n\n","after":null,"SubmissionTime":"2016-02-14T15:51:29.13168","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":885,"date":"2016-02-14 16:27:04.294894","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n ==1:\n        return 1\n    else:\n        return term(n)*prduct(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-14T16:27:04.294894","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":437,"date":"2016-02-14 16:45:52.922974","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    count=1\n    if(count<n):\n        return product(n,term+1)\n\n","after":null,"SubmissionTime":"2016-02-14T16:45:52.922974","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":437,"date":"2016-02-14 16:50:38.960946","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    count=1\n    num=1\n    if(count<n):\n        val=term(num)\n    num+=1\n    count+=1\n    return product(n,val)\n\n","after":null,"SubmissionTime":"2016-02-14T16:50:38.960946","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":988,"date":"2016-02-14 17:13:00.582520","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    while n > 0:\n        term(n)\n        n-1\n    return\n\n\n","after":null,"SubmissionTime":"2016-02-14T17:13:00.58252","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":988,"date":"2016-02-14 17:16:39.327552","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, prod = 1, 0\n    while k <= n:\n        k, prod = k + 1, prod + term(k)\n    return prod\n\n\n","after":null,"SubmissionTime":"2016-02-14T17:16:39.327552","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":122,"date":"2016-02-14 17:38:07.385233","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def adding(x):\n        if x==n:\n            return term(x)\n        else:\n            return term(n)+adiding(x+1)\n    return adding(0)\n\n","after":null,"SubmissionTime":"2016-02-14T17:38:07.385233","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":122,"date":"2016-02-14 17:38:07.385233","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def adding(x):\n        if x==n:\n            return term(x)\n        else:\n            return term(n)+adiding(x+1)\n    return adding(0)\n\n","after":null,"SubmissionTime":"2016-02-14T17:38:07.385233","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":122,"date":"2016-02-14 17:39:21.966734","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return n\n\n","after":null,"SubmissionTime":"2016-02-14T17:39:21.966734","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":122,"date":"2016-02-14 17:39:21.966734","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return n\n\n","after":null,"SubmissionTime":"2016-02-14T17:39:21.966734","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":882,"date":"2016-02-14 17:44:13.122363","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = term(1)\n    if i < n:\n        total = total*term(i)\n        increment(i)\n        return total\n","after":null,"SubmissionTime":"2016-02-14T17:44:13.122363","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":882,"date":"2016-02-14 17:45:31.183325","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, i = 1, 1\n    if i < n:\n        total = total*term(i)\n        increment(i)\n        return total\n","after":null,"SubmissionTime":"2016-02-14T17:45:31.183325","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":882,"date":"2016-02-14 17:46:41.371440","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, i = 1, 1\n    if i < n:\n        total = total*term(i)\n        product(increment(i), term)\n        return total\n","after":null,"SubmissionTime":"2016-02-14T17:46:41.37144","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":882,"date":"2016-02-14 17:47:45.165072","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, i = 1, 1\n    if i < n:\n        total = total*term(i)\n        return total\n        product(increment(i), term)\n\n","after":null,"SubmissionTime":"2016-02-14T17:47:45.165072","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":882,"date":"2016-02-14 17:53:21.730204","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, i = 1, 1\n    if i < n:\n        total = total*term(i)\n        return total\n        product(n, term)\n\n","after":null,"SubmissionTime":"2016-02-14T17:53:21.730204","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":882,"date":"2016-02-14 17:56:39.129182","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    if n > 0:\n        total = total*term(n)\n        product(n-1, term)\n    else:\n        return total\n\n\n","after":null,"SubmissionTime":"2016-02-14T17:56:39.129182","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":882,"date":"2016-02-14 17:59:19.452603","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    if n > 0:\n        total = total*term(n)\n        print (total)\n        product(n-1, term)\n    else:\n        return total\n\n\n","after":null,"SubmissionTime":"2016-02-14T17:59:19.452603","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":607,"date":"2016-02-14 18:04:33.757762","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(n)\n    else:\n        return term(n) * product(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-14T18:04:33.757762","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return term(n)\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":882,"date":"2016-02-14 18:17:54.768680","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 0:\n        return term(n)*product(n-1, term)\n\n\n\n","after":null,"SubmissionTime":"2016-02-14T18:17:54.76868","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":22,"date":"2016-02-14 18:28:21.679841","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return term(n) * product(n - 1)\n\n","after":null,"SubmissionTime":"2016-02-14T18:28:21.679841","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":882,"date":"2016-02-14 18:28:35.019325","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return a\n    else:\n        a = n*product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-14T18:28:35.019325","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":22,"date":"2016-02-14 18:28:55.502769","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return term(n) * product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-14T18:28:55.502769","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return 1\r\n    return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, SingleChild(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-Equals, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))))), 2), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-product, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":172,"date":"2016-02-14 18:35:21.320657","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    for x in range(1, n + 1):\n        total *= term(x)\n    return x\n\n","after":null,"SubmissionTime":"2016-02-14T18:35:21.320657","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":122,"date":"2016-02-14 20:15:51.753482","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def multi(x):\n        if x==n:\n            return term(n)\n        else:\n            return multi(x+1)*x\n    return multi(1)\n\n","after":null,"SubmissionTime":"2016-02-14T20:15:51.753482","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":122,"date":"2016-02-14 20:17:18.545745","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def multi(x):\n        if x>n:\n            return term(n)\n        else:\n            return multi(x+1)*x\n    return multi(1)\n\n","after":null,"SubmissionTime":"2016-02-14T20:17:18.545745","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":122,"date":"2016-02-14 20:17:29.240069","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def multi(x):\n        if x>=n:\n            return term(n)\n        else:\n            return multi(x+1)*x\n    return multi(1)\n\n","after":null,"SubmissionTime":"2016-02-14T20:17:29.240069","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":122,"date":"2016-02-14 20:18:13.194017","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def multi(x):\n        if x==n:\n            return term(n)\n        else:\n            return multi(x+1)*x\n    return multi(1)\n\n","after":null,"SubmissionTime":"2016-02-14T20:18:13.194017","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":122,"date":"2016-02-14 20:20:58.789690","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def multi(x):\n        if x==n:\n            return term(n)\n        else:\n            return multi(x+1)*n\n    return multi(1)\n\n","after":null,"SubmissionTime":"2016-02-14T20:20:58.78969","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":678,"date":"2016-02-14 20:21:36.745499","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    for i in range(n+1):\n        x *= term(i)\n    return (x)\n\n","after":null,"SubmissionTime":"2016-02-14T20:21:36.745499","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":678,"date":"2016-02-14 20:22:27.274388","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 0\n    for i in range(n+1):\n        x *= term(i)\n    return (x)\n\n","after":null,"SubmissionTime":"2016-02-14T20:22:27.274388","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":678,"date":"2016-02-14 20:22:35.210782","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 0\n    for i in range(1,n+1):\n        x *= term(i)\n    return (x)\n\n","after":null,"SubmissionTime":"2016-02-14T20:22:35.210782","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":122,"date":"2016-02-14 20:31:55.070308","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def multi(x):\n        if x==n:\n            return term(n)\n        else:\n            return multi(x+1)*term(n)\n    return multi(1)\n\n","after":null,"SubmissionTime":"2016-02-14T20:31:55.070308","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":122,"date":"2016-02-14 20:32:26.054124","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def multi(x):\n        if x==n:\n            return term(n)\n        else:\n            return multi(x+1)*term(1)\n    return multi(1)\n\n","after":null,"SubmissionTime":"2016-02-14T20:32:26.054124","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":122,"date":"2016-02-14 20:32:38.725563","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def multi(x):\n        if x==n:\n            return term(n)\n        else:\n            return multi(x+1)*x\n    return multi(1)\n\n","after":null,"SubmissionTime":"2016-02-14T20:32:38.725563","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":122,"date":"2016-02-14 20:34:16.462113","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def multi(x):\n        if x==n:\n            return term(n)\n        else:\n            return multi(n-1)*x\n    return multi(1)\n\n","after":null,"SubmissionTime":"2016-02-14T20:34:16.462113","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":122,"date":"2016-02-14 20:34:30.422226","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def multi(x):\n        if x==n:\n            return term(n)\n        else:\n            return multi(x+1)*x\n    return multi(1)\n\n","after":null,"SubmissionTime":"2016-02-14T20:34:30.422226","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":122,"date":"2016-02-14 20:35:05.834455","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def multi(x):\n        if x==n:\n            return term(n)\n        else:\n            return term(x+1)*x\n    return multi(1)\n\n","after":null,"SubmissionTime":"2016-02-14T20:35:05.834455","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":753,"date":"2016-02-14 20:35:34.807574","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    prod, incr_val = 0, 1\n    while incr_val <= n:\n        prod, incr_val = prod * term(incr_val), incr_val+1\n    return prod \n\n","after":null,"SubmissionTime":"2016-02-14T20:35:34.807574","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":509,"date":"2016-02-14 20:40:38.129012","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    counter = n - 1\n    while counter > 0:\n        total = total * term(counter)\n        counter -= 1\n    return total\n\n    total = 1\n    for i in range(1, n+1, 1):\n        total = total * term(i)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-14T20:40:38.129012","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":876,"date":"2016-02-14 20:50:13.183054","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==0:\n        return 1\n    else:\n        return term(n)*term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-14T20:50:13.183054","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==0:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":53,"date":"2016-02-14 21:42:08.566594","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    count = 1\n    while count <= n:\n        total = total + term(count)\n        count = count + 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-14T21:42:08.566594","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":53,"date":"2016-02-14 21:43:21.578539","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    count = 1\n    while count <= n:\n        total = total*term(count)\n        count = count + 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-14T21:43:21.578539","SynthesizedAfter":"\r\ndef product(n, term):\r\n    total = 1\r\n    count = 1\r\n    while count<=n:\r\n        total = term(count)*total\r\n        count = count+1\r\n    return total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-total), 1), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-14 23:23:09.312237","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    y = 0\n    for x in n:\n        return y * x\n\n\n","after":null,"SubmissionTime":"2016-02-14T23:23:09.312237","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-14 23:26:21.357318","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    y = n[0]\n    for x in n:\n        return y * x\n\n\n","after":null,"SubmissionTime":"2016-02-14T23:26:21.357318","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-14 23:26:21.357318","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    y = n[0]\n    for x in n:\n        return y * x\n\n\n","after":null,"SubmissionTime":"2016-02-14T23:26:21.357318","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-14 23:32:56.296419","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    y = n[0]\n    for x in range(n):\n        return term(y * x)\n\n\n","after":null,"SubmissionTime":"2016-02-14T23:32:56.296419","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-14 23:33:14.803443","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    y = 1\n    for x in range(n):\n        return term(y * x)\n\n\n","after":null,"SubmissionTime":"2016-02-14T23:33:14.803443","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-14 23:34:13.183610","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    y = 1\n    for x in range(1, n):\n        return term(y * x)\n\n\n","after":null,"SubmissionTime":"2016-02-14T23:34:13.18361","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-14 23:35:56.388011","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    y = 1\n    R = range(1, n)\n    for x in R:\n        return y * term(x)\n\n\n","after":null,"SubmissionTime":"2016-02-14T23:35:56.388011","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-14 23:37:33.484125","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    y = 1\n    R = range(n)\n    for x in R:\n        return y * term(x)\n\n\n","after":null,"SubmissionTime":"2016-02-14T23:37:33.484125","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":998,"date":"2016-02-14 23:38:24.439450","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    y = 1\n    R = range[1:n]\n    for x in R:\n        return y * term(x)\n\n\n","after":null,"SubmissionTime":"2016-02-14T23:38:24.43945","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":998,"date":"2016-02-14 23:38:58.467671","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    y = 1\n    R = t[1:n]\n    for x in R:\n        return y * term(x)\n\n\n","after":null,"SubmissionTime":"2016-02-14T23:38:58.467671","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":998,"date":"2016-02-14 23:38:58.467671","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    y = 1\n    R = t[1:n]\n    for x in R:\n        return y * term(x)\n\n\n","after":null,"SubmissionTime":"2016-02-14T23:38:58.467671","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-14 23:40:31.639125","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    y = 0\n    for x in range(1, n):\n        return y * term(x)\n\n\n","after":null,"SubmissionTime":"2016-02-14T23:40:31.639125","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-14 23:42:36.992011","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    for x in range(1, n):\n        y = 1\n        return y * term(x)\n\n\n","after":null,"SubmissionTime":"2016-02-14T23:42:36.992011","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-14 23:44:36.300142","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    for x in range(1, n):\n        y = term(x) * n\n        return y\n\n\n","after":null,"SubmissionTime":"2016-02-14T23:44:36.300142","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-14 23:44:52.840233","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    for x in range(1, n):\n        y = term(x) * n\n        \n\n\n","after":null,"SubmissionTime":"2016-02-14T23:44:52.840233","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-14 23:45:09.013027","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    for x in range(1, n):\n        y = term(x) * n\n    return y\n\n\n\n","after":null,"SubmissionTime":"2016-02-14T23:45:09.013027","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-14 23:46:29.918658","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    for x in range(n):\n        y = term(x) * n\n    return y\n\n\n\n","after":null,"SubmissionTime":"2016-02-14T23:46:29.918658","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-14 23:50:24.361302","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    for x in range(1, n):\n        y = term(x) * n\n    return y\n\n\n\n","after":null,"SubmissionTime":"2016-02-14T23:50:24.361302","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-14 23:51:01.972909","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    for x in range(1, n + 1):\n        y = term(x) * n\n    return y\n\n\n\n","after":null,"SubmissionTime":"2016-02-14T23:51:01.972909","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":734,"date":"2016-02-14 23:53:07.596649","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return term(n)\n    else:\n        term(n) + product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-14T23:53:07.596649","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-14 23:54:21.524594","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    for x in range(1, n):\n        y = term(x) * n\n    return y(y)\n\n\n\n","after":null,"SubmissionTime":"2016-02-14T23:54:21.524594","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-14 23:54:47.184966","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    for x in range(1, n):\n        y = term(x) * (term(x) * n)\n    return y\n\n\n\n","after":null,"SubmissionTime":"2016-02-14T23:54:47.184966","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":734,"date":"2016-02-14 23:57:32.595803","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return\n    else:\n        term(n) * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-14T23:57:32.595803","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-14 23:57:34.564694","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    y = 1\n    for x in range(0, n):\n        y = y * term(x)\n    return y\n\n\n\n","after":null,"SubmissionTime":"2016-02-14T23:57:34.564694","SynthesizedAfter":"\r\ndef product(n, term):\r\n    y = 1\r\n    for x in range(0, n):\r\n        y = y*term(x+1)\r\n    return y","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-14 23:57:43.168530","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    y = 1\n    for x in range(1, n):\n        y = y * term(x)\n    return y\n\n\n\n","after":null,"SubmissionTime":"2016-02-14T23:57:43.16853","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-14 23:58:13.769888","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    for x in range(1, n):\n        y = y * term(x)\n    return y\n\n\n\n","after":null,"SubmissionTime":"2016-02-14T23:58:13.769888","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":734,"date":"2016-02-14 23:59:03.216489","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        term(n) * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-14T23:59:03.216489","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==0:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, ConstNode(ReturnStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(ExpressionStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))), Tutor.synthesis.MagicK)))), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(Node(ExpressionStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-15 00:00:38.274857","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    element = 1\n    for x in range(1, n + 1):\n        y = element * term(x)\n        element = term(x) + 1\n\n    return y\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T00:00:38.274857","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-15 00:00:49.174521","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    element = 1\n    for x in range(1, n):\n        y = element * term(x)\n        element = term(x) + 1\n\n    return y\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T00:00:49.174521","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-15 00:00:49.174521","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    element = 1\n    for x in range(1, n):\n        y = element * term(x)\n        element = term(x) + 1\n\n    return y\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T00:00:49.174521","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-15 00:01:25.711896","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    element = 1\n    for x in range(n):\n        y = element * term(x)\n        element = term(x) + 1\n\n    return y\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T00:01:25.711896","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-15 00:03:30.924315","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    element = 1\n    for x in range(1, n + 1):\n        y = element * term(x)\n        element = term(x) + 1\n\n    return y\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T00:03:30.924315","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-15 00:04:10.484880","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    element = 1\n    for x in range(1, n + 1):\n        y = element * term(x - 1)\n        element = term(x) + 1\n\n    return y\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T00:04:10.48488","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-15 00:04:26.068576","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    element = 1\n    for x in range(1, n + 1):\n        y = element * term(x)\n        element = term(x - 1) + 1\n\n    return y\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T00:04:26.068576","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":962,"date":"2016-02-15 00:04:31.430766","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-15T00:04:31.430766","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-15 00:04:37.404781","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    element = 1\n    for x in range(1, n + 1):\n        y = element * term(x)\n        element = term(x) + 1\n\n    return y\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T00:04:37.404781","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-15 00:04:48.898273","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    element = 1\n    for x in range(1, n + 1):\n        y = element * term(x - 1)\n        element = term(x) + 1\n\n    return y\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T00:04:48.898273","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-15 00:06:22.320689","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    for x in range(1, n + 1):\n        y = term(x)\n        product = y * term(x + 1)\n\n    return product\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T00:06:22.320689","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-15 00:08:29.605521","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    for x in range(1, n + 1):\n        y = term(x)\n        print(term(x))\n    return y\n\n\n","after":null,"SubmissionTime":"2016-02-15T00:08:29.605521","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-15 00:09:18.419464","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    for x in range(1, n + 1):\n        y = term(x)\n        print(term(x))\n    return term(x * x)\n\n\n","after":null,"SubmissionTime":"2016-02-15T00:09:18.419464","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-15 00:10:38.401653","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    count = 1\n    for x in range(1, n + 1):\n        y = term(x)\n        print(term(x))\n    count = count + 1\n    return term(x) * count\n\n\n","after":null,"SubmissionTime":"2016-02-15T00:10:38.401653","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-15 00:10:51.752599","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    count = 1\n    for x in range(1, n + 1):\n        y = term(x)\n    count = count + 1\n    return term(x) * count\n\n\n","after":null,"SubmissionTime":"2016-02-15T00:10:51.752599","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-15 00:11:09.539784","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    count = 1\n    for x in range(1, n):\n        y = term(x)\n    count = count + 1\n    return term(x) * count\n\n\n","after":null,"SubmissionTime":"2016-02-15T00:11:09.539784","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-15 00:11:27.928010","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    count = 1\n    for x in range(1, n):\n        y = term(x)\n    count = count + 2\n    return term(x) * count\n\n\n","after":null,"SubmissionTime":"2016-02-15T00:11:27.92801","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-15 00:12:05.469452","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    count = 1\n    for x in range(1, n):\n        y = term(x)\n    count = count * term(x)\n    return term(x) * count\n\n\n","after":null,"SubmissionTime":"2016-02-15T00:12:05.469452","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-15 00:13:42.538868","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    count = 1\n    for x in range(1, n):\n        y = term(x)\n    count = count + 1\n    return y * count\n\n\n","after":null,"SubmissionTime":"2016-02-15T00:13:42.538868","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-15 00:15:38.536492","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    count = 0\n    for x in range(1, n):\n        y = term(x)\n        count += x\n        print(count)\n\n    return y * count\n\n\n","after":null,"SubmissionTime":"2016-02-15T00:15:38.536492","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-15 00:16:10.412545","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    count = 0\n    for x in range(1, n):\n        y = term(x)\n        count += x\n    return y * count\n\n\n","after":null,"SubmissionTime":"2016-02-15T00:16:10.412545","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-15 00:16:30.678348","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    count = 1\n    for x in range(1, n):\n        y = term(x)\n        count += x\n    return y * count\n\n\n","after":null,"SubmissionTime":"2016-02-15T00:16:30.678348","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-15 00:16:49.817180","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    count = 0\n    for x in range(n):\n        y = term(x)\n        count += x\n    return y * count\n\n\n","after":null,"SubmissionTime":"2016-02-15T00:16:49.81718","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-15 00:17:35.763205","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    count = 0\n    for x in range(n):\n        y = term(x)\n        count += x\n        print(y)\n        print(count)\n    return y * count\n\n\n","after":null,"SubmissionTime":"2016-02-15T00:17:35.763205","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-15 00:17:55.908852","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    count = 0\n    for x in range(n):\n        y = term(x)\n        count += x\n        print(y)\n        print(count + 's')\n    return y * count\n\n\n","after":null,"SubmissionTime":"2016-02-15T00:17:55.908852","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-15 00:18:19.970187","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    count = 0\n    for x in range(n):\n        y = term(x)\n        count += x\n        print(y)\n        print('s')\n        print(count)\n    return y * count\n\n\n","after":null,"SubmissionTime":"2016-02-15T00:18:19.970187","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-15 00:18:55.021507","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    count = 0\n    for x in range(n):\n        y = term(x)\n        count += x\n        print(y)\n        print('y')\n        print(count)\n        print('count')\n    return y * count\n\n\n","after":null,"SubmissionTime":"2016-02-15T00:18:55.021507","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-15 00:19:21.853957","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    count = 0\n    for x in range(n):\n        y = term(x)\n        count += term(x)\n        print(y)\n        print('y')\n        print(count)\n        print('count')\n    return y * count\n\n\n","after":null,"SubmissionTime":"2016-02-15T00:19:21.853957","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-15 00:20:48.464951","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    count = 0\n    for x in range(n + 1):\n        y = term(x)\n        count += term(x)\n        print(y)\n        print('y')\n        print(count)\n        print('count')\n    return y * count\n\n\n","after":null,"SubmissionTime":"2016-02-15T00:20:48.464951","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-15 00:22:11.983958","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    count = 0\n    for x in range(n):\n        y = term(x)\n        count = count * term(x)\n        print(y)\n        print('y')\n        print(count)\n        print('count')\n    return count\n\n\n","after":null,"SubmissionTime":"2016-02-15T00:22:11.983958","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-15 00:22:27.483427","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    count = 1\n    for x in range(n):\n        y = term(x)\n        count = count * term(x)\n        print(y)\n        print('y')\n        print(count)\n        print('count')\n    return count\n\n\n","after":null,"SubmissionTime":"2016-02-15T00:22:27.483427","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-15 00:22:45.038759","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    count = 0\n    for x in range(1, n):\n        y = term(x)\n        count = count * term(x)\n        print(y)\n        print('y')\n        print(count)\n        print('count')\n    return count\n\n\n","after":null,"SubmissionTime":"2016-02-15T00:22:45.038759","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-15 00:22:52.259374","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    count = 1\n    for x in range(1, n):\n        y = term(x)\n        count = count * term(x)\n        print(y)\n        print('y')\n        print(count)\n        print('count')\n    return count\n\n\n","after":null,"SubmissionTime":"2016-02-15T00:22:52.259374","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":998,"date":"2016-02-15 00:23:32.213126","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    count = 1\n    for x in range(1, n + 1):\n        y = term(x)\n        count = count * term(x)\n        print(y)\n        print('y')\n        print(count)\n        print('count')\n    return count\n\n\n","after":null,"SubmissionTime":"2016-02-15T00:23:32.213126","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":494,"date":"2016-02-15 01:56:04.653795","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def adder(x, total):\n        if x == n:\n            return total\n        else:\n            return adder(x + 1, total + term(x))\n    return adder(0, 0)\n\n","after":null,"SubmissionTime":"2016-02-15T01:56:04.653795","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":494,"date":"2016-02-15 01:56:58.543671","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def adder(x, total):\n        if x > n:\n            return total\n        else:\n            return adder(x + 1, total + term(x))\n    return adder(1, 0)\n\n","after":null,"SubmissionTime":"2016-02-15T01:56:58.543671","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":494,"date":"2016-02-15 01:57:42.827255","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def multiplier(x, total):\n        if x > n:\n            return total\n        else:\n            return adder(x + 1, total * term(x))\n    return multiplier(1, 0)\n\n","after":null,"SubmissionTime":"2016-02-15T01:57:42.827255","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":494,"date":"2016-02-15 01:57:58.152893","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def multiplier(x, total):\n        if x > n:\n            return total\n        else:\n            return multiplier(x + 1, total * term(x))\n    return multiplier(1, 0)\n\n","after":null,"SubmissionTime":"2016-02-15T01:57:58.152893","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":759,"date":"2016-02-15 02:00:18.512716","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    sumofproducts = 0\n    i = 1\n    while i < n:\n        sumofproducts += term(i)\n        i += 1\n    return sumofproducts\n\n","after":null,"SubmissionTime":"2016-02-15T02:00:18.512716","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":759,"date":"2016-02-15 02:01:00.467340","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    sumofproducts = 0\n    i = 1\n    while i <= n:\n        sumofproducts += term(i)\n        i += 1\n    return sumofproducts\n\n","after":null,"SubmissionTime":"2016-02-15T02:01:00.46734","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":759,"date":"2016-02-15 02:02:46.758076","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    sumofproducts = 0\n    i = 1\n    while i <= n:\n        sumofproducts *= term(i)\n        i += 1\n    return sumofproducts\n\n","after":null,"SubmissionTime":"2016-02-15T02:02:46.758076","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":851,"date":"2016-02-15 09:05:55.119143","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a = 1\n    while a <= n:\n        a += 1\n        return identity(n)\n\n","after":null,"SubmissionTime":"2016-02-15T09:05:55.119143","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":851,"date":"2016-02-15 09:07:21.152241","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a = 1\n    while a <= n:\n        a += 1\n        return n * product(n - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-15T09:07:21.152241","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":851,"date":"2016-02-15 09:09:03.462557","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a = 1\n    final = 1\n    while a <= n:\n        a += 1\n        final * term(a, 1)\n        final += 1\n    return final\n\n","after":null,"SubmissionTime":"2016-02-15T09:09:03.462557","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":851,"date":"2016-02-15 09:09:14.233442","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a = 1\n    final = 1\n    while a <= n:\n        a += 1\n        final += 1\n        final * term(a, 1)\n    return final\n\n","after":null,"SubmissionTime":"2016-02-15T09:09:14.233442","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":851,"date":"2016-02-15 09:09:44.295862","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a = 1\n    final = 1\n    while a <= n:\n        a += 1\n        final += 1\n        final * term(a)\n    return final\n\n","after":null,"SubmissionTime":"2016-02-15T09:09:44.295862","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":851,"date":"2016-02-15 09:10:29.083272","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a = 1\n    final = 1\n    while a <= n:\n        a += 1\n        final = a + 1\n        final * term(a)\n    return final\n\n","after":null,"SubmissionTime":"2016-02-15T09:10:29.083272","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":851,"date":"2016-02-15 09:10:43.174237","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a = 1\n    final = 1\n    while a <= n:\n        a += 1\n        final = a + 1\n        final * term(a, 1)\n    return final\n\n","after":null,"SubmissionTime":"2016-02-15T09:10:43.174237","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":851,"date":"2016-02-15 09:12:29.263710","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a = 1\n    final = 1\n    while a <= n:\n        a += 1\n        final * term(a)\n        final = a + 1\n    return final\n\n","after":null,"SubmissionTime":"2016-02-15T09:12:29.26371","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":851,"date":"2016-02-15 09:14:29.237928","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a = 1\n    final = 1\n    while a <= n:\n        final * term(a)\n        a += 1\n        final = a + 1\n    return final\n\n","after":null,"SubmissionTime":"2016-02-15T09:14:29.237928","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":851,"date":"2016-02-15 09:15:28.813515","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a = 1\n    final = 1\n    while a <= n:\n        final = a + 1\n        a += 1\n        final * term(a)\n    return final\n\n","after":null,"SubmissionTime":"2016-02-15T09:15:28.813515","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":851,"date":"2016-02-15 09:16:11.116201","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a = 1\n    final = 1\n    while a <= n:\n        a += 1\n        final * term(a)\n    return final\n\n","after":null,"SubmissionTime":"2016-02-15T09:16:11.116201","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":851,"date":"2016-02-15 09:16:37.487856","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a = 1\n    final = 1\n    while a <= n:\n        a += 1\n        final *= term(a)\n    return final\n\n","after":null,"SubmissionTime":"2016-02-15T09:16:37.487856","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 09:40:15.137168","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = 0\n    if n < 1:\n        return 0\n    else:\n        return term(n) * term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T09:40:15.137168","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 09:41:00.210797","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = 0\n    if n < 1:\n        return 0\n    else:\n        return term(n) * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-15T09:41:00.210797","SynthesizedAfter":"\r\ndef product(n, term):\r\n    k = 0\r\n    if n<1:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, LeafConstNode(ConstantExpressionNode-1), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 09:42:30.127085","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = 0\n    if n < 1:\n        return 0\n    else:\n        return term(n) * term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-15T09:42:30.127085","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 09:42:51.712154","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = 0\n    if n < 1:\n        return 0\n    else:\n        print(term(n) * term(n-1))\n\n","after":null,"SubmissionTime":"2016-02-15T09:42:51.712154","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 09:44:18.606353","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = 0\n    if n < 1:\n        return 0\n    else:\n        print(term(n) * product(n-1,term))\n\n","after":null,"SubmissionTime":"2016-02-15T09:44:18.606353","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 09:44:52.240562","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = 0\n    if n < 1:\n        return 0\n    else:\n        return term(n) * product(n-1,term)\n\n","after":null,"SubmissionTime":"2016-02-15T09:44:52.240562","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 09:44:52.240562","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = 0\n    if n < 1:\n        return 0\n    else:\n        return term(n) * product(n-1,term)\n\n","after":null,"SubmissionTime":"2016-02-15T09:44:52.240562","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 09:53:23.319292","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        m = term(n) * product(n-1, term)\n        print(m)\n        return m\n\n","after":null,"SubmissionTime":"2016-02-15T09:53:23.319292","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 09:54:03.267233","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        print(term(m))\n        m = term(n) * product(n-1, term)\n        print(m)\n        return m\n\n","after":null,"SubmissionTime":"2016-02-15T09:54:03.267233","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":358,"date":"2016-02-15 10:14:48.627289","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n <= 0:\n        return 0\n    else:\n        return term(n) * product(n, term(n-1))\n\n","after":null,"SubmissionTime":"2016-02-15T10:14:48.627289","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":358,"date":"2016-02-15 10:15:55.600142","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n <= 0:\n        return 0\n    else:\n        return term(n) * product(n-1, term())\n\n","after":null,"SubmissionTime":"2016-02-15T10:15:55.600142","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":358,"date":"2016-02-15 10:16:06.491310","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n <= 0:\n        return 0\n    else:\n        return term(n) * product(n-1, term(n))\n\n","after":null,"SubmissionTime":"2016-02-15T10:16:06.49131","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":358,"date":"2016-02-15 10:16:19.887758","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n <= 0:\n        return 0\n    else:\n        return term(n) * product(n-1, term(n-1))\n\n","after":null,"SubmissionTime":"2016-02-15T10:16:19.887758","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":358,"date":"2016-02-15 10:16:38.129266","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n <= 0:\n        return 0\n    else:\n        return term(n) * product(n-1, term(*args))\n\n","after":null,"SubmissionTime":"2016-02-15T10:16:38.129266","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":358,"date":"2016-02-15 10:17:00.765317","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n <= 0:\n        return 0\n    else:\n        return term(n) * product(n-1, term(x))\n\n","after":null,"SubmissionTime":"2016-02-15T10:17:00.765317","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":358,"date":"2016-02-15 10:17:08.854436","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n <= 0:\n        return 0\n    else:\n        return term(n) * product(n-1, term(n))\n\n","after":null,"SubmissionTime":"2016-02-15T10:17:08.854436","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":358,"date":"2016-02-15 10:17:17.237844","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n <= 0:\n        return 0\n    else:\n        return term(n) * product(n-1, term(n-1))\n\n","after":null,"SubmissionTime":"2016-02-15T10:17:17.237844","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":358,"date":"2016-02-15 10:19:19.735893","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n <= 0:\n        return 0\n    else:\n        return term(n) * product(n, term(n-1))\n\n","after":null,"SubmissionTime":"2016-02-15T10:19:19.735893","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":358,"date":"2016-02-15 10:19:45.357964","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n <= 0:\n        return 0\n    else:\n        return term(n) * int(product(n, term(n-1)))\n\n","after":null,"SubmissionTime":"2016-02-15T10:19:45.357964","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":358,"date":"2016-02-15 10:20:12.254328","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return term(n) * product(n, term(n-1))\n\n","after":null,"SubmissionTime":"2016-02-15T10:20:12.254328","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":358,"date":"2016-02-15 10:20:21.447250","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return term(n) * product(n, term(n-1))\n\n","after":null,"SubmissionTime":"2016-02-15T10:20:21.44725","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":358,"date":"2016-02-15 10:26:25.738110","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, sum = 1, 0\n    while k <= N:\n        sum, k = sum*f(k), k+1\n    return sum\n\n\n","after":null,"SubmissionTime":"2016-02-15T10:26:25.73811","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":358,"date":"2016-02-15 10:26:36.291603","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, sum = 1, 0\n    while k <= n:\n        sum, k = sum*f(k), k+1\n    return sum\n\n\n","after":null,"SubmissionTime":"2016-02-15T10:26:36.291603","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":358,"date":"2016-02-15 10:26:45.499132","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, sum = 1, 0\n    while k <= n:\n        sum, k = sum*term(k), k+1\n    return sum\n\n\n","after":null,"SubmissionTime":"2016-02-15T10:26:45.499132","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":236,"date":"2016-02-15 12:04:52.852606","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0,1\n    while k <= n:\n        total, k = total + term(k), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T12:04:52.852606","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":236,"date":"2016-02-15 12:05:35.900580","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0,1\n    while k <= n:\n        total, k = total * term(k), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T12:05:35.90058","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":236,"date":"2016-02-15 12:07:03.316195","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0,1\n    while k <= n:\n        total, k = term(total), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T12:07:03.316195","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":236,"date":"2016-02-15 12:07:48.069830","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0,1\n    while k < n:\n        total, k = total * term(k), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T12:07:48.06983","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":236,"date":"2016-02-15 12:08:09.744799","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0,1\n    while k < n:\n        total, k = total + term(k), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T12:08:09.744799","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":236,"date":"2016-02-15 12:08:36.891379","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1,1\n    while k < n:\n        total, k = total * term(k), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T12:08:36.891379","SynthesizedAfter":"\r\ndef product(n, term):\r\n    total, k = 1, 1\r\n    while k<n:\r\n        total, k = total*term(k+1), k+1\r\n    return total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":236,"date":"2016-02-15 12:09:03.756347","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1,1\n    while k < n:\n        total, k = total + term(k), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T12:09:03.756347","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":787,"date":"2016-02-15 12:09:15.115677","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total , k = 0, 1\n    while k >= n:\n        total, k = total + term(k), k + 1\n        return total\n        \n\n\n","after":null,"SubmissionTime":"2016-02-15T12:09:15.115677","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":236,"date":"2016-02-15 12:09:57.723756","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1,1\n    while k < n:\n        total, k = total + term(k,1), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T12:09:57.723756","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":787,"date":"2016-02-15 12:11:23.985799","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total , k = 0, 1\n    while k >= n:\n        total, k = total + term(k), k + 1\n        return total\n\ndef identity(x):\n    return x\n\ndef square(x):\n    return x * x\n\n","after":null,"SubmissionTime":"2016-02-15T12:11:23.985799","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":236,"date":"2016-02-15 12:11:31.845437","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1, 1\n    while k < n:\n        total, k = total * term(k), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T12:11:31.845437","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":236,"date":"2016-02-15 12:11:41.055574","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, 1\n    while k < n:\n        total, k = total * term(k), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T12:11:41.055574","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-15 12:14:21.113657","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==0:\n        return 1\n    else:\n        return combiner(term(n), term(n-1))\n\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-15T12:14:21.113657","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":787,"date":"2016-02-15 12:14:43.117091","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total , k = 0, 1\n    while k >= n:\n        total, k = total * term(k), k + 1\n        return total\n\ndef identity(x):\n    return x\n\ndef square(x):\n    return x * x\n\n","after":null,"SubmissionTime":"2016-02-15T12:14:43.117091","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-15 12:17:21.193726","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==0:\n        return 1\n    else:\n        return identity(term(n), term(n-1))\n\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-15T12:17:21.193726","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-15 12:19:03.872370","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==0:\n        return 1\n    else:\n        return summation(term(n), term(n-1))\n\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-15T12:19:03.87237","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":399,"date":"2016-02-15 12:19:24.411866","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==0:\n        return 1\n    else:\n        return product(term(n), term(n-1))\n\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-15T12:19:24.411866","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":244,"date":"2016-02-15 12:39:31.924584","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total=1\n    def adder(n,total):\n        if n==0:\n            return 0\n        elif n==1:\n            return 1\n        else:\n            return product(n-1,total*n)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T12:39:31.924584","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":244,"date":"2016-02-15 12:45:22.171068","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def multiply(n,total):\n        if n==0:\n            return 0\n        elif n==1:\n            return 1\n        else:\n            return product(n-1,total*n)\n    return adder(n,total)\n\n","after":null,"SubmissionTime":"2016-02-15T12:45:22.171068","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":244,"date":"2016-02-15 12:45:37.490531","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def multiply(n,total):\n        if n==0:\n            return 0\n        elif n==1:\n            return 1\n        else:\n            return product(n-1,total*n)\n    return multiply(n,total)\n\n","after":null,"SubmissionTime":"2016-02-15T12:45:37.490531","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":244,"date":"2016-02-15 12:45:55.563175","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def multiply(n,total):\n        if n==0:\n            return 0\n        elif n==1:\n            return 1\n        else:\n            return product(n-1,total*n)\n    total=1\n    return multiply(n,total)\n\n","after":null,"SubmissionTime":"2016-02-15T12:45:55.563175","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":244,"date":"2016-02-15 12:46:29.636026","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def multiply(n,total):\n        if n==0:\n            return 0\n        elif n==1:\n            return 1\n        else:\n            return product(n-1,total*term(n))\n    total=1\n    return multiply(n,total)\n\n","after":null,"SubmissionTime":"2016-02-15T12:46:29.636026","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":456,"date":"2016-02-15 12:59:02.752004","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n* product(n-1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-15T12:59:02.752004","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==0:\r\n        return 0\r\n    elif n==1:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":1,"Id":0,"studentId":410,"date":"2016-02-15 13:24:00.260388","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-15T13:24:00.260388","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":787,"date":"2016-02-15 13:24:47.200018","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = 1\n    prod = 1\n\n    while k <= n:\n        prod = term(k) * prod\n        k += 1\n\n    return prod\n\ndef identity(x):\n    return\n\ndef square(x):\n    return x * x\n\n","after":null,"SubmissionTime":"2016-02-15T13:24:47.200018","SynthesizedAfter":"\r\ndef product(n, term):\r\n    k = 1\r\n    prod = 1\r\n    while k<=n:\r\n        prod = term(k)*prod\r\n        k += 1\r\n    return prod\r\ndef identity(x):\r\n    return \r\ndef square(x):\r\n    return x*x","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-term)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":787,"date":"2016-02-15 13:25:39.158517","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k = 1\n    product = 1\n\n    while k <= n:\n        product = term(k) * product\n        k += 1\n\n    return product\n\ndef identity(x):\n    return\n\ndef square(x):\n    return x * x\n\n","after":null,"SubmissionTime":"2016-02-15T13:25:39.158517","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":410,"date":"2016-02-15 13:26:02.245249","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    count = 0\n    final = 1\n    if count < n:\n        final*=term(n)\n        count+=1\n    return final\n\n","after":null,"SubmissionTime":"2016-02-15T13:26:02.245249","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":787,"date":"2016-02-15 13:26:16.521539","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    prod = 1\n\n    while i <= n:\n        prod = term(i) * prod\n        i += 1\n\n    return prod\n\ndef identity(x):\n    return\n\ndef square(x):\n    return x * x\n\n","after":null,"SubmissionTime":"2016-02-15T13:26:16.521539","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":787,"date":"2016-02-15 13:26:41.863903","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    product = 1\n\n    while i <= n:\n        product = term(i) * product\n        i += 1\n\n    return product\n\ndef identity(x):\n    return\n\ndef square(x):\n    return x * x\n\n","after":null,"SubmissionTime":"2016-02-15T13:26:41.863903","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":576,"date":"2016-02-15 13:37:58.643452","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, i = 1,0\n    while i<n:\n        total *= term(n)\n        i+=1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T13:37:58.643452","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":576,"date":"2016-02-15 13:38:45.905996","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, i = 1,0\n    while i<n:\n        total *= term(i)\n        i+=1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T13:38:45.905996","SynthesizedAfter":"\r\ndef product(n, term):\r\n    total, i = 1, 0\r\n    while i<n:\r\n        total *= term(i+1)\r\n        i += 1\r\n    return total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":410,"date":"2016-02-15 14:17:11.965431","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    count = 1\n    final = 1\n    if count < n+1:\n        final*=term(n)\n        count+=1\n        n+=1\n\n    return final\n\n","after":null,"SubmissionTime":"2016-02-15T14:17:11.965431","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":26,"date":"2016-02-15 14:17:44.726894","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==1:\n        return 1\n    else:\n        return n*product(n-1,identity)\n\n","after":null,"SubmissionTime":"2016-02-15T14:17:44.726894","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":26,"date":"2016-02-15 14:19:36.290047","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==1:\n        return 1\n    else:\n        return n*product(n-1,term)\n\n","after":null,"SubmissionTime":"2016-02-15T14:19:36.290047","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":26,"date":"2016-02-15 14:20:15.017672","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==0:\n        return 0\n    else:\n        return n*product(n-1,term)\n\n","after":null,"SubmissionTime":"2016-02-15T14:20:15.017672","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":26,"date":"2016-02-15 14:20:15.017672","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==0:\n        return 0\n    else:\n        return n*product(n-1,term)\n\n","after":null,"SubmissionTime":"2016-02-15T14:20:15.017672","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":410,"date":"2016-02-15 14:20:20.962963","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    count = 1\n    final = 1\n    while count < n+1:\n        final*=term(n)\n        count+=1\n        n+=1\n\n    return final\n\n","after":null,"SubmissionTime":"2016-02-15T14:20:20.962963","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":410,"date":"2016-02-15 14:21:36.913154","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    count = 1\n    final = 1\n    while count < n+1:\n        final*=term(n)\n        count+=1\n        \n\n    return final\n\n","after":null,"SubmissionTime":"2016-02-15T14:21:36.913154","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":26,"date":"2016-02-15 14:26:03.096089","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    identity=True\n    square=False\n    if n==1:\n        return 1\n    else:\n        if term==True:\n            return n*product(n-1,identity)\n        else:\n            return (n**2)*product(n-1,square)\n\n","after":null,"SubmissionTime":"2016-02-15T14:26:03.096089","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":484,"date":"2016-02-15 14:54:48.720382","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    total = 1\n    c = 1\n    while k <= n:\n        total = total * term(k)\n        c = c + 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-15T14:54:48.720382","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":484,"date":"2016-02-15 14:54:57.215233","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    total = 1\n    c = 1\n    while c <= n:\n        total = total * term(k)\n        c = c + 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-15T14:54:57.215233","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":346,"date":"2016-02-15 14:55:37.781892","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n>0:\n        return term(n) * term(n-1) \n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-15T14:55:37.781892","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":346,"date":"2016-02-15 14:58:22.603304","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n>0:\n        return term(n) * product(n-1) \n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-15T14:58:22.603304","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":346,"date":"2016-02-15 14:58:33.860710","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n>0:\n        return term(n) * product(n-1, term) \n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-15T14:58:33.86071","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":346,"date":"2016-02-15 15:10:28.238397","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    product = 1\n    count = n\n    while count>0:\n        product *= term(n)\n        n -= 1\n    return product\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-15T15:10:28.238397","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1066,"date":"2016-02-15 15:11:41.570406","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    totalproduct, i = 0, 0\n    while i <= n - 1:\n        totalproduct, i = totalproduct * term(i), i + 1\n    return totalproduct\n\n","after":null,"SubmissionTime":"2016-02-15T15:11:41.570406","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1066,"date":"2016-02-15 15:12:43.881913","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    totalproduct, i = 1, 0\n    while i <= n - 1:\n        totalproduct, i = totalproduct * term(i), i + 1\n    return totalproduct\n\n","after":null,"SubmissionTime":"2016-02-15T15:12:43.881913","SynthesizedAfter":"\r\ndef product(n, term):\r\n    totalproduct, i = 1, 0\r\n    while i<=n-1:\r\n        totalproduct, i = totalproduct*term(i+1), i+1\r\n    return totalproduct","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":1066,"date":"2016-02-15 15:15:10.119251","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, i = 1, 1\n    while i <= n:\n        total = total * term(i)\n        i = i + 1\n    return totalproduct\n\n","after":null,"SubmissionTime":"2016-02-15T15:15:10.119251","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":515,"date":"2016-02-15 15:22:16.714246","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n: \n        total, k = total * term(k), k + 1\n        return total\n\n","after":null,"SubmissionTime":"2016-02-15T15:22:16.714246","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":515,"date":"2016-02-15 15:23:28.305540","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n: \n        total, k = total * term(k), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T15:23:28.30554","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":463,"date":"2016-02-15 15:31:12.713308","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    def product_maker(n, term, total):\n        if n > 0:\n            total = total * (term(n))\n            return product_maker(n-1, term, total)\n    product_maker(n,term, total)\n\n\n","after":null,"SubmissionTime":"2016-02-15T15:31:12.713308","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":463,"date":"2016-02-15 15:31:51.346503","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    def product_maker(n, term, total):\n        if n > 0:\n            total = total * (term(n))\n            return product_maker(n-1, term, total)\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-15T15:31:51.346503","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":105,"date":"2016-02-15 15:42:49.560158","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n==1:\n        return term(1)\n    else:\n        return n*product(n-1,term)\n\n","after":null,"SubmissionTime":"2016-02-15T15:42:49.560158","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return term(1)\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":632,"date":"2016-02-15 15:46:53.578675","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a, total = n, 0\n    while a < n:\n        a += 1\n        total += term(1)\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-15T15:46:53.578675","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":745,"date":"2016-02-15 15:47:08.858829","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0,1\n    while k <= n:\n        total, k = total * k , k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T15:47:08.858829","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":26,"date":"2016-02-15 15:49:39.091302","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n   \n    if n==1:\n        return 1\n    else:\n        return (n)*product(n-1,term)\n\n","after":null,"SubmissionTime":"2016-02-15T15:49:39.091302","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":632,"date":"2016-02-15 15:53:03.224392","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a, total = n, 1\n    while a < n:\n        total += term(a)\n        a += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-15T15:53:03.224392","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":632,"date":"2016-02-15 15:53:25.463972","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a, total = n, 1\n    while a < n:\n        total *= term(a)\n        a += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-15T15:53:25.463972","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":632,"date":"2016-02-15 15:53:41.093292","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a, total = 1, 0\n    while a < n:\n        total *= term(a)\n        a += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-15T15:53:41.093292","SynthesizedAfter":"\r\ndef product(n, term):\r\n    a, total = 1, 1\r\n    while a<=n:\r\n        total *= term(a)\r\n        a += 1\r\n    return total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":745,"date":"2016-02-15 15:55:11.208755","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0,1\n    while k <= n:\n        total, k = total * term(k) , k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T15:55:11.208755","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":632,"date":"2016-02-15 15:55:44.355400","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a, total = 1, 0\n    if a < n:\n        total *= term(a)\n        a += 1\n        return total\n    else:\n        return 1\n\n\n","after":null,"SubmissionTime":"2016-02-15T15:55:44.3554","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":632,"date":"2016-02-15 15:57:17.081180","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a, total = n, 1\n    if a > 1:\n        total *= term(a)\n        a -= 1\n        return product(n - 1, term)\n    else:\n        return 1\n\n\n","after":null,"SubmissionTime":"2016-02-15T15:57:17.08118","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":632,"date":"2016-02-15 15:57:43.588953","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a, total = n, 1\n    if a > 1:\n        total *= term(a)\n        return product(n - 1, term)\n    else:\n        return 1\n\n\n","after":null,"SubmissionTime":"2016-02-15T15:57:43.588953","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1021,"date":"2016-02-15 15:59:03.053370","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k, total = 1,1\n    while k <= n:\n        k, total = k+1, total*term(k,1)\n    return total \n\n","after":null,"SubmissionTime":"2016-02-15T15:59:03.05337","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":632,"date":"2016-02-15 15:59:11.726888","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a, total = n, 1\n    while a > 1:\n        total *= term(a)\n        return product(n - 1, term) * total\n\n\n","after":null,"SubmissionTime":"2016-02-15T15:59:11.726888","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":632,"date":"2016-02-15 16:00:17.997224","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a, total = n, 1\n    while a > 1:\n        total *= term(a)\n    return product(n - 1, term) * total\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:00:17.997224","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":632,"date":"2016-02-15 16:00:17.997224","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a, total = n, 1\n    while a > 1:\n        total *= term(a)\n    return product(n - 1, term) * total\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:00:17.997224","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":632,"date":"2016-02-15 16:00:35.392245","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a, total = n, 1\n    while a > 1:\n        total *= term(a)\n        a -= 1\n    return product(n - 1, term) * total\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:00:35.392245","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":632,"date":"2016-02-15 16:00:46.692805","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a, total = n, 1\n    while a > 1:\n        total *= term(a)\n        a -= 1\n        return product(n - 1, term) * total\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:00:46.692805","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":632,"date":"2016-02-15 16:02:32.312540","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a, total = n, 1\n    while a > 1:\n        total *= term(a)\n        a -= 1\n        return product(a - 1, term) * total\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:02:32.31254","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":632,"date":"2016-02-15 16:03:35.665994","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a, b = n, 1\n    while a > 1:\n        b *= term(a)\n        a -= 1\n        return product(a - 1, term) * b\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:03:35.665994","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":542,"date":"2016-02-15 16:09:18.650044","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * term(n)\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:09:18.650044","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":542,"date":"2016-02-15 16:10:02.248640","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * term(n - 1)\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:10:02.24864","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":185,"date":"2016-02-15 16:10:10.045609","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    total = 0\n    while i <= n:\n        total += term(i)\n        i+=1\n    return total \n\n","after":null,"SubmissionTime":"2016-02-15T16:10:10.045609","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":542,"date":"2016-02-15 16:10:34.780817","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * product(n - 1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:10:34.780817","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":185,"date":"2016-02-15 16:11:24.394658","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    total = 0\n    while i <= n:\n        total *= term(i)\n        i+=1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T16:11:24.394658","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":632,"date":"2016-02-15 16:14:03.519396","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    a, b = n, 1\n    while a > 1:\n        total *= term(a)\n        a -= 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-15T16:14:03.519396","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":44,"date":"2016-02-15 16:26:42.611010","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-15T16:26:42.61101","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":512,"date":"2016-02-15 16:52:37.027556","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total=1\n    for i in range (1,n):\n        a=term(i)\n        total=total*a\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T16:52:37.027556","SynthesizedAfter":"\r\ndef product(n, term):\r\n    total = 1\r\n    for i in range(1, n):\r\n        a = term(i+1)\r\n        total = total*a\r\n    return total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":512,"date":"2016-02-15 16:57:31.847664","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total=1\n    i=1\n    while i <= n:\n        a=term(i)\n        total=total*a\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T16:57:31.847664","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":923,"date":"2016-02-15 17:00:36.054461","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 0:\n        return term(n) * term(n-1)\n    else:\n        return term(n)\n\n","after":null,"SubmissionTime":"2016-02-15T17:00:36.054461","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":923,"date":"2016-02-15 17:01:33.679789","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 0:\n        return term(n) * product(n-1)\n    else:\n        return term(n)\n\n","after":null,"SubmissionTime":"2016-02-15T17:01:33.679789","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":923,"date":"2016-02-15 17:01:49.904416","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 0:\n        return term(n) * product(n-1, term)\n    else:\n        return term(n)\n\n","after":null,"SubmissionTime":"2016-02-15T17:01:49.904416","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n>0:\r\n        return term(n)*product(n-1, term)\r\n    else:\r\n        return term(n+1)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":923,"date":"2016-02-15 17:02:57.730148","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 0:\n        return term(n) * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-15T17:02:57.730148","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":923,"date":"2016-02-15 17:03:48.082563","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 0:\n        return product(n-1, term) * term(n)\n\n","after":null,"SubmissionTime":"2016-02-15T17:03:48.082563","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":923,"date":"2016-02-15 17:07:05.916712","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 1:\n        return product(n-1, term) * term(n)\n\n","after":null,"SubmissionTime":"2016-02-15T17:07:05.916712","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":923,"date":"2016-02-15 17:07:37.149148","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 0:\n        term = term(n)\n        return product(n-1, term) * term\n\n","after":null,"SubmissionTime":"2016-02-15T17:07:37.149148","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":923,"date":"2016-02-15 17:07:50.474706","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 0:\n        term = term(n)\n        return product(n-1, term) * term(n)\n\n","after":null,"SubmissionTime":"2016-02-15T17:07:50.474706","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":923,"date":"2016-02-15 17:10:08.556682","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, total = 1, 0\n    while k < n:\n        k += 1\n        total += term(n)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T17:10:08.556682","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":923,"date":"2016-02-15 17:10:32.357669","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, total = 1, 1\n    while k < n:\n        k += 1\n        total = total * term(n)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T17:10:32.357669","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":923,"date":"2016-02-15 17:11:04.507833","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, total = 0, 1\n    while k < n:\n        k += 1\n        total = total * term(n)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T17:11:04.507833","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":923,"date":"2016-02-15 17:11:19.040169","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, total = 2, 1\n    while k < n:\n        k += 1\n        total = total * term(n)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T17:11:19.040169","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":923,"date":"2016-02-15 17:11:28.667502","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, total = 1, 1\n    while k < n:\n        k += 1\n        total = total * term(n)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T17:11:28.667502","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":923,"date":"2016-02-15 17:13:10.776554","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, total = 0, 1\n    while k < n:\n        n -= 1\n        total = total * term(n)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T17:13:10.776554","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":923,"date":"2016-02-15 17:13:24.141269","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, total = 1, 1\n    while k < n:\n        n -= 1\n        total = total * term(n)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T17:13:24.141269","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":210,"date":"2016-02-15 17:24:03.130213","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    prod == 1\n    while k < n:\n        prod *= term(n)\n    return prod\n    prod += 1\n\n\n","after":null,"SubmissionTime":"2016-02-15T17:24:03.130213","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":210,"date":"2016-02-15 17:25:10.915716","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    prod = 1\n    while k < n:\n        prod *= term(n)\n    return prod\n    prod += 1\n\n\n","after":null,"SubmissionTime":"2016-02-15T17:25:10.915716","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":210,"date":"2016-02-15 17:25:44.789985","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    prod = 1\n    k = 1\n    while k < n:\n        prod *= term(n)\n    return prod\n    prod += 1\n\n\n","after":null,"SubmissionTime":"2016-02-15T17:25:44.789985","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":210,"date":"2016-02-15 17:26:04.877080","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    prod = 1\n    k = 1\n    while k < n:\n        prod *= term(n)\n        k += 1\n    return prod\n    prod += 1\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T17:26:04.87708","SynthesizedAfter":"\r\ndef product(n, term):\r\n    prod = 1\r\n    k = 1\r\n    while k<=n:\r\n        prod *= term(k)\r\n        k += 1\r\n    return prod\r\n    prod += 1","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThanOrEqual, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-LessThan, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-k)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":210,"date":"2016-02-15 17:34:13.197468","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    summed = 1\n    k = 1\n    while k < n:\n        summed *= term(k)\n        k += 1\n    return summed\n\n","after":null,"SubmissionTime":"2016-02-15T17:34:13.197468","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":210,"date":"2016-02-15 17:36:56.903853","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    summed = 1\n    k = 1\n    while k <= n:\n        summed *= term(k)\n        increment(k)\n    return summed\n\n","after":null,"SubmissionTime":"2016-02-15T17:36:56.903853","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":110,"date":"2016-02-15 17:38:54.569617","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==0:\n        return\n    else:\n        return term(n)*product(n-1,term)\n\n","after":null,"SubmissionTime":"2016-02-15T17:38:54.569617","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Equals, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, LeafConstNode(ConstantExpressionNode-1), 0), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChild(Target(LeafWildcard(\"ReturnStatementNode\")))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":110,"date":"2016-02-15 17:40:52.546294","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==0:\n        return\n    else:\n        return int(term(n))*product(n-1,term)\n\n","after":null,"SubmissionTime":"2016-02-15T17:40:52.546294","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1001,"date":"2016-02-15 17:42:22.040193","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    step == 1\n    for step in range(1, n+1):\n        total *= term(step)\n    return total\n\n    return total\n","after":null,"SubmissionTime":"2016-02-15T17:42:22.040193","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1001,"date":"2016-02-15 17:42:22.040193","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    step == 1\n    for step in range(1, n+1):\n        total *= term(step)\n    return total\n\n    return total\n","after":null,"SubmissionTime":"2016-02-15T17:42:22.040193","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1001,"date":"2016-02-15 17:44:21.129170","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total == 1\n    for i in range(1, n+1):\n        total *= term(i)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T17:44:21.12917","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":896,"date":"2016-02-15 17:45:00.511695","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return product_helper(n,term,1)\n    def product_helper(x,termx,k):\n        if k==n:\n            return termx(x)\n        return termx(k)*product_helper(x,termx,k+1)\n\n\n","after":null,"SubmissionTime":"2016-02-15T17:45:00.511695","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":33,"date":"2016-02-15 17:49:57.371773","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, 1\n    while k <= n:\n        total, k = total * k, k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T17:49:57.371773","SynthesizedAfter":"\r\ndef product(n, term):\r\n    total, k = 1, 1\r\n    while k<=n:\r\n        total, k = total*term(k), k+1\r\n    return total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), Tutor.synthesis.MagicK)))))), 1), Selected(\\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChild(Node(BinaryExpressionNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":33,"date":"2016-02-15 17:50:55.551566","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, term\n    while k <= n:\n        total, k = total * k, k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T17:50:55.551566","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":642,"date":"2016-02-15 17:55:25.210326","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==1:\n        return 1\n    else:\n        return term(n)*term(n-1)\n        n+=1\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T17:55:25.210326","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)\r\n        n += 1","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":33,"date":"2016-02-15 17:55:26.648959","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, term\n    while k <= n:\n        total, k = total * (n-1), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T17:55:26.648959","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":33,"date":"2016-02-15 17:55:30.632996","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, term(n)\n    while k <= n:\n        total, k = total * (n-1), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T17:55:30.632996","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":291,"date":"2016-02-15 17:55:39.820280","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total * term(k), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T17:55:39.82028","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":725,"date":"2016-02-15 17:57:28.551922","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-15T17:57:28.551922","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":33,"date":"2016-02-15 17:58:12.814014","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if term == square(n):\n        term(n) == square(n)\n    elif term == triple(n):\n        term(n) == triple(n)\n    elif term == identity(n):\n        term(n) == identity(n)\n    else:\n        term(n) == increment(n)\n\n    total, k = 1, term(n)\n    while k <= n:\n        total, k = total * (n-1), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T17:58:12.814014","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":33,"date":"2016-02-15 17:58:27.431282","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if term == square(n):\n        term(n) == square(n)\n    elif term == triple(n):\n        term(n) == triple(n)\n    elif term == identity(n):\n        term(n) == identity(n)\n    else:\n        term(n) == increment(n)\n\n    total, k = 1, term(n)\n    while k <= n:\n        total, k = total * n, k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T17:58:27.431282","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":33,"date":"2016-02-15 17:58:27.431282","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if term == square(n):\n        term(n) == square(n)\n    elif term == triple(n):\n        term(n) == triple(n)\n    elif term == identity(n):\n        term(n) == identity(n)\n    else:\n        term(n) == increment(n)\n\n    total, k = 1, term(n)\n    while k <= n:\n        total, k = total * n, k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T17:58:27.431282","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":33,"date":"2016-02-15 17:58:35.991122","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if term == square(n):\n        term(n) == square(n)\n    elif term == triple(n):\n        term(n) == triple(n)\n    elif term == identity(n):\n        term(n) == identity(n)\n    else:\n        term(n) == increment(n)\n\n    total, k = 0, term(n)\n    while k <= n:\n        total, k = total * n, k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T17:58:35.991122","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":33,"date":"2016-02-15 18:03:19.208192","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if term == square:\n        term(n) == square(n)\n    elif term == triple:\n        term(n) == triple(n)\n    elif term == identity:\n        term(n) == identity(n)\n    else:\n        term(n) == increment(n)\n\n    total, k = 1, term(n)\n    while k <= n:\n        total, k = total * n, k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T18:03:19.208192","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":33,"date":"2016-02-15 18:06:11.797067","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if term == square:\n        term(n) == square(n)\n    elif term == triple:\n        term(n) == triple(n)\n    elif term == identity:\n        term(n) == identity(n)\n    else:\n        term(n) == increment(n)\n\n    total, k = 1, term(n)\n    while k <= n:\n        total, k = total * k, k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T18:06:11.797067","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":642,"date":"2016-02-15 18:08:22.997033","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==1:\n        return 1\n    else:\n        return (product(n-1))*(n)\n        n+=1\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T18:08:22.997033","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":131,"date":"2016-02-15 18:09:05.271737","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k, product = 1, 1\n    while k <= n:\n        product, k = product*(term-k), k+1\n    return product\n\n","after":null,"SubmissionTime":"2016-02-15T18:09:05.271737","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":642,"date":"2016-02-15 18:09:37.203914","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    while n>1:\n        return product(n-1)*n\n        n+=1\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T18:09:37.203914","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":642,"date":"2016-02-15 18:10:12.374774","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    while n>1:\n        return product(n-1, term)*n\n        n+=1\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T18:10:12.374774","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":33,"date":"2016-02-15 18:10:20.309430","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    term = which_term(n)\n    total, k = 1, which_term(n)\n    while k <= n:\n        total, k = total * k, k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T18:10:20.30943","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":642,"date":"2016-02-15 18:10:46.883933","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==1:\n        return 1\n    else:\n        while n>1:\n            return product(n-1, term)*n\n            n+=1\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T18:10:46.883933","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":33,"date":"2016-02-15 18:10:58.246866","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    term == which_term(n)\n    total, k = 1, which_term(n)\n    while k <= n:\n        total, k = total * k, k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T18:10:58.246866","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":642,"date":"2016-02-15 18:11:21.107821","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==1:\n        return 1\n    else:\n        while n>1:\n            return product(n-1, term)*(n-1)\n            n+=1\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T18:11:21.107821","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":33,"date":"2016-02-15 18:11:23.696329","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    term == which_term(n)\n    total, k = 1, which_term(n)\n    while k <= n:\n        total, k = total * k, k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T18:11:23.696329","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":642,"date":"2016-02-15 18:11:39.375384","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==1:\n        return 1\n    else:\n        while n>1:\n            return product(n-1, term-1)*(n-1)\n            n+=1\n            term+=1\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T18:11:39.375384","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":131,"date":"2016-02-15 18:11:47.294120","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k, product = 1, 1\n    while k <= n:\n        product, k = product*(term-f(k)), k+1\n    return product\n\n","after":null,"SubmissionTime":"2016-02-15T18:11:47.29412","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":33,"date":"2016-02-15 18:12:00.661523","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    term == which_term(n)\n    total, k = 1, term(n)\n    while k <= n:\n        total, k = total * k, k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T18:12:00.661523","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":793,"date":"2016-02-15 18:14:05.484992","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def power(x,n):\n        total, k = 1, 0\n        while k <= n:\n            total, k = total * x, k + 1\n        return total\n\n","after":null,"SubmissionTime":"2016-02-15T18:14:05.484992","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":33,"date":"2016-02-15 18:14:22.433974","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def which_term(n):\n        if which_term == square:\n            which_term(n) == square(n)\n        elif which_term == triple:\n            which_term(n) == triple(n)\n        elif which_term == identity:\n            which_term(n) == identity(n)\n        else:\n            which_term(n) == increment(n)\n    term == which_term(n)\n    total, k = 1, term(n)\n    while k <= n:\n        total, k = total * k, k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T18:14:22.433974","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":642,"date":"2016-02-15 18:14:34.591229","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, product = 1, 0\n    while k<=n:\n        product=product*k\n        k+=1\n    return product\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T18:14:34.591229","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":642,"date":"2016-02-15 18:14:55.714893","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, product = 1, 0\n    while k<=n:\n        product=product*term\n        k+=1\n    return product\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T18:14:55.714893","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":642,"date":"2016-02-15 18:15:10.355304","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, product = 0, 0\n    while k<=n:\n        product=product*term\n        k+=1\n    return product\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T18:15:10.355304","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":33,"date":"2016-02-15 18:15:16.590348","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def term(n):\n        if term == square:\n            term(n) == square(n)\n        elif term == triple:\n            term(n) == triple(n)\n        elif term == identity:\n            term(n) == identity(n)\n        else:\n            term(n) == increment(n)\n            \n    total, k = 1, term(n)\n    while k <= n:\n        total, k = total * k, k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T18:15:16.590348","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":642,"date":"2016-02-15 18:15:36.462451","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, product = 1, 1\n    while k<=n:\n        product=product*term\n        k+=1\n    return product\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T18:15:36.462451","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":33,"date":"2016-02-15 18:15:45.681553","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def term():\n        if term == square:\n            term() == square(n)\n        elif term == triple:\n            term() == triple(n)\n        elif term == identity:\n            term() == identity(n)\n        else:\n            term() == increment(n)\n\n    total, k = 1, term()\n    while k <= n:\n        total, k = total * k, k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T18:15:45.681553","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":642,"date":"2016-02-15 18:15:54.291659","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, product = 1, 1\n    while k<=n:\n        product=product*term(n)\n        k+=1\n    return product\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T18:15:54.291659","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":33,"date":"2016-02-15 18:16:19.170282","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def which_term(n):\n        if which_term == square:\n            which_term(n) == square(n)\n        elif which_term == triple:\n            which_term(n) == triple(n)\n        elif which_term == identity:\n            which_term(n) == identity(n)\n        else:\n            which_term(n) == increment(n)\n    term(n) == which_term(n)\n    total, k = 1, term(n)\n    while k <= n:\n        total, k = total * k, k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T18:16:19.170282","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":33,"date":"2016-02-15 18:17:31.202403","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def which_term(i):\n        if which_term == square:\n            which_term(i) == square(n)\n        elif which_term == triple:\n            which_term(i) == triple(n)\n        elif which_term == identity:\n            which_term(i) == identity(n)\n        else:\n            which_term(i) == increment(n)\n    term == which_term(i)\n    total, k = 1, term(n)\n    while k <= n:\n        total, k = total * k, k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T18:17:31.202403","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":33,"date":"2016-02-15 18:18:29.582177","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def which_term(i):\n        if which_term == square:\n            which_term(n) == square(n)\n        elif which_term == triple:\n            which_term(n) == triple(n)\n        elif which_term == identity:\n            which_term(n) == identity(n)\n        else:\n            which_term(n) == increment(n)\n    term == which_term(n)\n    total, k = 1, term\n    while k <= n:\n        total, k = total * k, k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T18:18:29.582177","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":291,"date":"2016-02-15 18:19:47.590427","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1\n    while k <= n:\n        total, k = total * term(k), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T18:19:47.590427","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":33,"date":"2016-02-15 18:22:41.037643","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def which_term(term):\n        if term == identity:\n            product(n, term) == product(n, identity)\n        else:\n            product(n, term) == product(n, square)\n\n    total, k = 1, which_term(term)\n    while k <= n:\n        total, k = total * k, k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T18:22:41.037643","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":287,"date":"2016-02-15 18:28:17.232112","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-15T18:28:17.232112","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":287,"date":"2016-02-15 18:30:22.550685","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, product = 1, 0\n    while k <= n:\n        product, k = (product*term(k)), k+1\n    return product\n\n","after":null,"SubmissionTime":"2016-02-15T18:30:22.550685","SynthesizedAfter":"\r\ndef product(n, term):\r\n    k, product = 1, 1\r\n    while k<=n:\r\n        product, k = (product*term(k)), k+1\r\n    return product","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":33,"date":"2016-02-15 18:30:41.863626","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    product(n, term) == product(n, which_term(n))\n\n    total, k = 1, 1\n    while k <= n:\n        total, k = total * k, k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T18:30:41.863626","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":291,"date":"2016-02-15 18:32:36.891688","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total * term(k), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T18:32:36.891688","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":291,"date":"2016-02-15 18:33:14.784825","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + term(k), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T18:33:14.784825","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":291,"date":"2016-02-15 18:44:31.699034","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total * k, k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T18:44:31.699034","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":725,"date":"2016-02-15 19:02:04.666782","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    counter=1\n    listen = []\n    while counter>0:\n        counter-=1\n        x = term(n)\n        listen.append(x)\n    product = 1\n    for x in listen:\n        product *= x\n    return product\n\n","after":null,"SubmissionTime":"2016-02-15T19:02:04.666782","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":725,"date":"2016-02-15 19:03:06.412039","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    counter=1\n    listen = []\n    while counter>0:\n        counter-=1\n        x = term(n)\n        listen.append(x)\n    product = 1\n    for x in list:\n        product *= x\n    return product\n\n","after":null,"SubmissionTime":"2016-02-15T19:03:06.412039","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":725,"date":"2016-02-15 19:04:13.363477","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    counter=n\n    listen = []\n    while counter>0:\n        counter-=1\n        x = term(n)\n        listen.append(x)\n    product = 1\n    for x in listen:\n        product *= x\n    return product\n\n","after":null,"SubmissionTime":"2016-02-15T19:04:13.363477","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":235,"date":"2016-02-15 19:29:34.564060","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def mult_up(i):\n        if(i==n):\n            return term(n)\n        return term(i) + mult_up(i+1)\n\n    return mult_up(1)\n\n","after":null,"SubmissionTime":"2016-02-15T19:29:34.56406","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":291,"date":"2016-02-15 19:30:43.404629","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0\n    while k <= n:\n        total, k = total * term(k), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T19:30:43.404629","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":291,"date":"2016-02-15 19:38:35.043701","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1\n    while k <= n:\n        total, k = total * term(k), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T19:38:35.043701","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":164,"date":"2016-02-15 19:46:04.453710","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    def f(x):\n        if n == 1:\n            return product(n,term)\n        else:\n            return product(n-1, term)\n\n\n    return f(n) + product(n-1, term)\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-15T19:46:04.45371","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":291,"date":"2016-02-15 19:49:09.685239","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total\n    k = 0, 1\n    while k <= n:\n        total, k = total * term(k), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T19:49:09.685239","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":164,"date":"2016-02-15 19:49:32.677970","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    def f(x):\n        if n == 1:\n            return product(n,term)\n        else:\n            return product(n-1, term)\n\n    if n ==1:\n        return f(n) \n    elif n > 1:\n        return f(n) + product(n-1, term)\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-15T19:49:32.67797","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":291,"date":"2016-02-15 19:49:56.636831","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    k = 0, 1\n    while k <= n:\n        total, k = total * term(k), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T19:49:56.636831","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":164,"date":"2016-02-15 19:50:45.889498","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    def f(x):\n        if n == 1:\n            return product(n,term(n))\n        else:\n            return product(n-1, term(n))\n\n    if n ==1:\n        return f(n) \n    elif n > 1:\n        return f(n) + product(n-1, term(n))\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-15T19:50:45.889498","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":164,"date":"2016-02-15 19:52:42.743443","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    def f(x):\n        if n == 1:\n            return product(n, term)\n        else:\n            return product(n-1, term)\n\n    if n ==1:\n        return f(n) \n    elif n > 1:\n        return f(n) \n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-15T19:52:42.743443","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":164,"date":"2016-02-15 19:53:55.320346","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    if n ==1:\n        return product(n, term)\n    elif n > 1:\n        return product(n-1, term) \n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-15T19:53:55.320346","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":164,"date":"2016-02-15 19:54:46.131565","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    if n ==1:\n        return product(n, term)\n    elif n > 1:\n        return product(n, term) + product(n-1, term)\n\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-15T19:54:46.131565","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":164,"date":"2016-02-15 19:57:33.941441","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    if n ==1:\n        return product(n, term)\n    else:\n        return product(n, term) + product(n-1, term)\n\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-15T19:57:33.941441","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":164,"date":"2016-02-15 19:57:43.006753","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    if n ==1:\n        return product(n, term)\n    else:\n        return product(n, term) + product(n+1, term)\n\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-15T19:57:43.006753","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":164,"date":"2016-02-15 19:58:12.688864","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    if n == 0:\n        return product(n, term)\n    else:\n        return product(n, term) + product(n-1, term)\n\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-15T19:58:12.688864","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":164,"date":"2016-02-15 19:59:38.593458","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    if n == 1:\n        return term(n)\n    else:\n        return product(n, term) + product(n-1, term)\n\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-15T19:59:38.593458","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":164,"date":"2016-02-15 20:00:16.523814","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    if n == 0:\n        return product(n, term)\n    else:\n        return product(n, term) + product(n-1, term)\n\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-15T20:00:16.523814","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":164,"date":"2016-02-15 20:00:44.032491","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    if n == 0:\n        return product(n, term)\n    else:\n        return product(n, term) * product(n-1, term)\n\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-15T20:00:44.032491","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":164,"date":"2016-02-15 20:01:25.205355","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    if n == 1:\n        return product(n, term)\n    else:\n        print (product(n, term))\n        return product(n, term) * product(n-1, term)\n\n\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-15T20:01:25.205355","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":164,"date":"2016-02-15 20:02:32.608986","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    if n == 1:\n        print (product(n, term))\n        return product(n, term)\n    else:\n        print (product(n, term))\n        return product(n, term) * product(n-1, term)\n\n\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-15T20:02:32.608986","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":164,"date":"2016-02-15 20:03:07.749624","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    if n == 1:\n\n        return term(n)\n    else:\n        print (product(n, term))\n        return product(n, term) * product(n-1, term)\n\n\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-15T20:03:07.749624","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":291,"date":"2016-02-15 20:06:00.896084","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = (total + 1) * term(k), k + 1\n\n","after":null,"SubmissionTime":"2016-02-15T20:06:00.896084","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":681,"date":"2016-02-15 20:10:07.562017","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return term(n) * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-15T20:10:07.562017","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n>0:\r\n        return term(n)*product(n-1, term)\r\n    else:\r\n        return 1","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-GreaterThan, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), Tutor.synthesis.MagicK)))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))), 1), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-product, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-product, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":681,"date":"2016-02-15 20:10:07.562017","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return term(n) * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-15T20:10:07.562017","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":291,"date":"2016-02-15 20:10:11.344932","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = (total + 1) *  term(k), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T20:10:11.344932","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":291,"date":"2016-02-15 20:10:57.578704","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = (total + 1) * term(k), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T20:10:57.578704","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":681,"date":"2016-02-15 20:18:19.240684","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n    \treturn product(1, term)\n    else: \n    \treturn term(n) * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-15T20:18:19.240684","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":1015,"date":"2016-02-15 20:24:09.269306","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    product=1\n    for i in term[0:n]:\n        product=product*term(i)\n    return product\n\n","after":null,"SubmissionTime":"2016-02-15T20:24:09.269306","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":1015,"date":"2016-02-15 20:24:09.269306","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    product=1\n    for i in term[0:n]:\n        product=product*term(i)\n    return product\n\n","after":null,"SubmissionTime":"2016-02-15T20:24:09.269306","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":793,"date":"2016-02-15 20:24:39.488588","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, 0\n    while k <= n:\n        total, k = total * x, k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T20:24:39.488588","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":1015,"date":"2016-02-15 20:25:18.548005","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    product=1\n    for i in range[0:n]:\n        product=product*term(i)\n    return product\n\n","after":null,"SubmissionTime":"2016-02-15T20:25:18.548005","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":291,"date":"2016-02-15 20:26:07.826445","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    k = 0\n    while k <= n:\n        total = k + 1\n        k = (total + 1) * term(k)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T20:26:07.826445","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":793,"date":"2016-02-15 20:26:22.480481","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, 0\n    while k <= n:\n        total, k = total * k, k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T20:26:22.480481","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":793,"date":"2016-02-15 20:26:50.064416","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, 0\n    while k <= n:\n        total, k = total * k+1, k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T20:26:50.064416","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":1015,"date":"2016-02-15 20:27:31.525306","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    product=1\n    for i in list(range[0:n]):\n        product=product*term(i)\n    return product\n\n","after":null,"SubmissionTime":"2016-02-15T20:27:31.525306","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":688,"date":"2016-02-15 20:28:24.987200","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k = n\n    if k == 1:\n        return 1\n    elif k == n:\n        return n\n    return k * product (k-1)\n\n","after":null,"SubmissionTime":"2016-02-15T20:28:24.9872","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":688,"date":"2016-02-15 20:28:24.987200","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k = n\n    if k == 1:\n        return 1\n    elif k == n:\n        return n\n    return k * product (k-1)\n\n","after":null,"SubmissionTime":"2016-02-15T20:28:24.9872","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1015,"date":"2016-02-15 20:28:44.917030","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    product=1\n    for i in range(0,n):\n        product=product*term(i)\n    return product\n\n","after":null,"SubmissionTime":"2016-02-15T20:28:44.91703","SynthesizedAfter":"\r\ndef product(n, term):\r\n    product = 1\r\n    for i in range(0, n):\r\n        product = product*term(i+1)\r\n    return product","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":1015,"date":"2016-02-15 20:28:44.917030","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    product=1\n    for i in range(0,n):\n        product=product*term(i)\n    return product\n\n","after":null,"SubmissionTime":"2016-02-15T20:28:44.91703","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1015,"date":"2016-02-15 20:29:02.835866","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    product=1\n    for i in range(1,n):\n        product=product*term(i)\n    return product\n\n","after":null,"SubmissionTime":"2016-02-15T20:29:02.835866","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":688,"date":"2016-02-15 20:29:21.213416","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k = n\n    if k == 1:\n        return 1\n    elif k == n:\n        return n\n    return term(k * product (k-1))\n\n","after":null,"SubmissionTime":"2016-02-15T20:29:21.213416","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":793,"date":"2016-02-15 20:29:27.946322","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, 0\n    while k <= n:\n        total, k = total + 3, k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T20:29:27.946322","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":688,"date":"2016-02-15 20:29:44.987776","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k = 1\n    if k == 1:\n        return 1\n    elif k == n:\n        return n\n    return term(k * product (k-1))\n\n","after":null,"SubmissionTime":"2016-02-15T20:29:44.987776","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":793,"date":"2016-02-15 20:29:51.013784","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, 0\n    while k <= n:\n        total, k = total + 3 * k, k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T20:29:51.013784","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":688,"date":"2016-02-15 20:30:03.902858","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k = 1\n    if k == n:\n        return n\n    return term(k * product (k+1))\n\n","after":null,"SubmissionTime":"2016-02-15T20:30:03.902858","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":793,"date":"2016-02-15 20:30:37.480053","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, 0\n    while k <= n:\n        total, k = total + 3 * n, k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T20:30:37.480053","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":688,"date":"2016-02-15 20:30:39.695905","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k = 1\n    if k == n:\n        return n\n    return term(k * product(k+1))\n\n","after":null,"SubmissionTime":"2016-02-15T20:30:39.695905","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":688,"date":"2016-02-15 20:32:16.307431","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k = 1\n    if k == n:\n        return n\n    return term(k * product(k+1,term))\n\n","after":null,"SubmissionTime":"2016-02-15T20:32:16.307431","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":291,"date":"2016-02-15 20:33:48.280660","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = (total + 1) *  term(k), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T20:33:48.28066","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":688,"date":"2016-02-15 20:35:23.395132","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k = 1\n    def helper(n):\n        if k == n:\n            return n\n        return term(k * product(k+1,term))\n\n","after":null,"SubmissionTime":"2016-02-15T20:35:23.395132","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":688,"date":"2016-02-15 20:36:03.204409","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k = 1\n    def helper(n, term):\n        if k == n:\n            return n\n        return term(k * product(k+1,term))\n    return helper(n, term)\n\n","after":null,"SubmissionTime":"2016-02-15T20:36:03.204409","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":793,"date":"2016-02-15 20:36:06.570666","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, 0\n    while k <= n:\n        total, k = total + term(k), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T20:36:06.570666","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":688,"date":"2016-02-15 20:36:45.224812","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    while k < n:\n        return 1 * k\n        k += 1\n\n","after":null,"SubmissionTime":"2016-02-15T20:36:45.224812","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":688,"date":"2016-02-15 20:37:13.139409","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    while k < n:\n        return term(1 * k)\n        k += 1\n\n","after":null,"SubmissionTime":"2016-02-15T20:37:13.139409","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":793,"date":"2016-02-15 20:37:13.322000","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, 0\n    while k <= n:\n        total, k = total + term(k), k\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T20:37:13.322","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":688,"date":"2016-02-15 20:37:23.471000","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k = 1\n    while k < n:\n        return term(1 * k)\n        k += 1\n\n","after":null,"SubmissionTime":"2016-02-15T20:37:23.471","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":291,"date":"2016-02-15 20:37:35.149403","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = (total + 1) * term(k)\n        k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T20:37:35.149403","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":688,"date":"2016-02-15 20:37:39.666926","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k = 0\n    while k < n:\n        k += 1\n        return term(1 * k)\n\n\n","after":null,"SubmissionTime":"2016-02-15T20:37:39.666926","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":688,"date":"2016-02-15 20:40:05.207251","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k = 0\n    while k < n:\n        return term(1 * k)\n    k += 1\n\n\n","after":null,"SubmissionTime":"2016-02-15T20:40:05.207251","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":343,"date":"2016-02-15 20:40:10.572652","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if term == identity:\n        for i in range(1,n):\n            return n*(n-i)\n    if term == square:\n        for i in range(1,n):\n            return (n*n)*((n-i)*(n-i))\n\n\n","after":null,"SubmissionTime":"2016-02-15T20:40:10.572652","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1057,"date":"2016-02-15 20:40:20.025441","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return n\n    else:\n        return term(n) * term(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-15T20:40:20.025441","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return n\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":1057,"date":"2016-02-15 20:40:57.173152","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return n\n    else:\n        return term(n) * product(n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-15T20:40:57.173152","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":793,"date":"2016-02-15 20:41:10.557339","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, 0\n    while k <= n:\n        total, k = total + term(k), k + 1\n    return total\n\n    def product(x):\n        return x**2\n\n","after":null,"SubmissionTime":"2016-02-15T20:41:10.557339","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":688,"date":"2016-02-15 20:41:49.410211","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k = 1\n    while k < n:\n        total = 1 * k\n    return term (total)\n\n\n","after":null,"SubmissionTime":"2016-02-15T20:41:49.410211","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":793,"date":"2016-02-15 20:42:14.504768","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, 0\n    while k <= n:\n        total, k = total + term(k), k + 1\n    return total\n\n    def product(x):\n        return k**2\n\n","after":null,"SubmissionTime":"2016-02-15T20:42:14.504768","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":688,"date":"2016-02-15 20:42:33.613739","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k = 1\n    while k < n:\n        total = 1 * k\n        k += 1\n    return term(total)\n\n\n","after":null,"SubmissionTime":"2016-02-15T20:42:33.613739","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":793,"date":"2016-02-15 20:42:34.508184","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, 0\n    while k <= n:\n        total, k = total + term(k), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T20:42:34.508184","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":688,"date":"2016-02-15 20:42:45.219403","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k = 1\n    while k <= n:\n        total = 1 * k\n        k += 1\n    return term(total)\n\n\n","after":null,"SubmissionTime":"2016-02-15T20:42:45.219403","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":793,"date":"2016-02-15 20:43:02.887094","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, 0\n    while k <= n:\n        total, k = total + term(3), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T20:43:02.887094","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":793,"date":"2016-02-15 20:43:15.031344","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, 0\n    while k <= n:\n        total, k = total + term(k), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T20:43:15.031344","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":793,"date":"2016-02-15 20:44:16.786623","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, 0\n    while k <= n:\n        total, k = total + term(k), k + 1\n    return total\n\n    def square(x):\n        return x * x\n","after":null,"SubmissionTime":"2016-02-15T20:44:16.786623","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":688,"date":"2016-02-15 20:44:37.145805","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k = term (k)\n    total = 1\n    while k <= n:\n        total = total * k\n        k += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-15T20:44:37.145805","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":793,"date":"2016-02-15 20:44:54.672457","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, 0\n    while k <= 3:\n        total, k = total + term(k), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T20:44:54.672457","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":688,"date":"2016-02-15 20:44:55.288842","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k = term (1)\n    total = 1\n    while k <= n:\n        total = total * k\n        k += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-15T20:44:55.288842","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":291,"date":"2016-02-15 20:46:44.027230","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = (total + 1) * term(k), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T20:46:44.02723","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":291,"date":"2016-02-15 20:47:57.023046","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 0\n    while k <= n:\n        total, k = (total + 1) * term(k), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T20:47:57.023046","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":793,"date":"2016-02-15 20:48:14.595892","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, 0\n    while k <= n:\n        total, k = total + term(k), k + 1\n    return total\n\n    def square(x):\n        return x**2\n\n    result = square(3)\n\n","after":null,"SubmissionTime":"2016-02-15T20:48:14.595892","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":457,"date":"2016-02-15 20:48:54.550664","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 0\n    while i <= n:\n        return term(i) * product(i+1, term)\n\n","after":null,"SubmissionTime":"2016-02-15T20:48:54.550664","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":793,"date":"2016-02-15 20:49:44.640265","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, 0\n    while k <= n:\n        total, k = total + term(k), k + 1\n    return total\n\n    def square(x):\n        return x*x\n\n    def sum_square(n):\n        return product(n, term)\n\n    result = sum_square(3)\n\n","after":null,"SubmissionTime":"2016-02-15T20:49:44.640265","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":557,"date":"2016-02-15 20:55:22.411703","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n    \treturn term(n)\n    else:\n    \treturn product(n - 1) * term(n)\n\n","after":null,"SubmissionTime":"2016-02-15T20:55:22.411703","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":793,"date":"2016-02-15 20:56:53.043842","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 1, 0\n    while k == 3:\n        total, k = total + term(k), k + 1\n    return total\n\n    def square(x):\n        return x*x\n\n    def sum_square(n):\n        return product(n, term)\n\n    result = sum_square(3)\n\n","after":null,"SubmissionTime":"2016-02-15T20:56:53.043842","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":793,"date":"2016-02-15 20:57:10.546746","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0\n    while k == 3:\n        total, k = total + term(k), k + 1\n    return total\n\n    def square(x):\n        return x*x\n\n    def sum_square(n):\n        return product(n, term)\n\n    result = sum_square(3)\n\n","after":null,"SubmissionTime":"2016-02-15T20:57:10.546746","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":793,"date":"2016-02-15 20:57:27.130422","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 3\n    while k == 3:\n        total, k = total + term(k), k + 1\n    return total\n\n    def square(x):\n        return x*x\n\n    def sum_square(n):\n        return product(n, term)\n\n    result = sum_square(3)\n\n","after":null,"SubmissionTime":"2016-02-15T20:57:27.130422","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":793,"date":"2016-02-15 20:58:09.201999","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + term(k), k + 1\n    return total\n\n    def square(x):\n        return x*x\n\n    def sum_square(n):\n        return product(n, term)\n\n    result = sum_square(3)\n\n","after":null,"SubmissionTime":"2016-02-15T20:58:09.201999","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":688,"date":"2016-02-15 20:58:44.992299","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k = 1\n    k = term(k)\n    total = 1\n    while k <= n:\n        total = total * k\n        k += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T20:58:44.992299","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":409,"date":"2016-02-15 21:00:30.539119","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return term(n) * product(n - 1, term)\n    \n\n","after":null,"SubmissionTime":"2016-02-15T21:00:30.539119","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n>0:\r\n        return term(n)*product(n-1, term)\r\n    else:\r\n        return 1","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-GreaterThan, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), Tutor.synthesis.MagicK)))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))), 1), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-product, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-product, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":793,"date":"2016-02-15 21:04:55.448596","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + term(k), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T21:04:55.448596","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":793,"date":"2016-02-15 21:09:12.901280","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + k*k, k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T21:09:12.90128","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":793,"date":"2016-02-15 21:09:25.498048","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + term(k), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T21:09:25.498048","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":789,"date":"2016-02-15 21:10:51.675517","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    # result, k = 1, 1   \n    # while k <= n:\n    #     result, k = term(k) * result, k + 1  \n    # return result    \n\n    k = 1\n    result    \n    while k <= n:\n        result = term(k) * result \n        k = k + 1  \n    return result  \n\n","after":null,"SubmissionTime":"2016-02-15T21:10:51.675517","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":789,"date":"2016-02-15 21:11:05.425669","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    # result, k = 1, 1   \n    # while k <= n:\n    #     result, k = term(k) * result, k + 1  \n    # return result    \n\n    k = 1, result, 1    \n    while k <= n:\n        result = term(k) * result \n        k = k + 1  \n    return result  \n\n","after":null,"SubmissionTime":"2016-02-15T21:11:05.425669","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":793,"date":"2016-02-15 21:12:58.135455","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + k, k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T21:12:58.135455","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":789,"date":"2016-02-15 21:13:23.249457","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    x = 1\n    total = 1    \n    while x != n:\n        total = term(x) * total \n        x = x + 1  \n    return total  \n\n","after":null,"SubmissionTime":"2016-02-15T21:13:23.249457","SynthesizedAfter":"\r\ndef product(n, term):\r\n    x = 1\r\n    total = 1\r\n    while x!=n:\r\n        total = term(x+1)*total\r\n        x = x+1\r\n    return total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":793,"date":"2016-02-15 21:20:05.288621","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + term(k), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T21:20:05.288621","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":793,"date":"2016-02-15 21:25:08.460533","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + term * k, k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T21:25:08.460533","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":793,"date":"2016-02-15 21:25:22.617049","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + term(k), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T21:25:22.617049","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":793,"date":"2016-02-15 21:25:51.701370","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + term(n), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T21:25:51.70137","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":793,"date":"2016-02-15 21:25:58.212729","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + term(k), k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T21:25:58.212729","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":652,"date":"2016-02-15 21:35:04.361045","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    total = 1\n    while i <= n:\n        total = total * term(i)\n        i = i+1\n\n","after":null,"SubmissionTime":"2016-02-15T21:35:04.361045","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":652,"date":"2016-02-15 21:39:31.591330","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return term(1)\n    else:\n        return term(n) * term(n-1)\n\n\n    \"\"\" without recursion\n    i = 1\n    total = 1\n    while i <= n:\n        total = total * term(i)\n        i = i+1\n    return total\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-15T21:39:31.59133","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==0:\r\n        return 0\r\n    elif n==1:\r\n        return term(1)\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":244,"date":"2016-02-15 21:40:17.837550","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total=1\n    def multiply(n,total):\n        if n==0:\n            return 0\n        elif n==1:\n            return 1\n        else:\n            return total*product(n-1,term(n))\n\n","after":null,"SubmissionTime":"2016-02-15T21:40:17.83755","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":652,"date":"2016-02-15 21:40:26.827489","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(1)\n    else:\n        return term(n) * term(n-1)\n\n\n    \"\"\" without recursion\n    i = 1\n    total = 1\n    while i <= n:\n        total = total * term(i)\n        i = i+1\n    return total\n    \"\"\"\n\n","after":null,"SubmissionTime":"2016-02-15T21:40:26.827489","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":244,"date":"2016-02-15 21:41:12.546885","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total=1\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return total*product(n-1,term(n))\n\n","after":null,"SubmissionTime":"2016-02-15T21:41:12.546885","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":244,"date":"2016-02-15 21:41:52.061040","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def multiply(n,total):\n        if n==0:\n            return 0\n        elif n==1:\n            return 1\n        else:\n            return multiply(n-1,total*term(n))\n    total=1\n    return multiply(n,total)\n\n","after":null,"SubmissionTime":"2016-02-15T21:41:52.06104","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":945,"date":"2016-02-15 21:43:12.054087","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    x = 1\n    while not x > n:\n        total += term(x)\n        x += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T21:43:12.054087","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":793,"date":"2016-02-15 21:45:37.614125","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\ndef identity(k):\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + term(k), k + 1\n    return total\n\ndef square(x):\n    total, k = 0, 1\n    while k<= n:\n        total, k = total + k**2, k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T21:45:37.614125","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":793,"date":"2016-02-15 21:45:37.614125","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\ndef identity(k):\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + term(k), k + 1\n    return total\n\ndef square(x):\n    total, k = 0, 1\n    while k<= n:\n        total, k = total + k**2, k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T21:45:37.614125","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":945,"date":"2016-02-15 21:47:33.376652","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    x = 1\n    while not x > n:\n        total *= term(x)\n        x += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T21:47:33.376652","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":945,"date":"2016-02-15 21:48:04.651326","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    x = 1\n    while not x > n:\n        total = total * term(x)\n        x += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T21:48:04.651326","SynthesizedAfter":"\r\ndef product(n, term):\r\n    total = 1\r\n    x = 1\r\n    while not x>n:\r\n        total = term(x)*total\r\n        x += 1\r\n    return total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-total), 1), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":457,"date":"2016-02-15 21:49:04.925448","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i == 1\n    \n    while i < n:\n        return term(i) * product(i+1, term)\n\n","after":null,"SubmissionTime":"2016-02-15T21:49:04.925448","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":793,"date":"2016-02-15 21:51:48.005242","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + term(k), k + 1\n    return total\n\ndef identity(x):\n    return x\n\ndef sum_product(n):\n    return summation(n, identity)\n\n","after":null,"SubmissionTime":"2016-02-15T21:51:48.005242","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1024,"date":"2016-02-15 22:02:23.092768","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total = total + term(k)\n        k = k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T22:02:23.092768","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1024,"date":"2016-02-15 22:02:23.092768","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total = total + term(k)\n        k = k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T22:02:23.092768","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1024,"date":"2016-02-15 22:03:07.471572","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total = total * term(k)\n        k = k + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T22:03:07.471572","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 22:12:17.580564","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        print(term(m))\n        m = term(n) * product(n-1, term)\n        print(m)\n        return m\n\n","after":null,"SubmissionTime":"2016-02-15T22:12:17.580564","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 22:12:36.488787","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        print(term(n))\n        m = term(n) * product(n-1, term)\n        print(m)\n        return m\n\n","after":null,"SubmissionTime":"2016-02-15T22:12:36.488787","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 22:13:15.039427","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        print(term(n))\n        m = term(n) * product(n-1, term)\n\n        return m\n\n","after":null,"SubmissionTime":"2016-02-15T22:13:15.039427","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 22:14:05.759983","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        print(term(n))\n        m = term(n) * term(n-1)\n        print (m)\n        return m\n\n","after":null,"SubmissionTime":"2016-02-15T22:14:05.759983","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 22:14:22.437192","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n #       print(term(n))\n        m = term(n) * term(n-1)\n#        print (m)\n        return m\n\n","after":null,"SubmissionTime":"2016-02-15T22:14:22.437192","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 22:14:22.437192","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n #       print(term(n))\n        m = term(n) * term(n-1)\n#        print (m)\n        return m\n\n","after":null,"SubmissionTime":"2016-02-15T22:14:22.437192","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 22:15:14.390558","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        print(term(n))\n        m = term(n) * term(n-1)\n        print (m)\n        return m\n\n","after":null,"SubmissionTime":"2016-02-15T22:15:14.390558","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 22:15:14.390558","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        print(term(n))\n        m = term(n) * term(n-1)\n        print (m)\n        return m\n\n","after":null,"SubmissionTime":"2016-02-15T22:15:14.390558","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 22:15:31.429238","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n\n        m = term(n) * term(n-1)\n        print (m)\n        return m\n\n","after":null,"SubmissionTime":"2016-02-15T22:15:31.429238","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":244,"date":"2016-02-15 22:16:20.834093","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total=1\n    def multiply(n,total,term):\n        if n==0:\n            return 0\n        elif n==1:\n            return 1\n        else:\n            return multiply(n-1,total*term(n),term)\n    return multiply(n,total)\n\n","after":null,"SubmissionTime":"2016-02-15T22:16:20.834093","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 22:16:32.362207","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        print(n)\n        m = term(n) * term(n-1)\n        print (m)\n\n        return m\n\n","after":null,"SubmissionTime":"2016-02-15T22:16:32.362207","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":244,"date":"2016-02-15 22:16:40.356144","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total=1\n    def multiply(n,total,term):\n        if n==0:\n            return 0\n        elif n==1:\n            return 1\n        else:\n            return multiply(n-1,total*term(n),term)\n    return multiply(n,total,term)\n\n","after":null,"SubmissionTime":"2016-02-15T22:16:40.356144","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 22:16:51.231660","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        print(n)\n        m = term(n) * term(n-1)\n\n\n        return m\n\n","after":null,"SubmissionTime":"2016-02-15T22:16:51.23166","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 22:16:51.231660","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        print(n)\n        m = term(n) * term(n-1)\n\n\n        return m\n\n","after":null,"SubmissionTime":"2016-02-15T22:16:51.23166","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 22:17:10.049605","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        print(n)\n        m = term(n) * term(n-1)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T22:17:10.049605","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 22:17:57.279719","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        print(n)\n        m = term(n) * term(n-1)\n        n = n - 1\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T22:17:57.279719","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 22:17:57.279719","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        print(n)\n        m = term(n) * term(n-1)\n        n = n - 1\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T22:17:57.279719","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 22:18:16.521324","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        print(n)\n        m = term(n) * product(n-1,term)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T22:18:16.521324","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 22:18:16.521324","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        print(n)\n        m = term(n) * product(n-1,term)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T22:18:16.521324","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 22:18:16.521324","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        print(n)\n        m = term(n) * product(n-1,term)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T22:18:16.521324","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 22:18:46.327714","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        print(n)\n        m = term(n) * product(n-1,term)\n        return m\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T22:18:46.327714","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 22:19:01.081881","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        m = term(n) * product(n-1,term)\n        return m\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T22:19:01.081881","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 22:19:24.061852","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        m = term(n) * product(n-1,term)\n        return m\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T22:19:24.061852","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 22:19:24.061852","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        m = term(n) * product(n-1,term)\n        return m\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T22:19:24.061852","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 22:20:35.923438","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        print(n)\n        m = term(n) * product(n-1,term)\n        return m\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T22:20:35.923438","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 22:21:15.098677","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        print(n)\n        if n > 0:\n            m = term(n) * product(n-1,term)\n            return m\n        else:\n            return m\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T22:21:15.098677","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 22:21:15.098677","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        print(n)\n        if n > 0:\n            m = term(n) * product(n-1,term)\n            return m\n        else:\n            return m\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T22:21:15.098677","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 22:21:34.101304","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n\n        if n > 0:\n            m = term(n) * product(n-1,term)\n            return m\n        else:\n            return m\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T22:21:34.101304","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 22:21:45.816865","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n\n        if n > 0:\n            m = term(n) * product(n-1,term)\n            return m\n        else:\n            return m\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T22:21:45.816865","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 22:21:52.950364","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        print(n)\n        if n > 0:\n            m = term(n) * product(n-1,term)\n            return m\n        else:\n            return m\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T22:21:52.950364","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 22:21:52.950364","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        print(n)\n        if n > 0:\n            m = term(n) * product(n-1,term)\n            return m\n        else:\n            return m\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T22:21:52.950364","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 22:22:53.199290","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        print(n)\n        m = term(n) * product(n-1,term)\n        return m\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T22:22:53.19929","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 22:22:53.199290","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        print(n)\n        m = term(n) * product(n-1,term)\n        return m\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T22:22:53.19929","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":244,"date":"2016-02-15 22:24:48.278023","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total=1\n    def multiply(n,total,term):\n        if n==0:\n            return 0\n        elif n<1:\n            return 1\n        else:\n            return multiply(n-1,total*term(n),term)\n    return multiply(n,total,term)\n\n","after":null,"SubmissionTime":"2016-02-15T22:24:48.278023","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 22:25:21.949024","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 0:\n        print(n)\n        m = term(1) * product(n+1,term)\n        return m\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T22:25:21.949024","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 22:25:21.949024","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 0:\n        print(n)\n        m = term(1) * product(n+1,term)\n        return m\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T22:25:21.949024","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 22:27:58.886144","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i == 0\n    if i <= n:\n        i += 1\n        print(i)\n        return term(i) * product(i+1,term)\n    else: \n        return 0\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T22:27:58.886144","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 22:28:13.183638","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 0\n    if i <= n:\n        i += 1\n        print(i)\n        return term(i) * product(i+1,term)\n    else: \n        return 0\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T22:28:13.183638","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 22:28:56.557182","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 0\n    if i <= n:\n        i += 1\n        return term(i) * product(i+1,term)\n    else: \n        return 0\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T22:28:56.557182","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 22:29:32.879704","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        print(n)\n        m = term(n) * product(n-1,term)\n        return m\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T22:29:32.879704","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 22:29:32.879704","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        print(n)\n        m = term(n) * product(n-1,term)\n        return m\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T22:29:32.879704","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 22:30:34.970474","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        print(n)\n        m = term(1) * product(n-1,term)\n        n = n - 1\n        return m\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T22:30:34.970474","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 22:30:45.746776","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        print(n)\n        m = term(1) * product(n-1,term)\n        return m\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T22:30:45.746776","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 22:31:43.430036","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3 \n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        print(n)\n        m = term(n) * product(n-1,term)\n        return m\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T22:31:43.430036","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":404,"date":"2016-02-15 22:34:29.997270","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return term(factorial(n))\n\n","after":null,"SubmissionTime":"2016-02-15T22:34:29.99727","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":12,"date":"2016-02-15 22:34:45.862975","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3 \n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n <= 0:\n        return 0\n    else:\n        print(n)\n        return term(n) * product(n-1,term)\n\n\n\n","after":null,"SubmissionTime":"2016-02-15T22:34:45.862975","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":628,"date":"2016-02-15 22:49:22.287446","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i == 0\n    def helper(n, term):\n        i +=1\n        if i<n:\n            return term(i) * helper(n, term)\n    return helper(n,term)\n\n","after":null,"SubmissionTime":"2016-02-15T22:49:22.287446","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":628,"date":"2016-02-15 22:50:13.471759","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 0\n    def helper(n, term):\n        i +=1\n        if i<n:\n            return term(i) * helper(n, term)\n    return helper(n,term)\n\n","after":null,"SubmissionTime":"2016-02-15T22:50:13.471759","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":628,"date":"2016-02-15 22:58:42.658032","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    def helper(i, total):\n        while i<n:\n            return helper(i+1, total*term(i))\n    helper(1,0)\n\n","after":null,"SubmissionTime":"2016-02-15T22:58:42.658032","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":628,"date":"2016-02-15 22:59:01.270236","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    def helper(i, total):\n        if i<n:\n            return helper(i+1, total*term(i))\n    helper(1,0)\n\n","after":null,"SubmissionTime":"2016-02-15T22:59:01.270236","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":628,"date":"2016-02-15 22:59:23.656751","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    def helper(i, total):\n        if i<n:\n            return helper(i+1, total*term(i))\n        else:\n            return total\n    helper(1,0)\n\n","after":null,"SubmissionTime":"2016-02-15T22:59:23.656751","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":628,"date":"2016-02-15 23:00:46.099500","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    total = 1\n    while i < n:\n        total = total * term(i)\n        i +=1\n    return total\n    \"\"\"def helper(i, total):\n        if i<n:\n            return helper(i+1, total*term(i))\n        else:\n            return total\n    helper(1,0)\"\"\"\n\n","after":null,"SubmissionTime":"2016-02-15T23:00:46.0995","SynthesizedAfter":"\r\ndef product(n, term):\r\n    i = 1\r\n    total = 1\r\n    while i<n:\r\n        total = total*term(i+1)\r\n        i += 1\r\n    return total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":628,"date":"2016-02-15 23:01:12.415881","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 0\n    total = 1\n    while i < n:\n        total = total * term(i)\n        i +=1\n    return total\n    \"\"\"def helper(i, total):\n        if i<n:\n            return helper(i+1, total*term(i))\n        else:\n            return total\n    helper(1,0)\"\"\"\n\n","after":null,"SubmissionTime":"2016-02-15T23:01:12.415881","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":628,"date":"2016-02-15 23:02:07.092464","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    total = 1\n    while i != n:\n        total = total * term(i)\n        i +=1\n    return total\n    \"\"\"def helper(i, total):\n        if i<n:\n            return helper(i+1, total*term(i))\n        else:\n            return total\n    helper(1,0)\"\"\"\n\n","after":null,"SubmissionTime":"2016-02-15T23:02:07.092464","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":36,"date":"2016-02-15 23:25:38.555130","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    i = 1\n    while i <= n:\n        total = total * term(i)\n        i += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T23:25:38.55513","SynthesizedAfter":"\r\ndef product(n, term):\r\n    total = 1\r\n    i = 1\r\n    while i<=n:\r\n        total = term(i)*total\r\n        i += 1\r\n    return total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-total), 1), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":36,"date":"2016-02-15 23:27:34.960787","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    i = 1\n    while i <= n:\n        total *= i * term(i)\n        i += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-15T23:27:34.960787","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":303,"date":"2016-02-15 23:34:00.028810","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==1:\n        return term(n)\n    else:\n        return term(n-1)*term(n)\n\n","after":null,"SubmissionTime":"2016-02-15T23:34:00.02881","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":303,"date":"2016-02-15 23:35:37.168306","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==1:\n        return term(n)\n    else:\n        return product(n-1)*term(n)\n\n","after":null,"SubmissionTime":"2016-02-15T23:35:37.168306","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":33,"date":"2016-02-16 00:49:37.790425","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if term == identity(n):\n        total, k = 1, 1\n        while k <= n:\n            total, k = total * k, k + 1\n        return total\n    else:\n        total, k = 1, 1\n        while k <= n:\n            total, k = total * k, k + 1\n        return total\n\n\n","after":null,"SubmissionTime":"2016-02-16T00:49:37.790425","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":33,"date":"2016-02-16 00:50:41.492707","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if term == identity(n):\n        total, k = 1, 1\n        while k <= n:\n            total, k = total * k, k + 1\n        return total\n    elif term == square(n):\n        total, k = 1, 1\n        while k <= n:\n            total, k = total * k**2, k + 1\n        return total\n\n\n","after":null,"SubmissionTime":"2016-02-16T00:50:41.492707","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":33,"date":"2016-02-16 00:51:04.306810","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if term == identity(n):\n        total, k = 1, 1\n        while k <= n:\n            total, k = total * k, k + 1\n        return total\n    else:\n        total, k = 1, 1\n        while k <= n:\n            total, k = total * (k*k), k + 1\n        return total\n\n\n","after":null,"SubmissionTime":"2016-02-16T00:51:04.30681","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":231,"date":"2016-02-16 01:10:51.780746","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    t, i = 0, 1\n    while i <= n:\n        t += term(i)\n        i += 1\n    return t\n\n","after":null,"SubmissionTime":"2016-02-16T01:10:51.780746","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":369,"date":"2016-02-16 06:16:01.488531","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if not n:\n        return term(1)\n    else:\n        return term(n) * term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T06:16:01.488531","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if not n:\r\n        return term(1)\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":127,"date":"2016-02-16 08:39:39.853014","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    x, total = 1, 1\n    if x <= n:\n        x, total = x + 1, total * term(x)\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-16T08:39:39.853014","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":127,"date":"2016-02-16 08:42:56.317454","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n    \n\n","after":null,"SubmissionTime":"2016-02-16T08:42:56.317454","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==0:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":127,"date":"2016-02-16 08:45:09.586071","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    if n == 0:\n        return 1\n    else:\n        return n * product(n - 1)\n    \n\n","after":null,"SubmissionTime":"2016-02-16T08:45:09.586071","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":127,"date":"2016-02-16 08:48:11.256010","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    if n == 0:\n        return 1\n    else:\n        return n * product(n - 1, term(n))\n    \n\n","after":null,"SubmissionTime":"2016-02-16T08:48:11.25601","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":127,"date":"2016-02-16 08:48:11.256010","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    if n == 0:\n        return 1\n    else:\n        return n * product(n - 1, term(n))\n    \n\n","after":null,"SubmissionTime":"2016-02-16T08:48:11.25601","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":127,"date":"2016-02-16 08:50:49.596484","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    x = 1\n    y = 1\n    while x <= n:\n        x = x + 1\n        y = y * term(x)\n    return y\n    \n\n","after":null,"SubmissionTime":"2016-02-16T08:50:49.596484","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":127,"date":"2016-02-16 08:54:38.681515","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    if n == 1:\n        return 1\n    else:\n        return n * product(n, term)\n    \n\n","after":null,"SubmissionTime":"2016-02-16T08:54:38.681515","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":127,"date":"2016-02-16 08:54:52.234277","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    if n == 1:\n        return 1\n    else:\n        return n * product(n - 1, term)\n    \n\n","after":null,"SubmissionTime":"2016-02-16T08:54:52.234277","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":127,"date":"2016-02-16 08:55:08.652962","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    if n == 1:\n        return 1\n    else:\n        return n * product(n - 1, term) * term(n)\n    \n\n","after":null,"SubmissionTime":"2016-02-16T08:55:08.652962","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":127,"date":"2016-02-16 08:56:09.395270","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    if n == 1:\n        return 1\n    elif term == square:\n        return n * product(n - 1, term) * term(n)\n    elif not term == square:\n        return n * product(n-1, term)\n    \n\n","after":null,"SubmissionTime":"2016-02-16T08:56:09.39527","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":127,"date":"2016-02-16 08:56:22.112825","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    if n == 1:\n        return 1\n    elif term == square:\n        return n * product(n - 1, term) * term(n)\n  \n    \n\n","after":null,"SubmissionTime":"2016-02-16T08:56:22.112825","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":701,"date":"2016-02-16 09:01:39.003856","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total,a = 1,1\n    while a == n:\n        total, a = term(a) * total, a + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-16T09:01:39.003856","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":701,"date":"2016-02-16 09:02:29.316208","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total,a = 1,1\n    while a and total == n:\n        total, a = term(a) * total, a + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-16T09:02:29.316208","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":701,"date":"2016-02-16 09:03:33.189565","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total,a = 1,1\n    while a == n and total == n:\n        total, a = term(a) * total, a + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-16T09:03:33.189565","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":127,"date":"2016-02-16 09:04:38.114877","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    if n == 1:\n        return 1\n    elif term == square:\n        return n * product(n - 1, term) * term(n)\n    else:\n        return n * product(n - 1, term)\n\n    \n\n","after":null,"SubmissionTime":"2016-02-16T09:04:38.114877","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":127,"date":"2016-02-16 09:05:22.301658","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    if n == 1:\n        return 1\n    elif term == square:\n        return n * product(n - 1, term) * term(n - 1)\n    else:\n        return n * product(n - 1, term)\n\n    \n\n","after":null,"SubmissionTime":"2016-02-16T09:05:22.301658","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":127,"date":"2016-02-16 09:06:20.558195","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    if n == 1:\n        return 1\n    elif term == square and n == 1:\n        return n * product(n - 1, term) * term(n)\n    elif term == square and not n == 1:\n        return n * product(n-1, term) * term(n-1)\n    else:\n        return n * product(n - 1, term)\n\n    \n\n","after":null,"SubmissionTime":"2016-02-16T09:06:20.558195","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":701,"date":"2016-02-16 09:06:28.084128","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total,a = 1,1\n    while a == n:\n        total, a = term(a) * total, a + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-16T09:06:28.084128","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":127,"date":"2016-02-16 09:06:38.494285","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    if n == 1:\n        return 1\n    elif term == square and n == 1:\n        return n * product(n - 1, term) * term(n)\n    elif term == square and not n == 1:\n        return n * product(n-1, term) * term(n-1) * term(n)\n    else:\n        return n * product(n - 1, term)\n\n    \n\n","after":null,"SubmissionTime":"2016-02-16T09:06:38.494285","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":701,"date":"2016-02-16 09:08:06.453197","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total,a = 1,1\n    while a != n:\n        total, a = term(a) * total, a + 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-16T09:08:06.453197","SynthesizedAfter":"\r\ndef product(n, term):\r\n    total, a = 1, 1\r\n    while a!=n:\r\n        total, a = term(a+1)*total, a+1\r\n    return total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":701,"date":"2016-02-16 09:09:49.412292","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total,a = 1,1\n    while a != n:\n        a, total = a+1 , term(a) * total\n    return total\n\n","after":null,"SubmissionTime":"2016-02-16T09:09:49.412292","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":701,"date":"2016-02-16 09:10:05.101060","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total,a = 1,1\n    while a < n:\n        a, total = a+1 , term(a) * total\n    return total\n\n","after":null,"SubmissionTime":"2016-02-16T09:10:05.10106","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":948,"date":"2016-02-16 09:34:35.281417","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    total = 0\n    while i<=n:\n        total += term(i)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-16T09:34:35.281417","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":948,"date":"2016-02-16 09:36:15.902417","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    total = 0\n    while i<=n:\n        total += term(i)\n        i+=1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-16T09:36:15.902417","SynthesizedAfter":"\r\ndef product(n, term):\r\n    i = 1\r\n    total = 1\r\n    while i<=n:\r\n        total *= term(i)\r\n        i += 1\r\n    return total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(AugmentedAssignStatementNode-Multiply, Children(ReferenceNode(node, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(SuiteStatementNode, TChildren(Target(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), TChild(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":831,"date":"2016-02-16 10:08:31.079503","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 0\n    return product((n-1),term) * n\n\n","after":null,"SubmissionTime":"2016-02-16T10:08:31.079503","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":831,"date":"2016-02-16 10:11:35.017024","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return 1\n    return n * product((n-1), term)\n\n","after":null,"SubmissionTime":"2016-02-16T10:11:35.017024","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":831,"date":"2016-02-16 10:12:27.746040","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(1)\n    return n * product((n-1), term)\n\n","after":null,"SubmissionTime":"2016-02-16T10:12:27.74604","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":49,"date":"2016-02-16 10:39:58.807372","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count = 1\n    value = 1\n    while count != n:\n        value *= term(count)\n        count += 1\n    return value\n\n\n","after":null,"SubmissionTime":"2016-02-16T10:39:58.807372","SynthesizedAfter":"\r\ndef product(n, term):\r\n    count = 1\r\n    value = 1\r\n    while count!=n:\r\n        value *= term(count+1)\r\n        count += 1\r\n    return value","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":1056,"date":"2016-02-16 10:45:00.324944","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    while n > 0:\n        total = total + term(n)\n        n -= 1\n    return total \n\n","after":null,"SubmissionTime":"2016-02-16T10:45:00.324944","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":278,"date":"2016-02-16 11:06:56.343887","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    sum = 0\n    while i < n:\n        sum = sum + term(1)\n        i += 1\n\n\n","after":null,"SubmissionTime":"2016-02-16T11:06:56.343887","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":278,"date":"2016-02-16 11:07:18.764527","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    sum = 0\n    while i < n:\n        sum = sum + term(1)\n        i += 1\n    return sum\n\n\n","after":null,"SubmissionTime":"2016-02-16T11:07:18.764527","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":278,"date":"2016-02-16 11:07:29.963758","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    sum = 0\n    while i < n:\n        sum = sum * term(1)\n        i += 1\n    return sum\n\n\n","after":null,"SubmissionTime":"2016-02-16T11:07:29.963758","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":278,"date":"2016-02-16 11:07:41.782528","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    sum = 0\n    while i < n:\n        sum = sum * term(i)\n        i += 1\n    return sum\n\n\n","after":null,"SubmissionTime":"2016-02-16T11:07:41.782528","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":278,"date":"2016-02-16 11:07:56.649395","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    sum = 1\n    while i < n:\n        sum = sum * term(i)\n        i += 1\n    return sum\n\n\n","after":null,"SubmissionTime":"2016-02-16T11:07:56.649395","SynthesizedAfter":"\r\ndef product(n, term):\r\n    i = 1\r\n    sum = 1\r\n    while i<n:\r\n        sum = sum*term(i+1)\r\n        i += 1\r\n    return sum","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":375,"date":"2016-02-16 11:21:42.101439","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i=0\n    t=1\n    total=1\n    while i < n:\n        if term == identity:\n            i += 1\n            t += 1 \n            total *= total\n\n        elif term == square:\n            i += 1\n            t += 1\n            total *= total**2\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-16T11:21:42.101439","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":375,"date":"2016-02-16 11:22:45.374679","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i=0\n    t=1\n    total=1\n    while i < n:\n        if term == identity:\n            i += 1\n            t += 1 \n            total *= t\n\n        elif term == square:\n            i += 1\n            t += 1\n            total *= t**2\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-16T11:22:45.374679","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":375,"date":"2016-02-16 11:23:03.526718","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i=0\n    t=1\n    total=1\n    while i < n:\n        if term == identity:\n            total *= t\n            i += 1\n            t += 1 \n\n        elif term == square:\n            total *= t**2\n            i += 1\n            t += 1\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-16T11:23:03.526718","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":375,"date":"2016-02-16 11:23:50.972786","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i=0\n    t=1\n    total=1\n    while i < n:\n        if term == 'identity':\n            total *= t\n            i += 1\n            t += 1 \n\n        elif term == 'square':\n            total *= t**2\n            i += 1\n            t += 1\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-16T11:23:50.972786","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":375,"date":"2016-02-16 11:24:36.773123","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i=0\n    t=1\n    total=1\n    while i < n:\n        if term == identity:\n            total *= t\n            i += 1\n            t += 1 \n        elif term == square:\n            total *= total*(t**2)\n            i += 1\n            t += 1\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-16T11:24:36.773123","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":633,"date":"2016-02-16 11:27:34.761982","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0\n    while k<=n:\n        total, k = total*term(k), k+1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-16T11:27:34.761982","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":633,"date":"2016-02-16 11:28:08.657264","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k<=n:\n        total, k = total*term(k), k+1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-16T11:28:08.657264","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":617,"date":"2016-02-16 11:30:40.647889","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    sum = 0\n    i = 1\n\n    while i <= n:\n        i +=1\n        sum *= term(i)\n    return sum\n\n\n","after":null,"SubmissionTime":"2016-02-16T11:30:40.647889","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":617,"date":"2016-02-16 11:31:46.632736","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    sum = 0\n    i = 1\n\n    while i <= n:\n        i += 1\n        sum = sum * term(i)\n    return sum\n\n\n","after":null,"SubmissionTime":"2016-02-16T11:31:46.632736","SynthesizedAfter":"\r\ndef product(n, term):\r\n    sum = 1\r\n    i = 1\r\n    while i<n:\r\n        i += 1\r\n        sum = sum*term(i)\r\n    return sum","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), Patch(EditMap(\\node => Update(node, ConstNode(BinaryExpressionNode-LessThan, Children(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), Tutor.synthesis.MagicK))))), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Target(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\"))))), TChild(Node(SuiteStatementNode, TChildren(Node(AugmentedAssignStatementNode-Add, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))), TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":617,"date":"2016-02-16 11:32:18.412907","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    sum = 0\n    i = 1\n\n    while i <= n:\n        sum = sum * term(i)\n        i += 1\n    return sum\n\n\n","after":null,"SubmissionTime":"2016-02-16T11:32:18.412907","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 12:01:16.218292","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    counter = 1 \n    while counter<n: \n        x = term(x)\n        x = x*(x+1)\n        counter += 1\n    if counter == n: \n        return x\n         \n\n","after":null,"SubmissionTime":"2016-02-16T12:01:16.218292","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 12:02:11.735330","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    counter = 1 \n    while counter<n: \n        x = term(x)\n        x *= x+1\n        counter += 1\n    if counter == n: \n        return x\n         \n\n","after":null,"SubmissionTime":"2016-02-16T12:02:11.73533","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 12:04:30.712236","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    counter = 0\n    while counter<n: \n        x = term(x)\n        x *= x\n        counter += 1\n    if counter == n: \n        return x\n         \n\n","after":null,"SubmissionTime":"2016-02-16T12:04:30.712236","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 12:04:39.259055","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    counter = 1\n    while counter<n: \n        x = term(x)\n        x *= x\n        counter += 1\n    if counter == n: \n        return x\n         \n\n","after":null,"SubmissionTime":"2016-02-16T12:04:39.259055","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 12:04:47.425906","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    counter = 1\n    while counter<n: \n        x = term(x)\n        x *= x+1\n        counter += 1\n    if counter == n: \n        return x\n         \n\n","after":null,"SubmissionTime":"2016-02-16T12:04:47.425906","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 12:06:45.171101","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    counter = 1\n    while counter<n: \n        x = square(x)\n        x *= x+1\n        counter += 1\n    if counter == n: \n        return x\n         \n\n","after":null,"SubmissionTime":"2016-02-16T12:06:45.171101","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 12:07:53.746925","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    counter = 1\n    while counter<n: \n        x = term(x)\n        x * (x+1)\n        x += 1 \n        counter += 1\n    if counter == n: \n        return x\n         \n\n","after":null,"SubmissionTime":"2016-02-16T12:07:53.746925","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-16 12:07:55.158142","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def total_seq(n,total):\n        if n >= 1:\n            return total_seq(n-1, total*term(n))\n        print(total)\n    total_seq(n, 1)\n\n","after":null,"SubmissionTime":"2016-02-16T12:07:55.158142","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 12:08:08.637938","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    counter = 0\n    while counter<n: \n        x = term(x)\n        x * (x+1)\n        x += 1 \n        counter += 1\n    if counter == n: \n        return x\n         \n\n","after":null,"SubmissionTime":"2016-02-16T12:08:08.637938","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-16 12:09:44.404620","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def total_seq(n,total):\n        if n >= 1:\n            total_seq(n-1, total*term(n))\n        print(total)\n    return total_seq(n, 1)\n\n","after":null,"SubmissionTime":"2016-02-16T12:09:44.40462","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-16 12:09:57.765051","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def total_seq(n,total):\n        if n >= 1:\n            return total_seq(n-1, total*term(n))\n        print(total)\n    return total_seq(n, 1)\n\n","after":null,"SubmissionTime":"2016-02-16T12:09:57.765051","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 12:10:45.509526","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    counter = 1\n    while counter<n: \n        x = term(x)\n        x * (x+1)\n        x += 1 \n        counter += 1\n    if counter == (n-1): \n        return x\n         \n\n","after":null,"SubmissionTime":"2016-02-16T12:10:45.509526","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 12:10:45.509526","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    counter = 1\n    while counter<n: \n        x = term(x)\n        x * (x+1)\n        x += 1 \n        counter += 1\n    if counter == (n-1): \n        return x\n         \n\n","after":null,"SubmissionTime":"2016-02-16T12:10:45.509526","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 12:11:22.509625","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    counter = 1\n    while counter<(n-1): \n        x = term(x)\n        x * (x+1)\n        x += 1 \n        counter += 1\n    if counter == (n-1): \n        return x\n         \n\n","after":null,"SubmissionTime":"2016-02-16T12:11:22.509625","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":430,"date":"2016-02-16 12:12:25.898345","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 0:\n        sum(term(n))\n        n = n-1\n        return n-1\n\n","after":null,"SubmissionTime":"2016-02-16T12:12:25.898345","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":430,"date":"2016-02-16 12:14:23.564634","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 0:\n        return product(n-1, term) + term(n)\n\n","after":null,"SubmissionTime":"2016-02-16T12:14:23.564634","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":430,"date":"2016-02-16 12:14:56.596582","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 0:\n        return (product(n-1, term) + term(n))\n\n","after":null,"SubmissionTime":"2016-02-16T12:14:56.596582","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":430,"date":"2016-02-16 12:15:18.079714","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 0:\n        return sum(product(n-1, term),term(n))\n\n","after":null,"SubmissionTime":"2016-02-16T12:15:18.079714","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":430,"date":"2016-02-16 12:15:55.067674","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n > 0:\n        return add(product(n-1, term),term(n))\n\n","after":null,"SubmissionTime":"2016-02-16T12:15:55.067674","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":38,"date":"2016-02-16 12:20:59.558229","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>def> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def total_seq(n,total):\n        if n >= 1:\n            return total_seq(n-1, total*term(n))\n        print(total)\n    return total_seq(n, 1)\n\n","after":null,"SubmissionTime":"2016-02-16T12:20:59.558229","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":127,"date":"2016-02-16 12:21:02.890479","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    x, y = n, 1\n    while x >= n:\n        x, y = x - 1, y * term(x)\n    return y\n\n    \n","after":null,"SubmissionTime":"2016-02-16T12:21:02.890479","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 12:22:58.533584","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    counter = 1\n    x = term(x) \n    while n > counter: \n        n*=x\n        x+1\n        counter +1\n        \n         \n         \n\n","after":null,"SubmissionTime":"2016-02-16T12:22:58.533584","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 12:23:37.208354","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    counter = 1\n    x = 1 \n    while n > counter: \n        x = term(x) \n        n*=x\n        x+1\n        counter +1\n        \n         \n         \n\n","after":null,"SubmissionTime":"2016-02-16T12:23:37.208354","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 12:28:16.061296","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    counter = 1\n    x = 1\n    x = term \n    while n > counter: \n           \n        n*=x\n        x+1\n        counter + 1\n        \n         \n         \n\n","after":null,"SubmissionTime":"2016-02-16T12:28:16.061296","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":127,"date":"2016-02-16 12:29:41.767617","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    x = n\n    y = 1\n    while x > 1: \n        x -= 1\n        y = y * term(x)\n    return y \n\n    \n","after":null,"SubmissionTime":"2016-02-16T12:29:41.767617","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 12:36:40.887718","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    counter = 1\n    x = term(x) \n    while counter < n:\n        x = counter * x\n        counter += 1\n    if counter == (n+1):\n        return x*n     \n        \n        \n         \n         \n\n","after":null,"SubmissionTime":"2016-02-16T12:36:40.887718","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 12:37:43.512959","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    counter = 1\n    x = term(x) \n    while counter < n:\n        x = counter * x\n        counter += 1\n    if counter == n: \n        return (counter * x)\n            \n        \n        \n         \n         \n\n","after":null,"SubmissionTime":"2016-02-16T12:37:43.512959","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 12:39:22.017039","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    counter = 1\n    counter = term(x) \n    while counter < n:\n        x = counter * x\n        counter += 1\n    if counter == n: \n        return (counter * x)\n            \n        \n        \n         \n         \n\n","after":null,"SubmissionTime":"2016-02-16T12:39:22.017039","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 12:39:32.026730","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    counter = 1\n    counter = term(counter) \n    while counter < n:\n        x = counter * x\n        counter += 1\n    if counter == n: \n        return (counter * x)\n            \n        \n        \n         \n         \n\n","after":null,"SubmissionTime":"2016-02-16T12:39:32.02673","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 12:42:13.878449","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    counter = 1 \n    while counter < n:\n        x = counter * x\n        counter += 1\n    if counter == n: \n        return (counter * x)\n            \n        \n        \n         \n         \n\n","after":null,"SubmissionTime":"2016-02-16T12:42:13.878449","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 12:42:28.803281","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    counter = 1\n    counter = term  \n    while counter < n:\n        x = counter * x\n        counter += 1\n    if counter == n: \n        return (counter * x)\n            \n        \n        \n         \n         \n\n","after":null,"SubmissionTime":"2016-02-16T12:42:28.803281","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 12:42:46.470162","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    counter = 1\n    counter = term(x)  \n    while counter < n:\n        x = counter * x\n        counter += 1\n    if counter == n: \n        return (counter * x)\n            \n        \n        \n         \n         \n\n","after":null,"SubmissionTime":"2016-02-16T12:42:46.470162","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 13:05:38.649565","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    x = term(x)\n    counter = 1\n    product = 1  \n    while counter < n:\n        product = product * x\n        x += 1 \n        counter += 1\n    if counter == n: \n        return (counter * x)\n            \n        \n        \n         \n         \n\n","after":null,"SubmissionTime":"2016-02-16T13:05:38.649565","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 13:06:17.478484","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    x = term(x)\n    counter = 1\n    product = 1  \n    while counter < n:\n        product = product * x\n        x += 1 \n        counter += 1\n    if counter == n: \n        return product\n            \n        \n        \n         \n         \n\n","after":null,"SubmissionTime":"2016-02-16T13:06:17.478484","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 13:07:11.626611","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    x = term(x)\n    counter = 1\n    product = 1  \n    while counter < n:\n        product = product * x\n        x += 1 \n        counter += 1\n    if counter == n: \n        return product*n\n            \n        \n        \n         \n         \n\n","after":null,"SubmissionTime":"2016-02-16T13:07:11.626611","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":887,"date":"2016-02-16 13:07:30.100135","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def identity (x):\n        while n == 1:\n            return x\n        else:\n            return x\n    k = 1\n    n += 1\n    return kx + x\n\n\n","after":null,"SubmissionTime":"2016-02-16T13:07:30.100135","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":887,"date":"2016-02-16 13:08:25.813855","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    n = 1 \n    total = 1\n    while n != 0:\n        count_down = n - 1\n        total = total*count_down\n    else:\n        return total\n\n\n","after":null,"SubmissionTime":"2016-02-16T13:08:25.813855","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 13:09:15.687916","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    x = term(x)\n    counter = 1\n    product = 1  \n    while counter < n:\n        product = product * x\n        x += 1 \n        counter += 1\n    if counter == n: \n        return product*x\n            \n        \n        \n         \n         \n\n","after":null,"SubmissionTime":"2016-02-16T13:09:15.687916","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":887,"date":"2016-02-16 13:09:29.189262","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    n = 1 \n    while n != 0:\n        total = 1\n        count_down = n - 1\n        total = total*count_down\n    else:\n        return total\n\n\n","after":null,"SubmissionTime":"2016-02-16T13:09:29.189262","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":887,"date":"2016-02-16 13:09:47.084070","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    n = 1 \n    total = 1\n    while n != 0:\n        count_down = n - 1\n        total = total*count_down\n        return total\n    else:\n        return total\n\n\n","after":null,"SubmissionTime":"2016-02-16T13:09:47.08407","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":887,"date":"2016-02-16 13:13:06.288138","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    while n != 0:\n        count_down = n - 1\n        total = total*count_down\n        return total\n    else:\n        return total\n\n\n","after":null,"SubmissionTime":"2016-02-16T13:13:06.288138","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":164,"date":"2016-02-16 13:14:06.331408","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    if n == 1:\n\n        return term(1)\n    else:\n        \n        return combiner(term(n), additor(n-1, term))\n\n\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-16T13:14:06.331408","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":887,"date":"2016-02-16 13:16:53.811606","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    while n != 0:\n        total = total*n\n        n -= 1\n        return total\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-16T13:16:53.811606","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":887,"date":"2016-02-16 13:17:09.267155","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    while n != 0:\n        total = total*n\n        n -= 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-16T13:17:09.267155","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":614,"date":"2016-02-16 13:59:27.269513","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    t = term\n    def product(n,t):\n        if n>=0:\n            ","after":null,"SubmissionTime":"2016-02-16T13:59:27.269513","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":406,"date":"2016-02-16 14:00:49.240681","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total+term(k), k+1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-16T14:00:49.240681","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":614,"date":"2016-02-16 14:01:24.896844","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    t = term\n    def product(n,t):\n        if t == increment:\n            return n + 1\n        elif t == square:\n            return n * n\n        elif t == triple:\n            return 3 * n\n        else:\n            return n \n        if n>=0:\n            ","after":null,"SubmissionTime":"2016-02-16T14:01:24.896844","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":406,"date":"2016-02-16 14:01:29.183051","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total*term(k), k+1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-16T14:01:29.183051","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":614,"date":"2016-02-16 14:02:09.042502","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    t = term\n    def product(n,t):\n        if n>=0:\n            ","after":null,"SubmissionTime":"2016-02-16T14:02:09.042502","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1063,"date":"2016-02-16 15:01:06.876979","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i = 1\n    product = 0\n    while i < n:\n        product += term(i)\n        i += 1\n    return product\n\n","after":null,"SubmissionTime":"2016-02-16T15:01:06.876979","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1063,"date":"2016-02-16 15:01:47.323616","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i = 1\n    product = 1\n    while i < n:\n        product = product * term(i)\n        i += 1\n    return product\n\n","after":null,"SubmissionTime":"2016-02-16T15:01:47.323616","SynthesizedAfter":"\r\ndef product(n, term):\r\n    i = 1\r\n    product = 1\r\n    while i<n:\r\n        product = product*term(i+1)\r\n        i += 1\r\n    return product","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":1063,"date":"2016-02-16 15:01:59.050967","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i = 0\n    product = 1\n    while i < n:\n        product = product * term(i)\n        i += 1\n    return product\n\n","after":null,"SubmissionTime":"2016-02-16T15:01:59.050967","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 15:10:46.069815","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    x = term(x)\n    counter = 1\n    product = 0 \n    while counter < n:\n        product = product * x\n        x += 1 \n        counter += 1\n    if counter == n: \n        return product*x\n            \n        \n        \n         \n         \n\n","after":null,"SubmissionTime":"2016-02-16T15:10:46.069815","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1039,"date":"2016-02-16 15:11:52.301376","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def prod(m):\n        m = m + 1\n        if m == n:\n            return m\n        else:\n            return m * prod(m + 1)\n\n","after":null,"SubmissionTime":"2016-02-16T15:11:52.301376","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1039,"date":"2016-02-16 15:13:42.705395","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def prod(m):\n        if m == n:\n            return m\n        else:\n            return m * prod(m + 1)\n\n","after":null,"SubmissionTime":"2016-02-16T15:13:42.705395","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1039,"date":"2016-02-16 15:16:49.630294","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def prod(m, func):\n        if m == n:\n            return func(m)\n        else:\n            return func(m) * prod(m + 1, func)\n    return prod(n, term)\n\n","after":null,"SubmissionTime":"2016-02-16T15:16:49.630294","SynthesizedAfter":"\r\ndef product(n, term):\r\n    def prod(m, func):\r\n        if m==n:\r\n            return func(m)\r\n        else:\r\n            return func(m)*prod(m+1, func)\r\n    return prod(1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\")))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 15:19:30.591332","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    x = term(x)\n    counter = 1\n    product = 1 \n    while counter < n:\n        product = product * x\n        x += 1 \n        counter += 1\n    if counter == n: \n        return product*x\n            \n        \n        \n         \n         \n\n","after":null,"SubmissionTime":"2016-02-16T15:19:30.591332","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":794,"date":"2016-02-16 15:24:06.917994","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    if term(x) is square:\n        x = x*x\n    counter = 1\n    product = 1 \n    while counter < n:\n        product = product * x\n        x += 1 \n        counter += 1\n    if counter == n: \n        return product*x\n            \n        \n        \n         \n         \n\n","after":null,"SubmissionTime":"2016-02-16T15:24:06.917994","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 15:25:55.450112","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    counter = 1\n    product = 1 \n    while counter < n:\n        product = product * x\n        \n        counter += 1\n    if counter == n: \n        return product*x\n            \n        \n        \n         \n         \n\n","after":null,"SubmissionTime":"2016-02-16T15:25:55.450112","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 15:28:26.749087","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    counter = 1\n    product = 1 \n    x = term(x) \n    while counter < n:\n        product = product * x\n        x += 1\n        counter += 1\n    if counter == n: \n        return product*x\n            \n        \n        \n         \n         \n\n","after":null,"SubmissionTime":"2016-02-16T15:28:26.749087","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":794,"date":"2016-02-16 15:29:04.545119","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    counter = 1\n    product = 1 \n    x = term(x) \n    while counter < n:\n        product = product * x\n        x += 1\n        counter += 1\n    if counter == n: \n        return product*x\n        \n    if term(x) is square(x):\n        return 36\n            \n            \n        \n        \n         \n         \n\n","after":null,"SubmissionTime":"2016-02-16T15:29:04.545119","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 15:34:29.607877","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 2\n    counter = 1\n    product = 1 \n    x = term(x) \n    while counter < n:\n        product = product * x\n        \n        counter += 1\n    if counter == n: \n        return product*x\n        \n            \n            \n        \n        \n         \n         \n\n","after":null,"SubmissionTime":"2016-02-16T15:34:29.607877","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 15:34:50.913009","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    counter = 1\n    product = 1 \n    x = term(x) \n    while counter < n:\n        product = product * x\n        x += 1\n        counter += 1\n    if counter == n: \n        return product*x\n        \n            \n            \n        \n        \n         \n         \n\n","after":null,"SubmissionTime":"2016-02-16T15:34:50.913009","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 15:41:46.485186","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    y = 1\n    counter = 1\n    product = 1 \n    y = term(x)\n    while counter < n:\n        product = product * y\n        y += 1\n        counter += 1\n    if counter == n: \n        return product*y\n        \n            \n            \n        \n        \n         \n         \n\n","after":null,"SubmissionTime":"2016-02-16T15:41:46.485186","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 15:41:46.485186","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    y = 1\n    counter = 1\n    product = 1 \n    y = term(x)\n    while counter < n:\n        product = product * y\n        y += 1\n        counter += 1\n    if counter == n: \n        return product*y\n        \n            \n            \n        \n        \n         \n         \n\n","after":null,"SubmissionTime":"2016-02-16T15:41:46.485186","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 15:41:59.397087","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    y = 1\n    counter = 1\n    product = 1 \n    y = term(y)\n    while counter < n:\n        product = product * y\n        y += 1\n        counter += 1\n    if counter == n: \n        return product*y\n        \n            \n            \n        \n        \n         \n         \n\n","after":null,"SubmissionTime":"2016-02-16T15:41:59.397087","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 15:46:53.547556","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    product = 1\n    while n > 0:\n        product = n*(n-1)\n        n -= 1  \n    if n == 0: \n        return product \n            \n            \n        \n        \n         \n         \n\n","after":null,"SubmissionTime":"2016-02-16T15:46:53.547556","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 15:52:50.342691","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    product = 1\n    while n > 0:\n        product = n*(n-1)\n        n -= 1  \n    if n == 1: \n        return product \n            \n            \n        \n        \n         \n         \n\n","after":null,"SubmissionTime":"2016-02-16T15:52:50.342691","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 15:54:11.110131","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    product = 1\n    x = term(x) \n    while n > 0:\n        product = x*n\n        n -= 1\n        x -= 1   \n    if n == 1: \n        return product \n            \n            \n        \n        \n         \n         \n\n","after":null,"SubmissionTime":"2016-02-16T15:54:11.110131","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 15:54:18.695259","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1 \n    product = 1\n    x = term(x) \n    while n > 0:\n        product = x*n\n        n -= 1\n        x -= 1   \n    if n == 1: \n        return product \n            \n            \n        \n        \n         \n         \n\n","after":null,"SubmissionTime":"2016-02-16T15:54:18.695259","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 15:54:26.864571","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1 \n    product = 1\n    x = term(x) \n    while n > 0:\n        product = x*n\n        n -= 1\n        x -= 1\n        return product   \n    if n == 1: \n        return product \n            \n            \n        \n        \n         \n         \n\n","after":null,"SubmissionTime":"2016-02-16T15:54:26.864571","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 15:55:36.888999","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1 \n    product = 1\n    x = term(x) \n    while n > 0:\n        product = product*x \n        n -= 1\n        x -= 1   \n    if n == 1: \n        return product \n            \n            \n        \n        \n         \n         \n\n","after":null,"SubmissionTime":"2016-02-16T15:55:36.888999","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1005,"date":"2016-02-16 15:57:26.233000","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    sum, i = 0, 1\n    while i<=n:\n        sum*=term(i)\n        i+=1\n    return sum\n\n","after":null,"SubmissionTime":"2016-02-16T15:57:26.233","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":909,"date":"2016-02-16 16:09:09.200247","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    final = 1\n    i = 1\n    while i <= n:\n        final = final * term(i)\n    return final\n\n","after":null,"SubmissionTime":"2016-02-16T16:09:09.200247","SynthesizedAfter":"\r\ndef product(n, term):\r\n    final = 1\r\n    i = 1\r\n    while i<=n:\r\n        final = final*term(i)\r\n        i += 1\r\n    return final","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Insert(node, ConstNode(AugmentedAssignStatementNode-Add, Children(LeafConstNode(NameExpressionNode-i), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 1), Selected(\\x => Match(x, StartsWithParent(Node(WhileStatementNode, TChildren(Node(BinaryExpressionNode-LessThanOrEqual, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"NameExpressionNode\")))), TChild(Target(Node(SuiteStatementNode, TChild(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":1,"Id":0,"studentId":190,"date":"2016-02-16 16:17:11.393497","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-16T16:17:11.393497","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 16:18:22.995479","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    product = 1 \n    while n > 1: \n        product=product*(n-1)\n        n -= 1  \n    if n == 1: \n        return product      \n    \n            \n            \n        \n        \n         \n         \n\n","after":null,"SubmissionTime":"2016-02-16T16:18:22.995479","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 16:18:22.995479","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    product = 1 \n    while n > 1: \n        product=product*(n-1)\n        n -= 1  \n    if n == 1: \n        return product      \n    \n            \n            \n        \n        \n         \n         \n\n","after":null,"SubmissionTime":"2016-02-16T16:18:22.995479","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 16:20:07.240744","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    product = 1 \n    while n > 1: \n        product=product*n\n        n -= 1  \n    if n == 1: \n        return product      \n    \n            \n            \n        \n        \n         \n         \n\n","after":null,"SubmissionTime":"2016-02-16T16:20:07.240744","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 16:20:23.338694","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    n = term\n    product = 1 \n    while n > 1: \n        product=product*n\n        n -= 1  \n    if n == 1: \n        return product      \n    \n            \n            \n        \n        \n         \n         \n\n","after":null,"SubmissionTime":"2016-02-16T16:20:23.338694","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":95,"date":"2016-02-16 16:20:28.113902","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return product(n-1,term)*term(n)\n\n","after":null,"SubmissionTime":"2016-02-16T16:20:28.113902","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 16:20:31.084668","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    n = term(x)\n    product = 1 \n    while n > 1: \n        product=product*n\n        n -= 1  \n    if n == 1: \n        return product      \n    \n            \n            \n        \n        \n         \n         \n\n","after":null,"SubmissionTime":"2016-02-16T16:20:31.084668","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 16:23:23.673597","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = term(x)\n    product = 1 \n    while n > 1: \n        product=product*x\n        x = n \n        n -= 1  \n    if n == 1: \n        return product      \n    \n            \n            \n        \n        \n         \n         \n\n","after":null,"SubmissionTime":"2016-02-16T16:23:23.673597","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 16:29:49.913614","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    product = 1 \n    x = term(x) \n    while n > 0: \n        product = product*x \n        n -= 1 \n    if n == 0: \n        return product    \n            \n            \n        \n        \n         \n         \n\n","after":null,"SubmissionTime":"2016-02-16T16:29:49.913614","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":794,"date":"2016-02-16 16:30:05.063346","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    product = 1 \n    x = term(x) \n    while n > 0: \n        product = product*x \n        x += 1 \n        n -= 1 \n    if n == 0: \n        return product    \n            \n            \n        \n        \n         \n         \n\n","after":null,"SubmissionTime":"2016-02-16T16:30:05.063346","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":942,"date":"2016-02-16 16:32:57.931417","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n         return 1\n    else:\n                return n * factorial(n-1)            \n\n\n\n","after":null,"SubmissionTime":"2016-02-16T16:32:57.931417","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==0:\r\n        return 1\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":942,"date":"2016-02-16 16:33:07.367529","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n         return 1\n    else:\n        return n * factorial(n-1)            \n\n\n\n","after":null,"SubmissionTime":"2016-02-16T16:33:07.367529","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":942,"date":"2016-02-16 16:33:26.792459","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n         return 1\n    else:\n        return n * (n-1)            \n\n\n\n","after":null,"SubmissionTime":"2016-02-16T16:33:26.792459","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":190,"date":"2016-02-16 16:51:52.483858","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, total = 1, 1\n    while k <= n:\n        k +=1\n        total = total * term(k, 1)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-16T16:51:52.483858","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":190,"date":"2016-02-16 16:53:21.249061","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, total = 1, 1\n    while k <= n:\n        k, total = 1, total * term(k, 1)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-16T16:53:21.249061","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":935,"date":"2016-02-16 16:54:07.444377","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 1\n    x = 0\n    while x < n:\n        total = total * term(x)\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-16T16:54:07.444377","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":942,"date":"2016-02-16 16:54:42.478794","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def identity_helper(n,term):\n        total, k = 0, 1 \n        while k <= n:\n            total, k = total + term(k), k + 1\n        return total \n\n","after":null,"SubmissionTime":"2016-02-16T16:54:42.478794","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":942,"date":"2016-02-16 16:55:07.536461","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def identity_helper(n,term):\n        total, k = 0, 1 \n        while k <= n:\n            total, k = total + term(k), k * 1\n        return total \n\n","after":null,"SubmissionTime":"2016-02-16T16:55:07.536461","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1016,"date":"2016-02-16 16:56:27.970311","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 0\n    while i != n:\n        i += 1\n        return n * product(n+1, term)\n\n","after":null,"SubmissionTime":"2016-02-16T16:56:27.970311","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":942,"date":"2016-02-16 16:56:47.678859","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def identity_helper(n,term):\n        total, k = 0, 1 \n        while k <= n:\n            total, k = total + term(n), n * 1\n        return total \n\n","after":null,"SubmissionTime":"2016-02-16T16:56:47.678859","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1016,"date":"2016-02-16 17:00:48.709853","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 0\n    while i != n:\n        i += 1\n        return i * product(n, term)\n\n","after":null,"SubmissionTime":"2016-02-16T17:00:48.709853","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1016,"date":"2016-02-16 17:01:07.825932","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 0\n    while i != n:\n        i += 1\n        return i * product(i+1, term)\n\n","after":null,"SubmissionTime":"2016-02-16T17:01:07.825932","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1016,"date":"2016-02-16 17:01:22.373339","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    while i != n:\n        return i * product(i+1, term)\n\n","after":null,"SubmissionTime":"2016-02-16T17:01:22.373339","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1016,"date":"2016-02-16 17:03:18.395038","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    '''while i != n:'''\n    return term(i)\n\n","after":null,"SubmissionTime":"2016-02-16T17:03:18.395038","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1016,"date":"2016-02-16 17:03:24.855814","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    '''while i != n:'''\n    return term(i+1)\n\n","after":null,"SubmissionTime":"2016-02-16T17:03:24.855814","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1016,"date":"2016-02-16 17:03:35.774934","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    '''while i != n:'''\n    return term(i+7)\n\n","after":null,"SubmissionTime":"2016-02-16T17:03:35.774934","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1016,"date":"2016-02-16 17:04:19.927656","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    while i != n:\n        return term(i) * product(n, term(i+1))\n\n","after":null,"SubmissionTime":"2016-02-16T17:04:19.927656","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1016,"date":"2016-02-16 17:04:34.926675","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    while i != n:\n        return term(i) * product(n, term)\n\n","after":null,"SubmissionTime":"2016-02-16T17:04:34.926675","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":942,"date":"2016-02-16 17:04:35.046651","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def identity_helper(n,term):\n        k, total = 1, 1\n        while k <= n:\n            k, total = k + 1, total * term(k, 1)\n        return total\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-16T17:04:35.046651","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":942,"date":"2016-02-16 17:05:15.222106","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def identity_helper(n,term):\n        k, total = 1, 1\n        while k <= n:\n            k, total = k + 1, total * term(k, 1)\n        print (\"total\")\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-16T17:05:15.222106","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1016,"date":"2016-02-16 17:06:27.310386","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i, total = 1, 1\n    while i != n:\n        k, total = k + 1, total * term(k + 1)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-16T17:06:27.310386","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1016,"date":"2016-02-16 17:06:40.026198","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i, total = 1, 1\n    while i != n:\n        k, total = k + 1, total * term(k, 1)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-16T17:06:40.026198","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":942,"date":"2016-02-16 17:06:58.086312","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def identity_helper(n,term):\n        k, total = 1, 1\n        while k <= n:\n            k, total = k + 1, total * term(k)\n        return total\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-16T17:06:58.086312","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1016,"date":"2016-02-16 17:07:34.281321","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i, total = 1, 1\n    while i != n:\n        i, total = i + 1, total * term(i, 1)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-16T17:07:34.281321","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":942,"date":"2016-02-16 17:08:08.350927","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def identity_helper(n,term):\n        k, total = 0, 1\n        while k <= n:\n            k, total = k + 1, total * term(k)\n        return total\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-16T17:08:08.350927","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1016,"date":"2016-02-16 17:08:13.809389","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i, total = 1, 1\n    while i != n:\n        i, total = i + 1, total * term(i)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-16T17:08:13.809389","SynthesizedAfter":"\r\ndef product(n, term):\r\n    i, total = 1, 1\r\n    while i!=n:\r\n        i, total = i+1, total*term(i+1)\r\n    return total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":1016,"date":"2016-02-16 17:08:26.250517","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i, total = 0, 1\n    while i != n:\n        i, total = i + 1, total * term(i)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-16T17:08:26.250517","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":942,"date":"2016-02-16 17:08:56.426002","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def identity_helper(n,term):\n        k, total = 1, 0\n        while k <= n:\n            k, total = k + 1, total * term(k)\n        return total\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-16T17:08:56.426002","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":929,"date":"2016-02-16 17:20:54.921106","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    k, total = 1, 0\n    while k <= n:\n        total, k = total * term(k), k+1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-16T17:20:54.921106","SynthesizedAfter":"\r\ndef product(n, term):\r\n    k, total = 1, 1\r\n    while k<=n:\r\n        total, k = total*term(k), k+1\r\n    return total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":942,"date":"2016-02-16 17:21:14.380236","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def identity_helper(n,term):\n        k, total = 1, 0\n        while k == n:\n            k, total = k + 1, total * term(k)\n        return total\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-16T17:21:14.380236","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":726,"date":"2016-02-16 17:21:55.468183","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return product(n,identity)\n\n","after":null,"SubmissionTime":"2016-02-16T17:21:55.468183","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":726,"date":"2016-02-16 17:21:55.468183","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return product(n,identity)\n\n","after":null,"SubmissionTime":"2016-02-16T17:21:55.468183","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":726,"date":"2016-02-16 17:23:49.999032","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, k = 0, 1\n    while k<=n:\n        total, k = total + term(k), k+1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-16T17:23:49.999032","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":726,"date":"2016-02-16 17:24:29.497638","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, k = 0, 1\n    while k<=n:\n        total, k = total + term(k), k+1\n    return product(n,term)\n\n","after":null,"SubmissionTime":"2016-02-16T17:24:29.497638","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":726,"date":"2016-02-16 17:24:38.786962","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, k = 0, 1\n    while k<=n:\n        total, k = total + term(k), k+1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-16T17:24:38.786962","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":726,"date":"2016-02-16 17:24:38.786962","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, k = 0, 1\n    while k<=n:\n        total, k = total + term(k), k+1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-16T17:24:38.786962","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":726,"date":"2016-02-16 17:27:56.944280","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    # total, k = 0, 1\n    # while k<=n:\n    #     total, k = total + term(k), k+1\n    # return total\n    term, k = 0, 1\n    while k<=n:\n        total, k = total + term(k), k+1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-16T17:27:56.94428","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":726,"date":"2016-02-16 17:32:45.003157","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, k = 0, 1\n    while k<=n:\n        total, k = total + term(k), k+1\n    print (total)\n\n\n","after":null,"SubmissionTime":"2016-02-16T17:32:45.003157","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":2,"Id":0,"studentId":466,"date":"2016-02-16 17:32:59.363088","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    return term(n) * product( - 1, term)\n\n","after":null,"SubmissionTime":"2016-02-16T17:32:59.363088","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":726,"date":"2016-02-16 17:33:29.969013","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, k = 0, 1\n    while k<=n:\n        total, k = total * term(k), k+1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-16T17:33:29.969013","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":164,"date":"2016-02-16 17:41:33.988557","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    if n == 1:\n\n        return term(1)\n    else:\n        \n        return combiner(term(n), combiner(n-1, term))\n    \n\n\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-16T17:41:33.988557","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":942,"date":"2016-02-16 17:43:02.658433","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def identity_helper(n,term):\n        total, k = 0, 1\n        while k <= n:\n            total, k = total + term(k), n * 1\n        return total\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-16T17:43:02.658433","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":842,"date":"2016-02-16 17:43:54.128682","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    p = 1\n    for i in range(n):\n        p = p * term(i)\n    return p        \n\n","after":null,"SubmissionTime":"2016-02-16T17:43:54.128682","SynthesizedAfter":"\r\ndef product(n, term):\r\n    p = 1\r\n    for i in range(n):\r\n        p = p*term(i+1)\r\n    return p","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":726,"date":"2016-02-16 17:47:37.081335","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k, total = 1, 0\n    while k <= n:\n        k, total = k+1, total*term(k)\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-16T17:47:37.081335","SynthesizedAfter":"\r\ndef product(n, term):\r\n    k, total = 1, 1\r\n    while k<=n:\r\n        k, total = k+1, total*term(k)\r\n    return total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":726,"date":"2016-02-16 17:48:56.558404","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k, total = 1, 0\n    while k <= n:\n        k, total = k+1, total*term(k+1)\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-16T17:48:56.558404","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":726,"date":"2016-02-16 17:49:09.243882","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k, total = 0, 1\n    while k <= n:\n        k, total = k+1, total*term(k+1)\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-16T17:49:09.243882","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":942,"date":"2016-02-16 17:54:52.512209","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def identity_helper(x,function):\n        total, k = 0, 1\n        while k <= n:\n            total, k = total + term(k), n * 1\n        return total\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-16T17:54:52.512209","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":726,"date":"2016-02-16 17:58:40.794096","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    k, total = 1, 1\n    while k <= n:\n        k, total = k+1, total*term(k)\n        print(total)\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-16T17:58:40.794096","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":942,"date":"2016-02-16 17:59:46.433210","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    def identity_helper(x,function):\n        total, k = 0, 1\n        while k <= n:\n            total, k = total + term(k), n * 1\n        return x\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-16T17:59:46.43321","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":942,"date":"2016-02-16 18:03:15.611358","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def identity_helper(x,function):\n        total, k = 0, 1\n        while k <= n:\n            total, k = total + term(k), n * 1\n        return x * function(n-1)\n\n\n\n\n\n\n","after":null,"SubmissionTime":"2016-02-16T18:03:15.611358","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":942,"date":"2016-02-16 18:04:05.224870","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def identity_helper(x,function):\n        total, k = 0, 1\n        while k <= n:\n            total, k = total + term(k), n * 1\n        return n * (n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-16T18:04:05.22487","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":942,"date":"2016-02-16 18:04:16.946408","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def identity_helper(x,function):\n        return n * (n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-16T18:04:16.946408","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":904,"date":"2016-02-16 18:07:28.343006","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-16T18:07:28.343006","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":512,"date":"2016-02-16 18:08:55.267635","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    # total=1\n    # i=1\n    # while i <= n:\n    #     total=total*term(i)\n    #     i+=1\n    # return total\n    return term(n)*product(n-1,term)\n\n","after":null,"SubmissionTime":"2016-02-16T18:08:55.267635","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":942,"date":"2016-02-16 18:08:55.679036","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def identity_helper(x,function):\n        total, k = 0, 1\n        while k <= n:\n            total, k = total + term(k), n * 1\n        return n * (n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-16T18:08:55.679036","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":879,"date":"2016-02-16 18:11:07.143850","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, i = 1, 1\n    while i <= n:\n        total = total * term(i)\n        i += 1\n        return total\n\n\n\n","after":null,"SubmissionTime":"2016-02-16T18:11:07.14385","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":500,"date":"2016-02-16 18:11:11.997559","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    total = 0\n    while i < n:\n        total = total + term(i)\n        i += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-16T18:11:11.997559","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":500,"date":"2016-02-16 18:11:56.267865","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    total = 0\n    while i < n:\n        total = total * term(i)\n        i += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-16T18:11:56.267865","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":500,"date":"2016-02-16 18:12:21.042510","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i = 1\n    total = 1\n    while i < n:\n        total = total * term(i)\n        i += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-16T18:12:21.04251","SynthesizedAfter":"\r\ndef product(n, term):\r\n    i = 1\r\n    total = 1\r\n    while i<n:\r\n        total = total*term(i+1)\r\n        i += 1\r\n    return total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":942,"date":"2016-02-16 18:15:55.355613","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def identity_helper(x,function):\n        total, k = 0, 1\n        while k <= n:\n            total, k = total + term(k), n * (n-1)\n        return total \n\n\n","after":null,"SubmissionTime":"2016-02-16T18:15:55.355613","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":792,"date":"2016-02-16 18:17:28.416994","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return n*term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T18:17:28.416994","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":792,"date":"2016-02-16 18:18:08.385266","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return term(n)*term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T18:18:08.385266","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":792,"date":"2016-02-16 18:19:26.289780","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(n)\n    else:\n        return term(n)*term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T18:19:26.28978","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return term(n)\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":942,"date":"2016-02-16 18:19:58.898725","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def identity_helper(n,term):\n        total, k = 0, 1\n        while k <= n:\n            total, k = total + term(k), k * 1\n        return total\n\n\n","after":null,"SubmissionTime":"2016-02-16T18:19:58.898725","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":942,"date":"2016-02-16 18:20:05.557261","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def identity_helper(n,term):\n        total, k = 0, 1\n        while k <= n:\n            total, k = total * term(k), k * 1\n        return total\n\n\n","after":null,"SubmissionTime":"2016-02-16T18:20:05.557261","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":792,"date":"2016-02-16 18:21:53.712263","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(1)\n    else:\n        return term(n)*term(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T18:21:53.712263","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":792,"date":"2016-02-16 18:23:16.041506","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    while n>1:\n        result, n = term(n)*term(n-1), n-1\n    return result\n\n","after":null,"SubmissionTime":"2016-02-16T18:23:16.041506","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":792,"date":"2016-02-16 18:23:31.394118","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    while n>=1:\n        result, n = term(n)*term(n-1), n-1\n    return result\n\n","after":null,"SubmissionTime":"2016-02-16T18:23:31.394118","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":792,"date":"2016-02-16 18:25:28.561145","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    result = term(n)\n    while n>=1:\n        result, n = result*term(n-1), n-1\n    return result\n\n","after":null,"SubmissionTime":"2016-02-16T18:25:28.561145","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":942,"date":"2016-02-16 18:25:56.378652","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def identity_helper(n,term):\n        total, k = 0, 1\n        while k <= n:\n            total, k = total + term(k), k * 1\n        return k\n\n\n","after":null,"SubmissionTime":"2016-02-16T18:25:56.378652","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":961,"date":"2016-02-16 18:32:09.895830","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    v = x\n    while n > 0:\n        v = v * x\n        x = x + 1\n        n = n - 1\n    return v \n\n\n\n\n","after":null,"SubmissionTime":"2016-02-16T18:32:09.89583","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":942,"date":"2016-02-16 18:36:59.277172","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def identity_helper(n,term):\n        total, k = 0, 1\n        while k <= n:\n            total, k = total + term(k), k * 1\n        return identity_helper (n, n-1)\n\n\n","after":null,"SubmissionTime":"2016-02-16T18:36:59.277172","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":942,"date":"2016-02-16 18:37:13.066522","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def identity_helper(n,term):\n        total, k = 0, 1\n        while k <= n:\n            total, k = total + term(k), k * 1\n        return identity_helper (n, k)\n\n\n","after":null,"SubmissionTime":"2016-02-16T18:37:13.066522","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":942,"date":"2016-02-16 18:37:36.569165","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def identity_helper(n,term):\n        total, k = 0, 1\n        while k <= n:\n            total, k = total + term(k), k * 1\n        return identity_helper(total,n)\n\n\n","after":null,"SubmissionTime":"2016-02-16T18:37:36.569165","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":942,"date":"2016-02-16 18:38:50.411556","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def identity_helper(x,function):\n        total, k = 0, 1\n        while k <= n:\n            total, k = total + term(k), k * 1\n        return identity_helper(x,function)\n\n\n","after":null,"SubmissionTime":"2016-02-16T18:38:50.411556","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":942,"date":"2016-02-16 18:54:32.341380","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def identity_helper(x,function):\n        total, k = 0, 1\n        while k <= n:\n            total, k = total + term(k), k * 1\n        return identity_helper(x,function)\n    \n\n\n","after":null,"SubmissionTime":"2016-02-16T18:54:32.34138","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":942,"date":"2016-02-16 18:56:23.482977","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def identity_helper(x,function):\n        total, k = 0, 1\n        while k <= n:\n            total, k = total + term(k), k * 1\n        return identity_helper(k,x)\n\n\n\n","after":null,"SubmissionTime":"2016-02-16T18:56:23.482977","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":942,"date":"2016-02-16 18:56:33.901777","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def identity_helper(x,function):\n        total, k = 0, 1\n        while k <= n:\n            total, k = total + term(k), k * 1\n        return identity_helper(total)\n\n\n\n","after":null,"SubmissionTime":"2016-02-16T18:56:33.901777","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1016,"date":"2016-02-16 18:57:25.787815","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    i, total = 1, 1\n    while i <= n:\n        i += 1\n        total = total * term(i)\n    return total\n\n","after":null,"SubmissionTime":"2016-02-16T18:57:25.787815","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1036,"date":"2016-02-16 19:02:26.428946","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i = 1\n    total =1\n    while i <= n:\n        total *=i\n        i+=1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-16T19:02:26.428946","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":1036,"date":"2016-02-16 19:03:08.536301","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i = 1\n    total =1\n    while i <= n:\n        term(i)\n        total *=i\n        i+=1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-16T19:03:08.536301","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":231,"date":"2016-02-16 19:09:36.390295","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, k = 0, 1\n    while k <= n:\n        total += k\n        k += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-16T19:09:36.390295","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":231,"date":"2016-02-16 19:11:42.923879","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, k = 0, 1\n    while k <= n:\n        total = term (total +k)\n        k += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-16T19:11:42.923879","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":231,"date":"2016-02-16 19:15:43.681817","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, k = 0, 1\n    while k <= n:\n        total = term (total, k)\n        k += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-16T19:15:43.681817","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":698,"date":"2016-02-16 19:16:15.783250","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==0:\n        return 0\n    elif n==1:\n        return n\n    else:\n        n*product(n-1, identity)\n\n","after":null,"SubmissionTime":"2016-02-16T19:16:15.78325","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":698,"date":"2016-02-16 19:18:27.405496","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==0:\n        return 0\n    elif n==1:\n        return n\n    else:\n        n * product(n-1, identity)\n\n","after":null,"SubmissionTime":"2016-02-16T19:18:27.405496","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":698,"date":"2016-02-16 19:19:06.104828","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==0:\n        return 0\n    elif n==1:\n        return n\n    else:\n        n + product(n-1, identity)\n\n","after":null,"SubmissionTime":"2016-02-16T19:19:06.104828","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":231,"date":"2016-02-16 19:19:31.914617","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    total, k = 0, 1\n    while k <= n:\n        total = term (k) * total\n        k += 1\n    return total\n\n","after":null,"SubmissionTime":"2016-02-16T19:19:31.914617","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":698,"date":"2016-02-16 19:19:58.622294","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==0:\n        return 0\n    elif n==1:\n        return n\n    else:\n        n*product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-16T19:19:58.622294","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":698,"date":"2016-02-16 19:20:57.920823","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n==0:\n        return 0\n    elif n==1:\n        return n\n    else:\n        return n*product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-16T19:20:57.920823","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==0:\r\n        return 0\r\n    elif n==1:\r\n        return n\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":343,"date":"2016-02-16 19:27:54.989995","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, x = 0, 1\n    while x <= n:\n        total, x = total * term(x), x + 1\n    return total\n\n\n\n","after":null,"SubmissionTime":"2016-02-16T19:27:54.989995","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":942,"date":"2016-02-16 19:28:04.503699","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def identity_helper(x,function):\n        total, k = 0, 1\n        while k <= n:\n            total, k = total + term(k), k * 1\n        return identity_helper(x,function)\n\n\n\n","after":null,"SubmissionTime":"2016-02-16T19:28:04.503699","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":942,"date":"2016-02-16 19:31:53.644355","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def identity_helper(x,func):\n        total, k = 0, 1\n        while k <= n:\n            total, k = total + term(k), k * 1\n        return identity_helper(x,func)\n\n\n\n","after":null,"SubmissionTime":"2016-02-16T19:31:53.644355","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":942,"date":"2016-02-16 19:33:32.285347","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def identity_helper(x,func):\n        total, k = 0, 1\n        while k <= x:\n            total, k = total + fun(k), k * 1\n        return identity_helper(1,term)\n\n\n\n","after":null,"SubmissionTime":"2016-02-16T19:33:32.285347","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":942,"date":"2016-02-16 19:35:49.731545","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def identity_helper(x,func):\n        total, k = 0, 1\n        while k <= x:\n            total, k = total + func(k), k * 1\n        return identity_helper(1,term)\n\n \n\n","after":null,"SubmissionTime":"2016-02-16T19:35:49.731545","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":942,"date":"2016-02-16 19:38:30.896133","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def identity_helper(x,func):\n        total, k = 0, 1\n        while k <= x:\n            total, k = total + func(x), x * 1\n        return identity_helper(1,term)\n\n \n\n","after":null,"SubmissionTime":"2016-02-16T19:38:30.896133","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":942,"date":"2016-02-16 19:42:15.457494","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def identity_helper(k,func):\n        if k == n:\n            return func (n)\n        else:\n            return mul(x+1,func) * func (x)\n        return multi(1,term)\n\n \n\n","after":null,"SubmissionTime":"2016-02-16T19:42:15.457494","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":942,"date":"2016-02-16 19:42:49.672581","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def identity_helper(x,func):\n        if x == n:\n            return func (n)\n        else:\n            return mul(x+1,func)*func(x)\n        return multi(1,term)\n\n \n\n","after":null,"SubmissionTime":"2016-02-16T19:42:49.672581","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":942,"date":"2016-02-16 19:43:15.152523","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def identity_helper(x,func):\n        if x==n:\n            return func(n)\n        else:\n            return mul(x+1,func)*func(x)\n        return multi(1,term)\n\n \n\n","after":null,"SubmissionTime":"2016-02-16T19:43:15.152523","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":73,"date":"2016-02-16 19:44:29.963023","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return n\n    return n * product(n-1, term) \n\n","after":null,"SubmissionTime":"2016-02-16T19:44:29.963023","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return n\r\n    return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":942,"date":"2016-02-16 19:45:38.917821","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def identity_helper(x,func):\n        total, k = 1,1\n        while k <= x:\n            total, k = total + func(k), k*1\n        return identity_helper(1,term)\n\n \n\n","after":null,"SubmissionTime":"2016-02-16T19:45:38.917821","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":73,"date":"2016-02-16 19:46:12.171825","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return n\n    return product(n,term) * product(n-1, term) \n\n","after":null,"SubmissionTime":"2016-02-16T19:46:12.171825","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":528,"date":"2016-02-16 19:47:27.640704","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return product(n, lambda k: k)\n\n","after":null,"SubmissionTime":"2016-02-16T19:47:27.640704","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":942,"date":"2016-02-16 19:47:51.679030","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    def identity_helper(x,func):\n        if x==n:\n            return func(n)\n        else:\n            return multi(x+1,func)*func(x)\n    return multi(1,term)\n\n \n\n","after":null,"SubmissionTime":"2016-02-16T19:47:51.67903","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":73,"date":"2016-02-16 19:54:07.470259","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return n * product(n-1, term) \n\n","after":null,"SubmissionTime":"2016-02-16T19:54:07.470259","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":864,"date":"2016-02-16 19:54:23.258916","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \n\n","after":null,"SubmissionTime":"2016-02-16T19:54:23.258916","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":73,"date":"2016-02-16 19:59:38.973309","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    index, sum1 =  1, 1\n    while i <= n:\n        sum1 = sum1 * term(i)\n        i += 1\n    return sum1\n\n","after":null,"SubmissionTime":"2016-02-16T19:59:38.973309","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":540,"date":"2016-02-16 20:13:23.721503","diff":null,"before":"def product(n, term):\n    if n == 1:\n        return term(1)\n    else:\n        return term(n) * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-16T20:13:23.721503","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":1,"Id":0,"studentId":864,"date":"2016-02-16 20:16:29.655099","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n        \n\n","after":null,"SubmissionTime":"2016-02-16T20:16:29.655099","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":864,"date":"2016-02-16 20:18:10.260843","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    while product(n,term):\n        result = 1\n        for i in range(1, n + 1):\n            result *= term(i)\n    return result\n    while product(n,square):\n        result = 1 \n        for i in range(1, n + 1):\n            result *= result * term(i)\n    return result        \n\n","after":null,"SubmissionTime":"2016-02-16T20:18:10.260843","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":888,"date":"2016-02-16 20:18:10.580252","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\n    *** YOUR CODE HERE ***\"\"\"\n    if n == 1:\n        return term(n)\n    else:\n        return term(n) * product(n-1, term)\n\n\n","after":null,"SubmissionTime":"2016-02-16T20:18:10.580252","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return term(n)\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-term)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":890,"date":"2016-02-16 20:18:11.855955","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    while x < n:\n        return x * increment(x)\n    \n\n","after":null,"SubmissionTime":"2016-02-16T20:18:11.855955","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":890,"date":"2016-02-16 20:24:32.365114","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=0\n    while x < n:\n        return x * increment(x)\n    \n\n","after":null,"SubmissionTime":"2016-02-16T20:24:32.365114","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":890,"date":"2016-02-16 20:24:49.540971","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=1\n    while x < n:\n        return x * increment(x)\n    \n\n","after":null,"SubmissionTime":"2016-02-16T20:24:49.540971","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":890,"date":"2016-02-16 20:25:28.159202","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=1\n    while x < n:\n        x = x+1\n        return x * increment(x)\n\n    \n\n","after":null,"SubmissionTime":"2016-02-16T20:25:28.159202","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":890,"date":"2016-02-16 20:27:53.900632","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=1\n    while x < n:\n        return x * increment(x)\n    else: \n        x= x+1 \n\n    \n\n","after":null,"SubmissionTime":"2016-02-16T20:27:53.900632","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":890,"date":"2016-02-16 20:28:29.688923","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=1\n    while x < n:\n        return x * increment(x)\n    else: \n        x= increment(x)\n\n    \n\n","after":null,"SubmissionTime":"2016-02-16T20:28:29.688923","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":890,"date":"2016-02-16 20:29:30.077494","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=1\n    while x < n:\n        return x * increment(x)\n    else: \n        x= increment(x)+ 1\n\n    \n\n","after":null,"SubmissionTime":"2016-02-16T20:29:30.077494","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":54,"date":"2016-02-16 20:29:50.953255","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return term(n) * product(n-1,term)\n\n","after":null,"SubmissionTime":"2016-02-16T20:29:50.953255","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n>0:\r\n        return term(n)*product(n-1, term)\r\n    else:\r\n        return 1","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(IfStatementNode, Children(ConstNode(IfStatementTestNode, Children(ConstNode(BinaryExpressionNode-GreaterThan, Children(LeafConstNode(NameExpressionNode-n), SingleChild(LeafConstNode(ConstantExpressionNode-0)))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), Tutor.synthesis.MagicK)))))), SingleChild(ConstNode(SuiteStatementNode, SingleChild(ConstNode(ReturnStatementNode, SingleChild(LeafConstNode(ConstantExpressionNode-1)))))))), 1), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-product, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Target(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(FunctionDefinitionNode-product, TChildren(LeafWildcard(\"ParameterNode\"), TChildren(LeafWildcard(\"ParameterNode\"), TChild(Target(Node(SuiteStatementNode, TChildren(Node(ExpressionStatementNode, TChild(LeafWildcard(\"ConstantExpressionNode\"))), TChild(Node(ReturnStatementNode, TChild(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":54,"date":"2016-02-16 20:30:38.907520","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    return term(n) + product(n-1,term)\n\n","after":null,"SubmissionTime":"2016-02-16T20:30:38.90752","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":890,"date":"2016-02-16 20:31:37.961518","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=1\n    while x < n:\n        return x * increment(x)\n        x= x + increment(x) \n\n\n    \n\n","after":null,"SubmissionTime":"2016-02-16T20:31:37.961518","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":890,"date":"2016-02-16 20:31:37.961518","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=1\n    while x < n:\n        return x * increment(x)\n        x= x + increment(x) \n\n\n    \n\n","after":null,"SubmissionTime":"2016-02-16T20:31:37.961518","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":458,"date":"2016-02-16 20:41:33.368975","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    for k in range(1, n+1):\n        total += term(k)\n\n\n","after":null,"SubmissionTime":"2016-02-16T20:41:33.368975","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":458,"date":"2016-02-16 20:44:14.882933","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    for k in range(1, n+1):\n        total = total + term(k)\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-16T20:44:14.882933","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":458,"date":"2016-02-16 20:44:14.882933","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    for k in range(1, n+1):\n        total = total + term(k)\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-16T20:44:14.882933","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":458,"date":"2016-02-16 20:44:50.368901","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total = 0\n    for k in range(1, n+1):\n        total = total * term(k)\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-16T20:44:50.368901","SynthesizedAfter":"\r\ndef product(n, term):\r\n    total = 1\r\n    for k in range(1, n+1):\r\n        total = term(k)*total\r\n    return total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast))), CPatch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, LeafConstNode(NameExpressionNode-total), 1), Selected(\\x => Match(x, StartsWithParent(Node(AssignmentStatementNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast)))))))","failed":null},{"ErrorFlag":1,"Id":0,"studentId":771,"date":"2016-02-16 21:03:13.327383","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-16T21:03:13.327383","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":771,"date":"2016-02-16 21:27:46.668946","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    _sum_ = 1\n    while x<=_sum_:\n        _sum_ *= term(x)\n        x +=  1 \n    return _sum_\n\n\n","after":null,"SubmissionTime":"2016-02-16T21:27:46.668946","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":771,"date":"2016-02-16 21:28:41.567439","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    _sum_ = 1\n    while x<=_sum_:\n        x, _sum_ = x + 1, _sum_ * term(x)\n        x +=  1 \n    return _sum_\n\n\n","after":null,"SubmissionTime":"2016-02-16T21:28:41.567439","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":771,"date":"2016-02-16 21:29:35.654246","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    _sum_ = 1\n    while x<=_sum_:\n        _sum_,x = _sum_ * term(x), x + 1\n    return _sum_\n\n\n","after":null,"SubmissionTime":"2016-02-16T21:29:35.654246","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":771,"date":"2016-02-16 21:32:23.415175","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x = 1\n    _sum_ = 1\n    while x<=n:\n        _sum_, = _sum_ * term(x)\n        x += 1\n    return _sum_\n\n\n","after":null,"SubmissionTime":"2016-02-16T21:32:23.415175","SynthesizedAfter":"\r\ndef product(n, term):\r\n    x = 1\r\n    _sum_ = 1\r\n    while x<=n:\r\n        _sum_ = _sum_*term(x)\r\n        x += 1\r\n    return _sum_","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-term)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":890,"date":"2016-02-16 21:36:11.798335","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=1\n    total = 0\n    while x < n:\n       total = x * increment(x)\n    return total\n\n    \n\n\n    \n\n","after":null,"SubmissionTime":"2016-02-16T21:36:11.798335","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":890,"date":"2016-02-16 21:38:05.548420","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    x=0\n    total = 1\n    while x < n:\n        x= increment(x)\n        total = x * total\n    return total\n\n    \n\n\n    \n\n","after":null,"SubmissionTime":"2016-02-16T21:38:05.54842","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":430,"date":"2016-02-16 21:57:34.284200","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n\n    return sum(product(n-1, term),term(n))\n\n","after":null,"SubmissionTime":"2016-02-16T21:57:34.2842","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":430,"date":"2016-02-16 22:04:55.999879","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    current, total = 1 , 0\n    while current <= n:\n        total += term(current)\n        current += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-16T22:04:55.999879","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":430,"date":"2016-02-16 22:08:46.589163","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    current, total = 1 , 0\n    while current <= n:\n        total *= term(current)\n        current += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-16T22:08:46.589163","SynthesizedAfter":"\r\ndef product(n, term):\r\n    current, total = 1, 1\r\n    while current<=n:\r\n        total *= term(current)\r\n        current += 1\r\n    return total","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, Patch(EditMap(\\node => Update(node, LeafConstNode(ConstantExpressionNode-1)), Selected(\\x => Match(x, StartsWithParent(Node(TupleExpressionNode-False, TChildren(LeafWildcard(\"ConstantExpressionNode\"), TChild(Target(LeafWildcard(\"ConstantExpressionNode\"))))))), InOrderSort(ast)))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":430,"date":"2016-02-16 22:09:10.517419","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    current, total = 1 , 0\n    while current <= n:\n        total += term(current)\n        current += 1\n    return total*term(current)\n\n\n","after":null,"SubmissionTime":"2016-02-16T22:09:10.517419","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":430,"date":"2016-02-16 22:09:42.125888","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    current, total = 1 , 0\n    while current <= n:\n        total += term(current)\n        current += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-16T22:09:42.125888","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":430,"date":"2016-02-16 22:10:04.961779","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    current, total = 1 , 0\n    while current <= n:\n        total += term(current)\n        current *= 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-16T22:10:04.961779","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":430,"date":"2016-02-16 22:11:00.439721","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    current, total = 1 , 0\n    while current <= n:\n        total += term(current)\n        current += 1\n    return total*term(current -1 )\n\n\n","after":null,"SubmissionTime":"2016-02-16T22:11:00.439721","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":430,"date":"2016-02-16 22:11:19.001406","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    current, total = 1 , 0\n    while current <= n:\n        total += term(current)\n        current += 1\n    return total*term(current -2 )\n\n\n","after":null,"SubmissionTime":"2016-02-16T22:11:19.001406","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":430,"date":"2016-02-16 22:11:26.320612","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    current, total = 1 , 0\n    while current <= n:\n        total += term(current)\n        current += 1\n    return total*term(current -3 )\n\n\n","after":null,"SubmissionTime":"2016-02-16T22:11:26.320612","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":430,"date":"2016-02-16 22:11:26.320612","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    current, total = 1 , 0\n    while current <= n:\n        total += term(current)\n        current += 1\n    return total*term(current -3 )\n\n\n","after":null,"SubmissionTime":"2016-02-16T22:11:26.320612","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":430,"date":"2016-02-16 22:11:52.247982","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    current, total = 1 , 0\n    while current <= n:\n        total += term(current)\n        current += 1\n    return total*term(current -n )\n\n\n","after":null,"SubmissionTime":"2016-02-16T22:11:52.247982","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":430,"date":"2016-02-16 22:12:23.964115","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    current, total = 1 , 0\n    while current <= n:\n        total += term(current)\n        current += 1\n    return total*term(current - (current -1 ) )\n\n\n","after":null,"SubmissionTime":"2016-02-16T22:12:23.964115","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":430,"date":"2016-02-16 22:12:36.944609","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    current, total = 1 , 0\n    while current <= n:\n        total += term(current)\n        current += 1\n    return total*term(current)\n\n\n","after":null,"SubmissionTime":"2016-02-16T22:12:36.944609","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":430,"date":"2016-02-16 22:15:04.955896","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    current, total = 1 , 0\n    while current <= n:\n        total += term(current)*term(current+1)\n        current += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-16T22:15:04.955896","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":430,"date":"2016-02-16 22:15:26.516569","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    current, total = 1 , 0\n    while current <= n:\n        total = term(current)*term(current+1)\n        current += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-16T22:15:26.516569","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":430,"date":"2016-02-16 22:15:46.590065","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    current, total = 1 , 0\n    while current <= n:\n        total = total*term(current+1)\n        current += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-16T22:15:46.590065","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":430,"date":"2016-02-16 22:15:46.590065","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    current, total = 1 , 0\n    while current <= n:\n        total = total*term(current+1)\n        current += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-16T22:15:46.590065","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":430,"date":"2016-02-16 22:16:02.495504","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    current, total = 1 , 1\n    while current <= n:\n        total = total*term(current+1)\n        current += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-16T22:16:02.495504","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":430,"date":"2016-02-16 22:16:38.609877","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    total, x = 1 , 1\n    while x <= n:\n        total = total*term(x+1)\n        x += 1\n    return total\n\n\n","after":null,"SubmissionTime":"2016-02-16T22:16:38.609877","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":110,"date":"2016-02-16 22:18:42.828154","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n\n","after":null,"SubmissionTime":"2016-02-16T22:18:42.828154","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":813,"date":"2016-02-16 22:24:36.204314","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    for i in range(n):\n        acc = acc*term(i+1)\n    return acc\n\n\n","after":null,"SubmissionTime":"2016-02-16T22:24:36.204314","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":273,"date":"2016-02-16 22:40:15.374896","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    if n == 1:\n        return term(n)\n    else:\n        return n * product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-16T22:40:15.374896","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if n==1:\r\n        return term(n)\r\n    else:\r\n        return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(CallExpressionNode, Children(LeafConstNode(NameExpressionNode-term), SingleChild(ConstNode(ArgNode, SingleChild(ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)))))), 0), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(ReturnStatementNode, TChild(Target(Node(BinaryExpressionNode-Multiply, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChildren(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\")))))), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":1069,"date":"2016-02-16 22:53:48.850561","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    amount = 1\n    k = 1\n    while k <= n:\n        amount = amount * term(k)\n        k = k + 1\n        return amount \n\n","after":null,"SubmissionTime":"2016-02-16T22:53:48.850561","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":75,"date":"2016-02-16 22:55:25.425704","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if(n == 1):\n    \treturn term(1)\n    return term(n) * product(n-1)\n\n","after":null,"SubmissionTime":"2016-02-16T22:55:25.425704","SynthesizedAfter":"\r\ndef product(n, term):\r\n    if (n==1):\r\n        return term(1)\r\n    return term(n)*product(n-1, term)","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Update(node, LeafConstNode(NameExpressionNode-product)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(Target(LeafWildcard(\"NameExpressionNode\")), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Insert(node, ConstNode(ArgNode, SingleChild(LeafConstNode(NameExpressionNode-term))), 2), Selected(\\x => Match(x, StartsWithParent(Node(BinaryExpressionNode-Multiply, TChildren(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\")))))), TChild(Target(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Node(ArgNode, TChild(Node(BinaryExpressionNode-Subtract, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(LeafWildcard(\"ConstantExpressionNode\"))))))))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":1043,"date":"2016-02-17 21:16:48.912434","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    product = 1\n    for i in range (1, n):\n        product *= term(i)\n    return product\n\n","after":null,"SubmissionTime":"2016-02-17T21:16:48.912434","SynthesizedAfter":"\r\ndef product(n, term):\r\n    product = 1\r\n    for i in range(1, n):\r\n        product *= term(i+1)\r\n    return product","IsFixed":true,"GeneratedFix":null,"UsedFix":"Apply(ast, CPatch(EditMap(\\node => Insert(node, ConstNode(BinaryExpressionNode-Add, Children(ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK), SingleChild(LeafConstNode(ConstantExpressionNode-1)))), 0), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))), Patch(EditMap(\\node => Delete(node, ReferenceNode(node, StartsWithParent(Node(ArgNode, TChild(Target(LeafWildcard(\"NameExpressionNode\"))))), Tutor.synthesis.MagicK)), Selected(\\x => Match(x, StartsWithParent(Node(CallExpressionNode, TChildren(LeafWildcard(\"NameExpressionNode\"), TChild(Target(Node(ArgNode, TChild(LeafWildcard(\"NameExpressionNode\"))))))))), InOrderSort(ast))))))","failed":null},{"ErrorFlag":0,"Id":0,"studentId":1043,"date":"2016-02-17 21:17:58.763375","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    product = 1\n    i = 0\n    while (i <= n):\n        product *= term(i)\n        i += 1\n    return product\n\n","after":null,"SubmissionTime":"2016-02-17T21:17:58.763375","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null},{"ErrorFlag":0,"Id":0,"studentId":721,"date":"2016-02-17 21:52:48.560696","diff":null,"before":"def product(n, term):\n    \"\"\"Return the product of the first n terms in a sequence.\n\n    n    -- a positive integer\n    term -- a function that takes one argument\n\n    >>> product(3, identity) # 1 * 2 * 3\n    6\n    >>> product(5, identity) # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)   # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)   # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    #i, total = 1, 1\n    #while i <= n:\n    #    total = total * term(i)\n    #    i += 1\n    #return total\n    #if n == 1:\n    #    return term(n)\n    #else: \n    #    return term(n)*product(n-1, term)\n\n","after":null,"SubmissionTime":"2016-02-17T21:52:48.560696","SynthesizedAfter":null,"IsFixed":false,"GeneratedFix":null,"UsedFix":null,"failed":null}]